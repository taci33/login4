using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace login4.Migrations
{
    /// <inheritdoc />
    public partial class CreateIdentitySchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AEAT_M303_Tipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M303_Tipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_M340",
                columns: table => new
                {
                    IDModelo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    TipoSoporte = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false, defaultValueSql: "('T')"),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Periodo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    RazonSocial = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    Contacto_Telefono = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    Contacto = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    NumeroPresentacion = table.Column<string>(type: "char(13)", unicode: false, fixedLength: true, maxLength: 13, nullable: false),
                    DeclaracionComplementaria = table.Column<bool>(type: "bit", nullable: false),
                    DeclaracionSustitutiva = table.Column<bool>(type: "bit", nullable: false),
                    NIdentificativoDeclaracionAnterior = table.Column<string>(type: "char(13)", unicode: false, fixedLength: true, maxLength: 13, nullable: true),
                    NRegistros = table.Column<int>(type: "int", nullable: true),
                    ImporteTotalBI = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTotalCuota = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTotalOperaciones = table.Column<decimal>(type: "money", nullable: true),
                    NIFRepresentanteLegal = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    Valida = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M340", x => x.IDModelo);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_M347",
                columns: table => new
                {
                    IDModelo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    TipoSoporte = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false, defaultValueSql: "('T')"),
                    Ejercicio = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: false),
                    RazonSocial = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    Contacto_Telefono = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    Contacto = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    NumeroPresentacion = table.Column<string>(type: "char(13)", unicode: false, fixedLength: true, maxLength: 13, nullable: false),
                    DeclaracionComplementaria = table.Column<bool>(type: "bit", nullable: false),
                    DeclaracionSustitutiva = table.Column<bool>(type: "bit", nullable: false),
                    NIdentificativoDeclaracionAnterior = table.Column<string>(type: "char(13)", unicode: false, fixedLength: true, maxLength: 13, nullable: true),
                    NumeroPersonasYEntidades = table.Column<int>(type: "int", nullable: true),
                    ImporteTotalAnualOperaciones = table.Column<decimal>(type: "money", nullable: true),
                    NumeroInmuebles = table.Column<int>(type: "int", nullable: true),
                    ImporteTotalArrendamiento = table.Column<decimal>(type: "money", nullable: true),
                    NIFRepresentanteLegal = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M347", x => x.IDModelo);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_M347_Detalle",
                columns: table => new
                {
                    IDDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ModeloID = table.Column<int>(type: "int", nullable: false),
                    NIFDeclarado = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    NIFRepresentanteLegal = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    RazonSocialOperador = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    TipoHoja = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    CodigoProvincia = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    CodigoPais = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    ClaveOperacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ImporteAnual = table.Column<decimal>(type: "money", nullable: true),
                    OperacionSeguro = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ArrendamientoLocalNegocio = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ImporteMetalico = table.Column<decimal>(type: "money", nullable: true),
                    ImporteAnualTransmisionesInmuebles = table.Column<decimal>(type: "money", nullable: true),
                    EjercicioImporteMetalico = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    ImporteTrimestre1 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestreTransmisionesInmuebles1 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestre2 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestreTransmisionesInmuebles2 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestre3 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestreTransmisionesInmuebles3 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestre4 = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTrimestreTransmisionesInmuebles4 = table.Column<decimal>(type: "money", nullable: true),
                    CodigoPaisNIFOperador = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    NIFOperadorComunitario = table.Column<string>(type: "char(15)", unicode: false, fixedLength: true, maxLength: 15, nullable: true),
                    OperacionesCriterioCaja = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    OPeracionInversionSujetoPasivo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    OperacionRegimenDepositoDistintoAduanero = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ImporteAnualOPeracionesCriterioCaja = table.Column<decimal>(type: "money", nullable: true),
                    SituacionInmueble = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ReferenciaCatastral = table.Column<string>(type: "char(25)", unicode: false, fixedLength: true, maxLength: 25, nullable: true),
                    DireccionInmueble_TipoVia = table.Column<string>(type: "char(5)", unicode: false, fixedLength: true, maxLength: 5, nullable: true),
                    DireccionInmueble_NombreVia = table.Column<string>(type: "char(50)", unicode: false, fixedLength: true, maxLength: 50, nullable: true),
                    DireccionInmueble_TipoNumeracion = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Numero = table.Column<string>(type: "char(5)", unicode: false, fixedLength: true, maxLength: 5, nullable: true),
                    DireccionInmueble_CalificadorNumero = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Bloque = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Portal = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Escalera = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Planta = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Puerta = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    DireccionInmueble_Complemento = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    DireccionInmueble_Localidad = table.Column<string>(type: "char(30)", unicode: false, fixedLength: true, maxLength: 30, nullable: true),
                    DireccionInmueble_Municipio = table.Column<string>(type: "char(30)", unicode: false, fixedLength: true, maxLength: 30, nullable: true),
                    DireccionInmueble_CodigoMunicipio = table.Column<string>(type: "char(5)", unicode: false, fixedLength: true, maxLength: 5, nullable: true),
                    DireccionInmueble_CodigoProvincia = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    DireccionInmueble_CodigoPostal = table.Column<string>(type: "char(5)", unicode: false, fixedLength: true, maxLength: 5, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M347_Detalle", x => x.IDDetalle);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_M349",
                columns: table => new
                {
                    IDModelo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    TipoSoporte = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false, defaultValueSql: "('T')"),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Periodo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    RazonSocial = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    Contacto_Telefono = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    Contacto = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    NumeroPresentacion = table.Column<string>(type: "char(13)", unicode: false, fixedLength: true, maxLength: 13, nullable: false),
                    DeclaracionComplementaria = table.Column<bool>(type: "bit", nullable: false),
                    DeclaracionSustitutiva = table.Column<bool>(type: "bit", nullable: false),
                    NIdentificativoDeclaracionAnterior = table.Column<string>(type: "char(13)", unicode: false, fixedLength: true, maxLength: 13, nullable: true),
                    NOperadoresIntracomunitarios = table.Column<int>(type: "int", nullable: true),
                    ImporteTotalOperaciones = table.Column<decimal>(type: "money", nullable: true),
                    NOperadoresIntracomunitariosRectificat = table.Column<int>(type: "int", nullable: true),
                    ImporteTotalOperacionesRectificat = table.Column<decimal>(type: "money", nullable: true),
                    IndicadorCambioPeriodicidad = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    NIFRepresentanteLegal = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    Valida = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M349", x => x.IDModelo);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_SII",
                columns: table => new
                {
                    IDPresentacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIFDeclarante = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    RazonSocial = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: false),
                    NIFRepresentanteLegal = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    ComunicacionTipo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    Ejercicio = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: false),
                    Periodo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    Autorizacion = table.Column<string>(type: "char(15)", unicode: false, fixedLength: true, maxLength: 15, nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    TipoLibro = table.Column<int>(type: "int", nullable: true),
                    EstadoEnvio = table.Column<short>(type: "smallint", nullable: true),
                    TimestampPresentacion = table.Column<byte[]>(type: "varbinary(8)", maxLength: 8, nullable: true),
                    CSV = table.Column<string>(type: "char(16)", unicode: false, fixedLength: true, maxLength: 16, nullable: true),
                    EditedCSVManual = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_SII", x => x.IDPresentacion);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_SII_Detalle",
                columns: table => new
                {
                    IDDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PresentacionID = table.Column<int>(type: "int", nullable: false),
                    FacturaNIFEmisor = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacturaNumero = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    FacturaNumeroFin = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    FacturaFecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    FacturaClaveTipo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    ContraparteRazonSocial = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    ContraparteNIF = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    ContraparteNIFRepresentante = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    ContrapartePais = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    ContraparteClaveIdentificacion = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    ContraparteIdentificacionPais = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacturasRectificadas = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FacturasSimplificadasSustituidas = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    BaseRectificada = table.Column<decimal>(type: "money", nullable: true),
                    CuotaRectificada = table.Column<decimal>(type: "money", nullable: true),
                    CuotaRecargoRectificada = table.Column<decimal>(type: "money", nullable: true),
                    FacturaRectificativaTipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FechaExpedicion = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    ImporteTotal = table.Column<decimal>(type: "money", nullable: true),
                    OperacionClaveTributaria = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    BaseImponibleACoste = table.Column<decimal>(type: "money", nullable: true),
                    OperacionDescripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    InmuebleSituacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    InmuebleReferenciaCatastral = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    FechaCobro = table.Column<DateTime>(type: "datetime", nullable: true),
                    ImporteCobrado = table.Column<decimal>(type: "money", nullable: true),
                    MedioCobro = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    CuentaBancariaCobro = table.Column<string>(type: "varchar(34)", unicode: false, maxLength: 34, nullable: true),
                    EstadoRegistro = table.Column<short>(type: "smallint", nullable: true),
                    CodigoErrorRegistro = table.Column<int>(type: "int", nullable: true),
                    DescripcionErrorRegistro = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CSV = table.Column<string>(type: "char(16)", unicode: false, fixedLength: true, maxLength: 16, nullable: true),
                    FE_ExentaCausa = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    FE_ExentaBaseImponible = table.Column<decimal>(type: "money", nullable: true),
                    FE_ImporteNoSujeta = table.Column<decimal>(type: "money", nullable: true),
                    FE_ImporteNoSujetaLocalizacion = table.Column<decimal>(type: "money", nullable: true),
                    FE_ImporteTransmisionesInmuebles = table.Column<decimal>(type: "money", nullable: true),
                    FE_FacturaEmitidaTerceros = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FE_FacturaVariosDestinatarios = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FE_BIminorporBonificaciones = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FR_FechaRegistroContable = table.Column<DateTime>(type: "datetime", nullable: true),
                    FR_CuotaDeducible = table.Column<decimal>(type: "money", nullable: true),
                    OI_TipoOI = table.Column<double>(type: "float", nullable: true),
                    OI_ClaveDeclarado = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    OI_CodigoEstadoMiembro = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    OI_PlazoOperacion = table.Column<int>(type: "int", nullable: true),
                    OI_DescripcionBienes = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    OI_DireccionOperadorIntracomunitario = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    OI_OtrasFacturas = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    BI_ProrrataAnualDefinitiva = table.Column<double>(type: "float", nullable: true),
                    BI_RegularizacionAnualDeduccion = table.Column<decimal>(type: "money", nullable: true),
                    BI_identificacionEntrega = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    BI_RegularizacionDeduccion = table.Column<decimal>(type: "money", nullable: true),
                    BI_FechaInicioUso = table.Column<DateTime>(type: "datetime", nullable: true),
                    BI_IdentificacionBien = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    FE_NoExentaTipoExencion = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    FacturaOrigenID = table.Column<int>(type: "int", nullable: true),
                    ContraparteEsNIF = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_SII_Detalle", x => x.IDDetalle);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_SII_Subdetalle",
                columns: table => new
                {
                    IDSubdetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DetalleID = table.Column<int>(type: "int", nullable: true),
                    FE_NoExentaBaseImponible = table.Column<decimal>(type: "money", nullable: true),
                    FE_NoExentaCuota = table.Column<decimal>(type: "money", nullable: true),
                    FE_NoExentaTipoRE = table.Column<double>(type: "float", nullable: true),
                    FE_NoExentaCuotaRE = table.Column<decimal>(type: "money", nullable: true),
                    FR_ISP_Tipo = table.Column<double>(type: "float", nullable: true),
                    FR_ISP_BI = table.Column<decimal>(type: "money", nullable: true),
                    FR_ISP_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    FR_ISP_TipoRE = table.Column<double>(type: "float", nullable: true),
                    FR_ISP_CuotaRE = table.Column<decimal>(type: "money", nullable: true),
                    FR_Tipo = table.Column<double>(type: "float", nullable: true),
                    FR_BI = table.Column<decimal>(type: "money", nullable: true),
                    FR_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    FR_TipoRE = table.Column<double>(type: "float", nullable: true),
                    FR_CuotaRE = table.Column<decimal>(type: "money", nullable: true),
                    FR_PercentCompensacionREAGYP = table.Column<double>(type: "float", nullable: true),
                    FR_CompensacionREAGYP = table.Column<decimal>(type: "money", nullable: true),
                    FE_NoExentaTipo = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_SII_Subdetalle", x => x.IDSubdetalle);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesCompra_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesCompra_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesCompraDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesCompraDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesCompraEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesCompraEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesVenta_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesVenta_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesVentaDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesVentaDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesVentaEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesVentaEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_Alquileres_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_Alquileres_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresPickingTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresPickingTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_Presupuestos_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false),
                    TarifaDiasSemanaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_Presupuestos_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_PresupuestosDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_PresupuestosDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_PresupuestosEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_PresupuestosEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Asientos",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asientos", x => x.Clave);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AtributosCampos",
                columns: table => new
                {
                    IDAtributoCampo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AtributosTallas", x => x.IDAtributoCampo);
                });

            migrationBuilder.CreateTable(
                name: "AtributosTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Hint = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AtributosTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "AutofacturasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AutofacturasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Auxiliar_01",
                columns: table => new
                {
                    IDAux = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Descripcion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Valor = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesBajaCausas",
                columns: table => new
                {
                    IDCausaBaja = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesBajaCausas", x => x.IDCausaBaja);
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesCategorias",
                columns: table => new
                {
                    IDCategoria = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    CuentaAmortizacion = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    CuentaDotacion = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    NDepreciaciones = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    LongitudPeriodo = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((12))"),
                    MetodoDepreciacionID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesCategorias", x => x.IDCategoria);
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesMetodos",
                columns: table => new
                {
                    IDMetodo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesMetodos", x => x.IDMetodo);
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesNaturalezas",
                columns: table => new
                {
                    IDNaturaleza = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesNaturalezas", x => x.IDNaturaleza);
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "BO",
                columns: table => new
                {
                    IDBO = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BOID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BO_nueva", x => x.IDBO)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_BO_BO_nueva",
                        column: x => x.BOID,
                        principalTable: "BO",
                        principalColumn: "IDBO");
                });

            migrationBuilder.CreateTable(
                name: "BO_Old",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    AP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nivel1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nivel2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nivel3 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Formato = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Codigo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Total = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BO_Old_Cuentas",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Cuenta = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    Signo = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BOA",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    AP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nivel1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nivel2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nivel3 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Formato = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Codigo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Total = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOA", x => x.Clave);
                });

            migrationBuilder.CreateTable(
                name: "BOA_Cuentas",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Cuenta = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    Signo = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOA_Cuentas", x => new { x.Clave, x.Cuenta });
                });

            migrationBuilder.CreateTable(
                name: "Calendarios",
                columns: table => new
                {
                    IDCalendario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Calendarios", x => x.IDCalendario);
                });

            migrationBuilder.CreateTable(
                name: "CarneConducirTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CarneConducirTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "CatalogosAtributos",
                columns: table => new
                {
                    IDCatalogoAtributo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Catalogos", x => x.IDCatalogoAtributo);
                });

            migrationBuilder.CreateTable(
                name: "CDBO_CantidadesPrecargaTarifas",
                columns: table => new
                {
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CDBO_PedidosPendientesImportar",
                columns: table => new
                {
                    IDPedido = table.Column<int>(type: "int", nullable: false),
                    Referencia = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MetodoPago = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Importe = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CDBO_ProductosX_Y_Fields",
                columns: table => new
                {
                    IDField = table.Column<int>(type: "int", nullable: false),
                    FieldName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Caption = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FieldType = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    ReadOnly = table.Column<bool>(type: "bit", nullable: false),
                    Currency = table.Column<bool>(type: "bit", nullable: false),
                    DisplayFormat = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CDBO_ProductosX_Y_Fields", x => x.IDField);
                });

            migrationBuilder.CreateTable(
                name: "CDBP_Processes",
                columns: table => new
                {
                    IDProcess = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: false, defaultValueSql: "('')", comment: "Formato: CDBP_DDDD, del 3000 en adelante reservados para el usuario"),
                    Caption = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Hint = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    IsPublic = table.Column<bool>(type: "bit", nullable: false, comment: "Indica si el proceso es visible para los usuarios del ERP"),
                    TipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))", comment: "1 > Proceso monolítico que se ejecuta en SIDBS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CDBP_Processes", x => x.IDProcess);
                });

            migrationBuilder.CreateTable(
                name: "CentrosTipos",
                columns: table => new
                {
                    IDCentroTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TablaLookup = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CampoLookup = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CampoResultado = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ConOperacion = table.Column<bool>(type: "bit", nullable: false),
                    ConCualificacion = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CentrosTipos", x => x.IDCentroTipo);
                });

            migrationBuilder.CreateTable(
                name: "Clientes_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clientes_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ClientesContactosTipos",
                columns: table => new
                {
                    IDContactoTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tipo = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesContactosTipos", x => x.IDContactoTipo);
                });

            migrationBuilder.CreateTable(
                name: "ClientesDepartamentos",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesDepartamentos", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "ClientesDirecciones_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesDirecciones_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "clientesRole",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_clientesRole", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ClientesTipoIdentificacion",
                columns: table => new
                {
                    IDTipoIdentificacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TipoIdentificacion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesTipoIdentificacion", x => x.IDTipoIdentificacion);
                });

            migrationBuilder.CreateTable(
                name: "ClientesTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Codigo = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "ClientesUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ComercialesTipos",
                columns: table => new
                {
                    IDComercialTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComercialesTipos", x => x.IDComercialTipo);
                });

            migrationBuilder.CreateTable(
                name: "Comisiones",
                columns: table => new
                {
                    IDComision = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ComisionFija = table.Column<decimal>(type: "money", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comisiones", x => x.IDComision);
                });

            migrationBuilder.CreateTable(
                name: "ComisionesOperaciones",
                columns: table => new
                {
                    IDOperacion = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComisionesOperaciones", x => x.IDOperacion);
                });

            migrationBuilder.CreateTable(
                name: "ConceptosContabilidad",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConceptosContabilidad", x => x.Clave);
                });

            migrationBuilder.CreateTable(
                name: "ConexionConta",
                columns: table => new
                {
                    Lugar_Conexion = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Cuenta_Recibo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Concepto_Recibo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Cuenta_Factura_1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Cuenta_Factura_2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Concepto_Factura = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ConfiguracionEmpresa",
                columns: table => new
                {
                    IDEmpresa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIF_CIF = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    Direccion = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    Telefono1 = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true),
                    Telefono2 = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true),
                    Fax = table.Column<string>(type: "varchar(12)", unicode: false, maxLength: 12, nullable: true),
                    LocalidadID = table.Column<int>(type: "int", nullable: false),
                    ProvinciaID = table.Column<int>(type: "int", nullable: false),
                    PaisID = table.Column<int>(type: "int", nullable: false),
                    CP = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PaginaWeb = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Registro = table.Column<string>(type: "varchar(256)", unicode: false, maxLength: 256, nullable: true),
                    Regimen_Especial = table.Column<bool>(type: "bit", nullable: false),
                    AliasReport = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Registro_Intracomunitario = table.Column<bool>(type: "bit", nullable: false),
                    IDGUID = table.Column<Guid>(type: "uniqueidentifier", nullable: true, defaultValueSql: "(newid())"),
                    CodigoCuentaCotizacion = table.Column<string>(type: "char(11)", unicode: false, fixedLength: true, maxLength: 11, nullable: true),
                    LaboratorioCodigo = table.Column<int>(type: "int", nullable: true),
                    NumeroEmpresa = table.Column<byte>(type: "tinyint", nullable: false),
                    RGPDText = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConfiguracionEmpresa", x => x.IDEmpresa);
                });

            migrationBuilder.CreateTable(
                name: "CRM_Acciones_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Acciones_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "CRM_AccionesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_AccionesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "CRM_AccionesIniciativas",
                columns: table => new
                {
                    IDIniciativa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Orden = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_AccionesIniciativas", x => x.IDIniciativa);
                });

            migrationBuilder.CreateTable(
                name: "CRM_AccionesMedios",
                columns: table => new
                {
                    IDMedio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_AccionesMedios", x => x.IDMedio);
                });

            migrationBuilder.CreateTable(
                name: "CRM_AccionesResultados",
                columns: table => new
                {
                    IDResultado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_AccionesResultado", x => x.IDResultado);
                });

            migrationBuilder.CreateTable(
                name: "CRM_AccionesTiposGenericos",
                columns: table => new
                {
                    IDTipoGenerico = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tipo = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    LabelColor = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Acciones_TiposGenerico", x => x.IDTipoGenerico);
                });

            migrationBuilder.CreateTable(
                name: "CRM_Campanyas_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Campanyas_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasEmisionesTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasEmisionesTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "CRM_Canjes",
                columns: table => new
                {
                    IDCanje = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    ValorFijo = table.Column<decimal>(type: "money", nullable: false),
                    TiempoCaducidad = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Canjes", x => x.IDCanje);
                });

            migrationBuilder.CreateTable(
                name: "CRM_DocumentosTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_DocumentosTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "CRM_OportunidadesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_OportunidadesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "CRM_OportunidadesPrioridades",
                columns: table => new
                {
                    IDPrioridad = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false),
                    ImageIndex = table.Column<int>(type: "int", nullable: false),
                    Orden = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_OportunidadesPrioridades", x => x.IDPrioridad);
                });

            migrationBuilder.CreateTable(
                name: "CRM_PuntosTabla",
                columns: table => new
                {
                    IDPuntosTabla = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    ValorFijo = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_PuntosTabla", x => x.IDPuntosTabla);
                });

            migrationBuilder.CreateTable(
                name: "CTA_AEAT_Territorios",
                columns: table => new
                {
                    IDTerritorio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    M303_PerCent = table.Column<decimal>(type: "money", nullable: false, defaultValueSql: "((100))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CTA_AEAT_Territorios", x => x.IDTerritorio);
                });

            migrationBuilder.CreateTable(
                name: "Departamentos",
                columns: table => new
                {
                    IDDepartamento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Departamentos", x => x.IDDepartamento);
                });

            migrationBuilder.CreateTable(
                name: "Descuentos",
                columns: table => new
                {
                    IDDescuento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Porcentaje = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Descuentos", x => x.IDDescuento);
                });

            migrationBuilder.CreateTable(
                name: "DevolucionesVenta_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DevolucionesVenta_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "DevolucionesVentaDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DevolucionesVentaDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "DevolucionesVentaEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DevolucionesVentaEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "DG_Direcciones",
                columns: table => new
                {
                    IDDGDireccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Direccion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LocalidadID = table.Column<int>(type: "int", nullable: false),
                    ProvinciaID = table.Column<int>(type: "int", nullable: true),
                    PaisID = table.Column<int>(type: "int", nullable: true),
                    CodigoPostal = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DG_Direcciones", x => x.IDDGDireccion);
                });

            migrationBuilder.CreateTable(
                name: "Diario_Aux",
                columns: table => new
                {
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: false),
                    Apunte = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    Cuenta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Concepto = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DH = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    Importe = table.Column<double>(type: "float", nullable: false),
                    Tipo_IVA = table.Column<double>(type: "float", nullable: true),
                    Incidencia = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Descuadre = table.Column<bool>(type: "bit", nullable: false),
                    Factura = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    FacturaID = table.Column<int>(type: "int", nullable: true),
                    RE = table.Column<decimal>(type: "money", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: true),
                    ImporteRE = table.Column<decimal>(type: "money", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Diario_Aux", x => new { x.EjercicioID, x.Asiento, x.Apunte });
                });

            migrationBuilder.CreateTable(
                name: "DiarioAUX",
                columns: table => new
                {
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: false),
                    Apunte = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    Anno = table.Column<int>(type: "int", nullable: true),
                    Cuenta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Concepto = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DH = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    Importe = table.Column<double>(type: "float", nullable: false),
                    Tipo_IVA = table.Column<double>(type: "float", nullable: true),
                    Incidencia = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Descuadre = table.Column<bool>(type: "bit", nullable: false),
                    Factura = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DocumentosAlmacenTipos",
                columns: table => new
                {
                    IDDocumentoAlmacenTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Update_PrecioCompra = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Update_Stock = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosAlmacenTipos", x => x.IDDocumentoAlmacenTipo);
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionDestinatarios",
                columns: table => new
                {
                    IDDocumentoGestionDestinatario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NombreEntidad = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    NombreEntidadSingular = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    TableName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionDestinatarios", x => x.IDDocumentoGestionDestinatario);
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionTipo1",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tipo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Abreviatura = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Ejercicios",
                columns: table => new
                {
                    idEjercicio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Anno = table.Column<int>(type: "int", nullable: false),
                    Cerrado = table.Column<bool>(type: "bit", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ejercicios", x => x.idEjercicio);
                });

            migrationBuilder.CreateTable(
                name: "EmpleadosContratosTipos",
                columns: table => new
                {
                    IDEmpleadoContratoTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpleadosContratosTipos", x => x.IDEmpleadoContratoTipo);
                });

            migrationBuilder.CreateTable(
                name: "EmpleadosDepartamentos",
                columns: table => new
                {
                    IDEmpleadoDepartamento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpleadosDepartamentos", x => x.IDEmpleadoDepartamento);
                });

            migrationBuilder.CreateTable(
                name: "EmpleadosEstadosCiviles",
                columns: table => new
                {
                    IDEmpleadoEstadoCivil = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpleadosEstadosCiviles", x => x.IDEmpleadoEstadoCivil);
                });

            migrationBuilder.CreateTable(
                name: "Entidades",
                columns: table => new
                {
                    Codigo = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Entidades", x => x.Codigo);
                });

            migrationBuilder.CreateTable(
                name: "EscalasMedidas",
                columns: table => new
                {
                    IDEscalaMedida = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LookupValue = table.Column<double>(type: "float", nullable: false),
                    LookupText = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EscalasMedidas", x => x.IDEscalaMedida);
                });

            migrationBuilder.CreateTable(
                name: "EXP_PaquetesFormatos",
                columns: table => new
                {
                    IDFormato = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    L = table.Column<double>(type: "float", nullable: false),
                    H = table.Column<double>(type: "float", nullable: false),
                    A = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EXP_PaquetesFormatos", x => x.IDFormato);
                });

            migrationBuilder.CreateTable(
                name: "Expediciones_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Expediciones_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ExpedicionesDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExpedicionesDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ExpedicionesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExpedicionesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Facturae",
                columns: table => new
                {
                    Email_Body = table.Column<string>(type: "varchar(6144)", unicode: false, maxLength: 6144, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "FacturasCompra_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasCompra_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "FacturasCompraDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasCompraDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "FacturasCompraEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasCompraEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "FacturasVenta_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasVenta_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "FacturasVentaDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasVentaDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "FacturasVentaDetalle_Entregas",
                columns: table => new
                {
                    IDEntrega = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    FechaEntrega = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasVentaDetalle_Entregas", x => x.IDEntrega);
                });

            migrationBuilder.CreateTable(
                name: "FacturasVentaEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasVentaEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "FasesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    Partes_AllowModify = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FasesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "FE_Formatos",
                columns: table => new
                {
                    IDFormato = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Version = table.Column<string>(type: "varchar(12)", unicode: false, maxLength: 12, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FE_Formatos", x => x.IDFormato);
                });

            migrationBuilder.CreateTable(
                name: "Fichajes_PartesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fichajes_PartesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Fichajes_Steeps",
                columns: table => new
                {
                    IDSteep = table.Column<int>(type: "int", nullable: false),
                    Prev_SteepID = table.Column<int>(type: "int", nullable: true),
                    Next_SteepID = table.Column<int>(type: "int", nullable: true),
                    TabIndex = table.Column<int>(type: "int", nullable: false),
                    Steep_Number = table.Column<int>(type: "int", nullable: false),
                    Image_Index_Idle = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((-1))"),
                    Image_Index_Ok = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((-1))"),
                    Image_Index_OnError = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((-1))"),
                    Help_Text_Idle = table.Column<string>(type: "text", nullable: true),
                    Help_Text_OnError = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fichajes_Steeps", x => x.IDSteep);
                    table.ForeignKey(
                        name: "FK_Fichajes_Steeps_Fichajes_Steeps",
                        column: x => x.Next_SteepID,
                        principalTable: "Fichajes_Steeps",
                        principalColumn: "IDSteep");
                });

            migrationBuilder.CreateTable(
                name: "FichajesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FichajesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "FichajesTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FichajesTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "FormasPago",
                columns: table => new
                {
                    IDFormaPago = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormasPago", x => x.IDFormaPago);
                });

            migrationBuilder.CreateTable(
                name: "FormulariosCategorias",
                columns: table => new
                {
                    IDCategoria = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CategoriaID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FormulariosCategorias", x => x.IDCategoria);
                    table.ForeignKey(
                        name: "FK_FormulariosCategorias_FormulariosCategorias",
                        column: x => x.CategoriaID,
                        principalTable: "FormulariosCategorias",
                        principalColumn: "IDCategoria");
                });

            migrationBuilder.CreateTable(
                name: "GD_Aplicaciones",
                columns: table => new
                {
                    IDAplicacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GD_Aplicaciones", x => x.IDAplicacion);
                });

            migrationBuilder.CreateTable(
                name: "GD_Tipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GD_Tipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "GeneralSetup",
                columns: table => new
                {
                    Variable = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    Valor = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Caption = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Hint = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GeneralSetup", x => new { x.Variable, x.Valor });
                });

            migrationBuilder.CreateTable(
                name: "GS_AccessLog",
                columns: table => new
                {
                    IDAccessLog = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AplicacionID = table.Column<int>(type: "int", nullable: false),
                    AppVersion = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    usr = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Success = table.Column<bool>(type: "bit", nullable: false),
                    IP_address = table.Column<string>(type: "varchar(48)", unicode: false, maxLength: 48, nullable: false),
                    host = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_AccessLog", x => x.IDAccessLog);
                });

            migrationBuilder.CreateTable(
                name: "GS_Consultas_InfoAdd",
                columns: table => new
                {
                    IDGS = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ConsultaID = table.Column<int>(type: "int", nullable: false),
                    Consulta = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    AtributoID = table.Column<int>(type: "int", nullable: false),
                    Atributo_Label = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_Consultas_InfoAdd", x => x.IDGS);
                });

            migrationBuilder.CreateTable(
                name: "GS_EditMasksTypes",
                columns: table => new
                {
                    IDEditMaskType = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_MaskTypes", x => x.IDEditMaskType);
                });

            migrationBuilder.CreateTable(
                name: "GS_InternalTypes",
                columns: table => new
                {
                    IDInternalType = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    SQL_Name = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Delphi_FieldClassName = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Length = table.Column<int>(type: "int", nullable: false),
                    VariableLength = table.Column<bool>(type: "bit", nullable: false),
                    AllowNulls = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_InternalTypes", x => x.IDInternalType);
                });

            migrationBuilder.CreateTable(
                name: "GS_UsrOperators",
                columns: table => new
                {
                    IDOperator = table.Column<int>(type: "int", nullable: false),
                    Operator = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_UsrOperators", x => x.IDOperator);
                });

            migrationBuilder.CreateTable(
                name: "InstalacionesTipos",
                columns: table => new
                {
                    IDTipoInstalacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InstalacionesTipos", x => x.IDTipoInstalacion);
                });

            migrationBuilder.CreateTable(
                name: "ISO_CalificacionesCompra",
                columns: table => new
                {
                    IDCalificacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_CalificacionesCompra", x => x.IDCalificacion);
                });

            migrationBuilder.CreateTable(
                name: "ISO_CriteriosSeleccion",
                columns: table => new
                {
                    IDCriterio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_CriteriosSeleccion", x => x.IDCriterio);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Frecuencias",
                columns: table => new
                {
                    IDFrecuencia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Frecuencias", x => x.IDFrecuencia);
                });

            migrationBuilder.CreateTable(
                name: "ISO_IncidenciasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_IncidenciasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "ISO_PlanesFormacion",
                columns: table => new
                {
                    IDPlanFormacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    Personal = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Impartido = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Duracion = table.Column<int>(type: "int", nullable: true),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    Eficaz = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_PlanesFormacion", x => x.IDPlanFormacion);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Preguntas",
                columns: table => new
                {
                    IDPregunta = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Texto = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Ponderacion = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Preguntas", x => x.IDPregunta);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Procesos",
                columns: table => new
                {
                    IDProceso = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Procesos", x => x.IDProceso);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Tendencias",
                columns: table => new
                {
                    IDTendencia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Tendencias", x => x.IDTendencia);
                });

            migrationBuilder.CreateTable(
                name: "ISO_TiposAcciones",
                columns: table => new
                {
                    IDTipoAccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_TiposAcciones", x => x.IDTipoAccion);
                });

            migrationBuilder.CreateTable(
                name: "ISO_TiposMantenimientos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_TiposMantenimientos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "ISO_TiposNormas",
                columns: table => new
                {
                    IDTipoNorma = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_TiposNormas", x => x.IDTipoNorma);
                });

            migrationBuilder.CreateTable(
                name: "ISO_TiposRegistros",
                columns: table => new
                {
                    IDTipoRegistro = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_TiposRegistros", x => x.IDTipoRegistro);
                });

            migrationBuilder.CreateTable(
                name: "ISO_TiposVencimientos",
                columns: table => new
                {
                    IDTipoVencimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_TiposVencimientos", x => x.IDTipoVencimiento);
                });

            migrationBuilder.CreateTable(
                name: "IVA_Libro_ClaveOperacion",
                columns: table => new
                {
                    IDClaveOperacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ClaveOperacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    ClaveVoluntaria = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IVA_Libro_ClaveOperacion", x => x.IDClaveOperacion);
                });

            migrationBuilder.CreateTable(
                name: "IVA_Libro_TipoClave",
                columns: table => new
                {
                    IDTipoClave = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TipoClave = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IVA_Libro_TipoClave", x => x.IDTipoClave);
                });

            migrationBuilder.CreateTable(
                name: "IvaClases",
                columns: table => new
                {
                    IDIvaClase = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IvaClases", x => x.IDIvaClase);
                });

            migrationBuilder.CreateTable(
                name: "IVAGrupos",
                columns: table => new
                {
                    IDIVAGrupo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Descripcion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Tipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    M347 = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    CtaIVA_Default = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    InversionSujetoPasivo = table.Column<bool>(type: "bit", nullable: false),
                    IVAClaveID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IVAGrupos", x => x.IDIVAGrupo);
                });

            migrationBuilder.CreateTable(
                name: "LAB_AnalisisTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<int>(type: "int", nullable: false),
                    Grupo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PuedeProducirIncumplimiento = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_AnalisisTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "LAB_Boletines_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_Boletines_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LAB_BoletinesDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_BoletinesDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LAB_BoletinesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_BoletinesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "LAB_Matrices",
                columns: table => new
                {
                    IDMatriz = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MatrizID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FamiliaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_Matrices", x => x.IDMatriz);
                    table.ForeignKey(
                        name: "FK_LAB_Matrices_LAB_Matrices",
                        column: x => x.MatrizID,
                        principalTable: "LAB_Matrices",
                        principalColumn: "IDMatriz");
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAs_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAs_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAsDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAsDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAsEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAsEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAsLecturasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAsLecturasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "LAB_Prioridades",
                columns: table => new
                {
                    IDPrioridad = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Orden = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_Prioridades", x => x.IDPrioridad);
                });

            migrationBuilder.CreateTable(
                name: "LAB_ProcedimientosEnsayo",
                columns: table => new
                {
                    IDProcedimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SINAC = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_ProcedimientosEnsayo", x => x.IDProcedimiento);
                });

            migrationBuilder.CreateTable(
                name: "LiquidacionesComercial_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LiquidacionesComercial_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LiquidacionesComercialDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LiquidacionesComercialDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LiquidacionesComercialEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LiquidacionesComercialEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Listados",
                columns: table => new
                {
                    idListado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Descripcion = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    Informe = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Disponible = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    DAA = table.Column<bool>(type: "bit", nullable: false),
                    TagCriteria = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    AEAT = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Log_Compuestos",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "LogDebug",
                columns: table => new
                {
                    idlog = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    texto = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    valor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Log", x => x.idlog);
                });

            migrationBuilder.CreateTable(
                name: "Lotes_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Lotes_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "LotesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LotesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "MaquinasConsumos",
                columns: table => new
                {
                    IDConsumo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    MaquinaID = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FechaConsumo = table.Column<DateTime>(type: "datetime", nullable: false),
                    TipoConsumo = table.Column<int>(type: "int", nullable: false),
                    NumeroLitros = table.Column<double>(type: "float", nullable: false),
                    NumeroKilometros = table.Column<double>(type: "float", nullable: true),
                    FacturaCompraID = table.Column<int>(type: "int", nullable: true),
                    FacturaCompraDetalleID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MaquinasConsumos", x => x.IDConsumo);
                });

            migrationBuilder.CreateTable(
                name: "MaquinasConsumosSaldos",
                columns: table => new
                {
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    NLitrosDeposito = table.Column<double>(type: "float", nullable: false),
                    NLitrosTotales = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MaquinasConsumosSaldos", x => x.Fecha);
                });

            migrationBuilder.CreateTable(
                name: "MaquinasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MaquinasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "MaquinasGrupos",
                columns: table => new
                {
                    IDGrupo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MaquinasGrupos", x => x.IDGrupo);
                });

            migrationBuilder.CreateTable(
                name: "Marcas",
                columns: table => new
                {
                    IDMarca = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Codigo = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    Imagen = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Marcas", x => x.IDMarca);
                });

            migrationBuilder.CreateTable(
                name: "MargenesClaves",
                columns: table => new
                {
                    IDMargenClave = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MargenesClaves", x => x.IDMargenClave);
                });

            migrationBuilder.CreateTable(
                name: "MargenesTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false, comment: "0: No se aplican Margenes; 1: Se aplica un margen sobre el P. de Compra; 2: se aplica un dto sobre el P. de Venta"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Aplica = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false, defaultValueSql: "('D')")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MargenesTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "Medidas",
                columns: table => new
                {
                    IDMedida = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    NDimCorte = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Medidas", x => x.IDMedida);
                });

            migrationBuilder.CreateTable(
                name: "MediosPago_CargoCuenta",
                columns: table => new
                {
                    IDCuentaCargo = table.Column<int>(type: "int", nullable: false, comment: "1 Sin Cuenta, 2 Cuenta Empresa, 3 Cuenta Destinatario"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MediosPago_CargoCuenta", x => x.IDCuentaCargo);
                });

            migrationBuilder.CreateTable(
                name: "Meses",
                columns: table => new
                {
                    IDMes = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Meses", x => x.IDMes);
                });

            migrationBuilder.CreateTable(
                name: "Modelos",
                columns: table => new
                {
                    IDModelo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Modelos", x => x.IDModelo);
                });

            migrationBuilder.CreateTable(
                name: "ModulosGestion",
                columns: table => new
                {
                    IDModuloGestion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    Activo = table.Column<bool>(type: "bit", nullable: false),
                    Precision = table.Column<int>(type: "int", nullable: true, comment: "N║ de decimales empleados en cada m¾dulo"),
                    ModuloGestionID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ModulosGestion", x => x.IDModuloGestion);
                    table.ForeignKey(
                        name: "FK_ModulosGestion_ModulosGestion",
                        column: x => x.ModuloGestionID,
                        principalTable: "ModulosGestion",
                        principalColumn: "IDModuloGestion");
                });

            migrationBuilder.CreateTable(
                name: "MovimientosAlmacenTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovimientosAlmacenTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "NIC_Diccionario",
                columns: table => new
                {
                    IDNIC_Diccionario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Cuenta_Origen = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    Desc_Origen = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Cuenta_Destino = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    Desc_Destino = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NIC_Diccionario", x => x.IDNIC_Diccionario);
                });

            migrationBuilder.CreateTable(
                name: "NIC_PGC_CuentasListados",
                columns: table => new
                {
                    Cuenta = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Nivel = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "OPEs_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OPEs_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "OPEsDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OPEsDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "OPEsEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OPEsEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacionEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    Partes_AllowModify = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacionOrigenes",
                columns: table => new
                {
                    IDOrigen = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenFabricacionOrigen", x => x.IDOrigen);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacionPrioridades",
                columns: table => new
                {
                    IDPrioridad = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Orden = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesPrioridades", x => x.IDPrioridad);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacionTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesSeriadasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    Partes_AllowModify = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesSeriadasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Paises",
                columns: table => new
                {
                    IDPais = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "nvarchar(45)", maxLength: 45, nullable: false),
                    UE = table.Column<bool>(type: "bit", nullable: false),
                    ExentoIVA = table.Column<bool>(type: "bit", nullable: false),
                    ISO_3161_1_Num_3 = table.Column<int>(type: "int", nullable: false),
                    ISO_3161_1_Alfa_3 = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: false),
                    ISO_3161_1_Alfa_2 = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    PrefijoTel = table.Column<string>(type: "varchar(12)", unicode: false, maxLength: 12, nullable: true),
                    NombrePostal = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: false),
                    Activo = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Paises", x => x.IDPais);
                });

            migrationBuilder.CreateTable(
                name: "Partes_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Partes_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PedidosCompra_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosCompra_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PedidosCompraDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosCompraDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PedidosCompraEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosCompraEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "PedidosVenta_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVenta_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PedidosVentaDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVentaDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PedidosVentaEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    StockPendienteServir_EnFicha = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVentaEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "PeriodosTipos",
                columns: table => new
                {
                    IDPeriodoTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tipo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Division = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PeriodosTipos", x => x.IDPeriodoTipo);
                });

            migrationBuilder.CreateTable(
                name: "PGC",
                columns: table => new
                {
                    Cuenta = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Nivel = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PGC", x => x.Cuenta);
                });

            migrationBuilder.CreateTable(
                name: "Pgcnorma",
                columns: table => new
                {
                    NATURALEZA = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    CODBAL = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    DESCRIP = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CTA = table.Column<string>(type: "nvarchar(11)", maxLength: 11, nullable: true),
                    TIPO = table.Column<short>(type: "smallint", nullable: true),
                    BITMAP = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    DOBLE = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    FORMULA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    NIVEL = table.Column<short>(type: "smallint", nullable: true),
                    DESGLOSE = table.Column<short>(type: "smallint", nullable: true),
                    ACPA = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    NUMERO = table.Column<string>(type: "nvarchar(6)", maxLength: 6, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PortesTipos",
                columns: table => new
                {
                    IDPortesTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortesTipos", x => x.IDPortesTipo);
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosCompra_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosCompra_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosCompraDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosCompraDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosCompraEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosCompraEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVenta_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVenta_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVentaEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVentaEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "ProductosBase_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosBase_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ProductosCompuestosPlantillas",
                columns: table => new
                {
                    IDProductoCompuestoPlantilla = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    GeneraCompuestoEstadoID = table.Column<byte>(type: "tinyint", nullable: false, comment: "Especifica si Genera Compuesto y en qué procesos (0 = No genera compuesto, 1 = Genera Compuesto siempre, 2 = Genera Compuesto en Alta manual de productos)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosCompuestosPlantillas", x => x.IDProductoCompuestoPlantilla);
                });

            migrationBuilder.CreateTable(
                name: "ProductosEspeciales",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosEspeciales", x => x.ProductoID);
                });

            migrationBuilder.CreateTable(
                name: "ProductosEstado",
                columns: table => new
                {
                    IDProductoEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosEstado", x => x.IDProductoEstado);
                });

            migrationBuilder.CreateTable(
                name: "ProductosFotosLog",
                columns: table => new
                {
                    IDLog = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Operacion = table.Column<int>(type: "int", nullable: false),
                    Procesado = table.Column<bool>(type: "bit", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosFotosLog", x => x.IDLog);
                });

            migrationBuilder.CreateTable(
                name: "ProductosProveedores",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    CantidadDesde = table.Column<double>(type: "float", nullable: false),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PlazosEntrega = table.Column<int>(type: "int", nullable: true),
                    PrecioTarifa = table.Column<double>(type: "float", nullable: false),
                    PrecioUltimaCompra = table.Column<double>(type: "float", nullable: false),
                    Tarifa = table.Column<bool>(type: "bit", nullable: false),
                    FUltimaCompra = table.Column<DateTime>(type: "datetime", nullable: true),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    CantidadUltimaCompra = table.Column<double>(type: "float", nullable: false),
                    DescuentoTarifa = table.Column<decimal>(type: "money", nullable: false),
                    PrecioSinDtoTarifa = table.Column<double>(type: "float", nullable: false),
                    FTarifa = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Fecha de última actualización del PrecioTarifa"),
                    EmpleadoIDTarifa = table.Column<int>(type: "int", nullable: true, comment: "Empleado que ha informado el precio de la Tarifa")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosProveedores", x => new { x.ProductoID, x.PersonaID, x.CantidadDesde });
                });

            migrationBuilder.CreateTable(
                name: "Proveedores_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proveedores_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresGrupos",
                columns: table => new
                {
                    IDGrupo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresGrupos", x => x.IDGrupo);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresMarcas",
                columns: table => new
                {
                    MarcaID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresTarifasProducto",
                columns: table => new
                {
                    PTP_id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PTP_refPO = table.Column<int>(type: "int", nullable: false),
                    PTP_refPR = table.Column<int>(type: "int", nullable: false),
                    PTP_PrecioCompra = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresTarifasProducto", x => x.PTP_id);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresTipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "ProyectosEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProyectosEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Prueba",
                columns: table => new
                {
                    IDPruba = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TiempoDT = table.Column<DateTime>(type: "datetime", nullable: true),
                    TiempoF = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PyG",
                columns: table => new
                {
                    IDPyG = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PyGID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PyG_IDPyG", x => x.IDPyG)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_PyG_PyG",
                        column: x => x.PyGID,
                        principalTable: "PyG",
                        principalColumn: "IDPyG");
                });

            migrationBuilder.CreateTable(
                name: "PyGA",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Codigo = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    Formato = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Nombre = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Total = table.Column<double>(type: "float", nullable: true),
                    Total_A = table.Column<double>(type: "float", nullable: true),
                    Orden = table.Column<int>(type: "int", nullable: true),
                    Equivale = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PyGA", x => x.Clave);
                });

            migrationBuilder.CreateTable(
                name: "PyGA_Cuentas",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Cuenta = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    Signo = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PyGA_Cuentas", x => new { x.Clave, x.Cuenta });
                });

            migrationBuilder.CreateTable(
                name: "Rappels",
                columns: table => new
                {
                    IDRappel = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Facturacion = table.Column<decimal>(type: "money", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: true),
                    MesesDto = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rappels", x => x.IDRappel);
                });

            migrationBuilder.CreateTable(
                name: "Rep_HorasExtras",
                columns: table => new
                {
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    OF_AsuntosPropios = table.Column<int>(type: "int", nullable: false),
                    OF_Vacaciones = table.Column<int>(type: "int", nullable: false),
                    OF_BajasLaborales = table.Column<int>(type: "int", nullable: false),
                    OF_Bajas = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ReportsConstructor",
                columns: table => new
                {
                    IDReportConstructor = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    constructor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportsConstructor", x => x.IDReportConstructor);
                });

            migrationBuilder.CreateTable(
                name: "ReportsFamilias",
                columns: table => new
                {
                    IDReportFamilia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportFamiliaID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportsFamilias", x => x.IDReportFamilia);
                });

            migrationBuilder.CreateTable(
                name: "ReportsTipos",
                columns: table => new
                {
                    IDReportTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportsTipos", x => x.IDReportTipo);
                });

            migrationBuilder.CreateTable(
                name: "ReservasStock",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DGOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReservasStock", x => x.IDCabecera);
                });

            migrationBuilder.CreateTable(
                name: "Resultados",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false),
                    objectid = table.Column<int>(type: "int", nullable: true),
                    property = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: false),
                    value = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    uvalue = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    lvalue = table.Column<byte[]>(type: "image", nullable: true),
                    version = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RP_ReportsCliente",
                columns: table => new
                {
                    IDReportPersona = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ReportID = table.Column<int>(type: "int", nullable: false),
                    NCopias = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RP_ReportsCliente", x => x.IDReportPersona);
                });

            migrationBuilder.CreateTable(
                name: "RP_ReportsDefault",
                columns: table => new
                {
                    ReportID = table.Column<int>(type: "int", nullable: false),
                    NCopias = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RP_ReportsDG",
                columns: table => new
                {
                    IDReportDG = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ReportID = table.Column<int>(type: "int", nullable: false),
                    NCopias = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RP_ReportsDG", x => x.IDReportDG);
                });

            migrationBuilder.CreateTable(
                name: "RP_ReportsProveedor",
                columns: table => new
                {
                    IDReportPersona = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ReportID = table.Column<int>(type: "int", nullable: false),
                    NCopias = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RP_ReportsProveedor", x => x.IDReportPersona);
                });

            migrationBuilder.CreateTable(
                name: "RRHH_PrimasLiquidacionEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RRHH_LiquidacionesPrimasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "RRHH_SetupCategorias",
                columns: table => new
                {
                    IDCategoria = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Caption = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RRHH_SetupCategorias", x => x.IDCategoria);
                });

            migrationBuilder.CreateTable(
                name: "RutasProduccion",
                columns: table => new
                {
                    IDRuta = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    TotalPrecioCoste = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoPreparacion = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoUnitario = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RutasProduccion", x => x.IDRuta);
                });

            migrationBuilder.CreateTable(
                name: "SCTAB",
                columns: table => new
                {
                    COD = table.Column<string>(type: "nvarchar(12)", maxLength: 12, nullable: true),
                    CODBANCO = table.Column<string>(type: "nvarchar(4)", maxLength: 4, nullable: true),
                    CODOFICINA = table.Column<string>(type: "nvarchar(4)", maxLength: 4, nullable: true),
                    CODCUENTA = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    CODDC = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    NORD = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    CPORD = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: true),
                    PZORD = table.Column<string>(type: "nvarchar(31)", maxLength: 31, nullable: true),
                    NIFORD = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Series",
                columns: table => new
                {
                    IDSerie = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Abono = table.Column<bool>(type: "bit", nullable: false, comment: "vale 1 si la serie es de abono"),
                    Autofactura = table.Column<bool>(type: "bit", nullable: false),
                    ISP = table.Column<bool>(type: "bit", nullable: false),
                    SII_FE_OperacionDescripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SII_FR_OperacionDescripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Series", x => x.IDSerie);
                });

            migrationBuilder.CreateTable(
                name: "SRV_Contratos_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_Contratos_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "SRV_ContratosDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("SRV_PK_ContratosDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "SRV_ContratosEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_ContratosEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "SRV_PresupuestosVenta_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_PresupuestosVenta_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "SRV_PresupuestosVentaDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("SRV_PK_PresupuestosVentaDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "SRV_PresupuestosVentaEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_PresupuestosVentaEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Subcta",
                columns: table => new
                {
                    COD = table.Column<string>(type: "nvarchar(12)", maxLength: 12, nullable: true),
                    TITULO = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    NIF = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: true),
                    DOMICILIO = table.Column<string>(type: "nvarchar(35)", maxLength: 35, nullable: true),
                    POBLACION = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    PROVINCIA = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CODPOSTAL = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: true),
                    SUMADB = table.Column<double>(type: "float", nullable: true),
                    SUMAHB = table.Column<double>(type: "float", nullable: true),
                    ACUDB = table.Column<double>(type: "float", nullable: true),
                    ACUHB = table.Column<double>(type: "float", nullable: true),
                    TPC = table.Column<double>(type: "float", nullable: true),
                    TIPOIVA = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    RECEQUIV = table.Column<double>(type: "float", nullable: true),
                    SUBEQUIV = table.Column<string>(type: "nvarchar(12)", maxLength: 12, nullable: true),
                    SDB01 = table.Column<double>(type: "float", nullable: true),
                    SHB01 = table.Column<double>(type: "float", nullable: true),
                    SDB02 = table.Column<double>(type: "float", nullable: true),
                    SHB02 = table.Column<double>(type: "float", nullable: true),
                    SDB03 = table.Column<double>(type: "float", nullable: true),
                    SHB03 = table.Column<double>(type: "float", nullable: true),
                    SDB04 = table.Column<double>(type: "float", nullable: true),
                    SHB04 = table.Column<double>(type: "float", nullable: true),
                    SDB05 = table.Column<double>(type: "float", nullable: true),
                    SHB05 = table.Column<double>(type: "float", nullable: true),
                    SDB06 = table.Column<double>(type: "float", nullable: true),
                    SHB06 = table.Column<double>(type: "float", nullable: true),
                    SDB07 = table.Column<double>(type: "float", nullable: true),
                    SHB07 = table.Column<double>(type: "float", nullable: true),
                    SDB08 = table.Column<double>(type: "float", nullable: true),
                    SHB08 = table.Column<double>(type: "float", nullable: true),
                    SDB09 = table.Column<double>(type: "float", nullable: true),
                    SHB09 = table.Column<double>(type: "float", nullable: true),
                    SDB10 = table.Column<double>(type: "float", nullable: true),
                    SHB10 = table.Column<double>(type: "float", nullable: true),
                    SDB11 = table.Column<double>(type: "float", nullable: true),
                    SHB11 = table.Column<double>(type: "float", nullable: true),
                    SDB12 = table.Column<double>(type: "float", nullable: true),
                    SHB12 = table.Column<double>(type: "float", nullable: true),
                    NDB = table.Column<double>(type: "float", nullable: true),
                    NHB = table.Column<double>(type: "float", nullable: true),
                    NDB01 = table.Column<double>(type: "float", nullable: true),
                    NHB01 = table.Column<double>(type: "float", nullable: true),
                    NDB02 = table.Column<double>(type: "float", nullable: true),
                    NHB02 = table.Column<double>(type: "float", nullable: true),
                    NDB03 = table.Column<double>(type: "float", nullable: true),
                    NHB03 = table.Column<double>(type: "float", nullable: true),
                    NDB04 = table.Column<double>(type: "float", nullable: true),
                    NHB04 = table.Column<double>(type: "float", nullable: true),
                    NDB05 = table.Column<double>(type: "float", nullable: true),
                    NHB05 = table.Column<double>(type: "float", nullable: true),
                    NDB06 = table.Column<double>(type: "float", nullable: true),
                    NHB06 = table.Column<double>(type: "float", nullable: true),
                    NDB07 = table.Column<double>(type: "float", nullable: true),
                    NHB07 = table.Column<double>(type: "float", nullable: true),
                    NDB08 = table.Column<double>(type: "float", nullable: true),
                    NHB08 = table.Column<double>(type: "float", nullable: true),
                    NDB09 = table.Column<double>(type: "float", nullable: true),
                    NHB09 = table.Column<double>(type: "float", nullable: true),
                    NDB10 = table.Column<double>(type: "float", nullable: true),
                    NHB10 = table.Column<double>(type: "float", nullable: true),
                    NDB11 = table.Column<double>(type: "float", nullable: true),
                    NHB11 = table.Column<double>(type: "float", nullable: true),
                    NDB12 = table.Column<double>(type: "float", nullable: true),
                    NHB12 = table.Column<double>(type: "float", nullable: true),
                    DIVISA = table.Column<bool>(type: "bit", nullable: false),
                    CODDIVISA = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: true),
                    SDBME = table.Column<double>(type: "float", nullable: true),
                    SHBME = table.Column<double>(type: "float", nullable: true),
                    DOCUMENTO = table.Column<bool>(type: "bit", nullable: false),
                    AJUSTAME = table.Column<bool>(type: "bit", nullable: false),
                    SUMADBEU = table.Column<double>(type: "float", nullable: true),
                    SUMAHBEU = table.Column<double>(type: "float", nullable: true),
                    SDB01EU = table.Column<double>(type: "float", nullable: true),
                    SHB01EU = table.Column<double>(type: "float", nullable: true),
                    SDB02EU = table.Column<double>(type: "float", nullable: true),
                    SHB02EU = table.Column<double>(type: "float", nullable: true),
                    SDB03EU = table.Column<double>(type: "float", nullable: true),
                    SHB03EU = table.Column<double>(type: "float", nullable: true),
                    SDB04EU = table.Column<double>(type: "float", nullable: true),
                    SHB04EU = table.Column<double>(type: "float", nullable: true),
                    SDB05EU = table.Column<double>(type: "float", nullable: true),
                    SHB05EU = table.Column<double>(type: "float", nullable: true),
                    SDB06EU = table.Column<double>(type: "float", nullable: true),
                    SHB06EU = table.Column<double>(type: "float", nullable: true),
                    SDB07EU = table.Column<double>(type: "float", nullable: true),
                    SHB07EU = table.Column<double>(type: "float", nullable: true),
                    SDB08EU = table.Column<double>(type: "float", nullable: true),
                    SHB08EU = table.Column<double>(type: "float", nullable: true),
                    SDB09EU = table.Column<double>(type: "float", nullable: true),
                    SHB09EU = table.Column<double>(type: "float", nullable: true),
                    SDB10EU = table.Column<double>(type: "float", nullable: true),
                    SHB10EU = table.Column<double>(type: "float", nullable: true),
                    SDB11EU = table.Column<double>(type: "float", nullable: true),
                    SHB11EU = table.Column<double>(type: "float", nullable: true),
                    SDB12EU = table.Column<double>(type: "float", nullable: true),
                    SHB12EU = table.Column<double>(type: "float", nullable: true),
                    NDBEU = table.Column<double>(type: "float", nullable: true),
                    NHBEU = table.Column<double>(type: "float", nullable: true),
                    NDB01EU = table.Column<double>(type: "float", nullable: true),
                    NHB01EU = table.Column<double>(type: "float", nullable: true),
                    NDB02EU = table.Column<double>(type: "float", nullable: true),
                    NHB02EU = table.Column<double>(type: "float", nullable: true),
                    NDB03EU = table.Column<double>(type: "float", nullable: true),
                    NHB03EU = table.Column<double>(type: "float", nullable: true),
                    NDB04EU = table.Column<double>(type: "float", nullable: true),
                    NHB04EU = table.Column<double>(type: "float", nullable: true),
                    NDB05EU = table.Column<double>(type: "float", nullable: true),
                    NHB05EU = table.Column<double>(type: "float", nullable: true),
                    NDB06EU = table.Column<double>(type: "float", nullable: true),
                    NHB06EU = table.Column<double>(type: "float", nullable: true),
                    NDB07EU = table.Column<double>(type: "float", nullable: true),
                    NHB07EU = table.Column<double>(type: "float", nullable: true),
                    NDB08EU = table.Column<double>(type: "float", nullable: true),
                    NHB08EU = table.Column<double>(type: "float", nullable: true),
                    NDB09EU = table.Column<double>(type: "float", nullable: true),
                    NHB09EU = table.Column<double>(type: "float", nullable: true),
                    NDB10EU = table.Column<double>(type: "float", nullable: true),
                    NHB10EU = table.Column<double>(type: "float", nullable: true),
                    NDB11EU = table.Column<double>(type: "float", nullable: true),
                    NHB11EU = table.Column<double>(type: "float", nullable: true),
                    NDB12EU = table.Column<double>(type: "float", nullable: true),
                    NHB12EU = table.Column<double>(type: "float", nullable: true),
                    TELEF01 = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: true),
                    FAX01 = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: true),
                    EMAIL = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TITULOL = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "sync_Operations",
                columns: table => new
                {
                    IDOperation = table.Column<int>(type: "int", nullable: false),
                    SynchronizedVisibility = table.Column<bool>(type: "bit", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_Operations", x => new { x.IDOperation, x.SynchronizedVisibility });
                });

            migrationBuilder.CreateTable(
                name: "sync_Tipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Enabled = table.Column<bool>(type: "bit", nullable: false),
                    sync_Code = table.Column<string>(type: "varchar(6)", unicode: false, maxLength: 6, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_Tipos", x => x.IDTipo);
                });

            migrationBuilder.CreateTable(
                name: "Tarifas",
                columns: table => new
                {
                    IDTarifa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    General = table.Column<bool>(type: "bit", nullable: false, comment: "Determina si la Tarifa se aplica a aquellos clientes que no tienen Tarifa especifica"),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tarifas", x => x.IDTarifa);
                });

            migrationBuilder.CreateTable(
                name: "TarifasTipo",
                columns: table => new
                {
                    IDTarifaTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TarifasTipo", x => x.IDTarifaTipo);
                });

            migrationBuilder.CreateTable(
                name: "Temporadas",
                columns: table => new
                {
                    IDTemporada = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Estado = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Temporadas", x => x.IDTemporada);
                });

            migrationBuilder.CreateTable(
                name: "TesoreriaApunteTipo",
                columns: table => new
                {
                    IDTipoApunte = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tipo = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    TableNameRelated = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    TableNameRelated_Destinatario = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TesoreriaApunteTipo", x => x.IDTipoApunte);
                });

            migrationBuilder.CreateTable(
                name: "TipoFacturacion",
                columns: table => new
                {
                    IDTipoFacturacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TipoFacturacion", x => x.IDTipoFacturacion);
                });

            migrationBuilder.CreateTable(
                name: "TiposDireccion",
                columns: table => new
                {
                    IDTipoDireccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Externa = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TiposDireccion", x => x.IDTipoDireccion);
                });

            migrationBuilder.CreateTable(
                name: "TiposLinea",
                columns: table => new
                {
                    IDTipoLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TipoEdicion = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    IsGroupHeader = table.Column<bool>(type: "bit", nullable: false),
                    CreateNewTranslateDocument = table.Column<bool>(type: "bit", nullable: false),
                    AplicateDtoCabecera = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    LineaCabecera = table.Column<bool>(type: "bit", nullable: false),
                    SetEstadoCabecera = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Cantidad_def = table.Column<double>(type: "float", nullable: false),
                    LineaCompuesto = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(CONVERT([bit],(0),0))", comment: "GroupHeader+GestionProdYPrec"),
                    AllowInLineEdit = table.Column<bool>(type: "bit", nullable: false),
                    LineaCompuestoCoste = table.Column<bool>(type: "bit", nullable: false),
                    IsGroupHeaderYDetalle = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TiposLinea", x => x.IDTipoLinea);
                });

            migrationBuilder.CreateTable(
                name: "TiposPortes",
                columns: table => new
                {
                    IDTipoPorte = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AtributoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PorteDebido = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TiposPortes", x => x.IDTipoPorte);
                });

            migrationBuilder.CreateTable(
                name: "TPVCabeceraTicket",
                columns: table => new
                {
                    IDTPVCabeceraTicket = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Texto = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TPVDescuentos",
                columns: table => new
                {
                    IDTPVDescuento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVDescuentos", x => x.IDTPVDescuento);
                });

            migrationBuilder.CreateTable(
                name: "TPVFormasPago",
                columns: table => new
                {
                    IDTPVFormaPago = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CuentaContableTickets = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IDTPVFormaPago", x => x.IDTPVFormaPago);
                });

            migrationBuilder.CreateTable(
                name: "TPVimg",
                columns: table => new
                {
                    idimg = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    imagen = table.Column<byte[]>(type: "image", nullable: true),
                    txt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVimg", x => x.idimg);
                });

            migrationBuilder.CreateTable(
                name: "TPVMensajesVisor",
                columns: table => new
                {
                    IDMensaje = table.Column<int>(type: "int", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: false),
                    Texto = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Activo = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVMensajesVisor", x => new { x.IDMensaje, x.NumLinea });
                });

            migrationBuilder.CreateTable(
                name: "TPVPieTicket",
                columns: table => new
                {
                    IDNotaTicket = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Texto = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVPieTicket", x => x.IDNotaTicket);
                });

            migrationBuilder.CreateTable(
                name: "TPVPromociones",
                columns: table => new
                {
                    IDTPVPromocion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Puntos = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Dinero = table.Column<decimal>(type: "money", nullable: false),
                    Promocion = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVPromociones", x => x.IDTPVPromocion);
                });

            migrationBuilder.CreateTable(
                name: "TPVTickets_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVTickets_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "TPVTicketsDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVTicketsDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "TPVTicketsEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVTicketsEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "Transactions",
                columns: table => new
                {
                    IDTransaction = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TransactionValue = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Transactions", x => x.IDTransaction);
                });

            migrationBuilder.CreateTable(
                name: "TSK_TareasClases",
                columns: table => new
                {
                    IDTareaClase = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_TareasClases", x => x.IDTareaClase);
                });

            migrationBuilder.CreateTable(
                name: "TSK_TareasEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ImageIndex = table.Column<int>(type: "int", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_TareasEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "TSK_TareasMantenimientoTipos",
                columns: table => new
                {
                    IDTareaMantenimientoTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_TareasMantenimientoTipos", x => x.IDTareaMantenimientoTipo);
                });

            migrationBuilder.CreateTable(
                name: "TSK_TareasOrigenes",
                columns: table => new
                {
                    IDTareaOrigen = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_TareasOrigenes", x => x.IDTareaOrigen);
                });

            migrationBuilder.CreateTable(
                name: "TSK_TareasPrioridades",
                columns: table => new
                {
                    IDPrioridad = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false),
                    ImageIndex = table.Column<int>(type: "int", nullable: false),
                    Orden = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_TareasPrioridades", x => x.IDPrioridad);
                });

            migrationBuilder.CreateTable(
                name: "Turnos",
                columns: table => new
                {
                    IDTurno = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    HoraInicio = table.Column<double>(type: "float", nullable: false),
                    HoraFin = table.Column<double>(type: "float", nullable: false),
                    HoraInicio2 = table.Column<double>(type: "float", nullable: false),
                    HoraFin2 = table.Column<double>(type: "float", nullable: false),
                    TotalHoras = table.Column<double>(type: "float", nullable: true, computedColumnSql: "([HoraFin] - [HoraInicio] + [HoraFin2] - [HoraInicio2])", stored: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Especial = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Turnos", x => x.IDTurno);
                });

            migrationBuilder.CreateTable(
                name: "Vales_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vales_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ValesDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValesDetalle_CDBO", x => x.IDCDBO);
                });

            migrationBuilder.CreateTable(
                name: "ValesEstados",
                columns: table => new
                {
                    IDEstado = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    FontColor = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Traspaso = table.Column<bool>(type: "bit", nullable: false),
                    CantidadPendiente = table.Column<bool>(type: "bit", nullable: false),
                    AllowModify = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValesEstados", x => x.IDEstado);
                });

            migrationBuilder.CreateTable(
                name: "ValesOrigenes",
                columns: table => new
                {
                    IDOrigen = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValesOrigenes", x => x.IDOrigen);
                });

            migrationBuilder.CreateTable(
                name: "ValoresLotes",
                columns: table => new
                {
                    VL_id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VL_Nombre_spa = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    VL_Nombre_end = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValoresLotes", x => x.VL_id);
                });

            migrationBuilder.CreateTable(
                name: "Wizards",
                columns: table => new
                {
                    IDWizard = table.Column<int>(type: "int", nullable: false),
                    Step = table.Column<int>(type: "int", nullable: false),
                    Text = table.Column<string>(type: "ntext", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Wizards", x => new { x.IDWizard, x.Step });
                });

            migrationBuilder.CreateTable(
                name: "Zonas",
                columns: table => new
                {
                    IDZona = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AgenciaID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Zonas", x => x.IDZona);
                });

            migrationBuilder.CreateTable(
                name: "AEAT_M340_Detalle",
                columns: table => new
                {
                    IDDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ModeloID = table.Column<int>(type: "int", nullable: false),
                    NIFDeclarado = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    NIFRepresentanteLegal = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    RazonSocialDeclarado = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    CodigoPais = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    ClaveIdentificacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    NIF_PaisResidencia = table.Column<string>(type: "char(20)", unicode: false, fixedLength: true, maxLength: 20, nullable: true),
                    ClaveTipoLibro = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    ClaveOperacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FechaExpedicion = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    TipoImpositivo = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    CuotaImpuesto = table.Column<decimal>(type: "money", nullable: false),
                    ImporteTotal = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponibleACoste = table.Column<decimal>(type: "money", nullable: true),
                    CodigoFactura = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    NumeroRegistro = table.Column<int>(type: "int", nullable: false),
                    NFacturas = table.Column<int>(type: "int", nullable: true),
                    NRegistros = table.Column<int>(type: "int", nullable: true),
                    IntervaloAcumulacion_Inicio = table.Column<int>(type: "int", nullable: true),
                    IntervaloAcumulacion_Fin = table.Column<int>(type: "int", nullable: true),
                    FacturaRectificada = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    RecargoEq_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    RecargoEq_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    Inmueble_Situacion = table.Column<int>(type: "int", nullable: true),
                    ReferenciaCatastral = table.Column<string>(type: "char(25)", unicode: false, fixedLength: true, maxLength: 25, nullable: true),
                    ImporteMetalico = table.Column<decimal>(type: "money", nullable: true),
                    ImporteTransmisionesInmuebles = table.Column<decimal>(type: "money", nullable: true),
                    Cobro_Fecha = table.Column<DateTime>(type: "datetime", nullable: true),
                    Cobro_Importe = table.Column<decimal>(type: "money", nullable: true),
                    Cobro_Medio = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    Cobro_Cuenta = table.Column<string>(type: "char(34)", unicode: false, fixedLength: true, maxLength: 34, nullable: true),
                    ProrrataAnualDefinitiva = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    RegularizacionAnualDeduccion = table.Column<decimal>(type: "money", nullable: true),
                    IdentificacionEntrega = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    RegularizacionDeduccionEfectuad = table.Column<decimal>(type: "money", nullable: true),
                    FechaInicioUtilizacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    IdentificacionBien = table.Column<DateTime>(type: "datetime", nullable: true),
                    TipoOperacionIntracomunitari = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ClaveDeclarado = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    CodigoEstadoMiembro = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    PlazoOperacion = table.Column<int>(type: "int", nullable: true),
                    DescripcionBienes = table.Column<string>(type: "char(35)", unicode: false, fixedLength: true, maxLength: 35, nullable: true),
                    DireccionOperadorIntracomunitario_Domicilio = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: true),
                    DireccionOperadorIntracomunitario_Poblacion = table.Column<string>(type: "char(22)", unicode: false, fixedLength: true, maxLength: 22, nullable: true),
                    DireccionOperadorIntracomunitario_CP = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M340_Detalle", x => x.IDDetalle);
                    table.ForeignKey(
                        name: "FK_AEAT_M340_Detalle_AEAT_M340",
                        column: x => x.ModeloID,
                        principalTable: "AEAT_M340",
                        principalColumn: "IDModelo");
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AtributosProductos",
                columns: table => new
                {
                    IDAtributoProducto = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AtributoProductoID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Prefijo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Sufijo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Acabado = table.Column<int>(type: "int", nullable: true),
                    Combina = table.Column<bool>(type: "bit", nullable: true),
                    LoadValuesInWizard = table.Column<bool>(type: "bit", nullable: false),
                    ComponerNombre = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Continuo = table.Column<bool>(type: "bit", nullable: false),
                    TipoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Atributos", x => x.IDAtributoProducto);
                    table.ForeignKey(
                        name: "FK_AtributosProductos_AtributosProductos",
                        column: x => x.AtributoProductoID,
                        principalTable: "AtributosProductos",
                        principalColumn: "IDAtributoProducto");
                    table.ForeignKey(
                        name: "FK_AtributosProductos_AtributosTipos",
                        column: x => x.TipoID,
                        principalTable: "AtributosTipos",
                        principalColumn: "IDTipo");
                });

            migrationBuilder.CreateTable(
                name: "BO_Cuentas",
                columns: table => new
                {
                    IDBO_Cuentas = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BOID = table.Column<int>(type: "int", nullable: true),
                    Cuenta = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Signo = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BO_Cuentas_nueva", x => x.IDBO_Cuentas)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_BO_Cuentas_BO_nueva",
                        column: x => x.BOID,
                        principalTable: "BO",
                        principalColumn: "IDBO");
                });

            migrationBuilder.CreateTable(
                name: "CDBP_Steps",
                columns: table => new
                {
                    IDStep = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProcessID = table.Column<int>(type: "int", nullable: false),
                    IDGUID_Connection = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Orden = table.Column<int>(type: "int", nullable: false),
                    MethodName = table.Column<string>(type: "varchar(256)", unicode: false, maxLength: 256, nullable: false),
                    MethodTypeID = table.Column<int>(type: "int", nullable: false, comment: "1 > StoredProc; 2 > Llamada a código compilado (se comprueba LibraryName)"),
                    LibraryName = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CDBP_Steps", x => x.IDStep);
                    table.ForeignKey(
                        name: "FK_CDBP_Steps_CDBP_Processes",
                        column: x => x.ProcessID,
                        principalTable: "CDBP_Processes",
                        principalColumn: "IDProcess",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "clientesroleclaim",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_clientesroleclaim", x => x.Id);
                    table.ForeignKey(
                        name: "FK_clientesroleclaim_clientesRole_RoleId",
                        column: x => x.RoleId,
                        principalTable: "clientesRole",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "clientesUserClaim",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_clientesUserClaim", x => x.Id);
                    table.ForeignKey(
                        name: "FK_clientesUserClaim_ClientesUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "ClientesUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "clientesUserLogin",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_clientesUserLogin", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_clientesUserLogin_ClientesUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "ClientesUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "clientesUserRole",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_clientesUserRole", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_clientesUserRole_ClientesUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "ClientesUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_clientesUserRole_clientesRole_RoleId",
                        column: x => x.RoleId,
                        principalTable: "clientesRole",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "clientesUsertoken",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_clientesUsertoken", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_clientesUsertoken_ClientesUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "ClientesUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CantidadesPrecargaComisiones",
                columns: table => new
                {
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    OperacionID = table.Column<int>(type: "int", nullable: false),
                    Comision = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK_CantidadesPrecargaComisiones_ComisionesOperaciones",
                        column: x => x.OperacionID,
                        principalTable: "ComisionesOperaciones",
                        principalColumn: "IDOperacion");
                });

            migrationBuilder.CreateTable(
                name: "EmpresasCuentasBancarias",
                columns: table => new
                {
                    IDCuenta = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TitularID = table.Column<int>(type: "int", nullable: false),
                    NumCta = table.Column<string>(type: "varchar(24)", unicode: false, maxLength: 24, nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaDescuento = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LimiteDescuento = table.Column<decimal>(type: "money", nullable: false),
                    RutaFicherosN19 = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ExtensionFicherosN19 = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    RutaFicherosN58 = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ExtensionFicherosN58 = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    Alias = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    Sufijo_Presentador = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    IBANCodigo = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    IBANCuenta = table.Column<string>(type: "varchar(24)", unicode: false, maxLength: 24, nullable: true),
                    BIC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Activa = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpresasCuentasBancarias", x => x.IDCuenta);
                    table.ForeignKey(
                        name: "FK_EmpresasCuentasBancarias_ConfiguracionEmpresa",
                        column: x => x.TitularID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmpresasDiasPago",
                columns: table => new
                {
                    EmpresaID = table.Column<int>(type: "int", nullable: false),
                    DiaInicio = table.Column<int>(type: "int", nullable: false),
                    DiaFin = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpresasDiasPago", x => new { x.EmpresaID, x.DiaInicio });
                    table.ForeignKey(
                        name: "FK_EmpresasDiasPago_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmpresasEmailCuentas",
                columns: table => new
                {
                    IDEmailAccount = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpresaID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(256)", unicode: false, maxLength: 256, nullable: true),
                    EmailAddress = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    DisplayName = table.Column<string>(type: "varchar(256)", unicode: false, maxLength: 256, nullable: true),
                    ReplyToAddress = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    Organization = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    ServerTypeID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))", comment: "(1 = SMTP)"),
                    Host = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Port = table.Column<short>(type: "smallint", nullable: false, defaultValueSql: "((25))"),
                    Timeout = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Password = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    EnableSSL = table.Column<bool>(type: "bit", nullable: false),
                    UseDefaultCredentials = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpresasEmailCuentas", x => x.IDEmailAccount);
                    table.ForeignKey(
                        name: "FK_EmpresasEmailCuentas_EmpresasEmailCuentas",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                });

            migrationBuilder.CreateTable(
                name: "EmpresasPeriodosExentosPago",
                columns: table => new
                {
                    EmpresaID = table.Column<int>(type: "int", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpresasPeriodosExentosPago", x => new { x.EmpresaID, x.FechaInicio });
                    table.ForeignKey(
                        name: "FK_EmpresasPeriodosExentosPago_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CRM_AccionesTipos",
                columns: table => new
                {
                    IDTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    TipoGenericoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_AccionesTipos", x => x.IDTipo);
                    table.ForeignKey(
                        name: "FK_CRM_AccionesTipos_CRM_AccionesTiposGenericos",
                        column: x => x.TipoGenericoID,
                        principalTable: "CRM_AccionesTiposGenericos",
                        principalColumn: "IDTipoGenerico");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CanjesDetalle",
                columns: table => new
                {
                    IDCanjeDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CanjeID = table.Column<int>(type: "int", nullable: false),
                    PuntosDesde = table.Column<int>(type: "int", nullable: false),
                    Vale = table.Column<decimal>(type: "money", nullable: false),
                    Obsequio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CanjesDetalle", x => x.IDCanjeDetalle);
                    table.ForeignKey(
                        name: "FK_CRM_CanjesDetalle_CRM_Canjes",
                        column: x => x.CanjeID,
                        principalTable: "CRM_Canjes",
                        principalColumn: "IDCanje",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Secciones",
                columns: table => new
                {
                    IDSeccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Secciones", x => x.IDSeccion);
                    table.UniqueConstraint("AK_Secciones_IDSeccion_DepartamentoID", x => new { x.IDSeccion, x.DepartamentoID });
                    table.ForeignKey(
                        name: "FK_Secciones_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Secciones_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "MovimientosAlmacen",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DocumentoAlmacenTipoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovimientosAlmacen", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacen_DocumentosAlmacenTipos",
                        column: x => x.DocumentoAlmacenTipoID,
                        principalTable: "DocumentosAlmacenTipos",
                        principalColumn: "IDDocumentoAlmacenTipo");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Comunicaciones",
                columns: table => new
                {
                    IDComunicacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Descripcion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocumentoDemanda = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TipoDestDemandaID = table.Column<int>(type: "int", nullable: true),
                    RespDemandaID = table.Column<int>(type: "int", nullable: true),
                    Contenido = table.Column<string>(type: "text", nullable: true),
                    DocumentoRespuesta = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TipoDestRespuestaID = table.Column<int>(type: "int", nullable: true),
                    RespRespuestaID = table.Column<int>(type: "int", nullable: true),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaRespuesta = table.Column<DateTime>(type: "datetime", nullable: true),
                    ContenidoRespuesta = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Comunicaciones", x => x.IDComunicacion);
                    table.ForeignKey(
                        name: "FK_ISO_Comunicaciones_DocumentosGestionDestinatarios",
                        column: x => x.TipoDestDemandaID,
                        principalTable: "DocumentosGestionDestinatarios",
                        principalColumn: "IDDocumentoGestionDestinatario");
                    table.ForeignKey(
                        name: "FK_ISO_Comunicaciones_DocumentosGestionDestinatarios1",
                        column: x => x.TipoDestRespuestaID,
                        principalTable: "DocumentosGestionDestinatarios",
                        principalColumn: "IDDocumentoGestionDestinatario");
                });

            migrationBuilder.CreateTable(
                name: "ISO_TiposIncidencias",
                columns: table => new
                {
                    IDTipoIncidencia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TipoDestinatarioID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_TiposIncidencias", x => x.IDTipoIncidencia);
                    table.ForeignKey(
                        name: "FK_ISO_TiposIncidencias_DocumentosGestionDestinatarios",
                        column: x => x.TipoDestinatarioID,
                        principalTable: "DocumentosGestionDestinatarios",
                        principalColumn: "IDDocumentoGestionDestinatario");
                });

            migrationBuilder.CreateTable(
                name: "AEAT_M303",
                columns: table => new
                {
                    IDModelo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    Tipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    RazonSocial = table.Column<string>(type: "char(45)", unicode: false, fixedLength: true, maxLength: 45, nullable: false),
                    InscritoRegistroDevMensual = table.Column<bool>(type: "bit", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Periodo = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    DEV1_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV1_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    DEV1_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV2_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV2_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    DEV2_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV3_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV3_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    DEV3_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE1_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE1_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE1_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE2_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE2_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE2_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE3_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE3_Tipo = table.Column<decimal>(type: "money", nullable: true),
                    DEV_RE3_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_AdquisionesIntracomunitarias_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_AdquisionesIntracomunitarias_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_TotalDevengado = table.Column<decimal>(type: "money", nullable: true),
                    DED_OpInterioresCorrientes_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_OpInterioresCorrientes_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_OpInterioresBienesInversion_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_OpInterioresBienesInversion_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_ImportacionCorrientes_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_ImportacionCorrientes_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_ImportacionInversion_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_ImportacionInversion_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_AdquisicionIntracomunitariaCorrientes_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_AdquisicionIntracomunitariaCorrientes_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_AdquisicionIntracomunitariaInversion_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_AdquisicionIntracomunitariaInversion_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_CompensacionRegimenEspecialAGP = table.Column<decimal>(type: "money", nullable: true),
                    DED_RegularizacionInversiones = table.Column<decimal>(type: "money", nullable: true),
                    DED_RegularizacionAplicacionPerCentProrrata = table.Column<decimal>(type: "money", nullable: true),
                    DED_TotalADeducir = table.Column<decimal>(type: "money", nullable: true),
                    Diferencia = table.Column<decimal>(type: "money", nullable: true),
                    AdministracionEstadoPerCent = table.Column<decimal>(type: "money", nullable: true),
                    AdministracionEstado = table.Column<decimal>(type: "money", nullable: true),
                    CuotasACompensar = table.Column<decimal>(type: "money", nullable: true),
                    EntregasIntracomunitarias = table.Column<decimal>(type: "money", nullable: true),
                    ExportacionesYOperacionsAsimiladas = table.Column<decimal>(type: "money", nullable: true),
                    OperacionesNoSujetas = table.Column<decimal>(type: "money", nullable: true),
                    TributacionConjunta = table.Column<decimal>(type: "money", nullable: true),
                    Resultado = table.Column<decimal>(type: "money", nullable: true),
                    ADeducir = table.Column<decimal>(type: "money", nullable: true),
                    ResultadoLiquidacion = table.Column<decimal>(type: "money", nullable: true),
                    ImporteACompensar = table.Column<decimal>(type: "money", nullable: true),
                    SinActividad = table.Column<bool>(type: "bit", nullable: false),
                    DEVOL_Importe = table.Column<decimal>(type: "money", nullable: true),
                    ING_FormaPago = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ING_Importe = table.Column<decimal>(type: "money", nullable: true),
                    Complementaria = table.Column<bool>(type: "bit", nullable: false),
                    ComplementariaJustificante = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true),
                    Localidad = table.Column<string>(type: "varchar(16)", unicode: false, maxLength: 16, nullable: true),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: true),
                    ID_TributaExclusivamenteRegimenSimplificado = table.Column<bool>(type: "bit", nullable: false),
                    ID_AutoliquidacionConjunta = table.Column<bool>(type: "bit", nullable: false),
                    ID_DeclaradoConcursoAcreedoresPresentePeriodo = table.Column<bool>(type: "bit", nullable: false),
                    ID_DeclaracionConcursoFechaAuto = table.Column<DateTime>(type: "datetime", nullable: true),
                    ID_DeclaracionConcursoDictadoEnPeriodo = table.Column<int>(type: "int", nullable: false),
                    ID_CriterioDeCaja = table.Column<bool>(type: "bit", nullable: false),
                    ID_CriterioDeCajaDestinatario = table.Column<bool>(type: "bit", nullable: false),
                    ID_AplicacionProrrataEspecial = table.Column<bool>(type: "bit", nullable: false),
                    ID_AplicacionProrrataEspecial_Revocacion = table.Column<bool>(type: "bit", nullable: false),
                    DEV_OtrasActividadesInversionSujetoPasivo_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_OtrasActividadesInversionSujetoPasivo_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_ModificacionBasesYCuotas_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_ModificacionBasesYCuotas_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEV_ModificacionBasesYCuotas_RE_BI = table.Column<decimal>(type: "money", nullable: true),
                    DEV_ModificacionBasesYCuotas_RE_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DED_ModificacionBasesYCuotas_BI = table.Column<decimal>(type: "money", nullable: true),
                    DED_ModificacionBasesYCuotas_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    RECC_EntregasBienesYServicios_BI = table.Column<decimal>(type: "money", nullable: true),
                    RECC_EntregasBienesYServicios_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    RECC_AdquisicionesBienesYServicios_BI = table.Column<decimal>(type: "money", nullable: true),
                    RECC_AdquisicionesBienesYServicios_Cuota = table.Column<decimal>(type: "money", nullable: true),
                    DEVOL_CCB = table.Column<string>(type: "varchar(34)", unicode: false, maxLength: 34, nullable: true),
                    ING_CCB = table.Column<string>(type: "varchar(34)", unicode: false, maxLength: 34, nullable: true),
                    ID_ExisteVolumenOperaciones_LIVA = table.Column<int>(type: "int", nullable: false),
                    SujPasivoTributaExcForalAduana = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((2))"),
                    VoluntarioLIVASede = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((2))"),
                    ID_Exonerado390 = table.Column<int>(type: "int", nullable: false),
                    TributacionPorTerritorio = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Clave_P = table.Column<int>(type: "int", nullable: false),
                    IA_Exon_IAE_P = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    IA_Exon_Clave_1 = table.Column<int>(type: "int", nullable: false),
                    IA_Exon_IAE_1 = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    IA_Exon_Clave_2 = table.Column<int>(type: "int", nullable: false),
                    IA_Exon_IAE_2 = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    IA_Exon_Clave_3 = table.Column<int>(type: "int", nullable: false),
                    IA_Exon_IAE_3 = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    IA_Exon_Clave_4 = table.Column<int>(type: "int", nullable: false),
                    IA_Exon_IAE_4 = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    IA_Exon_Clave_5 = table.Column<int>(type: "int", nullable: false),
                    IA_Exon_IAE_5 = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    IA_Exon_Marca_TercerasPers = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    IA_Exon_Oper_RG = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_RECC = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_EntIntrocomExentas = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_Exentas_SinDeduccion = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_NoSujetasLocal = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_EntregasBienesInsMont = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_RSimplificado = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_EntregasBienesNoHabituales = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_TotalVolumen = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_Exportaciones = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_RE_Agricultura = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_Sujetos_RE = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_RE_BiensUsados = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_RE_AgenciasViajes = table.Column<decimal>(type: "money", nullable: true),
                    IA_Exon_Oper_RE_EntregasBI = table.Column<decimal>(type: "money", nullable: true),
                    NotasInternas = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CuotasACompensarAplicadasEnPeriodo = table.Column<decimal>(type: "money", nullable: true),
                    CuotasACompensarAplicadasPeriodosPosteriores = table.Column<decimal>(type: "money", nullable: true),
                    OperacionesSujetas_ISP = table.Column<decimal>(type: "money", nullable: true),
                    OSS_OperacionesNOSujetasLocalizacion = table.Column<decimal>(type: "money", nullable: true),
                    OSS_OperacionesSujetas = table.Column<decimal>(type: "money", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AEAT_M303", x => x.IDModelo);
                    table.ForeignKey(
                        name: "FK_AEAT_M303_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizablesDetalle",
                columns: table => new
                {
                    IDDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    ValorAmortizacion = table.Column<decimal>(type: "money", nullable: false),
                    Contabilizada = table.Column<bool>(type: "bit", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizablesDetalle", x => x.IDDetalle);
                    table.ForeignKey(
                        name: "FK_BienesAmortizablesDetalle_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                });

            migrationBuilder.CreateTable(
                name: "CalendariosEjercicios",
                columns: table => new
                {
                    CalendarioID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CalendariosEjercicios", x => new { x.CalendarioID, x.EjercicioID });
                    table.ForeignKey(
                        name: "FK_CalendariosEjercicios_Calendarios",
                        column: x => x.CalendarioID,
                        principalTable: "Calendarios",
                        principalColumn: "IDCalendario");
                    table.ForeignKey(
                        name: "FK_CalendariosEjercicios_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                });

            migrationBuilder.CreateTable(
                name: "Agencias",
                columns: table => new
                {
                    IDAgencia = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    CodigoEntidad = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Agencias", x => x.IDAgencia);
                    table.ForeignKey(
                        name: "FK_Agencias_Entidades",
                        column: x => x.CodigoEntidad,
                        principalTable: "Entidades",
                        principalColumn: "Codigo",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FormasPagoAPI",
                columns: table => new
                {
                    IDFormaPagoAPI = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    PubKey = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    SecKey = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    URLPrefix = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__FormasPa__478D9C2607A9E6E1", x => x.IDFormaPagoAPI);
                    table.ForeignKey(
                        name: "FK__FormasPag__Forma__1B0C352A",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                });

            migrationBuilder.CreateTable(
                name: "Vencimientos",
                columns: table => new
                {
                    IDVencimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FormaPagoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Dias = table.Column<int>(type: "int", nullable: false),
                    Porcentaje = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vencimientos", x => x.IDVencimiento);
                    table.ForeignKey(
                        name: "FK_Vencimientos_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                });

            migrationBuilder.CreateTable(
                name: "Formularios",
                columns: table => new
                {
                    IDFormulario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CategoriaID = table.Column<int>(type: "int", nullable: true),
                    Libreria = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Formularios", x => x.IDFormulario);
                    table.ForeignKey(
                        name: "FK_Formularios_FormulariosCategorias",
                        column: x => x.CategoriaID,
                        principalTable: "FormulariosCategorias",
                        principalColumn: "IDCategoria");
                });

            migrationBuilder.CreateTable(
                name: "GD_FormatosArchivos",
                columns: table => new
                {
                    IDFormato = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AplicacionID = table.Column<int>(type: "int", nullable: true),
                    Extension = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    Icon = table.Column<byte[]>(type: "image", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GD_TipoArchivos", x => x.IDFormato);
                    table.ForeignKey(
                        name: "FK_GD_TipoArchivos_GD_Aplicaciones",
                        column: x => x.AplicacionID,
                        principalTable: "GD_Aplicaciones",
                        principalColumn: "IDAplicacion");
                });

            migrationBuilder.CreateTable(
                name: "GS_UsrTypes",
                columns: table => new
                {
                    IDUsrType = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Length = table.Column<int>(type: "int", nullable: false),
                    EditMask = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    EditMaskTypeID = table.Column<int>(type: "int", nullable: true),
                    InternalTypeID = table.Column<int>(type: "int", nullable: false),
                    Dev_Exp_IndexEditor = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((-1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_UsrTypes", x => x.IDUsrType);
                    table.ForeignKey(
                        name: "FK_GS_UsrTypes_GS_EditMasksTypes",
                        column: x => x.EditMaskTypeID,
                        principalTable: "GS_EditMasksTypes",
                        principalColumn: "IDEditMaskType");
                    table.ForeignKey(
                        name: "FK_GS_UsrTypes_GS_InternalTypes",
                        column: x => x.InternalTypeID,
                        principalTable: "GS_InternalTypes",
                        principalColumn: "IDInternalType");
                });

            migrationBuilder.CreateTable(
                name: "ISO_CriteriosEficacia",
                columns: table => new
                {
                    IDCriterioEficacia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    PlanFormacionID = table.Column<int>(type: "int", nullable: false),
                    FrecuenciaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_CriteriosEficacia", x => x.IDCriterioEficacia);
                    table.ForeignKey(
                        name: "FK_ISO_CriteriosEficacia_ISO_Frecuencias",
                        column: x => x.FrecuenciaID,
                        principalTable: "ISO_Frecuencias",
                        principalColumn: "IDFrecuencia");
                    table.ForeignKey(
                        name: "FK_ISO_CriteriosEficacia_ISO_PlanesFormacion",
                        column: x => x.PlanFormacionID,
                        principalTable: "ISO_PlanesFormacion",
                        principalColumn: "IDPlanFormacion",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Respuestas",
                columns: table => new
                {
                    IDRespuesta = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PreguntaID = table.Column<int>(type: "int", nullable: false),
                    Texto = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Puntuacion = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Respuestas", x => x.IDRespuesta);
                    table.ForeignKey(
                        name: "FK_ISO_Respuestas_ISO_Preguntas",
                        column: x => x.PreguntaID,
                        principalTable: "ISO_Preguntas",
                        principalColumn: "IDPregunta",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Actividades",
                columns: table => new
                {
                    IDActividad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ProcesoID = table.Column<int>(type: "int", nullable: false),
                    ActividadID = table.Column<int>(type: "int", nullable: true),
                    Orden = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Actividades", x => x.IDActividad);
                    table.ForeignKey(
                        name: "FK_ISO_Actividades_ISO_Actividades",
                        column: x => x.ActividadID,
                        principalTable: "ISO_Actividades",
                        principalColumn: "IDActividad");
                    table.ForeignKey(
                        name: "FK_ISO_Actividades_ISO_Procesos",
                        column: x => x.ProcesoID,
                        principalTable: "ISO_Procesos",
                        principalColumn: "IDProceso");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Vencimientos",
                columns: table => new
                {
                    IDVencimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    TipoVencimientoID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    TipoDestinatarioID = table.Column<int>(type: "int", nullable: true),
                    DestinatarioID = table.Column<int>(type: "int", nullable: true),
                    FechaUltimaRevision = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaProximaRevision = table.Column<DateTime>(type: "datetime", nullable: true),
                    FrecuenciaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Vencimientos", x => x.IDVencimiento);
                    table.ForeignKey(
                        name: "FK_ISO_Vencimientos_DocumentosGestionDestinatarios",
                        column: x => x.TipoDestinatarioID,
                        principalTable: "DocumentosGestionDestinatarios",
                        principalColumn: "IDDocumentoGestionDestinatario");
                    table.ForeignKey(
                        name: "FK_ISO_Vencimientos_ISO_Frecuencias",
                        column: x => x.FrecuenciaID,
                        principalTable: "ISO_Frecuencias",
                        principalColumn: "IDFrecuencia");
                    table.ForeignKey(
                        name: "FK_ISO_Vencimientos_ISO_TiposVencimientos",
                        column: x => x.TipoVencimientoID,
                        principalTable: "ISO_TiposVencimientos",
                        principalColumn: "IDTipoVencimiento");
                });

            migrationBuilder.CreateTable(
                name: "GastosFacturacion",
                columns: table => new
                {
                    IDGastoFacturacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IVAGrupoCompraID = table.Column<int>(type: "int", nullable: true),
                    IVAGrupoVentaID = table.Column<int>(type: "int", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: false),
                    IVAPorcentaje = table.Column<decimal>(type: "money", nullable: true),
                    CtaCompras = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaVentas = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GastosFacturacion", x => x.IDGastoFacturacion);
                    table.ForeignKey(
                        name: "FK_GastosFacturacion_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                });

            migrationBuilder.CreateTable(
                name: "IvaTipos",
                columns: table => new
                {
                    IDIvaTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IvaClaseID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    General = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Recargo = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CtaIVASoportado = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaIVARepercutido = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaRecargoSoportado = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CtaRecargoRepercutido = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CtaIVAIntracomunitarioSoportado = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CtaIVAIntracomunitarioRepercutido = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CtaIVAInversionSujetoPasivo_S = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CtaIVAInversionSujetoPasivo_R = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IvaTipos", x => x.IDIvaTipo);
                    table.ForeignKey(
                        name: "FK_IvaTipos_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                });

            migrationBuilder.CreateTable(
                name: "Productos_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla"),
                    ParametroID = table.Column<int>(type: "int", nullable: true),
                    MatrizID = table.Column<int>(type: "int", nullable: true),
                    Legislacion = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    PlazoEntrega = table.Column<int>(type: "int", nullable: true),
                    ProcedimientoEnsayo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TecnicaAnalisis = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Unidades = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LimiteCuantificacion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LimiteDeteccion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ValorParametrico = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TiempoMaximo = table.Column<double>(type: "float", nullable: false),
                    TiempoEspera = table.Column<double>(type: "float", nullable: false),
                    Acondicionamiento = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Envase = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Incertidumbre = table.Column<decimal>(type: "money", nullable: false),
                    LimiteMaximo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Acreditado = table.Column<bool>(type: "bit", nullable: false),
                    ProcedimientoEnsayoID = table.Column<int>(type: "int", nullable: true),
                    CodigoSINAC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AbreviaturaLote = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    TiempoCaducidad = table.Column<int>(type: "int", nullable: true),
                    IsSemielaborado = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Productos_CDBO", x => x.IDCDBO);
                    table.ForeignKey(
                        name: "FK_Productos_CDBO_LAB_Matrices",
                        column: x => x.MatrizID,
                        principalTable: "LAB_Matrices",
                        principalColumn: "IDMatriz");
                    table.ForeignKey(
                        name: "FK_Productos_CDBO_LAB_ProcedimientosEnsayo",
                        column: x => x.ProcedimientoEnsayoID,
                        principalTable: "LAB_ProcedimientosEnsayo",
                        principalColumn: "IDProcedimiento");
                });

            migrationBuilder.CreateTable(
                name: "ProductosCompuestos_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false),
                    ProcedimientoEnsayo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TecnicaAnalisis = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Unidades = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LimiteCuantificacion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LimiteDeteccion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ValorParametrico = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TiempoMaximo = table.Column<double>(type: "float", nullable: false),
                    TiempoEspera = table.Column<double>(type: "float", nullable: false),
                    Acondicionamiento = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Envase = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Incertidumbre = table.Column<decimal>(type: "money", nullable: false),
                    LimiteMaximo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Acreditado = table.Column<bool>(type: "bit", nullable: false),
                    ProcedimientoEnsayoID = table.Column<int>(type: "int", nullable: true),
                    CodigoSINAC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosCompuestos_CDBO", x => x.IDCDBO);
                    table.ForeignKey(
                        name: "FK_ProductosCompuestos_CDBO_LAB_ProcedimientosEnsayo",
                        column: x => x.ProcedimientoEnsayoID,
                        principalTable: "LAB_ProcedimientosEnsayo",
                        principalColumn: "IDProcedimiento");
                });

            migrationBuilder.CreateTable(
                name: "UnidadesMedida",
                columns: table => new
                {
                    IDUnidadMedida = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    Escala = table.Column<double>(type: "float", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Abreviatura = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Unidades", x => x.IDUnidadMedida);
                    table.UniqueConstraint("AK_UnidadesMedida_IDUnidadMedida_MedidaID", x => new { x.IDUnidadMedida, x.MedidaID });
                    table.ForeignKey(
                        name: "FK_UnidadesMedida_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ConfiguracionBloques",
                columns: table => new
                {
                    IDConfiguracionBloque = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ModeloID = table.Column<int>(type: "int", nullable: false),
                    STX = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    ETB = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    DLE = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    DLE0 = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    DLE1 = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    EOT = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    NAK = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    AK = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    ENQ = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    ETX = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConfiguracionBloques", x => x.IDConfiguracionBloque);
                    table.ForeignKey(
                        name: "FK_ConfiguracionBloques_Modelos",
                        column: x => x.ModeloID,
                        principalTable: "Modelos",
                        principalColumn: "IDModelo",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PermisosCategorias",
                columns: table => new
                {
                    IDPermisoCategoria = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ModuloGestionID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SortOrder = table.Column<int>(type: "int", nullable: false),
                    PermisoCategoriaID = table.Column<int>(type: "int", nullable: true),
                    AplicacionID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PermisosCategorias", x => x.IDPermisoCategoria);
                    table.ForeignKey(
                        name: "FK_PermisosCategorias_ModulosGestion",
                        column: x => x.ModuloGestionID,
                        principalTable: "ModulosGestion",
                        principalColumn: "IDModuloGestion");
                });

            migrationBuilder.CreateTable(
                name: "Comarcas",
                columns: table => new
                {
                    IDComarca = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PaisID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comarcas", x => x.IDComarca);
                    table.ForeignKey(
                        name: "FK_Comarcas_Paises",
                        column: x => x.PaisID,
                        principalTable: "Paises",
                        principalColumn: "IDPais");
                });

            migrationBuilder.CreateTable(
                name: "Provincias",
                columns: table => new
                {
                    IDProvincia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PaisID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Provincias", x => x.IDProvincia);
                    table.ForeignKey(
                        name: "FK_Provincias_Paises",
                        column: x => x.PaisID,
                        principalTable: "Paises",
                        principalColumn: "IDPais",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Periodos",
                columns: table => new
                {
                    idPeriodo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Cerrado = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    PeriodoTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Periodos", x => x.idPeriodo);
                    table.ForeignKey(
                        name: "FK_Periodos_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Periodos_PeriodosTipos",
                        column: x => x.PeriodoTipoID,
                        principalTable: "PeriodosTipos",
                        principalColumn: "IDPeriodoTipo");
                });

            migrationBuilder.CreateTable(
                name: "ConceptosRetencion",
                columns: table => new
                {
                    IDConceptoRetencion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Concepto = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    CtaCompras = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CtaVentas = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConceptosRetencion", x => x.IDConceptoRetencion);
                    table.ForeignKey(
                        name: "FK_ConceptosRetencion_PGC",
                        column: x => x.CtaCompras,
                        principalTable: "PGC",
                        principalColumn: "Cuenta");
                    table.ForeignKey(
                        name: "FK_ConceptosRetencion_PGC1",
                        column: x => x.CtaVentas,
                        principalTable: "PGC",
                        principalColumn: "Cuenta");
                });

            migrationBuilder.CreateTable(
                name: "IVA_LibroRepercutido",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: true),
                    CtaConta = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NIF = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    Factura = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Base = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Porcentaje_IVA = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    IVA = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Total = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Asiento_Antiguo = table.Column<int>(type: "int", nullable: true),
                    Cuenta_IVA = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Porcentaje_RE = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    RE = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Porcentaje_Ret = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    Retencion = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Cuenta_Ret = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    Abono = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    TipoClaveID = table.Column<int>(type: "int", nullable: true),
                    FechaOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    NIF_Tipo = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    FacturaRectificada = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    SII_Exportado = table.Column<bool>(type: "bit", nullable: false),
                    ClaveTipoFactura = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    RectificativaClave = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ClaveTributariaOperacion = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    DescripcionOperacion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    InmuebleSituacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    InmuebleReferenciaCatastral = table.Column<string>(type: "char(25)", unicode: false, fixedLength: true, maxLength: 25, nullable: true),
                    ActividadTipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ActividadGrupo = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Concepto = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    OperacionCriterioCaja = table.Column<bool>(type: "bit", nullable: true),
                    IRPF_Retencion = table.Column<decimal>(type: "decimal(5,2)", nullable: true),
                    IRPF_Importe = table.Column<decimal>(type: "decimal(14,2)", nullable: true),
                    Computable = table.Column<decimal>(type: "decimal(14,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IVA_LibroRepercutido", x => new { x.Clave, x.EjercicioID });
                    table.ForeignKey(
                        name: "FK_IVA_LibroRepercutido_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IVA_LibroRepercutido_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_IVA_LibroRepercutido_IVA_Libro_TipoClave",
                        column: x => x.TipoClaveID,
                        principalTable: "IVA_Libro_TipoClave",
                        principalColumn: "IDTipoClave");
                    table.ForeignKey(
                        name: "FK_IVA_LibroRepercutido_PGC",
                        column: x => x.CtaConta,
                        principalTable: "PGC",
                        principalColumn: "Cuenta");
                });

            migrationBuilder.CreateTable(
                name: "IVA_LibroSoportado",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: true),
                    CtaConta = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NIF = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    Factura = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Base = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Porcentaje_IVA = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    IVA = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Total = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Asiento_Antiguo = table.Column<int>(type: "int", nullable: true),
                    Cuenta_IVA = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Porcentaje_RE = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    RE = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Porcentaje_Ret = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    Retencion = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Cuenta_Ret = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    Abono = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    TipoClaveID = table.Column<int>(type: "int", nullable: true),
                    FechaOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    NIF_Tipo = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    FacturaRectificada = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    SII_Exportado = table.Column<bool>(type: "bit", nullable: false),
                    ClaveTipoFactura = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    RectificativaClave = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ClaveTributariaOperacion = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    DescripcionOperacion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    InmuebleSituacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    InmuebleReferenciaCatastral = table.Column<string>(type: "char(25)", unicode: false, fixedLength: true, maxLength: 25, nullable: true),
                    ActividadTipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ActividadGrupo = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Concepto = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    OperacionCriterioCaja = table.Column<bool>(type: "bit", nullable: true),
                    IRPF_Retencion = table.Column<decimal>(type: "decimal(5,2)", nullable: true),
                    IRPF_Importe = table.Column<decimal>(type: "decimal(14,2)", nullable: true),
                    Deducible = table.Column<decimal>(type: "decimal(14,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IVA_LibroSoportado", x => new { x.Clave, x.EjercicioID });
                    table.ForeignKey(
                        name: "FK_IVA_LibroSoportado_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IVA_LibroSoportado_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_IVA_LibroSoportado_IVA_Libro_TipoClave",
                        column: x => x.TipoClaveID,
                        principalTable: "IVA_Libro_TipoClave",
                        principalColumn: "IDTipoClave");
                    table.ForeignKey(
                        name: "FK_IVA_LibroSoportado_PGC",
                        column: x => x.CtaConta,
                        principalTable: "PGC",
                        principalColumn: "Cuenta");
                });

            migrationBuilder.CreateTable(
                name: "PyG_Cuentas",
                columns: table => new
                {
                    IDPyG_Cuentas = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PyGID = table.Column<int>(type: "int", nullable: true),
                    Cuenta = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Signo = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PyG_cuentas_IDPyG_Cuentas", x => x.IDPyG_Cuentas)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_PyG_Cuentas_PyG",
                        column: x => x.PyGID,
                        principalTable: "PyG",
                        principalColumn: "IDPyG");
                });

            migrationBuilder.CreateTable(
                name: "Reports",
                columns: table => new
                {
                    IDReport = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    ReportFamiliaID = table.Column<int>(type: "int", nullable: true),
                    ReportTipoID = table.Column<int>(type: "int", nullable: false),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Criteria_FormID = table.Column<int>(type: "int", nullable: true),
                    ReportConstructorID = table.Column<int>(type: "int", nullable: false),
                    ShowPrintedCheckForm = table.Column<bool>(type: "bit", nullable: false, comment: "Indica si se tiene que mostrar o no el formulario con el Check Impreso para dar el report por Impreso o no"),
                    ExportNameFromReportName = table.Column<bool>(type: "bit", nullable: false, comment: "Indica si el nombre de archivo para exportar se toma del campo Nombre, en caso contrario se toma de la Entidad")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reports", x => x.IDReport);
                    table.ForeignKey(
                        name: "FK_Reports_ReportsConstructor",
                        column: x => x.ReportConstructorID,
                        principalTable: "ReportsConstructor",
                        principalColumn: "IDReportConstructor");
                    table.ForeignKey(
                        name: "FK_Reports_ReportsFamilias",
                        column: x => x.ReportFamiliaID,
                        principalTable: "ReportsFamilias",
                        principalColumn: "IDReportFamilia");
                    table.ForeignKey(
                        name: "FK_Reports_ReportsTipos",
                        column: x => x.ReportTipoID,
                        principalTable: "ReportsTipos",
                        principalColumn: "IDReportTipo");
                });

            migrationBuilder.CreateTable(
                name: "RRHH_Setup",
                columns: table => new
                {
                    IDSetup = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CategoriaID = table.Column<int>(type: "int", nullable: false),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    Valor = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RRHH_Setup", x => x.IDSetup);
                    table.ForeignKey(
                        name: "FK_RRHH_Setup_RRHH_SetupCategorias",
                        column: x => x.CategoriaID,
                        principalTable: "RRHH_SetupCategorias",
                        principalColumn: "IDCategoria");
                });

            migrationBuilder.CreateTable(
                name: "sync_Connections",
                columns: table => new
                {
                    IDConnection = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDGUID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Server = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    Provider = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    Datasource = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Username = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    Password = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_Connections", x => x.IDConnection);
                    table.ForeignKey(
                        name: "FK_sync_Connections_sync_Tipos",
                        column: x => x.TipoID,
                        principalTable: "sync_Tipos",
                        principalColumn: "IDTipo");
                });

            migrationBuilder.CreateTable(
                name: "TSK_Tareas",
                columns: table => new
                {
                    IDTarea = table.Column<int>(type: "int", nullable: false),
                    TareaID = table.Column<int>(type: "int", nullable: true),
                    IDGUID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false, comment: "Empleado que da de alta la tarea"),
                    EmpresaID = table.Column<int>(type: "int", nullable: false, comment: "Empresa a la que pertenece el EmpleadoID"),
                    TipoID = table.Column<int>(type: "int", nullable: false, comment: "FK contra la tabla TareasTipos, define las clases para cada tipo de Tarea (Mant. Soft., Bßsica, Personal, etc.)"),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    Asunto = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Notas = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    EventType = table.Column<int>(type: "int", nullable: false, comment: "cxScheduler"),
                    LabelColor = table.Column<int>(type: "int", nullable: true, comment: "cxScheduler"),
                    Location = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, comment: "cxScheduler"),
                    Options = table.Column<int>(type: "int", nullable: true, comment: "cxScheduler"),
                    ReminderDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReminderMinutesBeforeStart = table.Column<int>(type: "int", nullable: true),
                    ReminderResourcesData = table.Column<string>(type: "text", nullable: true),
                    TaskComplete = table.Column<int>(type: "int", nullable: true),
                    TaskIndex = table.Column<int>(type: "int", nullable: true),
                    TaskLinks = table.Column<string>(type: "text", nullable: true),
                    TaskStatus = table.Column<int>(type: "int", nullable: true),
                    AppointmentItem_EntryID = table.Column<string>(type: "varchar(140)", unicode: false, maxLength: 140, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_Tareas", x => x.IDTarea);
                    table.ForeignKey(
                        name: "FK_TSK_Tareas_TSK_TareasEstados",
                        column: x => x.EstadoID,
                        principalTable: "TSK_TareasEstados",
                        principalColumn: "IDEstado");
                });

            migrationBuilder.CreateTable(
                name: "AtributosCatalogo",
                columns: table => new
                {
                    IDAtributoCatalogo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CatalogoAtributoID = table.Column<int>(type: "int", nullable: false),
                    AtributoProductoID = table.Column<int>(type: "int", nullable: false),
                    NumeroOrden = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AtributosCatalogo", x => x.IDAtributoCatalogo);
                    table.ForeignKey(
                        name: "FK_AtributosCatalogo_AtributosProductos",
                        column: x => x.AtributoProductoID,
                        principalTable: "AtributosProductos",
                        principalColumn: "IDAtributoProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AtributosCatalogo_CatalogosAtributos",
                        column: x => x.CatalogoAtributoID,
                        principalTable: "CatalogosAtributos",
                        principalColumn: "IDCatalogoAtributo",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CualificacionesAtributos",
                columns: table => new
                {
                    AtributoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CualificacionesAtributos", x => x.AtributoID);
                    table.ForeignKey(
                        name: "FK_CualificacionesAtributos_AtributosProductos",
                        column: x => x.AtributoID,
                        principalTable: "AtributosProductos",
                        principalColumn: "IDAtributoProducto");
                });

            migrationBuilder.CreateTable(
                name: "OperacionesAtributos",
                columns: table => new
                {
                    AtributoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperacionesAtributos", x => x.AtributoID);
                    table.ForeignKey(
                        name: "FK_OperacionesAtributos_AtributosProductos",
                        column: x => x.AtributoID,
                        principalTable: "AtributosProductos",
                        principalColumn: "IDAtributoProducto");
                });

            migrationBuilder.CreateTable(
                name: "ValoresProductos",
                columns: table => new
                {
                    IDValorProducto = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ValorProductoID = table.Column<int>(type: "int", nullable: true),
                    AtributoProductoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Indice = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Valores", x => x.IDValorProducto);
                    table.ForeignKey(
                        name: "FK_ValoresProductos_AtributosProductos",
                        column: x => x.AtributoProductoID,
                        principalTable: "AtributosProductos",
                        principalColumn: "IDAtributoProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ValoresProductos_ValoresProductos",
                        column: x => x.ValorProductoID,
                        principalTable: "ValoresProductos",
                        principalColumn: "IDValorProducto");
                });

            migrationBuilder.CreateTable(
                name: "ConfiguracionEmpresa_CTA",
                columns: table => new
                {
                    IDCTAEmpresa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpresaID = table.Column<int>(type: "int", nullable: false),
                    TerritorioID = table.Column<int>(type: "int", nullable: true),
                    M303 = table.Column<bool>(type: "bit", nullable: false),
                    M303_Periodicidad = table.Column<int>(type: "int", nullable: true),
                    M303_InscritoRegistroDevMensual = table.Column<bool>(type: "bit", nullable: false),
                    M303_CCBIngresoID = table.Column<int>(type: "int", nullable: true),
                    M303_CCBDevolucionID = table.Column<int>(type: "int", nullable: true),
                    M303_Path = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SII_NIFRepresentanteLegal = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    LI_ActividadTipo_V_def = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LI_ActividadGrupo_V_def = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    LI_ActividadTipo_C_def = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LI_ActividadGrupo_C_def = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    LI_Concepto_V_def = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    LI_Concepto_C_def = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConfiguracionEmpresa_CTA", x => x.IDCTAEmpresa);
                    table.ForeignKey(
                        name: "FK_ConfiguracionEmpresa_CTA_CTA_AEAT_Territorios",
                        column: x => x.TerritorioID,
                        principalTable: "CTA_AEAT_Territorios",
                        principalColumn: "IDTerritorio");
                    table.ForeignKey(
                        name: "FK_ConfiguracionEmpresa_CTA_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_ConfiguracionEmpresa_CTA_EmpresasCuentasBancarias",
                        column: x => x.M303_CCBDevolucionID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                    table.ForeignKey(
                        name: "FK_ConfiguracionEmpresa_CTA_EmpresasCuentasBancarias1",
                        column: x => x.M303_CCBIngresoID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                });

            migrationBuilder.CreateTable(
                name: "MediosPago",
                columns: table => new
                {
                    IDMedioPago = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Remesable = table.Column<bool>(type: "bit", nullable: false),
                    CargoCuentaID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    CuentaEmpresaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MediosPago", x => x.IDMedioPago);
                    table.ForeignKey(
                        name: "FK_MediosPago_EmpresasCuentasBancarias",
                        column: x => x.CuentaEmpresaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                    table.ForeignKey(
                        name: "FK_MediosPago_MediosPago_CargoCuenta",
                        column: x => x.CargoCuentaID,
                        principalTable: "MediosPago_CargoCuenta",
                        principalColumn: "IDCuentaCargo");
                });

            migrationBuilder.CreateTable(
                name: "RemesasCompra",
                columns: table => new
                {
                    IDRemesa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Numero = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(datepart(year,getdate()))"),
                    CuentaID = table.Column<int>(type: "int", nullable: false),
                    FechaCargo = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(convert(datetime,convert(varchar(12),getdate(),103)))"),
                    Comentario = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    Contabilizada = table.Column<bool>(type: "bit", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    FechaFirma = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RemesasCompra", x => x.IDRemesa);
                    table.ForeignKey(
                        name: "FK_RemesasCompra_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_RemesasCompra_EmpresasCuentasBancarias",
                        column: x => x.CuentaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                });

            migrationBuilder.CreateTable(
                name: "RemesasVenta",
                columns: table => new
                {
                    IDRemesa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Numero = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(datepart(year,getdate()))"),
                    CuentaID = table.Column<int>(type: "int", nullable: false),
                    FechaCargo = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(convert(datetime,convert(varchar(12),getdate(),103)))"),
                    Comentario = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    Contabilizada = table.Column<bool>(type: "bit", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    FechaFirma = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Remesas", x => x.IDRemesa);
                    table.ForeignKey(
                        name: "FK_RemesasVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_Remesas_EmpresasCuentasBancarias",
                        column: x => x.CuentaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                });

            migrationBuilder.CreateTable(
                name: "TesoreriaApunte",
                columns: table => new
                {
                    IDApunte = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FOperacion = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Tipo = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    FCargo = table.Column<DateTime>(type: "datetime", nullable: true),
                    Concepto = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    VencimientoID = table.Column<int>(type: "int", nullable: true),
                    CuentaEmpresaID = table.Column<int>(type: "int", nullable: false),
                    ProcessID = table.Column<int>(type: "int", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Pagado = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TesoreriaApunte", x => x.IDApunte);
                    table.ForeignKey(
                        name: "FK_TesoreriaApunte_EmpresasCuentasBancarias",
                        column: x => x.CuentaEmpresaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                    table.ForeignKey(
                        name: "FK_TesoreriaApunte_TesoreriaApunteTipo",
                        column: x => x.TipoID,
                        principalTable: "TesoreriaApunteTipo",
                        principalColumn: "IDTipoApunte");
                });

            migrationBuilder.CreateTable(
                name: "TesoreriaSaldosFecha",
                columns: table => new
                {
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    CuentaEmpresaID = table.Column<int>(type: "int", nullable: false),
                    Saldo = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TesoreriaSaldosFecha", x => new { x.Fecha, x.CuentaEmpresaID });
                    table.ForeignKey(
                        name: "FK_TesoreriaSaldosFecha_EmpresasCuentasBancarias",
                        column: x => x.CuentaEmpresaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                });

            migrationBuilder.CreateTable(
                name: "CTA_CentroCoste",
                columns: table => new
                {
                    IDCentroCoste = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: false),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    IsDetail = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CTA_CentroCoste", x => x.IDCentroCoste);
                    table.ForeignKey(
                        name: "FK_CTA_CentroCoste_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_CTA_CentroCoste_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_CTA_CentroCoste_Secciones",
                        columns: x => new { x.SeccionID, x.DepartamentoID },
                        principalTable: "Secciones",
                        principalColumns: new[] { "IDSeccion", "DepartamentoID" });
                });

            migrationBuilder.CreateTable(
                name: "ISO_Cursos",
                columns: table => new
                {
                    IDCurso = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    PlanFormacionID = table.Column<int>(type: "int", nullable: true),
                    Personal = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    Impartido = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Lugar = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    Duracion = table.Column<int>(type: "int", nullable: true),
                    Eficaz = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Cursos", x => x.IDCurso);
                    table.ForeignKey(
                        name: "FK_ISO_Cursos_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_ISO_Cursos_ISO_PlanesFormacion",
                        column: x => x.PlanFormacionID,
                        principalTable: "ISO_PlanesFormacion",
                        principalColumn: "IDPlanFormacion");
                    table.ForeignKey(
                        name: "FK_ISO_Cursos_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Revisiones",
                columns: table => new
                {
                    IDRevision = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FechaRevision = table.Column<DateTime>(type: "datetime", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    Temas = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Revisiones", x => x.IDRevision);
                    table.ForeignKey(
                        name: "FK_ISO_Revisiones_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_ISO_Revisiones_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "Puestos",
                columns: table => new
                {
                    IDPuesto = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    Funciones = table.Column<string>(type: "text", nullable: true),
                    Perfil = table.Column<string>(type: "text", nullable: true),
                    Formacion = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Puestos", x => x.IDPuesto);
                    table.ForeignKey(
                        name: "FK_Puestos_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_Puestos_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "Calendarios_PlanSemanal_Def",
                columns: table => new
                {
                    CalendarioID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Lunes_TurnoID = table.Column<int>(type: "int", nullable: false),
                    Martes_TurnoID = table.Column<int>(type: "int", nullable: false),
                    Miercoles_TurnoID = table.Column<int>(type: "int", nullable: false),
                    Jueves_TurnoID = table.Column<int>(type: "int", nullable: false),
                    Viernes_TurnoID = table.Column<int>(type: "int", nullable: false),
                    Sabado_TurnoID = table.Column<int>(type: "int", nullable: false),
                    Domingo_TurnoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Calendarios_PlanSemanal_Def", x => new { x.CalendarioID, x.EjercicioID });
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos",
                        column: x => x.Lunes_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos1",
                        column: x => x.Martes_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos2",
                        column: x => x.Miercoles_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos3",
                        column: x => x.Jueves_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos4",
                        column: x => x.Viernes_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos5",
                        column: x => x.Sabado_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Aux_Calendarios_PlanSemanal_Turnos6",
                        column: x => x.Domingo_TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                    table.ForeignKey(
                        name: "FK_Calendarios_PlanSemanal_Def_CalendariosEjercicios",
                        columns: x => new { x.CalendarioID, x.EjercicioID },
                        principalTable: "CalendariosEjercicios",
                        principalColumns: new[] { "CalendarioID", "EjercicioID" },
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Calendarios_Turnos_Def",
                columns: table => new
                {
                    CalendarioID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    TurnoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Calendarios_Festivos_Def", x => new { x.CalendarioID, x.EjercicioID, x.FechaInicio });
                    table.ForeignKey(
                        name: "FK_Calendarios_Turnos_Def_CalendariosEjercicios",
                        columns: x => new { x.CalendarioID, x.EjercicioID },
                        principalTable: "CalendariosEjercicios",
                        principalColumns: new[] { "CalendarioID", "EjercicioID" },
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CalendariosDias",
                columns: table => new
                {
                    CalendarioID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    TurnoID = table.Column<int>(type: "int", nullable: false),
                    Dia_Mes = table.Column<int>(type: "int", nullable: true, computedColumnSql: "(datepart(day,[Fecha]))", stored: false),
                    Dia_Anno = table.Column<int>(type: "int", nullable: true, computedColumnSql: "(datepart(dayofyear,[Fecha]))", stored: false),
                    Mes = table.Column<int>(type: "int", nullable: true, computedColumnSql: "(datepart(month,[Fecha]))", stored: false),
                    Anno = table.Column<int>(type: "int", nullable: true, computedColumnSql: "(datepart(year,[Fecha]))", stored: false),
                    Descripcion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CalendariosDias", x => new { x.CalendarioID, x.EjercicioID, x.Fecha });
                    table.ForeignKey(
                        name: "FK_CalendariosDias_CalendariosEjercicios",
                        columns: x => new { x.CalendarioID, x.EjercicioID },
                        principalTable: "CalendariosEjercicios",
                        principalColumns: new[] { "CalendarioID", "EjercicioID" },
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CalendariosDias_Turnos",
                        column: x => x.TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                });

            migrationBuilder.CreateTable(
                name: "DMN_QueryForm",
                columns: table => new
                {
                    IDQueryForm = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: false, defaultValueSql: "('')", comment: "Mantenido por Soltic > Formato: Prefijo_DDDD, del 3000 en adelante reservados para el usuario"),
                    FormularioID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DMN_QueryForm", x => x.IDQueryForm);
                    table.ForeignKey(
                        name: "FK_DMN_QueryForm_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                });

            migrationBuilder.CreateTable(
                name: "GS_Entidades",
                columns: table => new
                {
                    IDEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TableName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    KeyField = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false),
                    Gestion_CDBO = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_Entidades", x => x.IDEntidad);
                    table.ForeignKey(
                        name: "FK_GS_Entidades_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                });

            migrationBuilder.CreateTable(
                name: "PartesFormularios",
                columns: table => new
                {
                    IDParteFormulario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartesFormularios", x => x.IDParteFormulario);
                    table.ForeignKey(
                        name: "FK_PartesFormularios_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                });

            migrationBuilder.CreateTable(
                name: "PartesTipos",
                columns: table => new
                {
                    IDParteTipo = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TipoEdicionParte = table.Column<int>(type: "int", nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartesTipo", x => x.IDParteTipo);
                    table.ForeignKey(
                        name: "FK_PartesTipos_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_PartesTipos_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "GD_Documentos",
                columns: table => new
                {
                    IDDocumento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentoID = table.Column<int>(type: "int", nullable: true, comment: "Para poder establecer relaciones entre Documentos"),
                    TipoID = table.Column<int>(type: "int", nullable: true),
                    Fichero = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false, defaultValueSql: "('#')", comment: "Nombre Interno del fichero: 9 digitos +  '.' + 5 de extensión. Se autogenera por trigger"),
                    FormatoID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OriginalFileName = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GD_Documentos", x => x.IDDocumento);
                    table.ForeignKey(
                        name: "FK_GD_Documentos_GD_Documentos",
                        column: x => x.DocumentoID,
                        principalTable: "GD_Documentos",
                        principalColumn: "IDDocumento");
                    table.ForeignKey(
                        name: "FK_GD_Documentos_GD_TipoArchivos",
                        column: x => x.FormatoID,
                        principalTable: "GD_FormatosArchivos",
                        principalColumn: "IDFormato");
                    table.ForeignKey(
                        name: "FK_GD_Documentos_GD_Tipos",
                        column: x => x.TipoID,
                        principalTable: "GD_Tipos",
                        principalColumn: "IDTipo");
                });

            migrationBuilder.CreateTable(
                name: "CDBO_ParametrosAnaliticos",
                columns: table => new
                {
                    IDParametro = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Obligatorio = table.Column<bool>(type: "bit", nullable: false),
                    UsrTypeID = table.Column<int>(type: "int", nullable: false),
                    ComboListID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CDBO_ParametrosAnaliticos", x => x.IDParametro);
                    table.ForeignKey(
                        name: "FK_CDBO_ParametrosAnaliticos_GS_UsrTypes",
                        column: x => x.UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Segmentos",
                columns: table => new
                {
                    IDSegmento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Contacto = table.Column<bool>(type: "bit", nullable: false),
                    UsrTypeID = table.Column<int>(type: "int", nullable: false),
                    ComboListID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Segmentos", x => x.IDSegmento);
                    table.ForeignKey(
                        name: "FK_CRM_Segmentos_GS_UsrTypes",
                        column: x => x.UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                });

            migrationBuilder.CreateTable(
                name: "DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamico = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    UsrTypeID = table.Column<int>(type: "int", nullable: false),
                    ComboListID = table.Column<int>(type: "int", nullable: true),
                    DefaultValue = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DatosDinamicos", x => x.IDDatoDinamico);
                    table.ForeignKey(
                        name: "FK_DatosDinamicos_GS_UsrTypes",
                        column: x => x.UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                });

            migrationBuilder.CreateTable(
                name: "GS_UsrComboLists",
                columns: table => new
                {
                    IDComboList = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    TableName = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false, defaultValueSql: "('GS_UsrComboListsItems')"),
                    UsrTypeID = table.Column<int>(type: "int", nullable: false),
                    Items_UsrTypeID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_UsrComboLists", x => x.IDComboList);
                    table.ForeignKey(
                        name: "FK_GS_UsrComboListsItem_GS_UsrTypes",
                        column: x => x.Items_UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                    table.ForeignKey(
                        name: "FK_GS_UsrComboLists_GS_UsrTypes",
                        column: x => x.UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                });

            migrationBuilder.CreateTable(
                name: "LAB_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamico = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    UsrTypeID = table.Column<int>(type: "int", nullable: false),
                    ComboListID = table.Column<int>(type: "int", nullable: true),
                    DefaultValue = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_DatosDinamicos", x => x.IDDatoDinamico);
                    table.ForeignKey(
                        name: "FK_LAB_DatosDinamicos_GS_UsrTypes",
                        column: x => x.UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                });

            migrationBuilder.CreateTable(
                name: "LAB_NormativasParametros",
                columns: table => new
                {
                    IDNormativa = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Documento = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_NormativasParametros", x => x.IDNormativa);
                    table.ForeignKey(
                        name: "FK_LAB_NormativasParametros_ProductosCompuestos_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ProductosCompuestos_CDBO",
                        principalColumn: "IDCDBO",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PermisosAcciones",
                columns: table => new
                {
                    IDPermisoAccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PermisoCategoriaID = table.Column<int>(type: "int", nullable: false),
                    Texto = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false),
                    Accion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Enabled = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Orden = table.Column<int>(type: "int", nullable: false),
                    ClassFormIDP1 = table.Column<int>(type: "int", nullable: true),
                    ClassFormIDP2 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PermisosAcciones", x => x.IDPermisoAccion);
                    table.ForeignKey(
                        name: "FK_PermisosAcciones_ClassFormIDP1_Formularios",
                        column: x => x.ClassFormIDP1,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_PermisosAcciones_ClassFormIDP2_Formularios",
                        column: x => x.ClassFormIDP2,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_PermisosAcciones_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_PermisosAcciones_PermisosCategorias",
                        column: x => x.PermisoCategoriaID,
                        principalTable: "PermisosCategorias",
                        principalColumn: "IDPermisoCategoria",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Localidades",
                columns: table => new
                {
                    IDLocalidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProvinciaID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ComarcaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Localidades", x => x.IDLocalidad);
                    table.ForeignKey(
                        name: "FK_Localidades_Comarcas",
                        column: x => x.ComarcaID,
                        principalTable: "Comarcas",
                        principalColumn: "IDComarca");
                    table.ForeignKey(
                        name: "FK_Localidades_Provincias",
                        column: x => x.ProvinciaID,
                        principalTable: "Provincias",
                        principalColumn: "IDProvincia",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ZonasProvincias",
                columns: table => new
                {
                    ZonaID = table.Column<int>(type: "int", nullable: false),
                    ProvinciaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ZonasProvincias", x => new { x.ZonaID, x.ProvinciaID });
                    table.ForeignKey(
                        name: "FK_ZonasProvincias_Provincias",
                        column: x => x.ProvinciaID,
                        principalTable: "Provincias",
                        principalColumn: "IDProvincia",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ZonasProvincias_Zonas",
                        column: x => x.ZonaID,
                        principalTable: "Zonas",
                        principalColumn: "IDZona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ReportsLaunchers",
                columns: table => new
                {
                    IDReportLauncher = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportLauncherID = table.Column<int>(type: "int", nullable: true),
                    ReportID = table.Column<int>(type: "int", nullable: true),
                    OwnerFormName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    ComponentName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReportComponentName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportsLaunchers", x => x.IDReportLauncher);
                    table.ForeignKey(
                        name: "FK_ReportsLaunchers_Reports",
                        column: x => x.ReportID,
                        principalTable: "Reports",
                        principalColumn: "IDReport",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sync_Synchronizations",
                columns: table => new
                {
                    IDSynchronization = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConnectionID = table.Column<int>(type: "int", nullable: false),
                    Notas = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_Synchronizations", x => x.IDSynchronization);
                    table.ForeignKey(
                        name: "FK_sync_Synchronizations_sync_Connections",
                        column: x => x.ConnectionID,
                        principalTable: "sync_Connections",
                        principalColumn: "IDConnection");
                });

            migrationBuilder.CreateTable(
                name: "TSK_TareasTipo_Mantenimiento",
                columns: table => new
                {
                    TareaID = table.Column<int>(type: "int", nullable: false, comment: "FK a la PK de TSK_Tareas"),
                    OrigenID = table.Column<int>(type: "int", nullable: true, comment: "Llamada, email, reuni¾n cliente, interno"),
                    TipoID = table.Column<int>(type: "int", nullable: true, comment: "Error, Mejora, Mejora interna, etc."),
                    OFTipoID = table.Column<int>(type: "int", nullable: true),
                    OFID = table.Column<int>(type: "int", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TSK_TareasTipo_Mantenimiento", x => x.TareaID);
                    table.ForeignKey(
                        name: "FK_TSK_TareasTipo_Mantenimiento_TSK_Tareas",
                        column: x => x.TareaID,
                        principalTable: "TSK_Tareas",
                        principalColumn: "IDTarea");
                });

            migrationBuilder.CreateTable(
                name: "AtributosValoresFotosLog",
                columns: table => new
                {
                    IDLog = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ValorAtributoID = table.Column<int>(type: "int", nullable: false),
                    Operacion = table.Column<int>(type: "int", nullable: false),
                    Procesado = table.Column<bool>(type: "bit", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AtributosValoresFotosLog", x => x.IDLog);
                    table.ForeignKey(
                        name: "FK_AtributosValoresFotosLog_ValoresProductos",
                        column: x => x.ValorAtributoID,
                        principalTable: "ValoresProductos",
                        principalColumn: "IDValorProducto");
                });

            migrationBuilder.CreateTable(
                name: "Cualificaciones",
                columns: table => new
                {
                    IDCualificacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AtributoID = table.Column<int>(type: "int", nullable: false, comment: "Referencia a la tabla AtributosProducto"),
                    ValorID = table.Column<int>(type: "int", nullable: false, comment: "Referencia a la tabla ValoresProductos"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cualificaciones", x => x.IDCualificacion);
                    table.ForeignKey(
                        name: "FK_Cualificaciones_CualificacionesAtributos",
                        column: x => x.AtributoID,
                        principalTable: "CualificacionesAtributos",
                        principalColumn: "AtributoID");
                    table.ForeignKey(
                        name: "FK_Cualificaciones_ValoresProductos",
                        column: x => x.ValorID,
                        principalTable: "ValoresProductos",
                        principalColumn: "IDValorProducto");
                });

            migrationBuilder.CreateTable(
                name: "Operaciones",
                columns: table => new
                {
                    IDOperacion = table.Column<int>(type: "int", nullable: false, comment: "")
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AtributoID = table.Column<int>(type: "int", nullable: false, comment: "Referencia a la tabla AtributosProducto"),
                    ValorID = table.Column<int>(type: "int", nullable: false, comment: "Referencia a la tabla ValoresProductos"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Operaciones", x => x.IDOperacion);
                    table.ForeignKey(
                        name: "FK_Operaciones_OperacionesAtributos",
                        column: x => x.AtributoID,
                        principalTable: "OperacionesAtributos",
                        principalColumn: "AtributoID");
                    table.ForeignKey(
                        name: "FK_Operaciones_ValoresProductos",
                        column: x => x.ValorID,
                        principalTable: "ValoresProductos",
                        principalColumn: "IDValorProducto");
                });

            migrationBuilder.CreateTable(
                name: "FacturacionPlanificacion",
                columns: table => new
                {
                    IDPlanificacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Numero = table.Column<string>(type: "varchar(28)", unicode: false, maxLength: 28, nullable: true),
                    FechaEmision = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Importe = table.Column<double>(type: "float", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    Concepto = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    FechaPrevista = table.Column<DateTime>(type: "datetime", nullable: false),
                    DocumentoOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    DocumentoDestinoID = table.Column<int>(type: "int", nullable: true),
                    CabeceraDestinoID = table.Column<int>(type: "int", nullable: true),
                    DetalleDestinoID = table.Column<int>(type: "int", nullable: true),
                    FechaDestino = table.Column<DateTime>(type: "datetime", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: false),
                    CuentaContable = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturacionPlanificacion", x => x.IDPlanificacion);
                    table.ForeignKey(
                        name: "FK_FacturacionPlanificacion_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_FacturacionPlanificacion_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                });

            migrationBuilder.CreateTable(
                name: "Asientos_Diario",
                columns: table => new
                {
                    Clave = table.Column<int>(type: "int", nullable: false),
                    Apunte = table.Column<int>(type: "int", nullable: false),
                    Cuenta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Concepto = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DH = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    Importe = table.Column<double>(type: "float", nullable: false),
                    Tipo_IVA = table.Column<double>(type: "float", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    NumeroApunte = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asientos_Diario", x => new { x.Clave, x.Apunte });
                    table.ForeignKey(
                        name: "FK_Asientos_Diario_Asientos",
                        column: x => x.Clave,
                        principalTable: "Asientos",
                        principalColumn: "Clave",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Asientos_Diario_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                });

            migrationBuilder.CreateTable(
                name: "Proveedores",
                columns: table => new
                {
                    IDPersona = table.Column<int>(type: "int", nullable: false, comment: "1: Proveedores; 0: Agencias de Transporte")
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: true),
                    DescuentoID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    MedioPagoID = table.Column<int>(type: "int", nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    RappelID = table.Column<int>(type: "int", nullable: true),
                    TipoTransporteID = table.Column<int>(type: "int", nullable: true),
                    CIF_NIF = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    Telefono = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PaginaWeb = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    Estado = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    CodigoConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Efectos = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DireccionFraID = table.Column<int>(type: "int", nullable: true),
                    ExentoIVA = table.Column<bool>(type: "bit", nullable: false),
                    CuentaBancariaID = table.Column<int>(type: "int", nullable: true, comment: "Cuenta bancaria por defecto para documentos"),
                    CuentaBancariaEmpresaID = table.Column<int>(type: "int", nullable: true),
                    DtoComercial = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NombreComercial = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true, comment: "No deja introducir un Update en Cascada"),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    Facturae = table.Column<bool>(type: "bit", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    TAI_Services = table.Column<bool>(type: "bit", nullable: false),
                    TAI_Code = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    TAI_EmailAviso = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    M347_Excluir = table.Column<bool>(type: "bit", nullable: false),
                    TAI_Telefono1Aviso = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    TAI_Telefono2Aviso = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true, comment: "Este normalmente será el móvil para SMS"),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NotasInt_Aviso = table.Column<short>(type: "smallint", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proveedores", x => x.IDPersona);
                    table.ForeignKey(
                        name: "FK_Proveedores_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_Proveedores_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_Proveedores_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_Proveedores_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_Proveedores_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_Proveedores_MediosPago",
                        column: x => x.MedioPagoID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_Proveedores_Proveedores_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "Proveedores_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_Proveedores_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                    table.ForeignKey(
                        name: "Fk_Prov_Tipo",
                        column: x => x.TipoID,
                        principalTable: "ProveedoresTipos",
                        principalColumn: "IDTipo",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_RevisionesAcuerdos",
                columns: table => new
                {
                    IDRevisionAcuerdo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RevisionID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Aspecto = table.Column<string>(type: "text", nullable: true),
                    Mejora = table.Column<string>(type: "text", nullable: true),
                    IndPropio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IndSector = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IndCompetencia = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FechaPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaCumplimiento = table.Column<DateTime>(type: "datetime", nullable: true),
                    Eficaz = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_RevisionesAcuerdos", x => x.IDRevisionAcuerdo);
                    table.ForeignKey(
                        name: "FK_ISO_RevisionesAcuerdos_ISO_Revisiones",
                        column: x => x.RevisionID,
                        principalTable: "ISO_Revisiones",
                        principalColumn: "IDRevision",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Maquinas",
                columns: table => new
                {
                    IDMaquina = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    GrupoID = table.Column<int>(type: "int", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    PuestoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: true),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaBaja = table.Column<DateTime>(type: "datetime", nullable: true),
                    Marca = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Modelo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NSerie = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Fabricante = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AnnoFabricacion = table.Column<int>(type: "int", nullable: true),
                    Caracteristicas = table.Column<string>(type: "text", nullable: true),
                    Mantenedor = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Potencia = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Voltaje = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsVehiculo = table.Column<bool>(type: "bit", nullable: false),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    TiempoPreparacion = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Maquinas", x => x.IDMaquina);
                    table.ForeignKey(
                        name: "FK_Maquinas_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_Maquinas_MaquinasEstados",
                        column: x => x.EstadoID,
                        principalTable: "MaquinasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Maquinas_MaquinasGrupos",
                        column: x => x.GrupoID,
                        principalTable: "MaquinasGrupos",
                        principalColumn: "IDGrupo");
                    table.ForeignKey(
                        name: "FK_Maquinas_Puestos",
                        column: x => x.PuestoID,
                        principalTable: "Puestos",
                        principalColumn: "IDPuesto");
                    table.ForeignKey(
                        name: "FK_Maquinas_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "AE_Entidades",
                columns: table => new
                {
                    EntidadID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AE_Entidades", x => x.EntidadID);
                    table.ForeignKey(
                        name: "FK_AE_Entidades_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "CDBP_Entidades",
                columns: table => new
                {
                    ProcessID = table.Column<int>(type: "int", nullable: false),
                    EntidadID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CDBP_Entidades", x => new { x.ProcessID, x.EntidadID });
                    table.ForeignKey(
                        name: "FK_CDBP_Entidades_CDBP_Processes",
                        column: x => x.ProcessID,
                        principalTable: "CDBP_Processes",
                        principalColumn: "IDProcess",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CDBP_Entidades_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DatosDinamicos_GS_Entidades",
                columns: table => new
                {
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    CategoryID = table.Column<int>(type: "int", nullable: false, comment: "Determina la CategorÝa en la que aparecerß la Entidad (0 = Documentos de Gesti¾n, 1 = Productos, 2 = Clientes)"),
                    Enabled = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DatosDinamicos_GS_Entidades", x => x.EntidadID);
                    table.ForeignKey(
                        name: "FK_DatosDinamicos_GS_Entidades_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "Direcciones_EntidadesOrigen",
                columns: table => new
                {
                    IDOrigen = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntidadID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Direcciones_EntidadesOrigen", x => x.IDOrigen);
                    table.ForeignKey(
                        name: "FK_Direcciones_EntidadesOrigen_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestion",
                columns: table => new
                {
                    IDDocumentoGestion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: true),
                    ModuloGestionID = table.Column<int>(type: "int", nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: true),
                    TipoEdicionCabecera = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionDestinatarioID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    TableName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    WhereDestinatario = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    WhereCabecera = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OrdenProceso = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    Allow_Copy = table.Column<bool>(type: "bit", nullable: true),
                    Allow_PedidoAgencia = table.Column<bool>(type: "bit", nullable: false),
                    CalculoPortes = table.Column<bool>(type: "bit", nullable: false),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "1: Recalculamos Precio al cambiar Cantidad; 0: No recalculamos"),
                    Allow_InProyecto = table.Column<bool>(type: "bit", nullable: false),
                    EntidadID = table.Column<int>(type: "int", nullable: false, comment: "Referencia a la tabla GS_Entidades")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestion", x => x.IDDocumentoGestion);
                    table.ForeignKey(
                        name: "FK_DocumentosGestion_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                    table.ForeignKey(
                        name: "FK_DocumentosGestion_DocumentosGestionDestinatarios",
                        column: x => x.DocumentoGestionDestinatarioID,
                        principalTable: "DocumentosGestionDestinatarios",
                        principalColumn: "IDDocumentoGestionDestinatario");
                    table.ForeignKey(
                        name: "FK_DocumentosGestion_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_DocumentosGestion_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                    table.ForeignKey(
                        name: "FK_DocumentosGestion_ModulosGestion",
                        column: x => x.ModuloGestionID,
                        principalTable: "ModulosGestion",
                        principalColumn: "IDModuloGestion");
                });

            migrationBuilder.CreateTable(
                name: "GD_Entidades",
                columns: table => new
                {
                    IDEntidad = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GD_Entidades", x => x.IDEntidad);
                    table.ForeignKey(
                        name: "FK_GD_Entidades_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_GD_Entidades_GS_Entidades",
                        column: x => x.IDEntidad,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "GS_GridDefinitions",
                columns: table => new
                {
                    IDGridDefinition = table.Column<int>(type: "int", nullable: false, comment: "ID autonumerico debido a que se usará el código para localizar un registro (UIX)")
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GridDefinitionID = table.Column<int>(type: "int", nullable: true),
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: false, defaultValueSql: "('')", comment: "Formato: PrefijoEntidad_DDDD, del 3000 en adelante reservados para el usuario"),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_GridDefinitions", x => x.IDGridDefinition);
                    table.ForeignKey(
                        name: "FK_GS_GridDefinitions_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GS_GridDefinitions_GS_GridDefinitions",
                        column: x => x.GridDefinitionID,
                        principalTable: "GS_GridDefinitions",
                        principalColumn: "IDGridDefinition");
                });

            migrationBuilder.CreateTable(
                name: "GS_GridsViews",
                columns: table => new
                {
                    IDGridView = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FormularioID = table.Column<int>(type: "int", nullable: false),
                    GridViewName = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    EntidadID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_GridsViews", x => x.IDGridView);
                    table.ForeignKey(
                        name: "FK_GS_GridsViews_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario");
                    table.ForeignKey(
                        name: "FK_GS_GridsViews_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "GS_RecordsKeys",
                columns: table => new
                {
                    IDRecord = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    UserID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    FechaHora = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_RecordsKeys", x => x.IDRecord);
                    table.ForeignKey(
                        name: "FK_GS_RecordsKeys_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "RP_Entidades",
                columns: table => new
                {
                    ReportID = table.Column<int>(type: "int", nullable: false),
                    EntidadID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RP_Entidades", x => new { x.ReportID, x.EntidadID });
                    table.ForeignKey(
                        name: "FK_RP_Entidades_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RP_Entidades_Reports",
                        column: x => x.ReportID,
                        principalTable: "Reports",
                        principalColumn: "IDReport",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sync_Entidades_Tipos",
                columns: table => new
                {
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    TipoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_Entidades_Tipos", x => new { x.EntidadID, x.TipoID });
                    table.ForeignKey(
                        name: "FK_sync_Entidades_Tipos_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                    table.ForeignKey(
                        name: "FK_sync_Entidades_Tipos_sync_Tipos",
                        column: x => x.TipoID,
                        principalTable: "sync_Tipos",
                        principalColumn: "IDTipo");
                });

            migrationBuilder.CreateTable(
                name: "sync_SynchronizedRecords",
                columns: table => new
                {
                    IDSynchronizedRecord = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ConnectionID = table.Column<int>(type: "int", nullable: false),
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    Entidad_KeyValue = table.Column<int>(type: "int", nullable: false),
                    IDRemote_KeyValue = table.Column<int>(type: "int", nullable: false),
                    FSynch = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_SynchronizedRecords", x => x.IDSynchronizedRecord);
                    table.ForeignKey(
                        name: "FK_sync_SynchronizedRecords_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GS_Entidades",
                        principalColumn: "IDEntidad");
                    table.ForeignKey(
                        name: "FK_sync_SynchronizedRecords_sync_Connections",
                        column: x => x.ConnectionID,
                        principalTable: "sync_Connections",
                        principalColumn: "IDConnection");
                });

            migrationBuilder.CreateTable(
                name: "PartesTiposOFTipos",
                columns: table => new
                {
                    ParteTipoID = table.Column<int>(type: "int", nullable: false),
                    OFTipoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartesTiposOFTipos", x => new { x.ParteTipoID, x.OFTipoID });
                    table.ForeignKey(
                        name: "FK_PartesTiposOFTipos_OrdenesFabricacionTipos",
                        column: x => x.OFTipoID,
                        principalTable: "OrdenesFabricacionTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_PartesTiposOFTipos_PartesTipos",
                        column: x => x.ParteTipoID,
                        principalTable: "PartesTipos",
                        principalColumn: "IDParteTipo");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CamposCriterios",
                columns: table => new
                {
                    IDCampoCriterio = table.Column<int>(type: "int", nullable: false, comment: "ID 1-100 para Fijos; Segmentos a partir de 100"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Funcion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TableName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SegmentoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CamposCriterios", x => x.IDCampoCriterio);
                    table.ForeignKey(
                        name: "FK_CRM_CamposCriterios_CRM_Segmentos",
                        column: x => x.SegmentoID,
                        principalTable: "CRM_Segmentos",
                        principalColumn: "IDSegmento",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "GS_UsrComboListsItems",
                columns: table => new
                {
                    IDComboListItem = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComboListID = table.Column<int>(type: "int", nullable: false),
                    ItemIndex = table.Column<int>(type: "int", nullable: false),
                    ItemValue = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_UsrComboListsItems", x => x.IDComboListItem);
                    table.ForeignKey(
                        name: "FK_GS_UsrComboListsItems_GS_UsrComboLists",
                        column: x => x.ComboListID,
                        principalTable: "GS_UsrComboLists",
                        principalColumn: "IDComboList",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LAB_DatosDinamicos_LineasDef",
                columns: table => new
                {
                    IDDatoDinamicoLineaDef = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DatoDinamicoID = table.Column<int>(type: "int", nullable: false),
                    LAB_TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    LAB_TipoLineaCategoryID = table.Column<int>(type: "int", nullable: false),
                    DefaultValue = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_DatosDinamicos_LineasDef", x => x.IDDatoDinamicoLineaDef);
                    table.ForeignKey(
                        name: "FK_LAB_DatosDinamicos_LineasDef_LAB_DatosDinamicos",
                        column: x => x.DatoDinamicoID,
                        principalTable: "LAB_DatosDinamicos",
                        principalColumn: "IDDatoDinamico");
                    table.ForeignKey(
                        name: "FK_LAB_DatosDinamicos_LineasDef_TiposLinea",
                        column: x => x.LAB_TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "ReportsCriterias",
                columns: table => new
                {
                    IDReportCriteria = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportLauncherID = table.Column<int>(type: "int", nullable: false),
                    CriteriaOwnerFormName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    CriteriaComponentName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CriteriaComponentPropertyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ReportComponentFormName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    ReportComponentName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DataPipelineName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FieldName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Operator = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Mandatory = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportsCriterias", x => x.IDReportCriteria);
                    table.ForeignKey(
                        name: "FK_ReportsCriterias_ReportsLaunchers",
                        column: x => x.ReportLauncherID,
                        principalTable: "ReportsLaunchers",
                        principalColumn: "IDReportLauncher",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Empleados",
                columns: table => new
                {
                    IDEmpleado = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NIF = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Apellido1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Apellido2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FechaNacimiento = table.Column<DateTime>(type: "datetime", nullable: true),
                    CualificacionID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoPuestoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoDepartamentoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoContratoTipoID = table.Column<int>(type: "int", nullable: true),
                    FinContrato = table.Column<DateTime>(type: "datetime", nullable: true),
                    Fotografia = table.Column<byte[]>(type: "image", nullable: true),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumeroSS = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true),
                    EmpleadoEstadoCivilID = table.Column<int>(type: "int", nullable: true),
                    NumeroHijos = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(0)"),
                    Discapacidad = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    DiscapacidadPorcentaje = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(0)"),
                    EMail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Alias = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    usr = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    pw = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    Activo = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    FechaBaja = table.Column<DateTime>(type: "datetime", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    CarneConducir = table.Column<bool>(type: "bit", nullable: false),
                    TipoCarneConducirID = table.Column<int>(type: "int", nullable: true),
                    Empresas = table.Column<string>(type: "text", nullable: true),
                    Puestos = table.Column<string>(type: "text", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    CotizacionPerCent = table.Column<int>(type: "int", nullable: false),
                    PCosteHora = table.Column<decimal>(type: "money", nullable: false),
                    PHoraExtra = table.Column<decimal>(type: "money", nullable: false),
                    PHoraExtraFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaLaborable = table.Column<decimal>(type: "money", nullable: false),
                    PrimaFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaCompensacionFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaMensual = table.Column<decimal>(type: "money", nullable: false),
                    PHoraReten = table.Column<decimal>(type: "money", nullable: false),
                    ServicioReten = table.Column<decimal>(type: "money", nullable: false),
                    CalendarioID = table.Column<int>(type: "int", nullable: true),
                    LiquidacionPrimas = table.Column<bool>(type: "bit", nullable: false),
                    AccesoPartesOtrosEmpleados = table.Column<bool>(type: "bit", nullable: false),
                    LiquidacionPrimas_Observaciones = table.Column<string>(type: "text", nullable: true),
                    NumeroTarjetaID = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    Fichajes = table.Column<bool>(type: "bit", nullable: false, comment: "Determina si el Empleado realiza o no Fichajes, se tiene en cuenta en el Visor de Fichajes a la hora de mostrar los Fichajes no realizados"),
                    IsReadOnly = table.Column<bool>(type: "bit", nullable: false),
                    AutoEdit = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    NHorasSemanaContrato = table.Column<double>(type: "float", nullable: false),
                    FI_AllowUpdateTime = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    AllowAllComerciales = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Empleados", x => x.IDEmpleado);
                    table.ForeignKey(
                        name: "FK_Empleados_Calendarios",
                        column: x => x.CalendarioID,
                        principalTable: "Calendarios",
                        principalColumn: "IDCalendario");
                    table.ForeignKey(
                        name: "FK_Empleados_CarneConducirTipos",
                        column: x => x.TipoCarneConducirID,
                        principalTable: "CarneConducirTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_Empleados_Cualificaciones",
                        column: x => x.CualificacionID,
                        principalTable: "Cualificaciones",
                        principalColumn: "IDCualificacion");
                    table.ForeignKey(
                        name: "FK_Empleados_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_Empleados_EmpleadosContratosTipos",
                        column: x => x.EmpleadoContratoTipoID,
                        principalTable: "EmpleadosContratosTipos",
                        principalColumn: "IDEmpleadoContratoTipo");
                    table.ForeignKey(
                        name: "FK_Empleados_EmpleadosDepartamentos",
                        column: x => x.EmpleadoDepartamentoID,
                        principalTable: "EmpleadosDepartamentos",
                        principalColumn: "IDEmpleadoDepartamento");
                    table.ForeignKey(
                        name: "FK_Empleados_EmpleadosEstadosCiviles",
                        column: x => x.EmpleadoEstadoCivilID,
                        principalTable: "EmpleadosEstadosCiviles",
                        principalColumn: "IDEmpleadoEstadoCivil");
                    table.ForeignKey(
                        name: "FK_Empleados_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "Fases",
                columns: table => new
                {
                    IDFase = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RutaID = table.Column<int>(type: "int", nullable: false),
                    Orden = table.Column<int>(type: "int", nullable: false),
                    FaseID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OperacionID = table.Column<int>(type: "int", nullable: false),
                    TotalTiempoUnitario = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoPreparacion = table.Column<double>(type: "float", nullable: false),
                    Solapamiento = table.Column<bool>(type: "bit", nullable: false),
                    FactorSolapamiento = table.Column<decimal>(type: "money", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    TotalPrecioCoste = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoProductividad = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fases", x => x.IDFase);
                    table.ForeignKey(
                        name: "FK_Fases_Fases",
                        column: x => x.FaseID,
                        principalTable: "Fases",
                        principalColumn: "IDFase");
                    table.ForeignKey(
                        name: "FK_Fases_Operaciones",
                        column: x => x.OperacionID,
                        principalTable: "Operaciones",
                        principalColumn: "IDOperacion");
                    table.ForeignKey(
                        name: "FK_Fases_RutasProduccion",
                        column: x => x.RutaID,
                        principalTable: "RutasProduccion",
                        principalColumn: "IDRuta");
                });

            migrationBuilder.CreateTable(
                name: "Fichajes_Ordenes_Operaciones_Lista",
                columns: table => new
                {
                    IDOrden_Operacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TipoID = table.Column<int>(type: "int", nullable: false, comment: "Tipo de la Orden (Indirecta, Fabricación, Seriada)"),
                    OfID = table.Column<int>(type: "int", nullable: false, comment: "ID de la Orden indirecta"),
                    OperacionID = table.Column<int>(type: "int", nullable: false, comment: "ID de la Operación"),
                    Texto_Observaciones = table.Column<string>(type: "varchar(400)", unicode: false, maxLength: 400, nullable: false),
                    Excluyente = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "Determina si al insertar una tarea de este tipo NO permitimos la inserción de otra tarea"),
                    Cierre_Automatico = table.Column<bool>(type: "bit", nullable: false, comment: "Determina como se comporta el sistema a la hora de realizar una Salida o Fin de Turno y tener la tarea de este tipo abierta")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fichajes_Ordenes_Operaciones_Lista", x => x.IDOrden_Operacion);
                    table.ForeignKey(
                        name: "FK_Fichajes_Ordenes_Operaciones_Lista_Operaciones",
                        column: x => x.OperacionID,
                        principalTable: "Operaciones",
                        principalColumn: "IDOperacion",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AgenciasTransporteTarifas",
                columns: table => new
                {
                    IDTarifaAgencia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AgenciaID = table.Column<int>(type: "int", nullable: false),
                    TAI_Code_Servicio = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    TAI_Code_Producto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgenciasTransporte", x => x.IDTarifaAgencia);
                    table.UniqueConstraint("AK_AgenciasTransporteTarifas_IDTarifaAgencia_AgenciaID", x => new { x.IDTarifaAgencia, x.AgenciaID });
                    table.ForeignKey(
                        name: "FK_AgenciasTransporteTarifas_Proveedores",
                        column: x => x.AgenciaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CentrosTrabajo",
                columns: table => new
                {
                    IDCentro = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CualificacionID = table.Column<int>(type: "int", nullable: false),
                    CentroExterno = table.Column<bool>(type: "bit", nullable: false),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Capacidad = table.Column<double>(type: "float", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    PHoraExtra = table.Column<decimal>(type: "money", nullable: false),
                    PHoraExtraFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaLaborable = table.Column<decimal>(type: "money", nullable: false),
                    PrimaFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaCompensacionFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaMensual = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CentrosTrabajo", x => x.IDCentro);
                    table.ForeignKey(
                        name: "FK_CentrosTrabajo_Cualificaciones",
                        column: x => x.CualificacionID,
                        principalTable: "Cualificaciones",
                        principalColumn: "IDCualificacion");
                    table.ForeignKey(
                        name: "FK_CentrosTrabajo_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                });

            migrationBuilder.CreateTable(
                name: "ISO_ProveedoresCriterios",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    CriterioID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_ProveedoresCriterios", x => new { x.PersonaID, x.CriterioID });
                    table.ForeignKey(
                        name: "FK_ISO_ProveedoresCriterios_ISO_CriteriosSeleccion",
                        column: x => x.CriterioID,
                        principalTable: "ISO_CriteriosSeleccion",
                        principalColumn: "IDCriterio");
                    table.ForeignKey(
                        name: "FK_ISO_ProveedoresCriterios_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Proveedores_ProveedoresGrupos",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    GrupoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK_Proveedores_ProveedoresGrupos_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Proveedores_ProveedoresGrupos_ProveedoresGrupos",
                        column: x => x.GrupoID,
                        principalTable: "ProveedoresGrupos",
                        principalColumn: "IDGrupo");
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresContactos",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Apellidos = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Telefono1 = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    Telefono2 = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Cargo = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Departamento = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresContactos", x => x.id);
                    table.ForeignKey(
                        name: "FK_ProveedoresContactos_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresCuentasBancarias",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    NumCta = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SWIFT1 = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    SWIFT2 = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    SWIFT3 = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    SWIFT4 = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    IBAN = table.Column<bool>(type: "bit", nullable: true),
                    IBANCodigo = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    IBANCuenta = table.Column<string>(type: "varchar(34)", unicode: false, maxLength: 34, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresCuentasBancarias", x => x.id);
                    table.ForeignKey(
                        name: "FK_ProveedoresCuentasBancarias_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresDiasPago",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    DiaInicio = table.Column<int>(type: "int", nullable: false),
                    DiaFin = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresDiasPago", x => new { x.PersonaID, x.DiaInicio });
                    table.ForeignKey(
                        name: "FK_ProveedoresDiasPago_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresDirecciones",
                columns: table => new
                {
                    IDPersonaDireccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    LocalidadID = table.Column<int>(type: "int", nullable: false),
                    ProvinciaID = table.Column<int>(type: "int", nullable: false),
                    PaisID = table.Column<int>(type: "int", nullable: false),
                    TipoDireccionID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    Direccion = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    CodigoPostal = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresDirecciones", x => x.IDPersonaDireccion);
                    table.ForeignKey(
                        name: "FK_ProveedoresDirecciones_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresPeriodosExentosPago",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresPeriodosExentosPago", x => new { x.PersonaID, x.FechaInicio });
                    table.ForeignKey(
                        name: "FK_ProveedoresPeriodosExentosPago_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresTelefonos",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Telefono = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresTelefonos", x => x.id);
                    table.ForeignKey(
                        name: "FK_ProveedoresTelefonos_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_ActividadesMaquinas",
                columns: table => new
                {
                    ActividadID = table.Column<int>(type: "int", nullable: false),
                    MaquinaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_ActividadesMaquinas", x => new { x.ActividadID, x.MaquinaID });
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesMaquinas_ISO_Actividades",
                        column: x => x.ActividadID,
                        principalTable: "ISO_Actividades",
                        principalColumn: "IDActividad",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesMaquinas_Maquinas",
                        column: x => x.MaquinaID,
                        principalTable: "Maquinas",
                        principalColumn: "IDMaquina");
                });

            migrationBuilder.CreateTable(
                name: "DatosDinamicos_GS_EntidadesDef",
                columns: table => new
                {
                    IDDatoDinamicoGS_EntidadDef = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DatoDinamicoID = table.Column<int>(type: "int", nullable: false),
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    CategoryID = table.Column<int>(type: "int", nullable: false),
                    DefaultValue = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    Precargar = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DatosDinamicos_GS_EntidadesDef", x => x.IDDatoDinamicoGS_EntidadDef);
                    table.ForeignKey(
                        name: "FK_DatosDinamicos_GS_EntidadesDef_DatosDinamicos",
                        column: x => x.DatoDinamicoID,
                        principalTable: "DatosDinamicos",
                        principalColumn: "IDDatoDinamico");
                    table.ForeignKey(
                        name: "FK_DatosDinamicos_GS_EntidadesDef_DatosDinamicos_GS_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "DatosDinamicos_GS_Entidades",
                        principalColumn: "EntidadID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CTA_AsientosOrigenes",
                columns: table => new
                {
                    IDOrigen = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: true),
                    TableName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CTA_AsientosOrigenes", x => x.IDOrigen);
                    table.ForeignKey(
                        name: "FK_CTA_AsientosOrigenes_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "DG_DGDirecciones",
                columns: table => new
                {
                    DGDireccionID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    CabeceraID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK_DG_DGDirecciones_DG_Direcciones",
                        column: x => x.DGDireccionID,
                        principalTable: "DG_Direcciones",
                        principalColumn: "IDDGDireccion");
                    table.ForeignKey(
                        name: "FK_DG_DGDirecciones_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionAsientos",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionAsientos", x => new { x.DocumentoGestionID, x.CabeceraID, x.EjercicioID, x.Asiento });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionAsientos_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionDetalleObservaciones",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    DetalleID = table.Column<int>(type: "int", nullable: false),
                    FirstDocumentoGestionID = table.Column<int>(type: "int", nullable: true),
                    FirstCabeceraID = table.Column<int>(type: "int", nullable: true),
                    FirstDetalleID = table.Column<int>(type: "int", nullable: true),
                    Observacion = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionDetalleObservaciones", x => new { x.DocumentoGestionID, x.CabeceraID, x.DetalleID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleObservaciones_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionMargenesClaves",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionMargenesClaves", x => new { x.DocumentoGestionID, x.CabeceraID, x.MargenClaveID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionMargenesClaves_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionMargenesClaves_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionTiposLinea",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionTiposLinea", x => new { x.DocumentoGestionID, x.TipoLineaID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLinea_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLinea_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLinea_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionTiposLineaTiposLinea",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    Parent_TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    FormularioID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionTiposLineaTiposLinea", x => new { x.DocumentoGestionID, x.TipoLineaID, x.Parent_TipoLineaID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLineaTiposLinea_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLineaTiposLinea_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLineaTiposLinea_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLineaTiposLinea_TiposLinea1",
                        column: x => x.Parent_TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionTraspasos",
                columns: table => new
                {
                    DocumentoGestionOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    DetalleOrigenID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionDestinoID = table.Column<int>(type: "int", nullable: false),
                    CabeceraDestinoID = table.Column<int>(type: "int", nullable: false),
                    DetalleDestinoID = table.Column<int>(type: "int", nullable: false),
                    GestCantidadServidaOrigen = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Tipo = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionTraspasos_1", x => new { x.DocumentoGestionOrigenID, x.CabeceraOrigenID, x.DetalleOrigenID, x.DocumentoGestionDestinoID, x.CabeceraDestinoID, x.DetalleDestinoID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTraspasos_DocumentosGestion",
                        column: x => x.DocumentoGestionOrigenID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTraspasos_DocumentosGestion1",
                        column: x => x.DocumentoGestionDestinoID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionTraspasosSetup",
                columns: table => new
                {
                    DocumentoGestionOrigenID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionDestinoID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionStateOrigen = table.Column<int>(type: "int", nullable: false),
                    GestCantidadServidaOrigen = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    CalculoPortesDestino = table.Column<bool>(type: "bit", nullable: false),
                    CopiarObservaciones = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionTraspasos", x => new { x.DocumentoGestionOrigenID, x.DocumentoGestionDestinoID, x.DocumentoGestionStateOrigen });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTraspasosSetup_DocumentosGestion",
                        column: x => x.DocumentoGestionOrigenID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTraspasosSetup_DocumentosGestion1",
                        column: x => x.DocumentoGestionDestinoID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "PropuestasCompra",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Titulo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    DocumentoOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    Ejecutada = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PropuestasCompra", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_PropuestasCompra_DocumentosGestion",
                        column: x => x.DocumentoOrigenID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "GD_DocumentosEntidades",
                columns: table => new
                {
                    EntidadID = table.Column<int>(type: "int", nullable: false),
                    DocumentoID = table.Column<int>(type: "int", nullable: false),
                    IdentificadorEntidadID = table.Column<int>(type: "int", nullable: false, comment: "El valor del ID de la Identidad en su tabla correspondiente (x. ej. IDProducto de la tabla Productos)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GD_DocumentosEntidades", x => new { x.EntidadID, x.DocumentoID, x.IdentificadorEntidadID });
                    table.ForeignKey(
                        name: "FK_GD_DocumentosEntidades_GD_Documentos",
                        column: x => x.DocumentoID,
                        principalTable: "GD_Documentos",
                        principalColumn: "IDDocumento");
                    table.ForeignKey(
                        name: "FK_GD_DocumentosEntidades_GD_Entidades",
                        column: x => x.EntidadID,
                        principalTable: "GD_Entidades",
                        principalColumn: "IDEntidad");
                });

            migrationBuilder.CreateTable(
                name: "DMN_DataSet",
                columns: table => new
                {
                    IDDataSet = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Caption = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: false, defaultValueSql: "('')", comment: "Código único para identificar el DataSet > Formato: [Cod. Entidad]_00000"),
                    CommandType = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(3)", comment: "0 = cmdUnknown, 1 = cmdText, 2 = cmdTable, 3 = cmdStoredProc, 4 = cmdFile, 5 = cmdTableDirect"),
                    CommandText = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    QueryFormID = table.Column<int>(type: "int", nullable: false),
                    GridDefinitionID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DMN_DataSet", x => x.IDDataSet);
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_DMN_QueryForm",
                        column: x => x.QueryFormID,
                        principalTable: "DMN_QueryForm",
                        principalColumn: "IDQueryForm");
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_GS_GridDefinitions",
                        column: x => x.GridDefinitionID,
                        principalTable: "GS_GridDefinitions",
                        principalColumn: "IDGridDefinition");
                });

            migrationBuilder.CreateTable(
                name: "GS_GridColumns",
                columns: table => new
                {
                    IDColumn = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GridDefinitionID = table.Column<int>(type: "int", nullable: false),
                    Caption = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    DataBinding_FieldName = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Position_BandIndex = table.Column<int>(type: "int", nullable: false),
                    Position_RowIndex = table.Column<int>(type: "int", nullable: false),
                    Position_ColIndex = table.Column<int>(type: "int", nullable: false),
                    Alignment = table.Column<int>(type: "int", nullable: false, comment: "(0 = taLeft, 1 = taRight, 2 = taCenter)"),
                    Width = table.Column<int>(type: "int", nullable: false),
                    Visible = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_GridColumns", x => x.IDColumn);
                    table.ForeignKey(
                        name: "FK_GS_GridColumns_GS_GridDefinitions",
                        column: x => x.GridDefinitionID,
                        principalTable: "GS_GridDefinitions",
                        principalColumn: "IDGridDefinition",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CalendarioDiasEmpleado",
                columns: table => new
                {
                    CalendarioID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    TurnoID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CalendarioDiasEmpleado", x => new { x.CalendarioID, x.EjercicioID, x.Fecha, x.EmpleadoID });
                    table.ForeignKey(
                        name: "FK_CalendarioDiasEmpleado_CalendariosDias",
                        columns: x => new { x.CalendarioID, x.EjercicioID, x.Fecha },
                        principalTable: "CalendariosDias",
                        principalColumns: new[] { "CalendarioID", "EjercicioID", "Fecha" },
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CalendarioDiasEmpleado_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CalendarioDiasEmpleado_Turnos",
                        column: x => x.TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                });

            migrationBuilder.CreateTable(
                name: "Comerciales",
                columns: table => new
                {
                    IDComercial = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComercialTipoID = table.Column<int>(type: "int", nullable: true),
                    Externo = table.Column<bool>(type: "bit", nullable: false),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    ComisionResponsableID = table.Column<int>(type: "int", nullable: true),
                    Activo = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comerciales", x => x.IDComercial);
                    table.ForeignKey(
                        name: "FK_Comerciales_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_Comerciales_ComercialesTipos",
                        column: x => x.ComercialTipoID,
                        principalTable: "ComercialesTipos",
                        principalColumn: "IDComercialTipo");
                    table.ForeignKey(
                        name: "FK_Comerciales_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_Comerciales_Comisiones1",
                        column: x => x.ComisionResponsableID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_Comerciales_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Comerciales_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Campanyas",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    FUltEmision = table.Column<DateTime>(type: "datetime", nullable: true),
                    FSigEmision = table.Column<DateTime>(type: "datetime", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Generico = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    Objetivos = table.Column<string>(type: "text", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Campanyas", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_CRM_Campanyas_CRM_CampanyasEstados",
                        column: x => x.EstadoID,
                        principalTable: "CRM_CampanyasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_CRM_Campanyas_CRM_CampanyasTipos",
                        column: x => x.TipoID,
                        principalTable: "CRM_CampanyasTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_CRM_Campanyas_CRM_Campanyas_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "CRM_Campanyas_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_CRM_Campanyas_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_CRM_Campanyas_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_CRM_Campanyas_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                });

            migrationBuilder.CreateTable(
                name: "CTA_Cuentas_Intercambio",
                columns: table => new
                {
                    IDIntercambio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CuentaOrigen = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    CuentaDestino = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    FechaDesde = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaHasta = table.Column<DateTime>(type: "datetime", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CTA_Cuentas_Intercambio", x => x.IDIntercambio);
                    table.ForeignKey(
                        name: "FK_CTA_Cuentas_Intercambio_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                });

            migrationBuilder.CreateTable(
                name: "EmpleadosDirecciones",
                columns: table => new
                {
                    IDEmpleadoDireccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    LocalidadID = table.Column<int>(type: "int", nullable: false),
                    ProvinciaID = table.Column<int>(type: "int", nullable: false),
                    PaisID = table.Column<int>(type: "int", nullable: true),
                    Direccion = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    CodigoPostal = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpleadosDirecciones", x => x.IDEmpleadoDireccion);
                    table.ForeignKey(
                        name: "FK_EmpleadosDirecciones_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmpleadosDirecciones_Localidades",
                        column: x => x.LocalidadID,
                        principalTable: "Localidades",
                        principalColumn: "IDLocalidad");
                    table.ForeignKey(
                        name: "FK_EmpleadosDirecciones_Paises",
                        column: x => x.PaisID,
                        principalTable: "Paises",
                        principalColumn: "IDPais");
                    table.ForeignKey(
                        name: "FK_EmpleadosDirecciones_Provincias",
                        column: x => x.ProvinciaID,
                        principalTable: "Provincias",
                        principalColumn: "IDProvincia");
                });

            migrationBuilder.CreateTable(
                name: "EmpleadosPuestos",
                columns: table => new
                {
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    PuestoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpleadosPuestos", x => new { x.EmpleadoID, x.PuestoID });
                    table.ForeignKey(
                        name: "FK_EmpleadosPuestos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_EmpleadosPuestos_Puestos",
                        column: x => x.PuestoID,
                        principalTable: "Puestos",
                        principalColumn: "IDPuesto");
                });

            migrationBuilder.CreateTable(
                name: "EmpleadosTelefonos",
                columns: table => new
                {
                    IDEmpleadoTelefono = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    Telefono = table.Column<string>(type: "varchar(12)", unicode: false, maxLength: 12, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpleadosTelefonos", x => x.IDEmpleadoTelefono);
                    table.ForeignKey(
                        name: "FK_EmpleadosTelefonos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Fichajes",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    TurnoID = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FAlta_Int = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Modificado = table.Column<bool>(type: "bit", nullable: false),
                    TotalHoras = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fichajes", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_Fichajes_Empleados",
                        column: x => x.PersonaID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Fichajes_Fichajes",
                        column: x => x.CabeceraID,
                        principalTable: "Fichajes",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_Fichajes_FichajesEstados",
                        column: x => x.EstadoID,
                        principalTable: "FichajesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Fichajes_Turnos",
                        column: x => x.TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                });

            migrationBuilder.CreateTable(
                name: "GS_UsrGridsViewsCustomizations",
                columns: table => new
                {
                    IDUsrGridViewCustomization = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    GridViewID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    RawData = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GS_UsrGridsViewsCustomizations", x => x.IDUsrGridViewCustomization);
                    table.ForeignKey(
                        name: "FK_GS_UsrGridsViewsCustomizations_Empleados",
                        column: x => x.PersonaID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GS_UsrGridsViewsCustomizations_GS_GridsViews",
                        column: x => x.GridViewID,
                        principalTable: "GS_GridsViews",
                        principalColumn: "IDGridView",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_ActividadesPersonal",
                columns: table => new
                {
                    IDActividadPersonal = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ActividadID = table.Column<int>(type: "int", nullable: false),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    PuestoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_ActividadesPersonal", x => x.IDActividadPersonal);
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesPersonal_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesPersonal_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesPersonal_ISO_Actividades",
                        column: x => x.ActividadID,
                        principalTable: "ISO_Actividades",
                        principalColumn: "IDActividad",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesPersonal_Puestos",
                        column: x => x.PuestoID,
                        principalTable: "Puestos",
                        principalColumn: "IDPuesto");
                    table.ForeignKey(
                        name: "FK_ISO_ActividadesPersonal_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_CursosAsistentes",
                columns: table => new
                {
                    CursoID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_CursosAsistentes", x => new { x.CursoID, x.EmpleadoID });
                    table.ForeignKey(
                        name: "FK_ISO_CursosAsistentes_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_CursosAsistentes_ISO_Cursos",
                        column: x => x.CursoID,
                        principalTable: "ISO_Cursos",
                        principalColumn: "IDCurso",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Documentos",
                columns: table => new
                {
                    IDDocumento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Identificacion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Documento = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Revision = table.Column<int>(type: "int", nullable: false),
                    FechaRevision = table.Column<DateTime>(type: "datetime", nullable: true),
                    Externo = table.Column<bool>(type: "bit", nullable: false),
                    TipoRegistroID = table.Column<int>(type: "int", nullable: true),
                    Modelo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    FechaVigor = table.Column<DateTime>(type: "datetime", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Documentos", x => x.IDDocumento);
                    table.ForeignKey(
                        name: "FK_ISO_Documentos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_Documentos_ISO_TiposRegistros",
                        column: x => x.TipoRegistroID,
                        principalTable: "ISO_TiposRegistros",
                        principalColumn: "IDTipoRegistro");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Incidencias",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Anno = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    TipoIncidenciaID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaCierre = table.Column<DateTime>(type: "datetime", nullable: true),
                    TipoDestinatarioID = table.Column<int>(type: "int", nullable: false),
                    DestinatarioID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    Causas = table.Column<string>(type: "text", nullable: true),
                    AperturaInforme = table.Column<bool>(type: "bit", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, defaultValueSql: "('')"),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    Resolucion = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Incidencias", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_ISO_Incidencias_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_ISO_Incidencias_DocumentosGestionDestinatarios",
                        column: x => x.TipoDestinatarioID,
                        principalTable: "DocumentosGestionDestinatarios",
                        principalColumn: "IDDocumentoGestionDestinatario");
                    table.ForeignKey(
                        name: "FK_ISO_Incidencias_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_Incidencias_ISO_IncidenciasEstados",
                        column: x => x.EstadoID,
                        principalTable: "ISO_IncidenciasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_ISO_Incidencias_ISO_TiposIncidencias",
                        column: x => x.TipoIncidenciaID,
                        principalTable: "ISO_TiposIncidencias",
                        principalColumn: "IDTipoIncidencia");
                    table.ForeignKey(
                        name: "FK_ISO_Incidencias_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Indicadores",
                columns: table => new
                {
                    IDIndicador = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    ProcesoID = table.Column<int>(type: "int", nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    SeccionID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    Objetivos = table.Column<string>(type: "text", nullable: true),
                    FechaPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaRealizacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    FrecuenciaID = table.Column<int>(type: "int", nullable: true),
                    ValorObjetivo = table.Column<double>(type: "float", nullable: true),
                    ValorObtenido = table.Column<double>(type: "float", nullable: true),
                    TendenciaID = table.Column<int>(type: "int", nullable: true),
                    ConformeObjetivo = table.Column<bool>(type: "bit", nullable: false),
                    Debilidades = table.Column<string>(type: "text", nullable: true),
                    Amenazas = table.Column<string>(type: "text", nullable: true),
                    Fortalezas = table.Column<string>(type: "text", nullable: true),
                    Oportunidades = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Indicadores", x => x.IDIndicador);
                    table.ForeignKey(
                        name: "FK_ISO_Indicadores_Departamentos",
                        column: x => x.DepartamentoID,
                        principalTable: "Departamentos",
                        principalColumn: "IDDepartamento");
                    table.ForeignKey(
                        name: "FK_ISO_Indicadores_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_Indicadores_ISO_Frecuencias",
                        column: x => x.FrecuenciaID,
                        principalTable: "ISO_Frecuencias",
                        principalColumn: "IDFrecuencia");
                    table.ForeignKey(
                        name: "FK_ISO_Indicadores_ISO_Procesos",
                        column: x => x.ProcesoID,
                        principalTable: "ISO_Procesos",
                        principalColumn: "IDProceso");
                    table.ForeignKey(
                        name: "FK_ISO_Indicadores_ISO_Tendencias",
                        column: x => x.TendenciaID,
                        principalTable: "ISO_Tendencias",
                        principalColumn: "IDTendencia");
                    table.ForeignKey(
                        name: "FK_ISO_Indicadores_Secciones",
                        column: x => x.SeccionID,
                        principalTable: "Secciones",
                        principalColumn: "IDSeccion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Mantenimientos",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MaquinaID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    IncidenciaID = table.Column<int>(type: "int", nullable: true),
                    FechaRealizacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    FrecuenciaID = table.Column<int>(type: "int", nullable: true),
                    FechaProxima = table.Column<DateTime>(type: "datetime", nullable: true),
                    Tiempo = table.Column<double>(type: "float", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Externo = table.Column<bool>(type: "bit", nullable: false),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    Apto = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Mantenimientos", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_ISO_Mantenimientos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_Mantenimientos_ISO_Frecuencias",
                        column: x => x.FrecuenciaID,
                        principalTable: "ISO_Frecuencias",
                        principalColumn: "IDFrecuencia");
                    table.ForeignKey(
                        name: "FK_ISO_Mantenimientos_ISO_TiposMantenimientos",
                        column: x => x.TipoID,
                        principalTable: "ISO_TiposMantenimientos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_ISO_Mantenimientos_Maquinas",
                        column: x => x.MaquinaID,
                        principalTable: "Maquinas",
                        principalColumn: "IDMaquina");
                    table.ForeignKey(
                        name: "FK_ISO_Mantenimientos_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Proveedores",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    Valoracion = table.Column<double>(type: "float", nullable: true),
                    Homologado = table.Column<bool>(type: "bit", nullable: false),
                    SistCalidad = table.Column<bool>(type: "bit", nullable: false),
                    FechaHomologacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    ObservacionesCalidad = table.Column<string>(type: "text", nullable: true),
                    FechaBaja = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Proveedores", x => x.PersonaID);
                    table.ForeignKey(
                        name: "FK_ISO_Proveedores_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_Proveedores_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_RevisionesAsistentes",
                columns: table => new
                {
                    RevisionID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_RevisionesAsistentes", x => new { x.RevisionID, x.EmpleadoID });
                    table.ForeignKey(
                        name: "FK_ISO_RevisionesAsistentes_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_RevisionesAsistentes_ISO_Revisiones",
                        column: x => x.RevisionID,
                        principalTable: "ISO_Revisiones",
                        principalColumn: "IDRevision",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesSeriadasExplosiones",
                columns: table => new
                {
                    IDExplosion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExplosionID = table.Column<int>(type: "int", nullable: true),
                    ExplosionSessionID = table.Column<int>(type: "int", nullable: true, comment: "Columna auxiliar para construir el árbol -> Apunta al primer IDExplosion de cada Explosion. Parecido a un identificador de sesión."),
                    AME_TreeLevel = table.Column<int>(type: "int", nullable: false, comment: "AuxMakeExplosion -> Auxiliar para la construcción del árbol de explosión"),
                    IDConjunto = table.Column<int>(type: "int", nullable: true),
                    ConjuntoID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    OrdenSeriadaID = table.Column<int>(type: "int", nullable: true),
                    RutaID = table.Column<int>(type: "int", nullable: true),
                    GenerarOrdenSeriada = table.Column<bool>(type: "bit", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesSeriadasExplosiones", x => x.IDExplosion);
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasExplosiones_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasExplosiones_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasExplosiones_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasExplosiones_OrdenesSeriadasExplosiones",
                        column: x => x.ExplosionID,
                        principalTable: "OrdenesSeriadasExplosiones",
                        principalColumn: "IDExplosion");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasExplosiones_OrdenesSeriadasExplosiones1",
                        column: x => x.ExplosionSessionID,
                        principalTable: "OrdenesSeriadasExplosiones",
                        principalColumn: "IDExplosion");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasExplosiones_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "PermisosEmpleados",
                columns: table => new
                {
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    PermisoAccionID = table.Column<int>(type: "int", nullable: false),
                    Enabled = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PermisosEmpleados", x => new { x.EmpleadoID, x.PermisoAccionID });
                    table.ForeignKey(
                        name: "FK_PermisosEmpleados_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PermisosEmpleados_PermisosAcciones",
                        column: x => x.PermisoAccionID,
                        principalTable: "PermisosAcciones",
                        principalColumn: "IDPermisoAccion",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RRHH_PrimasLiquidacion",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: false),
                    Mes = table.Column<int>(type: "int", nullable: false),
                    Codigo = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    LaborablesMes = table.Column<int>(type: "int", nullable: false),
                    CotizacionPerCent = table.Column<int>(type: "int", nullable: false),
                    FLiquidacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumHorasNormal = table.Column<double>(type: "float", nullable: false),
                    NumHorasExtra = table.Column<double>(type: "float", nullable: false),
                    NumHorasExtraFestivo = table.Column<double>(type: "float", nullable: false),
                    NumHorasA = table.Column<double>(type: "float", nullable: false),
                    NumHorasReten = table.Column<double>(type: "float", nullable: false),
                    NumHorasTotal = table.Column<double>(type: "float", nullable: false),
                    NumDietas = table.Column<double>(type: "float", nullable: false),
                    NumKilometros = table.Column<double>(type: "float", nullable: false),
                    NumServicioReten = table.Column<double>(type: "float", nullable: false),
                    NumFestivoTrabajado = table.Column<double>(type: "float", nullable: false),
                    NumCompensacionFestivo = table.Column<double>(type: "float", nullable: false),
                    NumVacaciones = table.Column<double>(type: "float", nullable: false),
                    NumPermiso = table.Column<double>(type: "float", nullable: false),
                    NumEnfermedad = table.Column<double>(type: "float", nullable: false),
                    NumAccidente = table.Column<double>(type: "float", nullable: false),
                    NumLaborablesTrabajados = table.Column<double>(type: "float", nullable: false),
                    PrecioHoraExtra = table.Column<decimal>(type: "money", nullable: false),
                    PrecioHoraExtraFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaLaborable = table.Column<decimal>(type: "money", nullable: false),
                    PrimaFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaCompensacionFestivo = table.Column<decimal>(type: "money", nullable: false),
                    PrimaMensual = table.Column<decimal>(type: "money", nullable: false),
                    PrimaHoraReten = table.Column<decimal>(type: "money", nullable: false),
                    PrimaServicioReten = table.Column<decimal>(type: "money", nullable: false),
                    PrecioDieta = table.Column<decimal>(type: "money", nullable: false, defaultValueSql: "((1))"),
                    PrecioKilometro = table.Column<decimal>(type: "money", nullable: false),
                    TotalHorasExtra = table.Column<decimal>(type: "money", nullable: false),
                    TotalHorasExtraFestivo = table.Column<decimal>(type: "money", nullable: false),
                    TotalHorasReten = table.Column<decimal>(type: "money", nullable: false),
                    TotalHorasA = table.Column<decimal>(type: "money", nullable: false),
                    TotalKilometros = table.Column<decimal>(type: "money", nullable: false),
                    TotalDietas = table.Column<decimal>(type: "money", nullable: false),
                    TotalServicioReten = table.Column<decimal>(type: "money", nullable: false),
                    TotalPrimaLaborable = table.Column<decimal>(type: "money", nullable: false),
                    TotalPrimaFestivo = table.Column<decimal>(type: "money", nullable: false),
                    TotalPrimaCompensacionFestivo = table.Column<decimal>(type: "money", nullable: false),
                    TotalPrimaMensual = table.Column<decimal>(type: "money", nullable: false),
                    Otros = table.Column<decimal>(type: "money", nullable: false),
                    TotalDevengado = table.Column<decimal>(type: "money", nullable: false),
                    ImporteNominaTotalActividad = table.Column<decimal>(type: "money", nullable: false),
                    ImporteNominaNumHorasExtra = table.Column<decimal>(type: "money", nullable: false),
                    ImporteNominaTotalHorasExtra = table.Column<decimal>(type: "money", nullable: false),
                    ImporteNominaKilometros = table.Column<decimal>(type: "money", nullable: false),
                    ImporteNominaTotalKilometros = table.Column<decimal>(type: "money", nullable: false),
                    ImporteNominaTotalDietas = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RRHH_PrimasLiquidacion", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacion_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacion_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacion_Empleados",
                        column: x => x.PersonaID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacion_Empleados1",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacion_RRHH_PrimasLiquidacionEstados",
                        column: x => x.EstadoID,
                        principalTable: "RRHH_PrimasLiquidacionEstados",
                        principalColumn: "IDEstado");
                });

            migrationBuilder.CreateTable(
                name: "Tareas",
                columns: table => new
                {
                    IDTarea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TareaID = table.Column<int>(type: "int", nullable: true),
                    IDGUID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false, comment: "Empleado que da de alta la tarea"),
                    EmpresaID = table.Column<int>(type: "int", nullable: false, comment: "Empresa a la que pertenece el EmpleadoID"),
                    TipoClaseID = table.Column<int>(type: "int", nullable: false, comment: "FK contra la tabla TSK_TareasClases, define las clases para cada tipo de Tarea (Mant. Soft., Básica, Personal, etc.)"),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FechaAviso = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    Asunto = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Notas = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    PrioridadID = table.Column<int>(type: "int", nullable: false),
                    OrigenID = table.Column<int>(type: "int", nullable: false, comment: "Llamada, email, reunión cliente, interno"),
                    EmpleadoAsignadoID = table.Column<int>(type: "int", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false, comment: "Error, Mejora, Mejora interna, etc."),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    OFTipoID = table.Column<int>(type: "int", nullable: true),
                    OFID = table.Column<int>(type: "int", nullable: true),
                    OFDetalleID = table.Column<int>(type: "int", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tareas", x => x.IDTarea);
                    table.ForeignKey(
                        name: "FK_Tareas_Empleados_Assigned",
                        column: x => x.EmpleadoAsignadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Tareas_Empleados_Owner",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Tareas_TSK_TareasClases",
                        column: x => x.TipoClaseID,
                        principalTable: "TSK_TareasClases",
                        principalColumn: "IDTareaClase",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Tareas_TSK_TareasEstados",
                        column: x => x.EstadoID,
                        principalTable: "TSK_TareasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Tareas_TSK_TareasMantenimientoTipos",
                        column: x => x.TipoID,
                        principalTable: "TSK_TareasMantenimientoTipos",
                        principalColumn: "IDTareaMantenimientoTipo");
                    table.ForeignKey(
                        name: "FK_Tareas_TSK_TareasOrigenes",
                        column: x => x.OrigenID,
                        principalTable: "TSK_TareasOrigenes",
                        principalColumn: "IDTareaOrigen");
                    table.ForeignKey(
                        name: "FK_Tareas_TSK_TareasPrioridades",
                        column: x => x.PrioridadID,
                        principalTable: "TSK_TareasPrioridades",
                        principalColumn: "IDPrioridad");
                });

            migrationBuilder.CreateTable(
                name: "AgenciasTransporteTarifasDetalle",
                columns: table => new
                {
                    IDTarifaAgenciaDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ZonaID = table.Column<int>(type: "int", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: false),
                    PesoDesde = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    AgenciaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgenciasTransporteTarifas", x => x.IDTarifaAgenciaDetalle);
                    table.ForeignKey(
                        name: "FK_AgenciasTransporteTarifasDetalle_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_AgenciasTransporteTarifas_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AgenciasTransporteTarifas_Zonas",
                        column: x => x.ZonaID,
                        principalTable: "Zonas",
                        principalColumn: "IDZona");
                });

            migrationBuilder.CreateTable(
                name: "Expediciones",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    Interna = table.Column<bool>(type: "bit", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    PersonaContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    FSalida = table.Column<DateTime>(type: "datetime", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    Transportista = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TransportistaTelefono = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    VehiculoMatricula = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Expediciones", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_Expediciones_AgenciasTransporteTarifas",
                        column: x => x.TarifaAgenciaID,
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumn: "IDTarifaAgencia");
                    table.ForeignKey(
                        name: "FK_Expediciones_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_Expediciones_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_Expediciones_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Expediciones_Empleados_EmpleadoResponsableID",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Expediciones_Expediciones_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "Expediciones_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_Expediciones_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_Expediciones_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "Almacenes",
                columns: table => new
                {
                    IDAlmacen = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Direccion = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CodigoPostal = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    LocalidadID = table.Column<int>(type: "int", nullable: true),
                    ProvinciaID = table.Column<int>(type: "int", nullable: true),
                    PaisID = table.Column<int>(type: "int", nullable: true),
                    AutogenerarNombreUbicaciones = table.Column<bool>(type: "bit", nullable: false),
                    PalabraBaseUbicaciones = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    IsVirtual = table.Column<bool>(type: "bit", nullable: false),
                    DepositoOPE = table.Column<bool>(type: "bit", nullable: false),
                    CentroID = table.Column<int>(type: "int", nullable: true),
                    IsReserva = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(CONVERT([bit],(0),0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Almacenes", x => x.IDAlmacen);
                    table.ForeignKey(
                        name: "FK_Almacenes_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro");
                });

            migrationBuilder.CreateTable(
                name: "CentrosEmpleados",
                columns: table => new
                {
                    CentroID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CentrosEmpleados", x => new { x.CentroID, x.EmpleadoID });
                    table.ForeignKey(
                        name: "FK_CentrosEmpleados_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CentrosEmpleados_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                });

            migrationBuilder.CreateTable(
                name: "CentrosMaquinas",
                columns: table => new
                {
                    CentroID = table.Column<int>(type: "int", nullable: false),
                    MaquinaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CentrosMaquinas", x => new { x.CentroID, x.MaquinaID });
                    table.ForeignKey(
                        name: "FK_CentrosMaquinas_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CentrosMaquinas_Maquinas",
                        column: x => x.MaquinaID,
                        principalTable: "Maquinas",
                        principalColumn: "IDMaquina");
                });

            migrationBuilder.CreateTable(
                name: "Diario",
                columns: table => new
                {
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Asiento = table.Column<int>(type: "int", nullable: false),
                    Apunte = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    Anno = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(datepart(year,getdate()))"),
                    Cuenta = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    Concepto = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DH = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Tipo_IVA = table.Column<double>(type: "float", nullable: true),
                    Incidencia = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Descuadre = table.Column<bool>(type: "bit", nullable: false),
                    Factura = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    FacturaID = table.Column<int>(type: "int", nullable: true),
                    RE = table.Column<decimal>(type: "money", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: true),
                    ImporteRE = table.Column<decimal>(type: "money", nullable: true),
                    VencimientoID = table.Column<int>(type: "int", nullable: true),
                    RemesaID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    OrigenID = table.Column<int>(type: "int", nullable: true),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    ExcluirListadosEnabled = table.Column<bool>(type: "bit", nullable: false),
                    Punteado = table.Column<bool>(type: "bit", nullable: false),
                    IDDiario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Exportado = table.Column<bool>(type: "bit", nullable: false),
                    FechaExp = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Diario", x => new { x.EjercicioID, x.Asiento, x.Apunte });
                    table.ForeignKey(
                        name: "FK_Diario_CTA_AsientosOrigenes",
                        column: x => x.OrigenID,
                        principalTable: "CTA_AsientosOrigenes",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_Diario_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_Diario_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_Diario_PGC",
                        column: x => x.Cuenta,
                        principalTable: "PGC",
                        principalColumn: "Cuenta");
                });

            migrationBuilder.CreateTable(
                name: "DMN_DataSet_Parameter",
                columns: table => new
                {
                    IDParameter = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DataSetID = table.Column<int>(type: "int", nullable: false),
                    UsrTypeID = table.Column<int>(type: "int", nullable: false),
                    OperatorID = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: false),
                    Caption = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DMN_DataSet_Parameter", x => x.IDParameter);
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_Parameter_DMN_DataSet",
                        column: x => x.DataSetID,
                        principalTable: "DMN_DataSet",
                        principalColumn: "IDDataSet",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_Parameter_GS_UsrOperators",
                        column: x => x.OperatorID,
                        principalTable: "GS_UsrOperators",
                        principalColumn: "IDOperator");
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_Parameter_GS_UsrTypes",
                        column: x => x.UsrTypeID,
                        principalTable: "GS_UsrTypes",
                        principalColumn: "IDUsrType");
                });

            migrationBuilder.CreateTable(
                name: "DMN_DataSet_rel",
                columns: table => new
                {
                    IDDataSet_1 = table.Column<int>(type: "int", nullable: false),
                    IDDataSet_2 = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_rel_DMN_DataSet1",
                        column: x => x.IDDataSet_1,
                        principalTable: "DMN_DataSet",
                        principalColumn: "IDDataSet");
                    table.ForeignKey(
                        name: "FK_DMN_DataSet_rel_DMN_DataSet2",
                        column: x => x.IDDataSet_2,
                        principalTable: "DMN_DataSet",
                        principalColumn: "IDDataSet");
                });

            migrationBuilder.CreateTable(
                name: "LiquidacionesComercial",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoDestinatarioID = table.Column<int>(type: "int", nullable: true),
                    ProveedorDestinatarioID = table.Column<int>(type: "int", nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LiquidacionesComercial", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_Empleados",
                        column: x => x.EmpleadoDestinatarioID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_Empleados1",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_LiquidacionesComercialEstados",
                        column: x => x.EstadoID,
                        principalTable: "LiquidacionesComercialEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_LiquidacionesComercial_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "LiquidacionesComercial_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_Proveedores",
                        column: x => x.ProveedorDestinatarioID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercial_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasCriterios",
                columns: table => new
                {
                    IDCriterio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Clausula = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    CampoCriterioID = table.Column<int>(type: "int", nullable: false),
                    OperadorID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasCriterios", x => x.IDCriterio);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasCriterios_CRM_Campanyas",
                        column: x => x.CabeceraID,
                        principalTable: "CRM_Campanyas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasCriterios_CRM_CamposCriterios",
                        column: x => x.CampoCriterioID,
                        principalTable: "CRM_CamposCriterios",
                        principalColumn: "IDCampoCriterio");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasDocumentos",
                columns: table => new
                {
                    IDDocumento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Fichero = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    FormatoID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasDocumentos", x => x.IDDocumento);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDocumentos_CRM_Campanyas",
                        column: x => x.CabeceraID,
                        principalTable: "CRM_Campanyas",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDocumentos_CRM_DocumentosTipos",
                        column: x => x.TipoID,
                        principalTable: "CRM_DocumentosTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDocumentos_GD_FormatosArchivos",
                        column: x => x.FormatoID,
                        principalTable: "GD_FormatosArchivos",
                        principalColumn: "IDFormato");
                });

            migrationBuilder.CreateTable(
                name: "FichajesDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    Fecha_Hora = table.Column<DateTime>(type: "datetime", nullable: false),
                    Fecha_Hora_Int = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Observaciones = table.Column<string>(type: "varchar(400)", unicode: false, maxLength: 400, nullable: true),
                    Fecha_Hora_Operario = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FichajesDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_FichajesDetalle_Fichajes",
                        column: x => x.CabeceraID,
                        principalTable: "Fichajes",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FichajesDetalle_FichajesDetalle",
                        column: x => x.LineaID,
                        principalTable: "FichajesDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_FichajesDetalle_FichajesTipos",
                        column: x => x.TipoID,
                        principalTable: "FichajesTipos",
                        principalColumn: "IDTipo");
                });

            migrationBuilder.CreateTable(
                name: "ISO_PuestosDocumentos",
                columns: table => new
                {
                    PuestoID = table.Column<int>(type: "int", nullable: false),
                    DocumentoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_PuestosDocumentos", x => new { x.PuestoID, x.DocumentoID });
                    table.ForeignKey(
                        name: "FK_ISO_PuestosDocumentos_ISO_Documentos",
                        column: x => x.DocumentoID,
                        principalTable: "ISO_Documentos",
                        principalColumn: "IDDocumento",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_PuestosDocumentos_Puestos",
                        column: x => x.PuestoID,
                        principalTable: "Puestos",
                        principalColumn: "IDPuesto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Registros",
                columns: table => new
                {
                    IDRegistro = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Revision = table.Column<int>(type: "int", nullable: false),
                    FechaRevision = table.Column<DateTime>(type: "datetime", nullable: true),
                    Formato = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocumentoID = table.Column<int>(type: "int", nullable: true),
                    TipoRegistroID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    TiempoConservacion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Destruccion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Registros", x => x.IDRegistro);
                    table.ForeignKey(
                        name: "FK_ISO_Registros_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_Registros_ISO_Documentos",
                        column: x => x.DocumentoID,
                        principalTable: "ISO_Documentos",
                        principalColumn: "IDDocumento");
                    table.ForeignKey(
                        name: "FK_ISO_Registros_ISO_TiposRegistros",
                        column: x => x.TipoRegistroID,
                        principalTable: "ISO_TiposRegistros",
                        principalColumn: "IDTipoRegistro");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Requisitos",
                columns: table => new
                {
                    IDRequisito = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DocumentoID = table.Column<int>(type: "int", nullable: true),
                    TipoNormaID = table.Column<int>(type: "int", nullable: true),
                    ModuloGestionID = table.Column<int>(type: "int", nullable: false, comment: "En lugar de ModuloCalidadID"),
                    EnVigor = table.Column<bool>(type: "bit", nullable: false),
                    FechaVigor = table.Column<DateTime>(type: "datetime", nullable: true),
                    Resumen = table.Column<string>(type: "text", nullable: true),
                    Ambito = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Derogada = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Requisitos", x => x.IDRequisito);
                    table.ForeignKey(
                        name: "FK_ISO_Requisitos_ISO_Documentos",
                        column: x => x.DocumentoID,
                        principalTable: "ISO_Documentos",
                        principalColumn: "IDDocumento");
                    table.ForeignKey(
                        name: "FK_ISO_Requisitos_ISO_TiposNormas",
                        column: x => x.TipoNormaID,
                        principalTable: "ISO_TiposNormas",
                        principalColumn: "IDTipoNorma");
                    table.ForeignKey(
                        name: "FK_ISO_Requisitos_ModulosGestion",
                        column: x => x.ModuloGestionID,
                        principalTable: "ModulosGestion",
                        principalColumn: "IDModuloGestion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_IncidenciasDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    TipoAccionID = table.Column<int>(type: "int", nullable: false),
                    Accion = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FechaPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaRealizacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    Evaluado = table.Column<bool>(type: "bit", nullable: true),
                    Eficaz = table.Column<bool>(type: "bit", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_IncidenciasDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ISO_IncidenciasDetalle_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ISO_IncidenciasDetalle_ISO_Incidencias",
                        column: x => x.CabeceraID,
                        principalTable: "ISO_Incidencias",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_IncidenciasDetalle_ISO_TiposAcciones",
                        column: x => x.TipoAccionID,
                        principalTable: "ISO_TiposAcciones",
                        principalColumn: "IDTipoAccion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_IndicadoresDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IndicadorID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FechaMedicion = table.Column<DateTime>(type: "datetime", nullable: true),
                    ValorObjetivo = table.Column<double>(type: "float", nullable: true),
                    ValorObtenido = table.Column<double>(type: "float", nullable: true),
                    ConformeObjetivo = table.Column<bool>(type: "bit", nullable: false),
                    Acciones = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_IndicadoresDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ISO_IndicadoresDetalle_ISO_Indicadores",
                        column: x => x.IndicadorID,
                        principalTable: "ISO_Indicadores",
                        principalColumn: "IDIndicador",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RRHH_PrimasLiquidacionDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    TurnoID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    FUltimaModificacion = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    NumHorasNormal = table.Column<double>(type: "float", nullable: false),
                    NumHorasExtra = table.Column<double>(type: "float", nullable: false),
                    NumHorasExtraFestivo = table.Column<double>(type: "float", nullable: false),
                    NumHorasReten = table.Column<double>(type: "float", nullable: false),
                    NumHorasTotal = table.Column<double>(type: "float", nullable: false),
                    NumHorasA = table.Column<double>(type: "float", nullable: false),
                    NumDieta = table.Column<double>(type: "float", nullable: false),
                    NumKilometros = table.Column<double>(type: "float", nullable: false),
                    ServicioReten = table.Column<double>(type: "float", nullable: false),
                    Festivo = table.Column<double>(type: "float", nullable: false),
                    CompensacionFestivo = table.Column<double>(type: "float", nullable: false),
                    Vacaciones = table.Column<double>(type: "float", nullable: false),
                    Permiso = table.Column<double>(type: "float", nullable: false),
                    Enfermedad = table.Column<double>(type: "float", nullable: false),
                    Accidente = table.Column<double>(type: "float", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RRHH_PrimasLiquidacionDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacionDetalle_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacionDetalle_RRHH_PrimasLiquidacion",
                        column: x => x.CabeceraID,
                        principalTable: "RRHH_PrimasLiquidacion",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacionDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_RRHH_PrimasLiquidacionDetalle_Turnos",
                        column: x => x.TurnoID,
                        principalTable: "Turnos",
                        principalColumn: "IDTurno");
                });

            migrationBuilder.CreateTable(
                name: "ExpedicionesDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    DGOrigenID = table.Column<int>(type: "int", nullable: true),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Referencia = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Seguimiento = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NEnvio = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NBultos = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    PesoReal = table.Column<double>(type: "float", nullable: false),
                    PesoRealFacturable = table.Column<double>(type: "float", nullable: false),
                    PaqueteFormatoID = table.Column<int>(type: "int", nullable: true),
                    Largo = table.Column<double>(type: "float", nullable: false),
                    Alto = table.Column<double>(type: "float", nullable: false),
                    Ancho = table.Column<double>(type: "float", nullable: false),
                    FechaSalida = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    AvisoTelefono = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    DirSalida_EntidadOrigenID = table.Column<int>(type: "int", nullable: true),
                    DirSalida_KeyFieldValueID = table.Column<int>(type: "int", nullable: true),
                    DirSalida_DireccionID = table.Column<int>(type: "int", nullable: true),
                    DirEntrega_EntidadOrigenID = table.Column<int>(type: "int", nullable: true),
                    DirEntrega_KeyFieldValueID = table.Column<int>(type: "int", nullable: true),
                    DirEntrega_DireccionID = table.Column<int>(type: "int", nullable: true),
                    DatosAdicionales = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: false, comment: "Espcifica el Tipo refiriéndose al tipo de Servicio: Expedición Normal (0), Recogida (1), etc. Sólo tiene sentido en las líneas GroupHeader, en las hijas (Bultos) se copia el valor del padre"),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    ContraReembolso = table.Column<bool>(type: "bit", nullable: false),
                    ContraReembolsoValor = table.Column<decimal>(type: "money", nullable: false),
                    ContraReembolsoPortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    EM_Enviado = table.Column<bool>(type: "bit", nullable: false, comment: "Email enviado"),
                    EM_FEnvio = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Email Fecha Envio"),
                    HoraMannanaDe = table.Column<float>(type: "real", nullable: true),
                    HoraMannanaA = table.Column<float>(type: "real", nullable: true),
                    HoraTardeDe = table.Column<float>(type: "real", nullable: true),
                    HoraTardeA = table.Column<float>(type: "real", nullable: true),
                    AvisoEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AvisoTelefono2 = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    AvisoTelefono_Origen = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    AvisoTelefono2_Origen = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    AvisoEmail_Origen = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DatosAdicionales_Origen = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    HoraMannanaDe_Origen = table.Column<float>(type: "real", nullable: true),
                    HoraMannanaA_Origen = table.Column<float>(type: "real", nullable: true),
                    HoraTardeDe_Origen = table.Column<float>(type: "real", nullable: true),
                    HoraTardeA_Origen = table.Column<float>(type: "real", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExpedicionesDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_Direcciones_EntidadesOrigen",
                        column: x => x.DirSalida_EntidadOrigenID,
                        principalTable: "Direcciones_EntidadesOrigen",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_Direcciones_EntidadesOrigenEntrega",
                        column: x => x.DirEntrega_EntidadOrigenID,
                        principalTable: "Direcciones_EntidadesOrigen",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_DocumentosGestion",
                        column: x => x.DGOrigenID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_EXP_PaquetesFormatos",
                        column: x => x.PaqueteFormatoID,
                        principalTable: "EXP_PaquetesFormatos",
                        principalColumn: "IDFormato");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_Expediciones",
                        column: x => x.CabeceraID,
                        principalTable: "Expediciones",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_ExpedicionesDetalle",
                        column: x => x.LineaID,
                        principalTable: "ExpedicionesDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_ExpedicionesDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ExpedicionesDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_ExpedicionesEstados",
                        column: x => x.EstadoID,
                        principalTable: "ExpedicionesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_PortesTipos",
                        column: x => x.PortesTipoID,
                        principalTable: "PortesTipos",
                        principalColumn: "IDPortesTipo");
                    table.ForeignKey(
                        name: "FK_ExpedicionesDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "AlmacenesUbicaciones",
                columns: table => new
                {
                    IDUbicacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UbicacionID = table.Column<int>(type: "int", nullable: true),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValueSql: "('#')"),
                    Nivel = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlmacenesUbicaciones", x => x.IDUbicacion);
                    table.UniqueConstraint("AK_AlmacenesUbicaciones_IDUbicacion_AlmacenID", x => new { x.IDUbicacion, x.AlmacenID });
                    table.ForeignKey(
                        name: "FK_AlmacenesUbicaciones_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AlmacenesUbicaciones_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    FEmision = table.Column<DateTime>(type: "datetime", nullable: false),
                    DocumentoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDetalle_CRM_Campanyas",
                        column: x => x.CabeceraID,
                        principalTable: "CRM_Campanyas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDetalle_CRM_CampanyasDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "CRM_CampanyasDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDetalle_CRM_CampanyasDocumentos",
                        column: x => x.DocumentoID,
                        principalTable: "CRM_CampanyasDocumentos",
                        principalColumn: "IDDocumento");
                });

            migrationBuilder.CreateTable(
                name: "ISO_PuestosRequisitos",
                columns: table => new
                {
                    PuestoID = table.Column<int>(type: "int", nullable: false),
                    RequisitoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_PuestosRequisitos", x => new { x.PuestoID, x.RequisitoID });
                    table.ForeignKey(
                        name: "FK_ISO_PuestosRequisitos_ISO_Requisitos",
                        column: x => x.RequisitoID,
                        principalTable: "ISO_Requisitos",
                        principalColumn: "IDRequisito",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_PuestosRequisitos_Puestos",
                        column: x => x.PuestoID,
                        principalTable: "Puestos",
                        principalColumn: "IDPuesto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosTipos",
                columns: table => new
                {
                    IDProductoTipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FormularioID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    GestStock = table.Column<bool>(type: "bit", nullable: false),
                    GestLotes = table.Column<bool>(type: "bit", nullable: false),
                    GestAtributos = table.Column<bool>(type: "bit", nullable: false),
                    GestFamilias = table.Column<bool>(type: "bit", nullable: false),
                    GestVentasMercaderias = table.Column<bool>(type: "bit", nullable: false),
                    GestTarifasVenta = table.Column<bool>(type: "bit", nullable: false),
                    GestFabricacion = table.Column<bool>(type: "bit", nullable: false),
                    Codigo = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AlmacenID_def = table.Column<int>(type: "int", nullable: true),
                    UbicacionID_def = table.Column<int>(type: "int", nullable: true),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    Factor = table.Column<double>(type: "float", nullable: true),
                    UnidadAgrupacion = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true),
                    IsCompuesto = table.Column<bool>(type: "bit", nullable: false),
                    IsDetalleCompuesto = table.Column<bool>(type: "bit", nullable: false),
                    IsComponente = table.Column<bool>(type: "bit", nullable: false),
                    IsConjunto = table.Column<bool>(type: "bit", nullable: false),
                    GestMedidas = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    GestAlmacen = table.Column<bool>(type: "bit", nullable: false),
                    Default_Gest_Stock = table.Column<bool>(type: "bit", nullable: false, comment: "Valor por defecto para el campo Gest_Stock en Productos"),
                    Default_StockNegativo = table.Column<bool>(type: "bit", nullable: false, comment: "Valor por defecto para el campo StockNegativo en Productos"),
                    Default_Gest_Almacen = table.Column<bool>(type: "bit", nullable: false, comment: "Valor por defecto para el campo Gest_Almacen en Productos"),
                    Default_Gest_Lotes = table.Column<bool>(type: "bit", nullable: false, comment: "Valor por defecto para el campo Gest_Lotes en Productos"),
                    Default_Gest_Margen = table.Column<bool>(type: "bit", nullable: false, comment: "Valor por defecto para el campo Gest_Margen en Productos"),
                    Default_Margen = table.Column<decimal>(type: "money", nullable: false, comment: "Valor por defecto para el campo Margen en Productos"),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    GestCorte = table.Column<bool>(type: "bit", nullable: false),
                    Default_Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    CtaCompras = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaVentas = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    GestPreciosLotes = table.Column<bool>(type: "bit", nullable: false),
                    Default_Gest_PreciosLotes = table.Column<bool>(type: "bit", nullable: false),
                    wm_Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    wm_Description = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    wm_Keyword = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    Default_MargenCompraID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((5))"),
                    IsConjuntoParametros = table.Column<bool>(type: "bit", nullable: false),
                    GestCorte_Multiplos = table.Column<bool>(type: "bit", nullable: false),
                    GestCorte_Numero = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosTipos", x => x.IDProductoTipo);
                    table.ForeignKey(
                        name: "FK_ProductosTipos_AlmacenesUbicaciones",
                        columns: x => new { x.UbicacionID_def, x.AlmacenID_def },
                        principalTable: "AlmacenesUbicaciones",
                        principalColumns: new[] { "IDUbicacion", "AlmacenID" });
                    table.ForeignKey(
                        name: "FK_ProductosTipos_Formularios",
                        column: x => x.FormularioID,
                        principalTable: "Formularios",
                        principalColumn: "IDFormulario",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductosTipos_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_ProductosTipos_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_ProductosTipos_MargenesTipos1",
                        column: x => x.Default_MargenCompraID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_ProductosTipos_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "TPV",
                columns: table => new
                {
                    IDTPV = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Numero = table.Column<int>(type: "int", nullable: false),
                    Asignada = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    Descatalogada = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    AlmacenID_def = table.Column<int>(type: "int", nullable: true),
                    UbicacionID_def = table.Column<int>(type: "int", nullable: true),
                    CajonConnected = table.Column<bool>(type: "bit", nullable: true),
                    Puerto_Cajon = table.Column<int>(type: "int", nullable: true),
                    Codigo_Puerto_Cajon = table.Column<int>(type: "int", nullable: true),
                    Cajon_OpenString = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Puerto_Impresora = table.Column<int>(type: "int", nullable: true),
                    Codigo_Puerto_Impresora = table.Column<int>(type: "int", nullable: true),
                    VisorConnected = table.Column<bool>(type: "bit", nullable: true),
                    Puerto_Visor = table.Column<int>(type: "int", nullable: true),
                    Codigo_Puerto_Visor = table.Column<int>(type: "int", nullable: true),
                    LongMax_Visor = table.Column<int>(type: "int", nullable: true),
                    SharedPrinterName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    AllowMultiplesInstances = table.Column<bool>(type: "bit", nullable: false),
                    PadConnected = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    SignEmbed = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    SignLeft = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    SignRight = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    SignTop = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    SignBottom = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    CertPath = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    CertKeyPath = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    CertPass = table.Column<byte[]>(type: "varbinary(256)", maxLength: 256, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPV", x => x.IDTPV);
                    table.ForeignKey(
                        name: "FK_TPV_AlmacenesUbicaciones",
                        columns: x => new { x.UbicacionID_def, x.AlmacenID_def },
                        principalTable: "AlmacenesUbicaciones",
                        principalColumns: new[] { "IDUbicacion", "AlmacenID" });
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionTiposLineaProductosTipos",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionTiposLineaProductosTipos", x => new { x.DocumentoGestionID, x.TipoLineaID, x.ProductoTipoID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLineaProductosTipos_DocumentosGestionTiposLinea",
                        columns: x => new { x.DocumentoGestionID, x.TipoLineaID },
                        principalTable: "DocumentosGestionTiposLinea",
                        principalColumns: new[] { "DocumentoGestionID", "TipoLineaID" },
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocumentosGestionTiposLineaProductosTipos_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                });

            migrationBuilder.CreateTable(
                name: "Familias",
                columns: table => new
                {
                    IDFamilia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FamiliaID = table.Column<int>(type: "int", nullable: true),
                    CatalogoAtributoID = table.Column<int>(type: "int", nullable: true),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Descripcion = table.Column<string>(type: "text", nullable: true),
                    CtaCompras = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaVentas = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    Orden = table.Column<int>(type: "int", nullable: false),
                    wm_Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    wm_Description = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    wm_Keyword = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    Imprimir = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Familias", x => x.IDFamilia);
                    table.ForeignKey(
                        name: "FK_Familias_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_Familias_CatalogosAtributos",
                        column: x => x.CatalogoAtributoID,
                        principalTable: "CatalogosAtributos",
                        principalColumn: "IDCatalogoAtributo");
                    table.ForeignKey(
                        name: "FK_Familias_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia");
                    table.ForeignKey(
                        name: "FK_Familias_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresDescuentos_Root",
                columns: table => new
                {
                    IDPersona_PT = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresDescuentos_Root", x => x.IDPersona_PT);
                    table.ForeignKey(
                        name: "FK_ProveedoresDescuentos_Root_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_ProveedoresDescuentos_Root_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TPVCambios",
                columns: table => new
                {
                    IDTPVCambio = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TPVID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVCambios", x => x.IDTPVCambio);
                    table.ForeignKey(
                        name: "FK_TPVCambios_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_TPVCambios_TPV",
                        column: x => x.TPVID,
                        principalTable: "TPV",
                        principalColumn: "IDTPV");
                });

            migrationBuilder.CreateTable(
                name: "TPVPagosPorCaja",
                columns: table => new
                {
                    IDTPVPagoPorCaja = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TPVID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    Concepto = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVPagosPorCaja", x => x.IDTPVPagoPorCaja);
                    table.ForeignKey(
                        name: "FK_TPVPagosPorCaja_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_TPVPagosPorCaja_TPV",
                        column: x => x.TPVID,
                        principalTable: "TPV",
                        principalColumn: "IDTPV");
                });

            migrationBuilder.CreateTable(
                name: "Familias_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FamiliaID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Familias_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_Familias_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_Familias_DatosDinamicos_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosBase",
                columns: table => new
                {
                    IDProductoBase = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    FamiliaID = table.Column<int>(type: "int", nullable: true),
                    MarcaID = table.Column<int>(type: "int", nullable: true),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false),
                    ProductoEstadoID = table.Column<int>(type: "int", nullable: false),
                    ReferenciaProveedor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CodigoBarras = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CodigoPropio = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FBaja = table.Column<DateTime>(type: "datetime", nullable: true),
                    StockMin = table.Column<double>(type: "float", nullable: false),
                    StockMax = table.Column<double>(type: "float", nullable: false),
                    StockActual = table.Column<double>(type: "float", nullable: false),
                    StockPedido = table.Column<double>(type: "float", nullable: false),
                    StockNegativo = table.Column<bool>(type: "bit", nullable: false),
                    PrecioCompra = table.Column<double>(type: "float", nullable: false),
                    PrecioVenta = table.Column<double>(type: "float", nullable: false),
                    PrecioCompraMedio = table.Column<double>(type: "float", nullable: false),
                    PrecioVentaMedio = table.Column<double>(type: "float", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    Gest_Lotes = table.Column<bool>(type: "bit", nullable: false),
                    Gest_Stock = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Gest_Almacen = table.Column<bool>(type: "bit", nullable: false),
                    Gest_Margen = table.Column<bool>(type: "bit", nullable: false),
                    Margen = table.Column<double>(type: "float", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: false),
                    TemporadaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PVP = table.Column<double>(type: "float", nullable: false),
                    CtaCompras = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaVentas = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosBase", x => x.IDProductoBase);
                    table.ForeignKey(
                        name: "FK_ProductosBase_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_ProductosBase_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia");
                    table.ForeignKey(
                        name: "FK_ProductosBase_Marcas",
                        column: x => x.MarcaID,
                        principalTable: "Marcas",
                        principalColumn: "IDMarca");
                    table.ForeignKey(
                        name: "FK_ProductosBase_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_ProductosBase_ProductosBase_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ProductosBase_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ProductosBase_ProductosEstado",
                        column: x => x.ProductoEstadoID,
                        principalTable: "ProductosEstado",
                        principalColumn: "IDProductoEstado");
                    table.ForeignKey(
                        name: "FK_ProductosBase_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                });

            migrationBuilder.CreateTable(
                name: "ProveedoresDescuentos",
                columns: table => new
                {
                    IDPersonaFamilia = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    FamiliaID = table.Column<int>(type: "int", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Apply_SubFamilias = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProveedoresDescuentos", x => x.IDPersonaFamilia);
                    table.ForeignKey(
                        name: "FK_ProveedoresDescuentos_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProveedoresDescuentos_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sync_Connections_Familias",
                columns: table => new
                {
                    ConnectionID = table.Column<int>(type: "int", nullable: false),
                    FamiliaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sync_Connections_Familias", x => new { x.ConnectionID, x.FamiliaID });
                    table.ForeignKey(
                        name: "FK_sync_Connections_Familias_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_sync_Connections_Familias_sync_Connections",
                        column: x => x.ConnectionID,
                        principalTable: "sync_Connections",
                        principalColumn: "IDConnection",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Productos",
                columns: table => new
                {
                    IDProducto = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    ProductoBaseID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    FamiliaID = table.Column<int>(type: "int", nullable: true),
                    MarcaID = table.Column<int>(type: "int", nullable: true),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false),
                    ProductoEstadoID = table.Column<int>(type: "int", nullable: false),
                    ReferenciaProveedor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CodigoBarras = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CodigoPropio = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FBaja = table.Column<DateTime>(type: "datetime", nullable: true),
                    StockMin = table.Column<double>(type: "float", nullable: false),
                    StockMax = table.Column<double>(type: "float", nullable: false),
                    StockActual = table.Column<double>(type: "float", nullable: false),
                    StockPedido = table.Column<double>(type: "float", nullable: false),
                    StockNegativo = table.Column<bool>(type: "bit", nullable: false),
                    PrecioCompra = table.Column<double>(type: "float", nullable: false),
                    PrecioCompraMedio = table.Column<double>(type: "float", nullable: false),
                    PrecioVenta = table.Column<double>(type: "float", nullable: false),
                    PrecioVentaMedio = table.Column<double>(type: "float", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    Gest_Lotes = table.Column<bool>(type: "bit", nullable: false),
                    Gest_Stock = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)"),
                    Gest_Almacen = table.Column<bool>(type: "bit", nullable: false),
                    Gest_Margen = table.Column<bool>(type: "bit", nullable: false),
                    Margen = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    TarifaDiaria = table.Column<bool>(type: "bit", nullable: false),
                    IVAClaseID = table.Column<int>(type: "int", nullable: false),
                    TemporadaID = table.Column<int>(type: "int", nullable: true),
                    CtaCompras = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CtaVentas = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DBState = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    PVP = table.Column<double>(type: "float", nullable: false),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    DescuentoMaximo = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    MedidaID_Corte = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    Multiplicador = table.Column<double>(type: "float", nullable: false),
                    Gest_PreciosLotes = table.Column<bool>(type: "bit", nullable: false),
                    InstalacionRequired = table.Column<bool>(type: "bit", nullable: false),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    MargenCompraID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((5))"),
                    PrecioCompraSugerido = table.Column<double>(type: "float", nullable: false),
                    DtoCompraSugerido = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    PrecioCompraSinDtoSugerido = table.Column<double>(type: "float", nullable: false),
                    ProductoCompuestoPlantillaID = table.Column<int>(type: "int", nullable: true),
                    StockWeb = table.Column<double>(type: "float", nullable: false),
                    StockDisponible = table.Column<double>(type: "float", nullable: false),
                    StockVirtual = table.Column<double>(type: "float", nullable: false),
                    StockReservado = table.Column<double>(type: "float", nullable: false),
                    DtoCompraUltima = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    PrecioCompraSinDtoUltima = table.Column<double>(type: "float", nullable: false),
                    StockPendienteRecibir = table.Column<double>(type: "float", nullable: false),
                    AbreviaturaLote = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TiempoCaducidad = table.Column<int>(type: "int", nullable: true),
                    StockPendienteServir = table.Column<double>(type: "float", nullable: false),
                    GestCorte_Multiplos = table.Column<bool>(type: "bit", nullable: false),
                    GestCorte_Numero = table.Column<bool>(type: "bit", nullable: false),
                    Multiplo_Corte_X = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    Multiplo_Corte_Y = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    Multiplo_Corte_Z = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    LoteMinCompra = table.Column<double>(type: "float", nullable: false),
                    LoteMinVenta = table.Column<double>(type: "float", nullable: false),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Productos", x => x.IDProducto);
                    table.ForeignKey(
                        name: "FK_Productos_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_Productos_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_Productos_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia");
                    table.ForeignKey(
                        name: "FK_Productos_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_Productos_Marcas",
                        column: x => x.MarcaID,
                        principalTable: "Marcas",
                        principalColumn: "IDMarca");
                    table.ForeignKey(
                        name: "FK_Productos_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_Productos_MargenesTipos1",
                        column: x => x.MargenCompraID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_Productos_Medidas_Corte",
                        column: x => x.MedidaID_Corte,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_Productos_ProductosBase",
                        column: x => x.ProductoBaseID,
                        principalTable: "ProductosBase",
                        principalColumn: "IDProductoBase",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Productos_ProductosEstado",
                        column: x => x.ProductoEstadoID,
                        principalTable: "ProductosEstado",
                        principalColumn: "IDProductoEstado");
                    table.ForeignKey(
                        name: "FK_Productos_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_Productos_Productos_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "Productos_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_Productos_UnidadesMedida_Corte",
                        columns: x => new { x.UnidadMedidaID_Corte, x.MedidaID_Corte },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                    table.ForeignKey(
                        name: "FK_Productos_UnidadesMedida_Corte_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_Productos_UnidadesMedida_Corte_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_Productos_UnidadesMedida_Corte_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK__Productos__Emple__2184288F",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                });

            migrationBuilder.CreateTable(
                name: "UnidadesProductoBase",
                columns: table => new
                {
                    ProductoBaseID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Factor = table.Column<double>(type: "float", nullable: false),
                    UnidadAgrupacion = table.Column<decimal>(type: "decimal(18,2)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UnidadesProductoBase", x => new { x.ProductoBaseID, x.MedidaID });
                    table.ForeignKey(
                        name: "FK_UnidadesProductoBase_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_UnidadesProductoBase_ProductosBase",
                        column: x => x.ProductoBaseID,
                        principalTable: "ProductosBase",
                        principalColumn: "IDProductoBase",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UnidadesProductoBase_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComisionesDetalle",
                columns: table => new
                {
                    IDComisionDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComisionID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    CantidadDesde = table.Column<double>(type: "float", nullable: false),
                    Comision = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComisionesDetalle", x => x.IDComisionDetalle);
                    table.ForeignKey(
                        name: "FK_ComisionesDetalle_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ComisionesDetalle_ComisionesOperaciones",
                        column: x => x.OperacionID,
                        principalTable: "ComisionesOperaciones",
                        principalColumn: "IDOperacion");
                    table.ForeignKey(
                        name: "FK_ComisionesDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_ComisionesDetalle_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "CRM_PuntosTablaDetalle",
                columns: table => new
                {
                    IDPuntosTablaDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PuntosTablaID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    ValorPunto = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_PuntosTablaDetalle", x => x.IDPuntosTablaDetalle);
                    table.UniqueConstraint("AK_CRM_PuntosTablaDetalle_IDPuntosTablaDetalle_PuntosTablaID_ProductoID", x => new { x.IDPuntosTablaDetalle, x.PuntosTablaID, x.ProductoID });
                    table.ForeignKey(
                        name: "FK_CRM_PuntosTablaDetalle_CRM_PuntosTabla",
                        column: x => x.PuntosTablaID,
                        principalTable: "CRM_PuntosTabla",
                        principalColumn: "IDPuntosTabla",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_PuntosTablaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FasesCentros",
                columns: table => new
                {
                    IDFaseCentro = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaseID = table.Column<int>(type: "int", nullable: false),
                    CentroID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: true),
                    TiempoUnitario = table.Column<double>(type: "float", nullable: false),
                    TiempoPreparacion = table.Column<double>(type: "float", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FasesCentros", x => x.IDFaseCentro);
                    table.ForeignKey(
                        name: "FK_FasesCentros_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro");
                    table.ForeignKey(
                        name: "FK_FasesCentros_Fases",
                        column: x => x.FaseID,
                        principalTable: "Fases",
                        principalColumn: "IDFase",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FasesCentros_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "ISO_MantenimientosDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_MantenimientosDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ISO_MantenimientosDetalle_ISO_Mantenimientos",
                        column: x => x.CabeceraID,
                        principalTable: "ISO_Mantenimientos",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_MantenimientosDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "ISO_Productos",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    BuenasPracticas = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Productos", x => x.ProductoID);
                    table.ForeignKey(
                        name: "FK_ISO_Productos_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_ProductosRequisitos",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    RequisitoID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_ProductosRequisitos", x => new { x.ProductoID, x.RequisitoID });
                    table.ForeignKey(
                        name: "FK_ISO_ProductosRequisitos_ISO_Requisitos",
                        column: x => x.RequisitoID,
                        principalTable: "ISO_Requisitos",
                        principalColumn: "IDRequisito");
                    table.ForeignKey(
                        name: "FK_ISO_ProductosRequisitos_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LiquidacionesComercialDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true, comment: "Lo Informaremos en los Apartados, para coger informaci¾n de la Factura sin usar DGT"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PrecioVenta = table.Column<double>(type: "float", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    BIVenta = table.Column<decimal>(type: "money", nullable: false),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    ImporteComision = table.Column<double>(type: "float", nullable: false),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LiquidacionesComercialDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_ComisionesOperaciones",
                        column: x => x.OperacionID,
                        principalTable: "ComisionesOperaciones",
                        principalColumn: "IDOperacion");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_LiquidacionesComercial",
                        column: x => x.CabeceraID,
                        principalTable: "LiquidacionesComercial",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_LiquidacionesComercialDetalle",
                        column: x => x.LineaID,
                        principalTable: "LiquidacionesComercialDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_LiquidacionesComercialDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "LiquidacionesComercialDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_LiquidacionesComercialEstados",
                        column: x => x.EstadoID,
                        principalTable: "LiquidacionesComercialEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_LiquidacionesComercialDetalle_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVentaDetalle_CDBO",
                columns: table => new
                {
                    IDCDBO = table.Column<long>(type: "bigint", nullable: false, comment: "Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla"),
                    ProcedimientoEnsayo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    TecnicaAnalisis = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Unidades = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LimiteCuantificacion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LimiteDeteccion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ValorParametrico = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TiempoMaximo = table.Column<double>(type: "float", nullable: false),
                    TiempoEspera = table.Column<double>(type: "float", nullable: false),
                    Acondicionamiento = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Envase = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Incertidumbre = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "((0))"),
                    LimiteMaximo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Acreditado = table.Column<bool>(type: "bit", nullable: false),
                    ProductoCompuestoID = table.Column<int>(type: "int", nullable: true),
                    Frecuencia = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Legislacion = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    ProcedimientoEnsayoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVentaDetalle_CDBO", x => x.IDCDBO);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_CDBO_LAB_ProcedimientosEnsayo",
                        column: x => x.ProcedimientoEnsayoID,
                        principalTable: "LAB_ProcedimientosEnsayo",
                        principalColumn: "IDProcedimiento");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_CDBO_Productos",
                        column: x => x.ProductoCompuestoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "Productos_Atribs_Valores",
                columns: table => new
                {
                    IDPAV = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    AtributoProductoID = table.Column<int>(type: "int", nullable: false),
                    ValorProductoID = table.Column<int>(type: "int", nullable: false),
                    Indice = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Productos_Atribs_Valores", x => x.IDPAV);
                    table.ForeignKey(
                        name: "FK_Productos_Atribs_Valores_AtributosProductos",
                        column: x => x.AtributoProductoID,
                        principalTable: "AtributosProductos",
                        principalColumn: "IDAtributoProducto");
                    table.ForeignKey(
                        name: "FK_Productos_Atribs_Valores_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Productos_Atribs_Valores_ValoresProductos",
                        column: x => x.ValorProductoID,
                        principalTable: "ValoresProductos",
                        principalColumn: "IDValorProducto");
                });

            migrationBuilder.CreateTable(
                name: "Productos_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Productos_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_Productos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_Productos_DatosDinamicos_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosClientes",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrecioTarifa = table.Column<double>(type: "float", nullable: false),
                    Tarifa = table.Column<bool>(type: "bit", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    CalculoTipo = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    Notas = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosClientes", x => new { x.ProductoID, x.PersonaID });
                    table.ForeignKey(
                        name: "FK_ProductosClientes_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "ProductosCompuestos",
                columns: table => new
                {
                    IDProductoCompuesto = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoCompuestoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: true),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    PrecioVenta = table.Column<double>(type: "float", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    ProductoBaseID = table.Column<int>(type: "int", nullable: true),
                    NumeroOrden = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosCompuestos", x => x.IDProductoCompuesto);
                    table.ForeignKey(
                        name: "FK_ProductosCompuestos_Productos",
                        column: x => x.ProductoCompuestoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductosCompuestos_Productos1",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_ProductosCompuestos_ProductosCompuestos_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ProductosCompuestos_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ProductosCompuestos_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "ProductosCompuestosPlantillas_Log",
                columns: table => new
                {
                    IDLog = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoGeneratorID = table.Column<int>(type: "int", nullable: false, comment: "IDProducto que llama al proceso"),
                    ProductoCompuestoPlantillaID = table.Column<int>(type: "int", nullable: false, comment: "IDPlantilla que tiene asociado el ProductoGeneratorID en el momento de la llamada al proceso de generaci¾n de compuestos"),
                    ProductoCompuestoID = table.Column<int>(type: "int", nullable: false, comment: "IDProductoCompuesto que se genera una vez llamado al proceso")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosCompuestosPlantillas_Log", x => x.IDLog);
                    table.ForeignKey(
                        name: "FK_ProductosCompuestosPlantillas_Log_Productos",
                        column: x => x.ProductoGeneratorID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductosCompuestosPlantillas_Log_ProductosCompuestosPlantillas",
                        column: x => x.ProductoCompuestoPlantillaID,
                        principalTable: "ProductosCompuestosPlantillas",
                        principalColumn: "IDProductoCompuestoPlantilla");
                });

            migrationBuilder.CreateTable(
                name: "ProductosSugeridos",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    ProductoSugeridoID = table.Column<int>(type: "int", nullable: false),
                    CantidadDesde = table.Column<double>(type: "float", nullable: false),
                    ProductoCompuestoID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    Requerido = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosSugeridos", x => new { x.ProductoID, x.ProductoSugeridoID, x.CantidadDesde });
                    table.ForeignKey(
                        name: "FK_ProductosSugeridos_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductosSugeridos_Productos1",
                        column: x => x.ProductoSugeridoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "TarifasDetalle",
                columns: table => new
                {
                    IDTarifaDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TarifaID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    CantidadDesde = table.Column<double>(type: "float", nullable: false),
                    CalculoTipo = table.Column<int>(type: "int", nullable: false, comment: "1 > Fijo, 2 > Margen"),
                    Margen_Origen = table.Column<int>(type: "int", nullable: true, comment: "Coste ·ltima Entrada, Coste Medio, Precio Venta"),
                    Margen_Operacion = table.Column<int>(type: "int", nullable: true, comment: "%, +"),
                    Margen = table.Column<double>(type: "float", nullable: false, comment: "% o importe seg·n Margen_Operacion"),
                    PrecioVenta = table.Column<double>(type: "float", nullable: false),
                    PVP = table.Column<double>(type: "float", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    FechaUltimaActualizacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    MargenCosteAdicional = table.Column<bool>(type: "bit", nullable: false),
                    MargenCosteAdicional_Operacion = table.Column<int>(type: "int", nullable: true),
                    MargenCosteAdicional_Margen = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TarifasDetalle", x => x.IDTarifaDetalle);
                    table.ForeignKey(
                        name: "FK_TarifasDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_TarifasDetalle_Tarifas",
                        column: x => x.TarifaID,
                        principalTable: "Tarifas",
                        principalColumn: "IDTarifa",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UnidadesProducto",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Factor = table.Column<double>(type: "float", nullable: false),
                    UnidadAgrupacion = table.Column<decimal>(type: "decimal(18,2)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UnidadesProducto", x => new { x.ProductoID, x.MedidaID });
                    table.ForeignKey(
                        name: "FK_UnidadesProducto_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_UnidadesProducto_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UnidadesProducto_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosBaseUnidadesModulos",
                columns: table => new
                {
                    ProductoBaseID = table.Column<int>(type: "int", nullable: false),
                    ModuloGestionID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosBaseUnidadesModulos", x => new { x.ProductoBaseID, x.ModuloGestionID });
                    table.ForeignKey(
                        name: "FK_ProductosBaseUnidadesModulos_ModulosGestion",
                        column: x => x.ModuloGestionID,
                        principalTable: "ModulosGestion",
                        principalColumn: "IDModuloGestion");
                    table.ForeignKey(
                        name: "FK_ProductosBaseUnidadesModulos_UnidadesProductoBase",
                        columns: x => new { x.ProductoBaseID, x.MedidaID },
                        principalTable: "UnidadesProductoBase",
                        principalColumns: new[] { "ProductoBaseID", "MedidaID" },
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosCodigosBarras",
                columns: table => new
                {
                    IDProductoCodigoBarras = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    CodigoBarras = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosCodigosBarras", x => x.IDProductoCodigoBarras);
                    table.ForeignKey(
                        name: "FK_ProductosCodigosBarras_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                    table.ForeignKey(
                        name: "FK_ProductosCodigosBarras_UnidadesProducto",
                        columns: x => new { x.ProductoID, x.MedidaID },
                        principalTable: "UnidadesProducto",
                        principalColumns: new[] { "ProductoID", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "ProductosCompuestosPlantillasComponentes",
                columns: table => new
                {
                    IDProductoCompuestoPlantillaComponente = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoCompuestoPlantillaID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosCompuestosPlantillasComponentes", x => x.IDProductoCompuestoPlantillaComponente);
                    table.ForeignKey(
                        name: "FK_ProductosCompuestosPlantillasComponentes_ProductosCompuestosPlantillas",
                        column: x => x.ProductoCompuestoPlantillaID,
                        principalTable: "ProductosCompuestosPlantillas",
                        principalColumn: "IDProductoCompuestoPlantilla");
                    table.ForeignKey(
                        name: "FK_ProductosCompuestosPlantillasComponentes_UnidadesProducto",
                        columns: x => new { x.ProductoID, x.MedidaID },
                        principalTable: "UnidadesProducto",
                        principalColumns: new[] { "ProductoID", "MedidaID" },
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosConjuntos",
                columns: table => new
                {
                    IDConjunto = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    CantidadMinima = table.Column<double>(type: "float", nullable: false),
                    CantidadAgrupacion = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    RutaID = table.Column<int>(type: "int", nullable: true),
                    PorcentajeDefectuosos = table.Column<decimal>(type: "money", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    ParteFormularioID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosConjuntos", x => x.IDConjunto);
                    table.ForeignKey(
                        name: "FK_ProductosConjuntos_PartesFormularios",
                        column: x => x.ParteFormularioID,
                        principalTable: "PartesFormularios",
                        principalColumn: "IDParteFormulario");
                    table.ForeignKey(
                        name: "FK_ProductosConjuntos_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_ProductosConjuntos_UnidadesProducto",
                        columns: x => new { x.ProductoID, x.MedidaID },
                        principalTable: "UnidadesProducto",
                        principalColumns: new[] { "ProductoID", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "ProductosUnidadesModulos",
                columns: table => new
                {
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    ModuloGestionID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosUnidadesModulos", x => new { x.ProductoID, x.ModuloGestionID });
                    table.ForeignKey(
                        name: "FK_ProductosUnidadesModulos_ModulosGestion",
                        column: x => x.ModuloGestionID,
                        principalTable: "ModulosGestion",
                        principalColumn: "IDModuloGestion");
                    table.ForeignKey(
                        name: "FK_ProductosUnidadesModulos_UnidadesProducto",
                        columns: x => new { x.ProductoID, x.MedidaID },
                        principalTable: "UnidadesProducto",
                        principalColumns: new[] { "ProductoID", "MedidaID" },
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductosConjuntos_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ConjuntoID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosConjuntos_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_ProductosConjuntos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_ProductosConjuntos_DatosDinamicos_ProductosConjuntos",
                        column: x => x.ConjuntoID,
                        principalTable: "ProductosConjuntos",
                        principalColumn: "IDConjunto",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesCompra",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesCompra_1", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_AlbaranesCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "AlbaranesCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_AlbaranesCompra_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "AlbaranesCompra_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_PortesTipos",
                        column: x => x.PortesTipoID,
                        principalTable: "PortesTipos",
                        principalColumn: "IDPortesTipo");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_ProveedoresContactos",
                        column: x => x.ContactoID,
                        principalTable: "ProveedoresContactos",
                        principalColumn: "id");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_ProveedoresDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ProveedoresDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompra_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesCompraDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesCompraDetalle_1", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_AlbaranesCompra",
                        column: x => x.CabeceraID,
                        principalTable: "AlbaranesCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_AlbaranesCompraDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "AlbaranesCompraDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_AlbaranesCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "AlbaranesCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesCompraDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesVenta",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false, comment: "0: Sin cßlculo; 1: Automßtico; 2: Manual"),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    DirRecogida = table.Column<bool>(type: "bit", nullable: false),
                    DirRecogida_EntidadOrigenID = table.Column<int>(type: "int", nullable: true),
                    DirRecogida_KeyFieldValueID = table.Column<int>(type: "int", nullable: true),
                    DirRecogida_DireccionID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false),
                    EmailSent = table.Column<bool>(type: "bit", nullable: false),
                    EmailSentFEnvio = table.Column<DateTime>(type: "datetime", nullable: true),
                    TipoID_1 = table.Column<int>(type: "int", nullable: true),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesVenta", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_AlbaranesVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "AlbaranesVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_AlbaranesVenta_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "AlbaranesVenta_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Direcciones_EntidadesOrigen",
                        column: x => x.DirRecogida_EntidadOrigenID,
                        principalTable: "Direcciones_EntidadesOrigen",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Empleados1",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_AlbaranesVenta_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesVentaDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<double>(type: "float", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    Incluir_MO = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Incluir_Material = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesVentaDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_AlbaranesVenta",
                        column: x => x.CabeceraID,
                        principalTable: "AlbaranesVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_AlbaranesVentaDetalle",
                        column: x => x.LineaID,
                        principalTable: "AlbaranesVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_AlbaranesVentaDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "AlbaranesVentaDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_AlbaranesVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "AlbaranesVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "AlbaranesVentaAnticipos",
                columns: table => new
                {
                    IDAnticipo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraDestinoID = table.Column<int>(type: "int", nullable: true),
                    VencimientoDestinoID = table.Column<int>(type: "int", nullable: true),
                    NumeroAnticipo = table.Column<string>(type: "char(30)", unicode: false, fixedLength: true, maxLength: 30, nullable: false, defaultValueSql: "('(#)')"),
                    FechaEmision = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FechaCargo = table.Column<DateTime>(type: "datetime", nullable: false),
                    PersonaNIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    PersonaNombre = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    MedioID = table.Column<int>(type: "int", nullable: false),
                    Pagado = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Traspasado = table.Column<bool>(type: "bit", nullable: false),
                    CodigoConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Efectos = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IBAN = table.Column<bool>(type: "bit", nullable: true),
                    CuentaEmpresaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlbaranesVentaAnticipos", x => x.IDAnticipo);
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaAnticipos_AlbaranesVenta",
                        column: x => x.CabeceraOrigenID,
                        principalTable: "AlbaranesVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaAnticipos_EmpresasCuentasBancarias",
                        column: x => x.CuentaEmpresaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                    table.ForeignKey(
                        name: "FK_AlbaranesVentaAnticipos_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_Alquileres",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    DireccionTrabajo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ContactosTrabajo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Telefonos = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumeroDias = table.Column<int>(type: "int", nullable: true),
                    Aval = table.Column<bool>(type: "bit", nullable: false),
                    ImporteAval = table.Column<decimal>(type: "money", nullable: false),
                    Volumen = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_Alquileres", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_ALQ_AlquileresEstados",
                        column: x => x.EstadoID,
                        principalTable: "ALQ_AlquileresEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_ALQ_Alquileres_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ALQ_Alquileres_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_ALQ_Alquileres_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresDescuentosGenerales",
                columns: table => new
                {
                    IDDescuento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Acumular = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresDescuentosGenerales", x => x.IDDescuento);
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDescuentosGenerales_ALQ_Alquileres",
                        column: x => x.CabeceraID,
                        principalTable: "ALQ_Alquileres",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDescuentosGenerales_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDescuentosGenerales_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    NumeroDiasTotal = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    NumeroDiasFacturar = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    Incluir_MO = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Incluir_Material = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    DescuentoGeneral = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_ALQ_Alquileres",
                        column: x => x.CabeceraID,
                        principalTable: "ALQ_Alquileres",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_ALQ_AlquileresDetalle",
                        column: x => x.LineaID,
                        principalTable: "ALQ_AlquileresDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_ALQ_AlquileresDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ALQ_AlquileresDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_ALQ_AlquileresEstados",
                        column: x => x.EstadoID,
                        principalTable: "ALQ_AlquileresEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresPicking",
                columns: table => new
                {
                    IDPicking = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresPicking", x => x.IDPicking);
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresPicking_ALQ_Alquileres",
                        column: x => x.CabeceraID,
                        principalTable: "ALQ_Alquileres",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresPicking_ALQ_AlquileresPickingTipos",
                        column: x => x.TipoID,
                        principalTable: "ALQ_AlquileresPickingTipos",
                        principalColumn: "IDTipo");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_AlquileresDetallePicking",
                columns: table => new
                {
                    IDPickingDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    EnDocumento = table.Column<bool>(type: "bit", nullable: false),
                    PickingSalidaID = table.Column<int>(type: "int", nullable: true),
                    PickingEntradaID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    CantidadSalida = table.Column<double>(type: "float", nullable: false),
                    CantidadSalidaAuto = table.Column<bool>(type: "bit", nullable: false, comment: "Determina si la línea se la Cantidad se ha informado de forma automática (sin lectura)"),
                    CantidadEntrada = table.Column<double>(type: "float", nullable: false),
                    CantidadEntradaAuto = table.Column<bool>(type: "bit", nullable: false, comment: "Determina si la línea se la Cantidad se ha informado de forma automática (sin lectura)"),
                    Observaciones = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_AlquileresDetallePicking", x => x.IDPickingDetalle);
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetallePicking_ALQ_Alquileres",
                        column: x => x.CabeceraID,
                        principalTable: "ALQ_Alquileres",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetallePicking_PickingEntradaID_ALQ_AlquileresPicking",
                        column: x => x.PickingEntradaID,
                        principalTable: "ALQ_AlquileresPicking",
                        principalColumn: "IDPicking");
                    table.ForeignKey(
                        name: "FK_ALQ_AlquileresDetallePicking_PickingSalidaID_ALQ_AlquileresPicking",
                        column: x => x.PickingSalidaID,
                        principalTable: "ALQ_AlquileresPicking",
                        principalColumn: "IDPicking",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ALQ_Presupuestos",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    DireccionTrabajo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ContactosTrabajo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Telefonos = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumeroDias = table.Column<int>(type: "int", nullable: true),
                    Aval = table.Column<bool>(type: "bit", nullable: false),
                    ImporteAval = table.Column<decimal>(type: "money", nullable: false),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    Version = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_Presupuestos", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_ALQ_PresupuestosEstados",
                        column: x => x.EstadoID,
                        principalTable: "ALQ_PresupuestosEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_ALQ_Presupuestos_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ALQ_Presupuestos_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_ALQ_Presupuestos_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_PresupuestosDescuentosGenerales",
                columns: table => new
                {
                    IDDescuento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Acumular = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_PresupuestosDescuentosGenerales", x => x.IDDescuento);
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDescuentosGenerales_ALQ_Presupuestos",
                        column: x => x.CabeceraID,
                        principalTable: "ALQ_Presupuestos",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDescuentosGenerales_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDescuentosGenerales_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "ALQ_PresupuestosDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    FInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    NumeroDiasTotal = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    NumeroDiasFacturar = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    DescuentoGeneral = table.Column<decimal>(type: "money", nullable: false),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    Incluir_MO = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Incluir_Material = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ALQ_PresupuestosDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_ALQ_Presupuestos",
                        column: x => x.CabeceraID,
                        principalTable: "ALQ_Presupuestos",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosDetalle",
                        column: x => x.LineaID,
                        principalTable: "ALQ_PresupuestosDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ALQ_PresupuestosDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosEstados",
                        column: x => x.EstadoID,
                        principalTable: "ALQ_PresupuestosEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_ALQ_PresupuestosDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "Autofacturas",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    Contabilizada = table.Column<bool>(type: "bit", nullable: false),
                    FacturaCompraID = table.Column<int>(type: "int", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Autofacturas", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_Autofacturas_AutofacturasEstados",
                        column: x => x.EstadoID,
                        principalTable: "AutofacturasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Autofacturas_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_Autofacturas_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_Autofacturas_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Autofacturas_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "BienesAmortizables",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FechaAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(32)", unicode: false, maxLength: 32, nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FacturaCompraDetalleID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    FechaComienzoUso = table.Column<DateTime>(type: "datetime", nullable: false),
                    NaturalezaID = table.Column<int>(type: "int", nullable: false),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: true),
                    UbicacionID = table.Column<int>(type: "int", nullable: true),
                    ResponsableID = table.Column<int>(type: "int", nullable: true),
                    ValorBruto = table.Column<decimal>(type: "money", nullable: false),
                    ValorResidual = table.Column<decimal>(type: "money", nullable: false),
                    ValorAmortizable = table.Column<decimal>(type: "money", nullable: false),
                    ValorPendienteAmortizar = table.Column<decimal>(type: "money", nullable: false),
                    CategoriaID = table.Column<int>(type: "int", nullable: true),
                    CuentaAmortizacion = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    CuentaDotacion = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: false),
                    NDepreciaciones = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    LongitudPeriodo = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((12))"),
                    MetodoDepreciacionID = table.Column<int>(type: "int", nullable: false),
                    PrimeAmortProporcional = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    FechaBaja = table.Column<DateTime>(type: "datetime", nullable: true),
                    CausaBajaID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BienesAmortizables", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_BienesAmortizablesBajaCausas",
                        column: x => x.CausaBajaID,
                        principalTable: "BienesAmortizablesBajaCausas",
                        principalColumn: "IDCausaBaja");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_BienesAmortizablesCategorias",
                        column: x => x.CategoriaID,
                        principalTable: "BienesAmortizablesCategorias",
                        principalColumn: "IDCategoria");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_BienesAmortizablesEstados",
                        column: x => x.EstadoID,
                        principalTable: "BienesAmortizablesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_BienesAmortizablesNaturalezas",
                        column: x => x.NaturalezaID,
                        principalTable: "BienesAmortizablesNaturalezas",
                        principalColumn: "IDNaturaleza");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_BienesAmortizablesTipos",
                        column: x => x.TipoID,
                        principalTable: "BienesAmortizablesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_Empleados",
                        column: x => x.ResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_BienesAmortizables_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "Certificaciones",
                columns: table => new
                {
                    IDCertificacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentoOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<string>(type: "varchar(28)", unicode: false, maxLength: 28, nullable: true),
                    FechaEmision = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Importe = table.Column<double>(type: "float", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: false),
                    CuentaContable = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Concepto = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    FacturaDestinoID = table.Column<int>(type: "int", nullable: true),
                    FacturaDetalleDestinoID = table.Column<int>(type: "int", nullable: true),
                    FechaFactura = table.Column<DateTime>(type: "datetime", nullable: true),
                    AVDLiquidacion = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Certificaciones", x => x.IDCertificacion);
                    table.ForeignKey(
                        name: "FK_Certificaciones_AlbaranesVentaDetalle",
                        column: x => x.AVDLiquidacion,
                        principalTable: "AlbaranesVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_Certificaciones_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_Certificaciones_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                });

            migrationBuilder.CreateTable(
                name: "Clientes",
                columns: table => new
                {
                    IDPersona = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CodigoConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DepartamentoID = table.Column<int>(type: "int", nullable: true),
                    TipoID = table.Column<int>(type: "int", nullable: true),
                    DescuentoID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    MedioPagoID = table.Column<int>(type: "int", nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    RappelID = table.Column<int>(type: "int", nullable: true),
                    TipoPorteID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    NombreComercial = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    CIF_NIF = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Telefono = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExentoIVA = table.Column<bool>(type: "bit", nullable: false),
                    RecargoEq = table.Column<bool>(type: "bit", nullable: false),
                    PaginaWeb = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Estado = table.Column<int>(type: "int", nullable: false),
                    TipoFacturacionID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    DtoComercial = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DireccionFraID = table.Column<int>(type: "int", nullable: true),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    Efectos = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    CuentaBancariaID = table.Column<int>(type: "int", nullable: true, comment: "Cuenta bancaria por defecto para documentos"),
                    CuentaBancariaEmpresaID = table.Column<int>(type: "int", nullable: true),
                    CRM_Fidelizacion = table.Column<bool>(type: "bit", nullable: false, comment: "Indica si lleva Gesti¥n de fidelizaci¥n de puntos para el m¥dulo de CRM"),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    Bloqueado = table.Column<bool>(type: "bit", nullable: false),
                    DireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    NProveedor = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Facturae = table.Column<bool>(type: "bit", nullable: false),
                    FE_FormatoID = table.Column<int>(type: "int", nullable: true),
                    CopiaImpresa = table.Column<bool>(type: "bit", nullable: false),
                    FE_Email = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    TAI_EmailAviso = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    TipoIdentificacionID = table.Column<int>(type: "int", nullable: true),
                    M347_Excluir = table.Column<bool>(type: "bit", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: true),
                    UbicacionID = table.Column<int>(type: "int", nullable: true),
                    TAI_Telefono1Aviso = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    TAI_Telefono2Aviso = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true, comment: "Este normalmente será el móvil para SMS"),
                    AV_EnvioEmailReq = table.Column<bool>(type: "bit", nullable: false),
                    AV_Email = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NotasInt_Aviso = table.Column<short>(type: "smallint", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clientes", x => x.IDPersona);
                    table.ForeignKey(
                        name: "FK_Clientes_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_Clientes_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_Clientes_FE_Formatos",
                        column: x => x.FE_FormatoID,
                        principalTable: "FE_Formatos",
                        principalColumn: "IDFormato");
                    table.ForeignKey(
                        name: "FK_Clientes_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_Clientes_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "Clientes_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clientes_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_Clientes_DatosDinamicos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Clientes_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                });

            migrationBuilder.CreateTable(
                name: "ClientesCentrosAdministrativos",
                columns: table => new
                {
                    IDCentroAdministrativo = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    OG_Nombre = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false, comment: "Organo Gestor Nombre"),
                    OG_Codigo = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false, comment: "Organo Gestor Código"),
                    UT_Nombre = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false, comment: "Unidad Tramitadora Nombre"),
                    UT_Codigo = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false, comment: "Unidad Tramitadora Código"),
                    OC_Nombre = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false, comment: "Oficina Contable Nombre"),
                    OC_Codigo = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false, comment: "Oficina Contable Código")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesCentrosAdministrativos", x => x.IDCentroAdministrativo);
                    table.ForeignKey(
                        name: "FK_ClientesCentrosAdministrativos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ClientesCuentasBancarias",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    NumCta = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SWIFT1 = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    SWIFT2 = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    SWIFT3 = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    SWIFT4 = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    IBAN = table.Column<bool>(type: "bit", nullable: true),
                    IBANCodigo = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    IBANCuenta = table.Column<string>(type: "varchar(34)", unicode: false, maxLength: 34, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesCuentasBancarias", x => x.ID);
                    table.ForeignKey(
                        name: "FK_ClientesCuentasBancarias_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ClientesDescuentos",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    FamiliaID = table.Column<int>(type: "int", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Apply_Subfamilias = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesDescuentos", x => new { x.PersonaID, x.FamiliaID });
                    table.ForeignKey(
                        name: "FK_ClientesDescuentos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ClientesDescuentos_Familias",
                        column: x => x.FamiliaID,
                        principalTable: "Familias",
                        principalColumn: "IDFamilia",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ClientesDescuentos_Root",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesDescuentos_Root", x => new { x.PersonaID, x.ProductoTipoID });
                    table.ForeignKey(
                        name: "FK_ClientesDescuentos_Root_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ClientesDescuentos_Root_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ClientesDiasPago",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    DiaInicio = table.Column<int>(type: "int", nullable: false),
                    DiaFin = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tabla2", x => new { x.PersonaID, x.DiaInicio });
                    table.ForeignKey(
                        name: "FK_ClientesDiasPago_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ClientesDirecciones",
                columns: table => new
                {
                    IDPersonaDireccion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    LocalidadID = table.Column<int>(type: "int", nullable: false),
                    ProvinciaID = table.Column<int>(type: "int", nullable: false),
                    PaisID = table.Column<int>(type: "int", nullable: false),
                    TipoDireccionID = table.Column<int>(type: "int", nullable: true),
                    Nombre = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    Direccion = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false),
                    CodigoPostal = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Horario = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Instalacion = table.Column<bool>(type: "bit", nullable: false),
                    TipoInstalacionID = table.Column<int>(type: "int", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Activa = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesDirecciones", x => x.IDPersonaDireccion);
                    table.UniqueConstraint("AK_ClientesDirecciones_IDPersonaDireccion_PersonaID", x => new { x.IDPersonaDireccion, x.PersonaID });
                    table.ForeignKey(
                        name: "FK_ClientesDirecciones_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ClientesDirecciones_ClientesDirecciones_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ClientesDirecciones_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_ClientesDirecciones_Localidades",
                        column: x => x.LocalidadID,
                        principalTable: "Localidades",
                        principalColumn: "IDLocalidad");
                    table.ForeignKey(
                        name: "FK_ClientesDirecciones_Paises",
                        column: x => x.PaisID,
                        principalTable: "Paises",
                        principalColumn: "IDPais");
                    table.ForeignKey(
                        name: "FK_ClientesDirecciones_Provincias",
                        column: x => x.ProvinciaID,
                        principalTable: "Provincias",
                        principalColumn: "IDProvincia");
                });

            migrationBuilder.CreateTable(
                name: "ClientesPeriodosExentosPago",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesPeriodosExentosPago", x => new { x.PersonaID, x.FechaInicio });
                    table.ForeignKey(
                        name: "FK_ClientesPeriodosExentosPago_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComercialesClientes",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ComercialID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComercialesClientes", x => new { x.PersonaID, x.ComercialID });
                    table.ForeignKey(
                        name: "FK_ComercialesClientes_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ComercialesClientes_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CRM_ClientesPuntos",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Puntos_Actuales = table.Column<int>(type: "int", nullable: false),
                    Puntos_Acumulados = table.Column<int>(type: "int", nullable: false),
                    Puntos_Sobrantes = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_ClientesPuntos", x => x.PersonaID);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CRM_Liquidaciones",
                columns: table => new
                {
                    IDLiquidacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CanjeID = table.Column<int>(type: "int", nullable: false),
                    FechaLiquidacion = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaCaducidad = table.Column<DateTime>(type: "datetime", nullable: true),
                    Vale = table.Column<decimal>(type: "money", nullable: false),
                    Obsequio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Canjeado = table.Column<bool>(type: "bit", nullable: false),
                    Puntos = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Liquidaciones", x => x.IDLiquidacion);
                    table.ForeignKey(
                        name: "FK_CRM_Liquidaciones_CRM_Canjes",
                        column: x => x.CanjeID,
                        principalTable: "CRM_Canjes",
                        principalColumn: "IDCanje");
                    table.ForeignKey(
                        name: "FK_CRM_Liquidaciones_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Oportunidades",
                columns: table => new
                {
                    IDOportunidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    Asunto = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    Descripcion = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    PrioridadID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Oportunidades", x => x.IDOportunidad);
                    table.ForeignKey(
                        name: "FK_CRM_Oportunidades_CRM_OportunidadesEstados",
                        column: x => x.EstadoID,
                        principalTable: "CRM_OportunidadesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_CRM_Oportunidades_CRM_OportunidadesPrioridades",
                        column: x => x.PrioridadID,
                        principalTable: "CRM_OportunidadesPrioridades",
                        principalColumn: "IDPrioridad");
                    table.ForeignKey(
                        name: "FK_CRM_Oportunidades_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                });

            migrationBuilder.CreateTable(
                name: "CRM_TarjetasFidelizacion",
                columns: table => new
                {
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    NumeroTarjeta = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Estado = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "1: Tarjeta Activa. 0: Tarjeta Inactiva")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_TarjetasFidelizacion", x => new { x.PersonaID, x.NumeroTarjeta });
                    table.ForeignKey(
                        name: "FK_CRM_TarjetasFidelizacion_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ISO_Encuestas",
                columns: table => new
                {
                    IDEncuesta = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: true),
                    EncuestadorID = table.Column<int>(type: "int", nullable: true),
                    Valoracion = table.Column<double>(type: "float", nullable: true),
                    Satisfaccion = table.Column<bool>(type: "bit", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_Encuestas", x => x.IDEncuesta);
                    table.ForeignKey(
                        name: "FK_ISO_Encuestas_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_ISO_Encuestas_Empleados",
                        column: x => x.EncuestadorID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                });

            migrationBuilder.CreateTable(
                name: "Lotes",
                columns: table => new
                {
                    IDLote = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Numero = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false, defaultValueSql: "(0)"),
                    ClienteID = table.Column<int>(type: "int", nullable: true),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    ReferenciaProveedor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false, defaultValueSql: "('#')"),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FBaja = table.Column<DateTime>(type: "datetime", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    StockMin = table.Column<double>(type: "float", nullable: false),
                    StockMax = table.Column<double>(type: "float", nullable: false),
                    StockActual = table.Column<double>(type: "float", nullable: false),
                    StockPedido = table.Column<double>(type: "float", nullable: false),
                    StockNegativo = table.Column<bool>(type: "bit", nullable: false),
                    PrecioCompra = table.Column<double>(type: "float", nullable: false),
                    PrecioCompraMedio = table.Column<double>(type: "float", nullable: false),
                    PrecioVenta = table.Column<double>(type: "float", nullable: false),
                    PrecioVentaMedio = table.Column<double>(type: "float", nullable: false),
                    LoteMaestro = table.Column<bool>(type: "bit", nullable: false),
                    StockDisponible = table.Column<double>(type: "float", nullable: false),
                    StockVirtual = table.Column<double>(type: "float", nullable: false),
                    StockReservado = table.Column<double>(type: "float", nullable: false),
                    DtoCompraUltima = table.Column<decimal>(type: "money", nullable: false),
                    PrecioCompraSinDtoUltima = table.Column<double>(type: "float", nullable: false),
                    FechaCaducidad = table.Column<DateTime>(type: "datetime", nullable: true),
                    Notas = table.Column<string>(type: "text", nullable: true),
                    CantidadEnvase = table.Column<double>(type: "float", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Lotes", x => x.IDLote);
                    table.ForeignKey(
                        name: "FK_Lotes_Clientes",
                        column: x => x.ClienteID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_Lotes_LotesEstados",
                        column: x => x.EstadoID,
                        principalTable: "LotesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Lotes_Lotes_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "Lotes_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_Lotes_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Lotes_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                });

            migrationBuilder.CreateTable(
                name: "ClientesMandatos",
                columns: table => new
                {
                    IDMandato = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    TipoMandatoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    ReferenciaMandato = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false),
                    FFirma = table.Column<DateTime>(type: "datetime", nullable: false),
                    Puntual = table.Column<bool>(type: "bit", nullable: false),
                    Finalizado = table.Column<bool>(type: "bit", nullable: false),
                    CuentaBancariaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesMandatos", x => x.IDMandato);
                    table.ForeignKey(
                        name: "FK_ClientesMandatos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_ClientesMandatos_ClientesCuentasBancarias",
                        column: x => x.CuentaBancariaID,
                        principalTable: "ClientesCuentasBancarias",
                        principalColumn: "ID");
                });

            migrationBuilder.CreateTable(
                name: "ClientesContactos",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Apellidos = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Telefono1 = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    Telefono2 = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Cargo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Departamento = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Notas = table.Column<string>(type: "varchar(512)", unicode: false, maxLength: 512, nullable: true),
                    PersonaDireccionID = table.Column<int>(type: "int", nullable: true),
                    ContactoTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesContactos", x => x.ID);
                    table.UniqueConstraint("AK_ClientesContactos_ID_PersonaID", x => new { x.ID, x.PersonaID });
                    table.ForeignKey(
                        name: "FK_ClientesContactos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ClientesContactos_ClientesContactosTipos",
                        column: x => x.ContactoTipoID,
                        principalTable: "ClientesContactosTipos",
                        principalColumn: "IDContactoTipo");
                    table.ForeignKey(
                        name: "FK_ClientesContactos_ClientesDirecciones",
                        column: x => x.PersonaDireccionID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_ClientesContactos_ClientesDirecciones2",
                        columns: x => new { x.PersonaDireccionID, x.PersonaID },
                        principalTable: "ClientesDirecciones",
                        principalColumns: new[] { "IDPersonaDireccion", "PersonaID" });
                });

            migrationBuilder.CreateTable(
                name: "ClientesTelefonos",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    Telefono = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PersonaDireccionID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientesTelefonos", x => x.ID);
                    table.ForeignKey(
                        name: "FK_ClientesTelefonos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ClientesTelefonos_ClientesDirecciones",
                        column: x => x.PersonaDireccionID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                });

            migrationBuilder.CreateTable(
                name: "TPVTickets",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TPVID = table.Column<int>(type: "int", nullable: false),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(0)"),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(1)"),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Total = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(0)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    Entregado = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    Arreglo = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    Contabilizado = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    Abierto = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(1)"),
                    Hora = table.Column<DateTime>(type: "datetime", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    FOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    SII_Exportado = table.Column<bool>(type: "bit", nullable: false),
                    DescripcionOperacion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVTickets", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_TPVTickets_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_TPVTickets_ClientesDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_TPVTickets_ClientesDirecciones1",
                        column: x => x.PersonaDireccionEntregaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_TPVTickets_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_TPVTickets_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_TPVTickets_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_TPVTickets_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_TPVTickets_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                    table.ForeignKey(
                        name: "FK_TPVTickets_TPV",
                        column: x => x.TPVID,
                        principalTable: "TPV",
                        principalColumn: "IDTPV",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TPVTickets_TPVTicketsEstados",
                        column: x => x.EstadoID,
                        principalTable: "TPVTicketsEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_TPVTickets_TPVTickets_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "TPVTickets_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_TPVTickets_Tarifas",
                        column: x => x.TarifaID,
                        principalTable: "Tarifas",
                        principalColumn: "IDTarifa");
                });

            migrationBuilder.CreateTable(
                name: "CRM_ClientesPuntosCabeceras",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionCabeceraID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    Liquidado = table.Column<bool>(type: "bit", nullable: false),
                    LiquidacionID = table.Column<int>(type: "int", nullable: true),
                    FechaLiquidacion = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_ClientesPuntosCabeceras", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntosCabeceras_CRM_ClientesPuntos",
                        column: x => x.PersonaID,
                        principalTable: "CRM_ClientesPuntos",
                        principalColumn: "PersonaID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntosCabeceras_CRM_Liquidaciones",
                        column: x => x.LiquidacionID,
                        principalTable: "CRM_Liquidaciones",
                        principalColumn: "IDLiquidacion");
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntosCabeceras_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                });

            migrationBuilder.CreateTable(
                name: "ISO_EncuestasDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EncuestaID = table.Column<int>(type: "int", nullable: false),
                    PreguntaID = table.Column<int>(type: "int", nullable: false),
                    RespuestaID = table.Column<int>(type: "int", nullable: true),
                    Puntuacion = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_EncuestasDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ISO_EncuestasDetalle_ISO_Encuestas",
                        column: x => x.EncuestaID,
                        principalTable: "ISO_Encuestas",
                        principalColumn: "IDEncuesta",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ISO_EncuestasDetalle_ISO_Preguntas",
                        column: x => x.PreguntaID,
                        principalTable: "ISO_Preguntas",
                        principalColumn: "IDPregunta");
                    table.ForeignKey(
                        name: "FK_ISO_EncuestasDetalle_ISO_Respuestas",
                        column: x => x.RespuestaID,
                        principalTable: "ISO_Respuestas",
                        principalColumn: "IDRespuesta");
                });

            migrationBuilder.CreateTable(
                name: "DGD_Ubicaciones",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    IDdgdu = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DGD_Ubicaciones", x => new { x.DocumentoGestionID, x.LineaID, x.UbicacionID, x.LoteID });
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_DGD_Ubicaciones_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionDetalleUbicaciones",
                columns: table => new
                {
                    DocumentoGestionID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    IDdgdu = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<double>(type: "float", nullable: false),
                    PrecioCosteSinDto = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionDetalleUbicaciones", x => new { x.DocumentoGestionID, x.LineaID, x.UbicacionID, x.LoteID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_DocumentosGestion",
                        column: x => x.DocumentoGestionID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionDetalleUbicaciones_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "MovimientosAlmacenDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    TipoID = table.Column<int>(type: "int", nullable: false, comment: "1 Entrada, 2 Salida, 3 Regularización"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<double>(type: "float", nullable: false),
                    PrecioCosteSinDto = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovimientosAlmacenDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_MovimientosAlmacen",
                        column: x => x.CabeceraID,
                        principalTable: "MovimientosAlmacen",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_MovimientosAlmacenTipos",
                        column: x => x.TipoID,
                        principalTable: "MovimientosAlmacenTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenDetalle_UnidadesProducto",
                        columns: x => new { x.ProductoID, x.MedidaID },
                        principalTable: "UnidadesProducto",
                        principalColumns: new[] { "ProductoID", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "MovimientosAlmacenSaldos",
                columns: table => new
                {
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    Saldo = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovimientosAlmacenSaldos", x => new { x.Fecha, x.ProductoID, x.LoteID, x.AlmacenID, x.UbicacionID });
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenSaldos_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenSaldos_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenSaldos_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_MovimientosAlmacenSaldos_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "OPEsEnvioMaterial",
                columns: table => new
                {
                    AlmacenOrigenID = table.Column<int>(type: "int", nullable: true),
                    UbicacionOrigenID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    AlmacenDestinoID = table.Column<int>(type: "int", nullable: true),
                    UbicacionDestinoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_Almacenes",
                        column: x => x.AlmacenOrigenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_Almacenes1",
                        column: x => x.AlmacenDestinoID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_AlmacenesUbicaciones",
                        column: x => x.UbicacionOrigenID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_AlmacenesUbicaciones1",
                        column: x => x.UbicacionDestinoID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_OPEsEnvioMaterial_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "ProductosAlmacen",
                columns: table => new
                {
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    StockActual = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosAlmacenes", x => new { x.AlmacenID, x.UbicacionID, x.ProductoID, x.LoteID });
                    table.ForeignKey(
                        name: "FK_ProductosAlmacenes_AlmacenesUbicaciones",
                        columns: x => new { x.UbicacionID, x.AlmacenID },
                        principalTable: "AlmacenesUbicaciones",
                        principalColumns: new[] { "IDUbicacion", "AlmacenID" });
                    table.ForeignKey(
                        name: "FK_ProductosAlmacenes_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_ProductosAlmacenes_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "ProductosConjuntosComponentes",
                columns: table => new
                {
                    IDComponente = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ConjuntoID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Nombre = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    Mermas = table.Column<decimal>(type: "money", nullable: false),
                    Notas = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductosConjuntosComponentes", x => x.IDComponente);
                    table.ForeignKey(
                        name: "FK_ProductosConjuntosComponentes_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_ProductosConjuntosComponentes_ProductosConjuntos",
                        column: x => x.ConjuntoID,
                        principalTable: "ProductosConjuntos",
                        principalColumn: "IDConjunto",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductosConjuntosComponentes_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_ProductosConjuntosComponentes_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                    table.ForeignKey(
                        name: "FK_ProductosConjuntosComponentes_UnidadesProducto",
                        columns: x => new { x.ProductoID, x.MedidaID },
                        principalTable: "UnidadesProducto",
                        principalColumns: new[] { "ProductoID", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "PropuestasCompraDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    LineaOrigenID = table.Column<int>(type: "int", nullable: false),
                    FNecesidad = table.Column<DateTime>(type: "datetime", nullable: false),
                    StockNecesidad = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    CantidadPedido = table.Column<double>(type: "float", nullable: false),
                    Seleccionado = table.Column<bool>(type: "bit", nullable: false, comment: "Marca si el registro ha sido seleccionado para pasar a la 2ª pantalla."),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PropuestasCompraDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_PropuestasCompraDetalle_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_PropuestasCompraDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_PropuestasCompraDetalle_PropuestasCompra",
                        column: x => x.CabeceraID,
                        principalTable: "PropuestasCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PropuestasCompraDetalle_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PropuestasCompraDetalle_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "Proyectos",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SearchNameKeys = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proyectos", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Empleados1",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Proyectos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_Proyectos_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_Proyectos_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_Proyectos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Proyectos_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_Proyectos_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_Proyectos_ProyectosEstados",
                        column: x => x.EstadoID,
                        principalTable: "ProyectosEstados",
                        principalColumn: "IDEstado");
                });

            migrationBuilder.CreateTable(
                name: "RegularizacionesAlmacen",
                columns: table => new
                {
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    PrecioCompraMedio = table.Column<double>(type: "float", nullable: false),
                    Stock = table.Column<double>(type: "float", nullable: false),
                    PrecioCompraMedioNuevo = table.Column<double>(type: "float", nullable: true),
                    StockNuevo = table.Column<double>(type: "float", nullable: true),
                    FamiliaID = table.Column<int>(type: "int", nullable: true),
                    NombreProducto = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    NombreLote = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    CodigoPropio = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RegularizacionesAlmacen", x => new { x.uidID, x.LoteID, x.UbicacionID });
                    table.ForeignKey(
                        name: "FK_RegularizacionesAlmacen_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_RegularizacionesAlmacen_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_RegularizacionesAlmacen_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_RegularizacionesAlmacen_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_RegularizacionesAlmacen_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_RegularizacionesAlmacen_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "ReservasStockDetalle",
                columns: table => new
                {
                    IDDetalle = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaOrigenID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: false),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    PrecioCoste = table.Column<double>(type: "float", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: false),
                    UbicacionID = table.Column<int>(type: "int", nullable: false),
                    AlmacenReservaID = table.Column<int>(type: "int", nullable: false),
                    UbicacionReservaID = table.Column<int>(type: "int", nullable: false),
                    FechaInicioReserva = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFinReserva = table.Column<DateTime>(type: "datetime", nullable: true),
                    Finalizado = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReservasStockDetalle", x => x.IDDetalle);
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_AlmacenesRsrv",
                        column: x => x.AlmacenReservaID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_AlmacenesUbicaciones",
                        columns: x => new { x.UbicacionID, x.AlmacenID },
                        principalTable: "AlmacenesUbicaciones",
                        principalColumns: new[] { "IDUbicacion", "AlmacenID" });
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_AlmacenesUbicacionesRsrv",
                        columns: x => new { x.UbicacionReservaID, x.AlmacenReservaID },
                        principalTable: "AlmacenesUbicaciones",
                        principalColumns: new[] { "IDUbicacion", "AlmacenID" });
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_ReservasStockDetalle_ReservasStock",
                        column: x => x.CabeceraID,
                        principalTable: "ReservasStock",
                        principalColumn: "IDCabecera");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Acciones",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    EstadoAccionID = table.Column<int>(type: "int", nullable: false),
                    TipoAccionID = table.Column<int>(type: "int", nullable: true),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionID = table.Column<int>(type: "int", nullable: true),
                    PersonaContactoID = table.Column<int>(type: "int", nullable: true),
                    Telefono = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: false),
                    ComercialEmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EstadoComercialEmpleadoID = table.Column<int>(type: "int", nullable: false),
                    IniciativaID = table.Column<int>(type: "int", nullable: false),
                    MedioID = table.Column<int>(type: "int", nullable: false),
                    Asunto = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Motivo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Origen = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: false),
                    Lugar = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Notas = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    ResultadoID = table.Column<int>(type: "int", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Coste = table.Column<decimal>(type: "money", nullable: false),
                    OportunidadID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    EmpresaID = table.Column<int>(type: "int", nullable: false),
                    RecurrenceType = table.Column<int>(type: "int", nullable: false),
                    LabelColor = table.Column<int>(type: "int", nullable: false),
                    RecurrenceIndex = table.Column<int>(type: "int", nullable: false),
                    RecurrenceInfo = table.Column<string>(type: "text", nullable: false),
                    CabeceraRecurrenceID = table.Column<int>(type: "int", nullable: true),
                    Options = table.Column<int>(type: "int", nullable: true),
                    ActualFinish = table.Column<int>(type: "int", nullable: true),
                    ActualStart = table.Column<int>(type: "int", nullable: true),
                    ReminderDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReminderMinutesBeforeStart = table.Column<int>(type: "int", nullable: true),
                    ReminderResourcesData = table.Column<string>(type: "text", nullable: true),
                    TaskComplete = table.Column<int>(type: "int", nullable: true),
                    TaskIndex = table.Column<int>(type: "int", nullable: true),
                    TaskLinks = table.Column<string>(type: "text", nullable: true),
                    TaskStatus = table.Column<int>(type: "int", nullable: true),
                    AppointmentItem_EntryID = table.Column<string>(type: "varchar(140)", unicode: false, maxLength: 140, nullable: true),
                    email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Acciones_1", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_Acciones",
                        column: x => x.CabeceraOrigenID,
                        principalTable: "CRM_Acciones",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_AccionesEstados",
                        column: x => x.EstadoAccionID,
                        principalTable: "CRM_AccionesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_AccionesIniciativas",
                        column: x => x.IniciativaID,
                        principalTable: "CRM_AccionesIniciativas",
                        principalColumn: "IDIniciativa");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_AccionesMedios",
                        column: x => x.MedioID,
                        principalTable: "CRM_AccionesMedios",
                        principalColumn: "IDMedio");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_AccionesResultados",
                        column: x => x.ResultadoID,
                        principalTable: "CRM_AccionesResultados",
                        principalColumn: "IDResultado");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_AccionesTipos",
                        column: x => x.TipoAccionID,
                        principalTable: "CRM_AccionesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_CRM_Acciones_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "CRM_Acciones_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_ClientesContactos",
                        columns: x => new { x.PersonaContactoID, x.PersonaID },
                        principalTable: "ClientesContactos",
                        principalColumns: new[] { "ID", "PersonaID" });
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_ClientesDirecciones",
                        columns: x => new { x.PersonaDireccionID, x.PersonaID },
                        principalTable: "ClientesDirecciones",
                        principalColumns: new[] { "IDPersonaDireccion", "PersonaID" });
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_EmpleadosComerciales",
                        column: x => x.ComercialEmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_CRM_Acciones_Recurrencia",
                        column: x => x.CabeceraRecurrenceID,
                        principalTable: "CRM_Acciones",
                        principalColumn: "IDCabecera");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasDestinatarios",
                columns: table => new
                {
                    IDDestinatario = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ContactoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasDestinatarios", x => x.IDDestinatario);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDestinatarios_CRM_Campanyas",
                        column: x => x.CabeceraID,
                        principalTable: "CRM_Campanyas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDestinatarios_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasDestinatarios_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                });

            migrationBuilder.CreateTable(
                name: "CRM_ClientesSegmentos",
                columns: table => new
                {
                    IDClienteSegmento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    SegmentoID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_ClientesSegmentos", x => x.IDClienteSegmento);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesSegmentos_CRM_Segmentos",
                        column: x => x.SegmentoID,
                        principalTable: "CRM_Segmentos",
                        principalColumn: "IDSegmento");
                    table.ForeignKey(
                        name: "FK_CRM_ClientesSegmentos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesSegmentos_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                });

            migrationBuilder.CreateTable(
                name: "TPVMovimientosCaja",
                columns: table => new
                {
                    IDTPVMovimientoCaja = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    TPVid = table.Column<int>(type: "int", nullable: false),
                    TPVFormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    CantidadEntra = table.Column<decimal>(type: "money", nullable: true),
                    CantidadSale = table.Column<decimal>(type: "money", nullable: true),
                    FechaHora = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    TipoMovimiento = table.Column<int>(type: "int", nullable: true),
                    EntregaACuenta = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVMovimientosCaja", x => x.IDTPVMovimientoCaja);
                    table.ForeignKey(
                        name: "FK_TPVMovimientosCaja_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_TPVMovimientosCaja_TPV",
                        column: x => x.TPVid,
                        principalTable: "TPV",
                        principalColumn: "IDTPV");
                    table.ForeignKey(
                        name: "FK_TPVMovimientosCaja_TPVTickets",
                        column: x => x.CabeceraID,
                        principalTable: "TPVTickets",
                        principalColumn: "IDCabecera");
                });

            migrationBuilder.CreateTable(
                name: "TPVTicketsDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(1)"),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    CantidadServida = table.Column<double>(type: "float", nullable: true, defaultValueSql: "(0)"),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    PVP = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    Retencion = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    PromocionID = table.Column<int>(type: "int", nullable: true),
                    Puntos = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(0)"),
                    IVATipoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TPVTicketsDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_IvaTipos",
                        column: x => x.IVATipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_TPVTickets",
                        column: x => x.CabeceraID,
                        principalTable: "TPVTickets",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_TPVTicketsDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "TPVTicketsDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_TPVTicketsEstados",
                        column: x => x.EstadoID,
                        principalTable: "TPVTicketsEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_TPVTicketsDetalle_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                });

            migrationBuilder.CreateTable(
                name: "Vales",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    OrigenID = table.Column<int>(type: "int", nullable: false),
                    TicketID = table.Column<int>(type: "int", nullable: true),
                    LiquidacionID = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FCaducidad = table.Column<DateTime>(type: "datetime", nullable: true),
                    FConsumo = table.Column<DateTime>(type: "datetime", nullable: true),
                    ImporteTotal = table.Column<decimal>(type: "money", nullable: false),
                    ImporteConsumido = table.Column<decimal>(type: "money", nullable: false),
                    Obsequio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProductoObsequioID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    TicketDetalleID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vales", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_Vales_CRM_Liquidaciones",
                        column: x => x.LiquidacionID,
                        principalTable: "CRM_Liquidaciones",
                        principalColumn: "IDLiquidacion");
                    table.ForeignKey(
                        name: "FK_Vales_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_Vales_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_Vales_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_Vales_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Vales_Productos",
                        column: x => x.ProductoObsequioID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_Vales_TPVTickets",
                        column: x => x.TicketID,
                        principalTable: "TPVTickets",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_Vales_ValesEstados",
                        column: x => x.EstadoID,
                        principalTable: "ValesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Vales_ValesOrigenes",
                        column: x => x.OrigenID,
                        principalTable: "ValesOrigenes",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_Vales_Vales_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "Vales_CDBO",
                        principalColumn: "IDCDBO");
                });

            migrationBuilder.CreateTable(
                name: "CRM_ClientesPuntosDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionLineaID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Puntos = table.Column<int>(type: "int", nullable: false),
                    PuntosTablaID = table.Column<int>(type: "int", nullable: false),
                    PuntosTablaDetalleID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_ClientesPuntosDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntosDetalle_CRM_ClientesPuntosCabeceras",
                        column: x => x.CabeceraID,
                        principalTable: "CRM_ClientesPuntosCabeceras",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntosDetalle_CRM_PuntosTabla",
                        column: x => x.PuntosTablaID,
                        principalTable: "CRM_PuntosTabla",
                        principalColumn: "IDPuntosTabla");
                    table.ForeignKey(
                        name: "FK_CRM_ClientesPuntosDetalle_CRM_PuntosTablaDetalle2",
                        columns: x => new { x.PuntosTablaDetalleID, x.PuntosTablaID, x.ProductoID },
                        principalTable: "CRM_PuntosTablaDetalle",
                        principalColumns: new[] { "IDPuntosTablaDetalle", "PuntosTablaID", "ProductoID" });
                });

            migrationBuilder.CreateTable(
                name: "DocumentosGestionRegistroAlmacen",
                columns: table => new
                {
                    DocumentoGestionOrigenID = table.Column<int>(type: "int", nullable: false),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: false),
                    DetalleOrigenID = table.Column<int>(type: "int", nullable: false),
                    DocumentoGestionDestinoID = table.Column<int>(type: "int", nullable: false),
                    CabeceraDestinoID = table.Column<int>(type: "int", nullable: false),
                    DetalleDestinoID = table.Column<int>(type: "int", nullable: false),
                    dgduID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentosGestionRegistroAlmacen", x => new { x.DocumentoGestionOrigenID, x.CabeceraOrigenID, x.DetalleOrigenID, x.DocumentoGestionDestinoID, x.CabeceraDestinoID, x.DetalleDestinoID });
                    table.ForeignKey(
                        name: "FK_DocumentosGestionRegistroAlmacen_DocumentosGestion",
                        column: x => x.DocumentoGestionDestinoID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionRegistroAlmacen_DocumentosGestion1",
                        column: x => x.DocumentoGestionOrigenID,
                        principalTable: "DocumentosGestion",
                        principalColumn: "IDDocumentoGestion");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionRegistroAlmacen_MovimientosAlmacen",
                        column: x => x.CabeceraDestinoID,
                        principalTable: "MovimientosAlmacen",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_DocumentosGestionRegistroAlmacen_MovimientosAlmacenDetalle",
                        column: x => x.DetalleDestinoID,
                        principalTable: "MovimientosAlmacenDetalle",
                        principalColumn: "IDLinea");
                });

            migrationBuilder.CreateTable(
                name: "DevolucionesVenta",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false, comment: "0: Sin cßlculo; 1: Automßtico; 2: Manual"),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))", comment: "1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    DirRecogida = table.Column<bool>(type: "bit", nullable: false),
                    DirRecogida_EntidadOrigenID = table.Column<int>(type: "int", nullable: true),
                    DirRecogida_KeyFieldValueID = table.Column<int>(type: "int", nullable: true),
                    DirRecogida_DireccionID = table.Column<int>(type: "int", nullable: true),
                    PreAviso = table.Column<bool>(type: "bit", nullable: false),
                    FechaAviso = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaDevolucionPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaDevolucion = table.Column<DateTime>(type: "datetime", nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false),
                    TipoID_1 = table.Column<int>(type: "int", nullable: true),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DevolucionesVenta", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_ClientesDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_DevolucionesVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "DevolucionesVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_DevolucionesVenta_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "DevolucionesVenta_CDBO",
                        principalColumn: "IDCDBO",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Direcciones_EntidadesOrigen",
                        column: x => x.DirRecogida_EntidadOrigenID,
                        principalTable: "Direcciones_EntidadesOrigen",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Empleados1",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_DevolucionesVenta_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "FacturasCompra",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Contabilizada = table.Column<bool>(type: "bit", nullable: false),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    Facturae = table.Column<bool>(type: "bit", nullable: false),
                    FE_Fenvio = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    FechaOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    SII_Exportado = table.Column<bool>(type: "bit", nullable: false),
                    ClaveTipoFactura = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    RectificativaClave = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ClaveTributariaOperacion = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    DescripcionOperacion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    InmuebleSituacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    InmuebleReferenciaCatastral = table.Column<string>(type: "char(25)", unicode: false, fixedLength: true, maxLength: 25, nullable: true),
                    FacturaRectificadaID = table.Column<int>(type: "int", nullable: true),
                    LI_ActividadTipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LI_ActividadGrupo = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    LI_Concepto = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    OperacionCriterioCaja = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasCompra", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_FacturasCompra_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_FacturasCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "FacturasCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_FacturasCompra_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "FacturasCompra_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_PortesTipos",
                        column: x => x.PortesTipoID,
                        principalTable: "PortesTipos",
                        principalColumn: "IDPortesTipo");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_ProveedoresContactos",
                        column: x => x.ContactoID,
                        principalTable: "ProveedoresContactos",
                        principalColumn: "id");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_ProveedoresDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ProveedoresDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_FacturasCompra_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "FacturasVenta",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Contabilizada = table.Column<bool>(type: "bit", nullable: false),
                    Impresa = table.Column<bool>(type: "bit", nullable: false),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false, comment: "0: Sin cßlculo; 1: Automßtico; 2: Manual"),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    Facturae = table.Column<bool>(type: "bit", nullable: false),
                    FE_FormatoID = table.Column<int>(type: "int", nullable: true),
                    CopiaImpresa = table.Column<bool>(type: "bit", nullable: false),
                    FE_FEnvio = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    CentroAdministrativoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    FacturaRectificadaID = table.Column<int>(type: "int", nullable: true),
                    FechaOperacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    SII_Exportado = table.Column<bool>(type: "bit", nullable: false),
                    ClaveTipoFactura = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    RectificativaClave = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    ClaveTributariaOperacion = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    DescripcionOperacion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    InmuebleSituacion = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    InmuebleReferenciaCatastral = table.Column<string>(type: "char(25)", unicode: false, fixedLength: true, maxLength: 25, nullable: true),
                    ExentaCausa = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    TipoID_1 = table.Column<int>(type: "int", nullable: true),
                    LI_ActividadTipo = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    LI_ActividadGrupo = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    LI_Concepto = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    OperacionCriterioCaja = table.Column<bool>(type: "bit", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasVenta", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_FacturasVenta_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_FacturasVenta_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_FE_Formatos",
                        column: x => x.FE_FormatoID,
                        principalTable: "FE_Formatos",
                        principalColumn: "IDFormato");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_FacturasVenta",
                        column: x => x.FacturaRectificadaID,
                        principalTable: "FacturasVenta",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_FacturasVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "FacturasVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_FacturasVenta_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "FacturasVenta_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_FacturasVenta_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "LAB_Boletines",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    RefCliente = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    ResponsableRecepcionID = table.Column<int>(type: "int", nullable: true),
                    PrioridadID = table.Column<int>(type: "int", nullable: true),
                    CodificacionManual = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true),
                    FPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    AnalisisTipoID = table.Column<int>(type: "int", nullable: true),
                    PuntoMuestreo = table.Column<int>(type: "int", nullable: true),
                    VisiblePuntoEntrega = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_Boletines", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_Empleados1",
                        column: x => x.ResponsableRecepcionID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_LAB_BoletinesEstados",
                        column: x => x.EstadoID,
                        principalTable: "LAB_BoletinesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_LAB_Boletines_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "LAB_Boletines_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_LAB_Prioridades",
                        column: x => x.PrioridadID,
                        principalTable: "LAB_Prioridades",
                        principalColumn: "IDPrioridad");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                    table.ForeignKey(
                        name: "FK_LAB_Boletines_Tarifas",
                        column: x => x.TarifaID,
                        principalTable: "Tarifas",
                        principalColumn: "IDTarifa");
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAs",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    RefCliente = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FRecogida = table.Column<DateTime>(type: "datetime", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    FInicioTeorico = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFinTeorico = table.Column<DateTime>(type: "datetime", nullable: true),
                    FInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true),
                    LineaOrigenID = table.Column<int>(type: "int", nullable: true),
                    ProductoID = table.Column<int>(type: "int", nullable: true),
                    ResponsableID = table.Column<int>(type: "int", nullable: true),
                    PrioridadID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    Version = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    FValidacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    Edicion = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    Impresa = table.Column<bool>(type: "bit", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    PoolOrigenID = table.Column<int>(type: "int", nullable: true),
                    FechaInforme = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAs", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Empleados1",
                        column: x => x.ResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_LAB_OAsEstados",
                        column: x => x.EstadoID,
                        principalTable: "LAB_OAsEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_LAB_OAs_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "LAB_OAs_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_LAB_Prioridades",
                        column: x => x.PrioridadID,
                        principalTable: "LAB_Prioridades",
                        principalColumn: "IDPrioridad");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                    table.ForeignKey(
                        name: "FK_LAB_OAs_Tarifas",
                        column: x => x.TarifaID,
                        principalTable: "Tarifas",
                        principalColumn: "IDTarifa");
                });

            migrationBuilder.CreateTable(
                name: "OPEs",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    CentroID = table.Column<int>(type: "int", nullable: false),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaNecesidad = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    TotalCosteTeorico = table.Column<decimal>(type: "money", nullable: false),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OPEs", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_OPEs_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_OPEs_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro");
                    table.ForeignKey(
                        name: "FK_OPEs_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_OPEs_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_OPEs_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OPEs_FormasPago",
                        column: x => x.FormaPagoID,
                        principalTable: "FormasPago",
                        principalColumn: "IDFormaPago");
                    table.ForeignKey(
                        name: "FK_OPEs_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_OPEs_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_OPEs_OPEsEstados",
                        column: x => x.EstadoID,
                        principalTable: "OPEsEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_OPEs_OPEs_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "OPEs_CDBO",
                        principalColumn: "IDCDBO",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OPEs_PortesTipos",
                        column: x => x.PortesTipoID,
                        principalTable: "PortesTipos",
                        principalColumn: "IDPortesTipo");
                    table.ForeignKey(
                        name: "FK_OPEs_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_OPEs_ProveedoresContactos",
                        column: x => x.ContactoID,
                        principalTable: "ProveedoresContactos",
                        principalColumn: "id");
                    table.ForeignKey(
                        name: "FK_OPEs_ProveedoresDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ProveedoresDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_OPEs_ProveedoresDirecciones1",
                        column: x => x.PersonaDireccionEntregaID,
                        principalTable: "ProveedoresDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_OPEs_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_OPEs_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacion",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    OrigenID = table.Column<int>(type: "int", nullable: false),
                    PrioridadID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DocumentoGestionOrigenID = table.Column<int>(type: "int", nullable: true),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true),
                    LineaOrigenID = table.Column<int>(type: "int", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaNecesidad = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    TotalCosteTeorico = table.Column<decimal>(type: "money", nullable: false),
                    MargenTeorico = table.Column<decimal>(type: "money", nullable: false),
                    TotalVentaTeorico = table.Column<decimal>(type: "money", nullable: false),
                    TotalCosteReal = table.Column<decimal>(type: "money", nullable: false),
                    MargenReal = table.Column<decimal>(type: "money", nullable: false),
                    TotalVentaReal = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    PlanificacionOrigenID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesFabricacion", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_EmpleadosResponsable",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_OrdenesFabricacionEstados",
                        column: x => x.EstadoID,
                        principalTable: "OrdenesFabricacionEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_OrdenesFabricacionOrigenes",
                        column: x => x.OrigenID,
                        principalTable: "OrdenesFabricacionOrigenes",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_OrdenesFabricacionPrioridades",
                        column: x => x.PrioridadID,
                        principalTable: "OrdenesFabricacionPrioridades",
                        principalColumn: "IDPrioridad");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_OrdenesFabricacionTipos",
                        column: x => x.TipoID,
                        principalTable: "OrdenesFabricacionTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "OrdenesSeriadas",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Codigo = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    OrigenID = table.Column<int>(type: "int", nullable: false),
                    PrioridadID = table.Column<int>(type: "int", nullable: false),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DocumentoGestionOrigenID = table.Column<int>(type: "int", nullable: true),
                    CabeceraOrigenID = table.Column<int>(type: "int", nullable: true),
                    LineaOrigenID = table.Column<int>(type: "int", nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: true),
                    ConjuntoID = table.Column<int>(type: "int", nullable: true),
                    CantidadTeorica = table.Column<double>(type: "float", nullable: false),
                    CantidadRechazada = table.Column<double>(type: "float", nullable: false),
                    CantidadReal = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaNecesidad = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    TotalCosteTeorico = table.Column<decimal>(type: "money", nullable: false),
                    MargenTeorico = table.Column<decimal>(type: "money", nullable: false),
                    TotalVentaTeorico = table.Column<decimal>(type: "money", nullable: false),
                    TotalCosteReal = table.Column<decimal>(type: "money", nullable: false),
                    MargenReal = table.Column<decimal>(type: "money", nullable: false),
                    TotalVentaReal = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    RutaID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesSeriadas", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_EmpleadosResponsable",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_OrdenesFabricacionOrigenes",
                        column: x => x.OrigenID,
                        principalTable: "OrdenesFabricacionOrigenes",
                        principalColumn: "IDOrigen");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_OrdenesFabricacionPrioridades",
                        column: x => x.PrioridadID,
                        principalTable: "OrdenesFabricacionPrioridades",
                        principalColumn: "IDPrioridad");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_OrdenesFabricacionTipos",
                        column: x => x.TipoID,
                        principalTable: "OrdenesFabricacionTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_OrdenesSeriadasEstados",
                        column: x => x.EstadoID,
                        principalTable: "OrdenesSeriadasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_ProductosConjuntos",
                        column: x => x.ConjuntoID,
                        principalTable: "ProductosConjuntos",
                        principalColumn: "IDConjunto");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "PedidosCompra",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosCompra", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_PedidosCompra_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_PedidosCompra_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_PedidosCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "PedidosCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_PedidosCompra_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PedidosCompra_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_PortesTipos",
                        column: x => x.PortesTipoID,
                        principalTable: "PortesTipos",
                        principalColumn: "IDPortesTipo");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_ProveedoresContactos",
                        column: x => x.ContactoID,
                        principalTable: "ProveedoresContactos",
                        principalColumn: "id");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_ProveedoresDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ProveedoresDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_PedidosCompra_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "PedidosVenta",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(0)"),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false, comment: "0: Sin cßlculo; 1: Automßtico; 2: Manual"),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false),
                    TipoID_1 = table.Column<int>(type: "int", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVenta", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_PedidosVenta_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_PedidosVenta_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_ClientesDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Empleados1",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_PedidosVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "PedidosVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_PedidosVenta_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PedidosVenta_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosCompra",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false, comment: ""),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    ProyectoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosCompra", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_PortesTipos",
                        column: x => x.PortesTipoID,
                        principalTable: "PortesTipos",
                        principalColumn: "IDPortesTipo");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_PresupuestosCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "PresupuestosCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_PresupuestosCompra_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PresupuestosCompra_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_Proveedores",
                        column: x => x.PersonaID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_ProveedoresContactos",
                        column: x => x.ContactoID,
                        principalTable: "ProveedoresContactos",
                        principalColumn: "id");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_ProveedoresDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ProveedoresDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompra_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVenta",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false, comment: "0: Sin cßlculo; 1: Automßtico; 2: Manual"),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "(1)", comment: "1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    Version = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    EmpleadoResponsableID = table.Column<int>(type: "int", nullable: true),
                    Impresa = table.Column<bool>(type: "bit", nullable: false),
                    TipoID_1 = table.Column<int>(type: "int", nullable: true),
                    NumeroBultos = table.Column<int>(type: "int", nullable: false),
                    NumeroEnvio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NotasInt = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVenta", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_ClientesDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Empleados1",
                        column: x => x.EmpleadoResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_PresupuestosVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "PresupuestosVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_PresupuestosVenta_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PresupuestosVenta_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_PresupuestosVenta_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "Proyectos_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proyectos_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_Proyectos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_Proyectos_DatosDinamicos_PedidosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SRV_Contratos",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    Version = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    Renovable = table.Column<bool>(type: "bit", nullable: false),
                    Duracion = table.Column<double>(type: "float", nullable: true),
                    FInicioContrato = table.Column<DateTime>(type: "datetime", nullable: true),
                    FFinContrato = table.Column<DateTime>(type: "datetime", nullable: true),
                    FRenovacion = table.Column<DateTime>(type: "datetime", nullable: true),
                    Renovado = table.Column<bool>(type: "bit", nullable: false),
                    FacturacionPorPlanificacion = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_Contratos", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_ClientesDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_ContratosEstados",
                        column: x => x.EstadoID,
                        principalTable: "SRV_ContratosEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Contratos_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "SRV_Contratos_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_SRV_Contratos_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "SRV_PresupuestosVenta",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    Titulo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Tipo = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    SerieID = table.Column<int>(type: "int", nullable: false),
                    PersonaDireccionFacturaID = table.Column<int>(type: "int", nullable: true),
                    Entrega = table.Column<bool>(type: "bit", nullable: false),
                    PersonaDireccionEntregaID = table.Column<int>(type: "int", nullable: true),
                    FormaPagoID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    Anno = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    FAlta = table.Column<DateTime>(type: "datetime", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    PortesTipoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    TotalPortes = table.Column<decimal>(type: "money", nullable: false),
                    TotalFinanciacion = table.Column<decimal>(type: "money", nullable: false),
                    TotalRetencion = table.Column<decimal>(type: "money", nullable: false),
                    EjercicioID = table.Column<int>(type: "int", nullable: true),
                    ContactoID = table.Column<int>(type: "int", nullable: true),
                    MedioID = table.Column<int>(type: "int", nullable: true),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ComercialID = table.Column<int>(type: "int", nullable: true),
                    ComisionID = table.Column<int>(type: "int", nullable: true),
                    AgenciaID = table.Column<int>(type: "int", nullable: true),
                    Peso = table.Column<double>(type: "float", nullable: false),
                    TarifaAgenciaID = table.Column<int>(type: "int", nullable: true),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    EmpresaID = table.Column<int>(type: "int", nullable: true),
                    Codigo = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CalculoPortesTipo = table.Column<int>(type: "int", nullable: false),
                    ReferenciaPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    RevisionPrecios = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    Version = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    ProyectoID = table.Column<int>(type: "int", nullable: true),
                    Volumen = table.Column<double>(type: "float", nullable: false),
                    Renovable = table.Column<bool>(type: "bit", nullable: false),
                    Duracion = table.Column<double>(type: "float", nullable: true),
                    FacturacionPorPlanificacion = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_PresupuestosVenta", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_AgenciasTransporteTarifas",
                        columns: x => new { x.TarifaAgenciaID, x.AgenciaID },
                        principalTable: "AgenciasTransporteTarifas",
                        principalColumns: new[] { "IDTarifaAgencia", "AgenciaID" });
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Clientes",
                        column: x => x.PersonaID,
                        principalTable: "Clientes",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_ClientesContactos",
                        column: x => x.ContactoID,
                        principalTable: "ClientesContactos",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_ClientesDirecciones",
                        column: x => x.PersonaDireccionFacturaID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Comerciales",
                        column: x => x.ComercialID,
                        principalTable: "Comerciales",
                        principalColumn: "IDComercial");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Comisiones",
                        column: x => x.ComisionID,
                        principalTable: "Comisiones",
                        principalColumn: "IDComision");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_ConfiguracionEmpresa",
                        column: x => x.EmpresaID,
                        principalTable: "ConfiguracionEmpresa",
                        principalColumn: "IDEmpresa");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Ejercicios",
                        column: x => x.EjercicioID,
                        principalTable: "Ejercicios",
                        principalColumn: "idEjercicio");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_PresupuestosVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "SRV_PresupuestosVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_PresupuestosVenta_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "SRV_PresupuestosVenta_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Proyectos",
                        column: x => x.ProyectoID,
                        principalTable: "Proyectos",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVenta_Series",
                        column: x => x.SerieID,
                        principalTable: "Series",
                        principalColumn: "IDSerie");
                });

            migrationBuilder.CreateTable(
                name: "CRM_CampanyasSeguimientos",
                columns: table => new
                {
                    IDSeguimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Fecha = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    DestinatarioID = table.Column<int>(type: "int", nullable: true),
                    Respuesta = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_CampanyasSeguimientos", x => x.IDSeguimiento);
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasSeguimientos_CRM_Campanyas",
                        column: x => x.CabeceraID,
                        principalTable: "CRM_Campanyas",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_CRM_CampanyasSeguimientos_CRM_CampanyasDestinatarios",
                        column: x => x.DestinatarioID,
                        principalTable: "CRM_CampanyasDestinatarios",
                        principalColumn: "IDDestinatario");
                });

            migrationBuilder.CreateTable(
                name: "ValesDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    TicketID = table.Column<int>(type: "int", nullable: false),
                    ImporteConsumido = table.Column<decimal>(type: "money", nullable: false),
                    Obsequio = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValesDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_ValesDetalle_TPVTickets",
                        column: x => x.TicketID,
                        principalTable: "TPVTickets",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_ValesDetalle_Vales",
                        column: x => x.CabeceraID,
                        principalTable: "Vales",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ValesDetalle_ValesDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "ValesDetalle_CDBO",
                        principalColumn: "IDCDBO");
                });

            migrationBuilder.CreateTable(
                name: "DevolucionesVentaDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    FechaDevolucionPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaDevolucion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CantidadOrigen = table.Column<double>(type: "float", nullable: false),
                    CantidadDevolucionPrevista = table.Column<double>(type: "float", nullable: false),
                    CantidadDevolucion = table.Column<double>(type: "float", nullable: false),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DevolucionesVentaDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_DevolucionesVenta",
                        column: x => x.CabeceraID,
                        principalTable: "DevolucionesVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_DevolucionesVentaDetalle",
                        column: x => x.LineaID,
                        principalTable: "DevolucionesVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_DevolucionesVentaDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "DevolucionesVentaDetalle_CDBO",
                        principalColumn: "IDCDBO",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_DevolucionesVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "DevolucionesVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_DevolucionesVentaDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "FacturasCompraDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Porcentaje_Ret = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Importe_Ret = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Cta_Ret = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasCompraDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_FacturasCompra",
                        column: x => x.CabeceraID,
                        principalTable: "FacturasCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_FacturasCompraDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "FacturasCompraDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_FacturasCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "FacturasCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_FacturasCompraDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "FacturasCompraPie",
                columns: table => new
                {
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    IVAClaseID = table.Column<int>(type: "int", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: false),
                    RecargoEquivalencia = table.Column<int>(type: "int", nullable: false),
                    IVAPorcentaje = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    ImporteRecargo = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    IVATipoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasCompraPie", x => new { x.CabeceraID, x.IVAClaseID, x.IVAGrupoID, x.RecargoEquivalencia });
                    table.ForeignKey(
                        name: "FK_FacturasCompraPie_FacturasCompra",
                        column: x => x.CabeceraID,
                        principalTable: "FacturasCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FacturasCompraPie_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_FacturasCompraPie_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_FacturasCompraPie_IvaTipos",
                        column: x => x.IVATipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                });

            migrationBuilder.CreateTable(
                name: "VencimientosCompra",
                columns: table => new
                {
                    IDVencimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FacturaID = table.Column<int>(type: "int", nullable: false),
                    RemesaID = table.Column<int>(type: "int", nullable: true),
                    NumeroVencimiento = table.Column<string>(type: "char(30)", unicode: false, fixedLength: true, maxLength: 30, nullable: false, defaultValueSql: "('#')"),
                    FechaEmision = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaCargo = table.Column<DateTime>(type: "datetime", nullable: false),
                    PersonaNIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    PersonaNombre = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    MedioID = table.Column<int>(type: "int", nullable: false),
                    Emitido = table.Column<bool>(type: "bit", nullable: false),
                    Pagado = table.Column<bool>(type: "bit", nullable: false),
                    Devuelto = table.Column<bool>(type: "bit", nullable: false),
                    DocumentoRecibido = table.Column<bool>(type: "bit", nullable: false),
                    Contabilizado = table.Column<bool>(type: "bit", nullable: false),
                    CodigoConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Efectos = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IBAN = table.Column<bool>(type: "bit", nullable: true),
                    CuentaEmpresaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VencimientosCompra", x => x.IDVencimiento);
                    table.ForeignKey(
                        name: "FK_VencimientosCompra_EmpresasCuentasBancarias",
                        column: x => x.CuentaEmpresaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                    table.ForeignKey(
                        name: "FK_VencimientosCompra_FacturasCompra",
                        column: x => x.FacturaID,
                        principalTable: "FacturasCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VencimientosCompra_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_VencimientosCompra_RemesasCompra",
                        column: x => x.RemesaID,
                        principalTable: "RemesasCompra",
                        principalColumn: "IDRemesa");
                });

            migrationBuilder.CreateTable(
                name: "FacturasVentaDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Porcentaje_Ret = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Importe_Ret = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "(0)"),
                    Cta_Ret = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    Incluir_MO = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Incluir_Material = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true),
                    Entregado = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FacturasVentaDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_FacturasVenta",
                        column: x => x.CabeceraID,
                        principalTable: "FacturasVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_FacturasVentaDetalle",
                        column: x => x.LineaID,
                        principalTable: "FacturasVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_FacturasVentaDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "FacturasVentaDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_FacturasVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "FacturasVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_FacturasVentaDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "VencimientosVenta",
                columns: table => new
                {
                    IDVencimiento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FacturaID = table.Column<int>(type: "int", nullable: false),
                    RemesaID = table.Column<int>(type: "int", nullable: true),
                    NumeroVencimiento = table.Column<string>(type: "char(30)", unicode: false, fixedLength: true, maxLength: 30, nullable: false, defaultValueSql: "('#')"),
                    FechaEmision = table.Column<DateTime>(type: "datetime", nullable: false),
                    FechaCargo = table.Column<DateTime>(type: "datetime", nullable: false),
                    PersonaNIF = table.Column<string>(type: "char(9)", unicode: false, fixedLength: true, maxLength: 9, nullable: true),
                    PersonaID = table.Column<int>(type: "int", nullable: false),
                    PersonaNombre = table.Column<string>(type: "char(40)", unicode: false, fixedLength: true, maxLength: 40, nullable: false),
                    CCCAdeudo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    MedioID = table.Column<int>(type: "int", nullable: false),
                    Emitido = table.Column<bool>(type: "bit", nullable: false),
                    Pagado = table.Column<bool>(type: "bit", nullable: false),
                    Devuelto = table.Column<bool>(type: "bit", nullable: false),
                    DocumentoRecibido = table.Column<bool>(type: "bit", nullable: false),
                    Contabilizado = table.Column<bool>(type: "bit", nullable: false),
                    CodigoConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Efectos = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IBAN = table.Column<bool>(type: "bit", nullable: true),
                    VencimientoDescuento = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "(0)", comment: "Para saber y se ha generado el asiento de vuelta del vencimiento"),
                    CuentaEmpresaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VencimientosVenta", x => x.IDVencimiento);
                    table.ForeignKey(
                        name: "FK_VencimientosVenta_EmpresasCuentasBancarias",
                        column: x => x.CuentaEmpresaID,
                        principalTable: "EmpresasCuentasBancarias",
                        principalColumn: "IDCuenta");
                    table.ForeignKey(
                        name: "FK_VencimientosVenta_FacturasVenta",
                        column: x => x.FacturaID,
                        principalTable: "FacturasVenta",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_VencimientosVenta_MediosPago",
                        column: x => x.MedioID,
                        principalTable: "MediosPago",
                        principalColumn: "IDMedioPago");
                    table.ForeignKey(
                        name: "FK_VencimientosVenta_Remesas",
                        column: x => x.RemesaID,
                        principalTable: "RemesasVenta",
                        principalColumn: "IDRemesa");
                });

            migrationBuilder.CreateTable(
                name: "LAB_BoletinesDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CodigoMuestra = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DireccionRecogidaID = table.Column<int>(type: "int", nullable: true),
                    PuntoMuestreo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ResponsableMuestreo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    FRecogida = table.Column<DateTime>(type: "datetime", nullable: true),
                    FPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ActaMuestreo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ResponsableRecepcionID = table.Column<int>(type: "int", nullable: true),
                    Envase = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    NEnvases = table.Column<int>(type: "int", nullable: false),
                    TempEntrada = table.Column<double>(type: "float", nullable: false),
                    TarifaID = table.Column<int>(type: "int", nullable: true),
                    PrioridadID = table.Column<int>(type: "int", nullable: true),
                    ProcedimientoEnsayo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TecnicaAnalisis = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Unidades = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LimiteCuantificacion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LimiteDeteccion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ValorParametrico = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TiempoMaximo = table.Column<double>(type: "float", nullable: false),
                    TiempoEspera = table.Column<double>(type: "float", nullable: false),
                    Acondicionamiento = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Incertidumbre = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "((0))"),
                    LimiteMaximo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Acreditado = table.Column<bool>(type: "bit", nullable: false),
                    ProductoCompuestoID = table.Column<int>(type: "int", nullable: true),
                    ProcedimientoMuestreo = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    EnvaseMuestra = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NecesitaAcondicionamiento = table.Column<bool>(type: "bit", nullable: false),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IdentificacionMuestra = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Legislacion = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    TempEntradaMuestra = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    NumeroManipulaciones = table.Column<int>(type: "int", nullable: false, defaultValueSql: "((1))"),
                    ProcedimientoEnsayoID = table.Column<int>(type: "int", nullable: true),
                    AnalisisTipoID = table.Column<int>(type: "int", nullable: true),
                    VisiblePuntoEntrega = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    PuntoMuestreoSINAC = table.Column<int>(type: "int", nullable: true),
                    FRecogidaFin = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_BoletinesDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_Empleados",
                        column: x => x.ResponsableRecepcionID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_LAB_AnalisisTipos",
                        column: x => x.AnalisisTipoID,
                        principalTable: "LAB_AnalisisTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_LAB_Boletines",
                        column: x => x.CabeceraID,
                        principalTable: "LAB_Boletines",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_LAB_BoletinesDetalle",
                        column: x => x.LineaID,
                        principalTable: "LAB_BoletinesDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_LAB_BoletinesDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "LAB_BoletinesDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_LAB_BoletinesEstados",
                        column: x => x.EstadoID,
                        principalTable: "LAB_BoletinesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_Productos1",
                        column: x => x.ProductoCompuestoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_Tarifas",
                        column: x => x.TarifaID,
                        principalTable: "Tarifas",
                        principalColumn: "IDTarifa");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "LAB_BoletinesPool",
                columns: table => new
                {
                    IDPool = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReferenciaInterna = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    ReferenciaPersona = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    IdentificacionMuestra = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_BoletinesPool", x => x.IDPool);
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesPool_LAB_Boletines",
                        column: x => x.CabeceraID,
                        principalTable: "LAB_Boletines",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesPool_LAB_BoletinesEstados",
                        column: x => x.EstadoID,
                        principalTable: "LAB_BoletinesEstados",
                        principalColumn: "IDEstado");
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAsDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    ResponsableID = table.Column<int>(type: "int", nullable: true),
                    FPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    Resultado = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcedimientoEnsayo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TecnicaAnalisis = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Unidades = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LimiteCuantificacion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LimiteDeteccion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ValorParametrico = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TiempoMaximo = table.Column<double>(type: "float", nullable: false),
                    TiempoEspera = table.Column<double>(type: "float", nullable: false),
                    Acondicionamiento = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Envase = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Incertidumbre = table.Column<decimal>(type: "money", nullable: true, defaultValueSql: "((0))"),
                    LimiteMaximo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Acreditado = table.Column<bool>(type: "bit", nullable: false),
                    ProductoCompuestoID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Impreso = table.Column<bool>(type: "bit", nullable: false),
                    Impreso_OT = table.Column<bool>(type: "bit", nullable: false),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    ProcedimientoEnsayoID = table.Column<int>(type: "int", nullable: true),
                    Resultado2 = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true),
                    Resultado3 = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true),
                    Resultado4 = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAsDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_LAB_OAs",
                        column: x => x.CabeceraID,
                        principalTable: "LAB_OAs",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_LAB_OAsDetalle",
                        column: x => x.LineaID,
                        principalTable: "LAB_OAsDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_LAB_ProcedimientosEnsayo",
                        column: x => x.ProcedimientoEnsayoID,
                        principalTable: "LAB_ProcedimientosEnsayo",
                        principalColumn: "IDProcedimiento");
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_LAB_OAsDetalle_Productos",
                        column: x => x.ProductoCompuestoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacion_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesFabricacion_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacion_DatosDinamicos_OrdenesFabricacion",
                        column: x => x.CabeceraID,
                        principalTable: "OrdenesFabricacion",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacionDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    CentroID = table.Column<int>(type: "int", nullable: true),
                    CualificacionID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    CantidadTeorica = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    CosteTeorico = table.Column<double>(type: "float", nullable: false),
                    TotalCosteTeorico = table.Column<decimal>(type: "money", nullable: false),
                    MargenTeorico = table.Column<decimal>(type: "money", nullable: false),
                    PrecioTeorico = table.Column<double>(type: "float", nullable: false),
                    TotalVentaTeorico = table.Column<decimal>(type: "money", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadReal = table.Column<double>(type: "float", nullable: false),
                    CosteReal = table.Column<double>(type: "float", nullable: false),
                    TotalCosteReal = table.Column<decimal>(type: "money", nullable: false),
                    MargenReal = table.Column<decimal>(type: "money", nullable: false),
                    PrecioReal = table.Column<double>(type: "float", nullable: false),
                    TotalVentaReal = table.Column<decimal>(type: "money", nullable: false),
                    MargenTipoIDTeorico = table.Column<int>(type: "int", nullable: false),
                    MargenTipoIDReal = table.Column<int>(type: "int", nullable: false),
                    Entregado = table.Column<bool>(type: "bit", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesFabricacionDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_MargenesTipos",
                        column: x => x.MargenTipoIDTeorico,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_MargenesTipos1",
                        column: x => x.MargenTipoIDReal,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_OrdenesFabricacion",
                        column: x => x.CabeceraID,
                        principalTable: "OrdenesFabricacion",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_OrdenesFabricacionEstados",
                        column: x => x.EstadoID,
                        principalTable: "OrdenesFabricacionEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "OPEsDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    CantidadPFTeorica = table.Column<double>(type: "float", nullable: false),
                    CantidadPFReal = table.Column<double>(type: "float", nullable: false),
                    CantidadPFRechazada = table.Column<double>(type: "float", nullable: false),
                    OfID = table.Column<int>(type: "int", nullable: true),
                    OfDetalleID = table.Column<int>(type: "int", nullable: true),
                    OsID = table.Column<int>(type: "int", nullable: true),
                    OsDetalleID = table.Column<int>(type: "int", nullable: true),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    IVAClaseID = table.Column<int>(type: "int", nullable: true),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    MedidaPFID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaPFID = table.Column<int>(type: "int", nullable: true),
                    ProductoPFID = table.Column<int>(type: "int", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OPEsDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_IvaClases",
                        column: x => x.IVAClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_Medidas1",
                        column: x => x.MedidaPFID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_OPEs",
                        column: x => x.CabeceraID,
                        principalTable: "OPEs",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_OPEsDetalle",
                        column: x => x.LineaID,
                        principalTable: "OPEsDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_OPEsDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "OPEsDetalle_CDBO",
                        principalColumn: "IDCDBO",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_OPEsEstados",
                        column: x => x.EstadoID,
                        principalTable: "OPEsEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_OrdenesFabricacion",
                        column: x => x.OfID,
                        principalTable: "OrdenesFabricacion",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_OrdenesSeriadas",
                        column: x => x.OsID,
                        principalTable: "OrdenesSeriadas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_Productos1",
                        column: x => x.ProductoPFID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_UnidadesMedida1",
                        column: x => x.UnidadMedidaPFID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OPEsDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "OrdenesSeriadas_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesSeriadas_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadas_DatosDinamicos_OrdenesSeriadas",
                        column: x => x.CabeceraID,
                        principalTable: "OrdenesSeriadas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrdenesSeriadasDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true, comment: "Para lineas NO Fase, informamos su Fase."),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    CentroID = table.Column<int>(type: "int", nullable: true),
                    CualificacionID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    TotalTiempoPreparacionTeorico = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoEjecucionTeorico = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoPreparacionReal = table.Column<double>(type: "float", nullable: false),
                    TotalTiempoEjecucionReal = table.Column<double>(type: "float", nullable: false),
                    FechaInicioTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinTeorica = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaInicioReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFinReal = table.Column<DateTime>(type: "datetime", nullable: true),
                    CantidadTeorica = table.Column<double>(type: "float", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    CosteTeorico = table.Column<double>(type: "float", nullable: false),
                    TotalCosteTeorico = table.Column<decimal>(type: "money", nullable: false),
                    MargenTeorico = table.Column<decimal>(type: "money", nullable: false),
                    PrecioTeorico = table.Column<double>(type: "float", nullable: false),
                    TotalVentaTeorico = table.Column<decimal>(type: "money", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadReal = table.Column<double>(type: "float", nullable: false),
                    CosteReal = table.Column<double>(type: "float", nullable: false),
                    TotalCosteReal = table.Column<decimal>(type: "money", nullable: false),
                    MargenReal = table.Column<decimal>(type: "money", nullable: false),
                    PrecioReal = table.Column<double>(type: "float", nullable: false),
                    TotalVentaReal = table.Column<decimal>(type: "money", nullable: false),
                    CantidadPFEntrada = table.Column<double>(type: "float", nullable: false),
                    CantidadPFTerminada = table.Column<double>(type: "float", nullable: false),
                    CantidadPFRechazada = table.Column<double>(type: "float", nullable: false),
                    FactorSolapamiento = table.Column<decimal>(type: "money", nullable: false),
                    FaseID = table.Column<int>(type: "int", nullable: true, comment: "Para lineas Fase, informamos su Fase padre."),
                    Orden = table.Column<int>(type: "int", nullable: false),
                    MedidaPFID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaPFID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoIDTeorico = table.Column<int>(type: "int", nullable: false),
                    MargenTipoIDReal = table.Column<int>(type: "int", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesSeriadasDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_Cualificaciones",
                        column: x => x.CualificacionID,
                        principalTable: "Cualificaciones",
                        principalColumn: "IDCualificacion");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_MargenesTipos",
                        column: x => x.MargenTipoIDTeorico,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_MargenesTipos1",
                        column: x => x.MargenTipoIDReal,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_Medidas1",
                        column: x => x.MedidaPFID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_Operaciones",
                        column: x => x.OperacionID,
                        principalTable: "Operaciones",
                        principalColumn: "IDOperacion");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_OrdenesSeriadas",
                        column: x => x.CabeceraID,
                        principalTable: "OrdenesSeriadas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_OrdenesSeriadasDetalle",
                        column: x => x.LineaID,
                        principalTable: "OrdenesSeriadasDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_OrdenesSeriadasEstados",
                        column: x => x.EstadoID,
                        principalTable: "OrdenesSeriadasEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_OrdenesSeriadasDetalle_UnidadesMedida1",
                        column: x => x.UnidadMedidaPFID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "ISO_PedidosCompra",
                columns: table => new
                {
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    Aprobado = table.Column<bool>(type: "bit", nullable: true),
                    CalificacionID = table.Column<int>(type: "int", nullable: true),
                    ObservacionesCalidad = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_PedidosCompra", x => x.CabeceraID);
                    table.ForeignKey(
                        name: "FK_ISO_PedidosCompra_ISO_CalificacionesCompra",
                        column: x => x.CalificacionID,
                        principalTable: "ISO_CalificacionesCompra",
                        principalColumn: "IDCalificacion");
                    table.ForeignKey(
                        name: "FK_ISO_PedidosCompra_PedidosCompra",
                        column: x => x.CabeceraID,
                        principalTable: "PedidosCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PedidosCompraDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosCompraDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_PedidosCompra",
                        column: x => x.CabeceraID,
                        principalTable: "PedidosCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_PedidosCompraDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PedidosCompraDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_PedidosCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "PedidosCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PedidosCompraDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "PedidosVenta_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVenta_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_PedidosVenta_DatosDinamicos_DatosDinamicos_GS_EntidadesDef",
                        column: x => x.DatoDinamicoGS_EntidadDefID,
                        principalTable: "DatosDinamicos_GS_EntidadesDef",
                        principalColumn: "IDDatoDinamicoGS_EntidadDef");
                    table.ForeignKey(
                        name: "FK_PedidosVenta_DatosDinamicos_PedidosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "PedidosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PedidosVentaDescuentosGenerales",
                columns: table => new
                {
                    IDDescuento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Acumular = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVentaDescuentosGenerales", x => x.IDDescuento);
                    table.ForeignKey(
                        name: "FK_PedidosVentaDescuentosGenerales_PedidosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "PedidosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PedidosVentaDescuentosGenerales_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDescuentosGenerales_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "PedidosVentaDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<double>(type: "float", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    Incluir_MO = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Incluir_Material = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    DescuentoGeneral = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PedidosVentaDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_PedidosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "PedidosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_PedidosVentaDetalle",
                        column: x => x.LineaID,
                        principalTable: "PedidosVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_PedidosVentaDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PedidosVentaDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_PedidosVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "PedidosVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PedidosVentaDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosCompraDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosCompraDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_PresupuestosCompra",
                        column: x => x.CabeceraID,
                        principalTable: "PresupuestosCompra",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_PresupuestosCompraDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PresupuestosCompraDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_PresupuestosCompraEstados",
                        column: x => x.EstadoID,
                        principalTable: "PresupuestosCompraEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosCompraDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVentaDescuentosGenerales",
                columns: table => new
                {
                    IDDescuento = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ProductoTipoID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    Importe = table.Column<decimal>(type: "money", nullable: false),
                    Acumular = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVentaDescuentosGenerales", x => x.IDDescuento);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDescuentosGenerales_PresupuestosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "PresupuestosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDescuentosGenerales_ProductosTipos",
                        column: x => x.ProductoTipoID,
                        principalTable: "ProductosTipos",
                        principalColumn: "IDProductoTipo");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDescuentosGenerales_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVentaDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<double>(type: "float", nullable: true),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    DescuentoGeneral = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<double>(type: "float", nullable: true, defaultValueSql: "((0))"),
                    Incluir_MO = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    Incluir_Material = table.Column<bool>(type: "bit", nullable: false, defaultValueSql: "((1))"),
                    ProveedorID = table.Column<int>(type: "int", nullable: true),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVentaDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_PresupuestosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "PresupuestosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_PresupuestosVentaDetalle",
                        column: x => x.LineaID,
                        principalTable: "PresupuestosVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_PresupuestosVentaDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "PresupuestosVentaDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_PresupuestosVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "PresupuestosVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_Proveedores",
                        column: x => x.ProveedorID,
                        principalTable: "Proveedores",
                        principalColumn: "IDPersona");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "PresupuestosVentaProductosActualizables",
                columns: table => new
                {
                    IDProductoActualizable = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PresupuestosVentaProductosActualizables", x => x.IDProductoActualizable);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaProductosActualizables_PresupuestosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "PresupuestosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PresupuestosVentaProductosActualizables_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                });

            migrationBuilder.CreateTable(
                name: "SRV_ContratosDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    DescuentoGeneral = table.Column<decimal>(type: "money", nullable: false),
                    DireccionInstalacionID = table.Column<int>(type: "int", nullable: true),
                    Garantia = table.Column<bool>(type: "bit", nullable: false),
                    GarantiaTiempo = table.Column<double>(type: "float", nullable: true),
                    AdmiteRevision = table.Column<bool>(type: "bit", nullable: false),
                    Renovable = table.Column<bool>(type: "bit", nullable: false),
                    Zonas = table.Column<string>(type: "varchar(2048)", unicode: false, maxLength: 2048, nullable: true),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_ContratosDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_ClientesDirecciones",
                        column: x => x.DireccionInstalacionID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_Contratos",
                        column: x => x.CabeceraID,
                        principalTable: "SRV_Contratos",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_ContratosDetalle",
                        column: x => x.LineaID,
                        principalTable: "SRV_ContratosDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_ContratosDetalle_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "SRV_ContratosDetalle_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_SRV_ContratosEstados",
                        column: x => x.EstadoID,
                        principalTable: "SRV_ContratosEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_SRV_ContratosDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "SRV_ContratosPlanificacion",
                columns: table => new
                {
                    IDPlanificacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    Numero = table.Column<int>(type: "int", nullable: true),
                    Revision = table.Column<int>(type: "int", nullable: false),
                    Codigo = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FPrevista = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFija = table.Column<bool>(type: "bit", nullable: false),
                    CabeceraOFID_Related = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_ContratosPlanificacion", x => x.IDPlanificacion);
                    table.ForeignKey(
                        name: "FK_SRV_ContratosPlanificacion_SRV_Contratos",
                        column: x => x.CabeceraID,
                        principalTable: "SRV_Contratos",
                        principalColumn: "IDCabecera");
                });

            migrationBuilder.CreateTable(
                name: "SRV_PresupuestosVentaDetalle",
                columns: table => new
                {
                    IDLinea = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: true),
                    TipoLineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    IvaClaseID = table.Column<int>(type: "int", nullable: true),
                    Descuento = table.Column<decimal>(type: "money", nullable: false),
                    NumLinea = table.Column<int>(type: "int", nullable: true),
                    Descripcion = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    CantidadServida = table.Column<double>(type: "float", nullable: false),
                    CantidadPendiente = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    Margen = table.Column<decimal>(type: "money", nullable: false),
                    BaseImponible = table.Column<decimal>(type: "money", nullable: false),
                    Total = table.Column<decimal>(type: "money", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    CtaConta = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IVAGrupoID = table.Column<int>(type: "int", nullable: true),
                    RefPersona = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Retencion = table.Column<decimal>(type: "money", nullable: false),
                    RecargoEquivalencia = table.Column<bool>(type: "bit", nullable: false),
                    FEntrega = table.Column<DateTime>(type: "datetime", nullable: true),
                    CodigoPropioProducto = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    NumeroLote = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    uidID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConceptoRetencionID = table.Column<int>(type: "int", nullable: true),
                    FRecepcion = table.Column<DateTime>(type: "datetime", nullable: true),
                    CentroCosteID = table.Column<int>(type: "int", nullable: true),
                    MargenTipoID = table.Column<int>(type: "int", nullable: false),
                    MargenBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    TotalBeneficio = table.Column<decimal>(type: "money", nullable: false),
                    CantidadAlquiler = table.Column<double>(type: "float", nullable: false),
                    TiempoAlquiler = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    IvaTipoID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true),
                    CantidadUnitaria = table.Column<double>(type: "float", nullable: false),
                    CosteUnitario = table.Column<double>(type: "float", nullable: false),
                    MargenClaveID = table.Column<int>(type: "int", nullable: true),
                    PrecioVentaProducto = table.Column<double>(type: "float", nullable: false),
                    DescuentoGeneral = table.Column<decimal>(type: "money", nullable: false),
                    DireccionInstalacionID = table.Column<int>(type: "int", nullable: true),
                    Garantia = table.Column<bool>(type: "bit", nullable: false),
                    GarantiaTiempo = table.Column<double>(type: "float", nullable: true),
                    AdmiteRevision = table.Column<bool>(type: "bit", nullable: false),
                    Renovable = table.Column<bool>(type: "bit", nullable: false),
                    Zonas = table.Column<string>(type: "varchar(2048)", unicode: false, maxLength: 2048, nullable: true),
                    CosteSinDto = table.Column<double>(type: "float", nullable: false),
                    DtoCoste = table.Column<decimal>(type: "money", nullable: false),
                    Cantidad_X_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Y_Inicial = table.Column<double>(type: "float", nullable: true),
                    Cantidad_Z_Inicial = table.Column<double>(type: "float", nullable: true),
                    Numero_C_X = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Y = table.Column<double>(type: "float", nullable: true),
                    Numero_C_Z = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRV_PresupuestosVentaDetalle", x => x.IDLinea);
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_CTA_CentroCoste",
                        column: x => x.CentroCosteID,
                        principalTable: "CTA_CentroCoste",
                        principalColumn: "IDCentroCoste");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_ClientesDirecciones",
                        column: x => x.DireccionInstalacionID,
                        principalTable: "ClientesDirecciones",
                        principalColumn: "IDPersonaDireccion");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_ConceptosRetencion",
                        column: x => x.ConceptoRetencionID,
                        principalTable: "ConceptosRetencion",
                        principalColumn: "IDConceptoRetencion");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_IVAGrupos",
                        column: x => x.IVAGrupoID,
                        principalTable: "IVAGrupos",
                        principalColumn: "IDIVAGrupo");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_IvaClases",
                        column: x => x.IvaClaseID,
                        principalTable: "IvaClases",
                        principalColumn: "IDIvaClase");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_IvaTipos",
                        column: x => x.IvaTipoID,
                        principalTable: "IvaTipos",
                        principalColumn: "IDIvaTipo");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_MargenesClaves",
                        column: x => x.MargenClaveID,
                        principalTable: "MargenesClaves",
                        principalColumn: "IDMargenClave");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_MargenesTipos",
                        column: x => x.MargenTipoID,
                        principalTable: "MargenesTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_Medidas",
                        column: x => x.MedidaID,
                        principalTable: "Medidas",
                        principalColumn: "IDMedida");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_PresupuestosVenta",
                        column: x => x.CabeceraID,
                        principalTable: "SRV_PresupuestosVenta",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_PresupuestosVentaDetalle",
                        column: x => x.LineaID,
                        principalTable: "SRV_PresupuestosVentaDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_SRV_PresupuestosVentaEstados",
                        column: x => x.EstadoID,
                        principalTable: "SRV_PresupuestosVentaEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_TiposLinea",
                        column: x => x.TipoLineaID,
                        principalTable: "TiposLinea",
                        principalColumn: "IDTipoLinea");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_UnidadesMedida",
                        column: x => x.UnidadMedidaID,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "LAB_BoletinesDetalle_DatosDinamicos",
                columns: table => new
                {
                    IDDatoDinamicoRecordEntidad = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    Valor = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    DatoDinamicoGS_EntidadDefID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_BoletinesDetalle_DatosDinamicos", x => x.IDDatoDinamicoRecordEntidad);
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesDetalle_DatosDinamicos_LAB_BoletinesDetalle",
                        column: x => x.LineaID,
                        principalTable: "LAB_BoletinesDetalle",
                        principalColumn: "IDLinea",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LAB_BoletinesPoolDetalle",
                columns: table => new
                {
                    IDRelacion = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    PoolID = table.Column<int>(type: "int", nullable: false),
                    DetalleID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_BoletinesPoolDetalle", x => x.IDRelacion);
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesPoolDetalle_LAB_Boletines",
                        column: x => x.CabeceraID,
                        principalTable: "LAB_Boletines",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesPoolDetalle_LAB_BoletinesDetalle",
                        column: x => x.DetalleID,
                        principalTable: "LAB_BoletinesDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_LAB_BoletinesPoolDetalle_LAB_BoletinesPool",
                        column: x => x.PoolID,
                        principalTable: "LAB_BoletinesPool",
                        principalColumn: "IDPool");
                });

            migrationBuilder.CreateTable(
                name: "LAB_OAsLecturas",
                columns: table => new
                {
                    IDLectura = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    EstadoID = table.Column<int>(type: "int", nullable: false),
                    FReal = table.Column<DateTime>(type: "datetime", nullable: false),
                    ResponsableID = table.Column<int>(type: "int", nullable: true),
                    Resultado = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: false),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    Resultado2 = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true),
                    Resultado3 = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true),
                    Resultado4 = table.Column<string>(type: "nvarchar(75)", maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LAB_OAsLecturas", x => x.IDLectura);
                    table.ForeignKey(
                        name: "FK_LAB_OAsLecturas_Empleados",
                        column: x => x.ResponsableID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_LAB_OAsLecturas_LAB_OAsDetalle",
                        column: x => x.LineaID,
                        principalTable: "LAB_OAsDetalle",
                        principalColumn: "IDLinea",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LAB_OAsLecturas_LAB_OAsLecturasEstados",
                        column: x => x.EstadoID,
                        principalTable: "LAB_OAsLecturasEstados",
                        principalColumn: "IDEstado");
                });

            migrationBuilder.CreateTable(
                name: "OrdenesFabricacionDetalleEmpleados",
                columns: table => new
                {
                    IDOFDE = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: false),
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    EmpleadoID = table.Column<int>(type: "int", nullable: false),
                    PuestoID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdenesFabricacionDetalleEmpleados", x => x.IDOFDE);
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalleEmpleados_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalleEmpleados_OrdenesFabricacion",
                        column: x => x.CabeceraID,
                        principalTable: "OrdenesFabricacion",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalleEmpleados_OrdenesFabricacionDetalle",
                        column: x => x.LineaID,
                        principalTable: "OrdenesFabricacionDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_OrdenesFabricacionDetalleEmpleados_Puestos",
                        column: x => x.PuestoID,
                        principalTable: "Puestos",
                        principalColumn: "IDPuesto");
                });

            migrationBuilder.CreateTable(
                name: "LotesTraza",
                columns: table => new
                {
                    IDLoteTraza = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LoteIDOrigen = table.Column<int>(type: "int", nullable: false),
                    LineaOSIDOrigen = table.Column<int>(type: "int", nullable: true),
                    LoteIDDestino = table.Column<int>(type: "int", nullable: false),
                    LineaOSIDDestino = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LotesTraza", x => x.IDLoteTraza);
                    table.ForeignKey(
                        name: "FK_LotesTraza_Lotes",
                        column: x => x.LoteIDOrigen,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_LotesTraza_Lotes1",
                        column: x => x.LoteIDDestino,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_LotesTraza_OrdenesSeriadasDetalle",
                        column: x => x.LineaOSIDOrigen,
                        principalTable: "OrdenesSeriadasDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_LotesTraza_OrdenesSeriadasDetalle1",
                        column: x => x.LineaOSIDDestino,
                        principalTable: "OrdenesSeriadasDetalle",
                        principalColumn: "IDLinea");
                });

            migrationBuilder.CreateTable(
                name: "Partes",
                columns: table => new
                {
                    IDParte = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OfID = table.Column<int>(type: "int", nullable: true),
                    OfDetalleID = table.Column<int>(type: "int", nullable: true),
                    OsID = table.Column<int>(type: "int", nullable: true),
                    OsDetalleID = table.Column<int>(type: "int", nullable: true),
                    OfTipoID = table.Column<int>(type: "int", nullable: false),
                    ParteTipoID = table.Column<int>(type: "int", nullable: false),
                    ProductoID = table.Column<int>(type: "int", nullable: false),
                    MedidaID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID = table.Column<int>(type: "int", nullable: true),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    TiempoPreparacion = table.Column<double>(type: "float", nullable: false),
                    TiempoEfectivo = table.Column<double>(type: "float", nullable: false),
                    AlmacenID = table.Column<int>(type: "int", nullable: true),
                    UbicacionID = table.Column<int>(type: "int", nullable: true),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    FechaInicio = table.Column<DateTime>(type: "datetime", nullable: true),
                    FechaFin = table.Column<DateTime>(type: "datetime", nullable: true),
                    CantidadPF = table.Column<double>(type: "float", nullable: false, comment: ""),
                    CantidadPFRechazada = table.Column<double>(type: "float", nullable: false),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    CualificacionID = table.Column<int>(type: "int", nullable: true),
                    CentroTipoID = table.Column<int>(type: "int", nullable: true),
                    CentroExterno = table.Column<bool>(type: "bit", nullable: false),
                    CentroID = table.Column<int>(type: "int", nullable: true),
                    EmpleadoID = table.Column<int>(type: "int", nullable: true),
                    MaquinaID = table.Column<int>(type: "int", nullable: true),
                    FechaImputacion = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(convert(varchar,getdate(),103))"),
                    FechaParte = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    LoteID = table.Column<int>(type: "int", nullable: true),
                    Observaciones = table.Column<string>(type: "text", nullable: true),
                    AceptadoPorEmpleadoID = table.Column<int>(type: "int", nullable: true),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true),
                    MedidaPFID = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaPFID = table.Column<int>(type: "int", nullable: true),
                    Gest_Corte = table.Column<bool>(type: "bit", nullable: false),
                    UnidadesCorte = table.Column<double>(type: "float", nullable: false),
                    Cantidad_X = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Y = table.Column<double>(type: "float", nullable: false),
                    Cantidad_Z = table.Column<double>(type: "float", nullable: false),
                    UnidadMedidaID_Corte_X = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Y = table.Column<int>(type: "int", nullable: true),
                    UnidadMedidaID_Corte_Z = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Partes", x => x.IDParte);
                    table.ForeignKey(
                        name: "FK_Partes_Almacenes",
                        column: x => x.AlmacenID,
                        principalTable: "Almacenes",
                        principalColumn: "IDAlmacen");
                    table.ForeignKey(
                        name: "FK_Partes_AlmacenesUbicaciones",
                        column: x => x.UbicacionID,
                        principalTable: "AlmacenesUbicaciones",
                        principalColumn: "IDUbicacion");
                    table.ForeignKey(
                        name: "FK_Partes_CentrosTipos",
                        column: x => x.CentroTipoID,
                        principalTable: "CentrosTipos",
                        principalColumn: "IDCentroTipo");
                    table.ForeignKey(
                        name: "FK_Partes_CentrosTrabajo",
                        column: x => x.CentroID,
                        principalTable: "CentrosTrabajo",
                        principalColumn: "IDCentro");
                    table.ForeignKey(
                        name: "FK_Partes_Cualificaciones",
                        column: x => x.CualificacionID,
                        principalTable: "Cualificaciones",
                        principalColumn: "IDCualificacion");
                    table.ForeignKey(
                        name: "FK_Partes_Empleados",
                        column: x => x.EmpleadoID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Partes_Lotes",
                        column: x => x.LoteID,
                        principalTable: "Lotes",
                        principalColumn: "IDLote");
                    table.ForeignKey(
                        name: "FK_Partes_Maquinas",
                        column: x => x.MaquinaID,
                        principalTable: "Maquinas",
                        principalColumn: "IDMaquina");
                    table.ForeignKey(
                        name: "FK_Partes_Operaciones",
                        column: x => x.OperacionID,
                        principalTable: "Operaciones",
                        principalColumn: "IDOperacion");
                    table.ForeignKey(
                        name: "FK_Partes_OrdenesFabricacionDetalle",
                        column: x => x.OfDetalleID,
                        principalTable: "OrdenesFabricacionDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_Partes_OrdenesFabricacionTipos",
                        column: x => x.OfTipoID,
                        principalTable: "OrdenesFabricacionTipos",
                        principalColumn: "IDTipo");
                    table.ForeignKey(
                        name: "FK_Partes_OrdenesSeriadasDetalle",
                        column: x => x.OsDetalleID,
                        principalTable: "OrdenesSeriadasDetalle",
                        principalColumn: "IDLinea");
                    table.ForeignKey(
                        name: "FK_Partes_PartesTipos",
                        column: x => x.ParteTipoID,
                        principalTable: "PartesTipos",
                        principalColumn: "IDParteTipo");
                    table.ForeignKey(
                        name: "FK_Partes_Partes_CDBO",
                        column: x => x.IDCDBO,
                        principalTable: "Partes_CDBO",
                        principalColumn: "IDCDBO");
                    table.ForeignKey(
                        name: "FK_Partes_Productos",
                        column: x => x.ProductoID,
                        principalTable: "Productos",
                        principalColumn: "IDProducto");
                    table.ForeignKey(
                        name: "FK_Partes_UnidadesMedida",
                        columns: x => new { x.UnidadMedidaPFID, x.MedidaPFID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                    table.ForeignKey(
                        name: "FK_Partes_UnidadesMedida1",
                        columns: x => new { x.UnidadMedidaID, x.MedidaID },
                        principalTable: "UnidadesMedida",
                        principalColumns: new[] { "IDUnidadMedida", "MedidaID" });
                    table.ForeignKey(
                        name: "FK_Partes_UnidadesMedida_X",
                        column: x => x.UnidadMedidaID_Corte_X,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_Partes_UnidadesMedida_Y",
                        column: x => x.UnidadMedidaID_Corte_Y,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                    table.ForeignKey(
                        name: "FK_Partes_UnidadesMedida_Z",
                        column: x => x.UnidadMedidaID_Corte_Z,
                        principalTable: "UnidadesMedida",
                        principalColumn: "IDUnidadMedida");
                });

            migrationBuilder.CreateTable(
                name: "ISO_PedidosCompraDetalle",
                columns: table => new
                {
                    LineaID = table.Column<int>(type: "int", nullable: false),
                    CalificacionID = table.Column<int>(type: "int", nullable: true),
                    Certificado = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ISO_PedidosCompraDetalle", x => x.LineaID);
                    table.ForeignKey(
                        name: "FK_ISO_PedidosCompraDetalle_ISO_CalificacionesCompra",
                        column: x => x.CalificacionID,
                        principalTable: "ISO_CalificacionesCompra",
                        principalColumn: "IDCalificacion");
                    table.ForeignKey(
                        name: "FK_ISO_PedidosCompraDetalle_PedidosCompraDetalle",
                        column: x => x.LineaID,
                        principalTable: "PedidosCompraDetalle",
                        principalColumn: "IDLinea",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Fichajes_Partes",
                columns: table => new
                {
                    IDCabecera = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CabeceraID = table.Column<int>(type: "int", nullable: true),
                    EstadoID = table.Column<int>(type: "int", nullable: false, defaultValueSql: "(1)"),
                    FichajeDetalleID = table.Column<int>(type: "int", nullable: false),
                    TipoID = table.Column<int>(type: "int", nullable: false),
                    OfID = table.Column<int>(type: "int", nullable: true),
                    OsID = table.Column<int>(type: "int", nullable: true),
                    CantidadPF = table.Column<double>(type: "float", nullable: false),
                    CantidadPFRechazada = table.Column<double>(type: "float", nullable: false),
                    OperacionID = table.Column<int>(type: "int", nullable: true),
                    MaquinaID = table.Column<int>(type: "int", nullable: true),
                    CentroID = table.Column<int>(type: "int", nullable: true),
                    Cantidad = table.Column<double>(type: "float", nullable: false),
                    TiempoPreparacion = table.Column<double>(type: "float", nullable: false),
                    TiempoEfectivo = table.Column<double>(type: "float", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Coste = table.Column<double>(type: "float", nullable: false),
                    CosteMedio = table.Column<double>(type: "float", nullable: false),
                    TotalCoste = table.Column<decimal>(type: "money", nullable: false),
                    ParteID = table.Column<int>(type: "int", nullable: true),
                    IDCDBO = table.Column<long>(type: "bigint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fichajes_Partes", x => x.IDCabecera);
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_FichajesDetalle",
                        column: x => x.FichajeDetalleID,
                        principalTable: "FichajesDetalle",
                        principalColumn: "IDLinea",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_Fichajes_Partes",
                        column: x => x.CabeceraID,
                        principalTable: "Fichajes_Partes",
                        principalColumn: "IDCabecera");
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_Fichajes_PartesEstados",
                        column: x => x.EstadoID,
                        principalTable: "Fichajes_PartesEstados",
                        principalColumn: "IDEstado");
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_Maquinas",
                        column: x => x.MaquinaID,
                        principalTable: "Maquinas",
                        principalColumn: "IDMaquina");
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_Operaciones",
                        column: x => x.OperacionID,
                        principalTable: "Operaciones",
                        principalColumn: "IDOperacion");
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_OrdenesFabricacion",
                        column: x => x.OfID,
                        principalTable: "OrdenesFabricacion",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_OrdenesSeriadas",
                        column: x => x.OsID,
                        principalTable: "OrdenesSeriadas",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "FK_Fichajes_Partes_Partes",
                        column: x => x.ParteID,
                        principalTable: "Partes",
                        principalColumn: "IDParte",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "Fichajes_Tareas_StandBy",
                columns: table => new
                {
                    Fichaje_ParteID = table.Column<int>(type: "int", nullable: false),
                    PersonaID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fichajes_Tareas_StandBy", x => x.Fichaje_ParteID);
                    table.ForeignKey(
                        name: "FK_Fichajes_Tareas_StandBy_Empleados",
                        column: x => x.PersonaID,
                        principalTable: "Empleados",
                        principalColumn: "IDEmpleado");
                    table.ForeignKey(
                        name: "FK_Fichajes_Tareas_StandBy_Fichajes_Partes",
                        column: x => x.Fichaje_ParteID,
                        principalTable: "Fichajes_Partes",
                        principalColumn: "IDCabecera",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AEAT_M303_EjercicioID",
                table: "AEAT_M303",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_AEAT_M340_Detalle_ModeloID",
                table: "AEAT_M340_Detalle",
                column: "ModeloID");

            migrationBuilder.CreateIndex(
                name: "IX_Agencias_CodigoEntidad",
                table: "Agencias",
                column: "CodigoEntidad");

            migrationBuilder.CreateIndex(
                name: "IX_AgenciasTransporteTarifas",
                table: "AgenciasTransporteTarifas",
                columns: new[] { "IDTarifaAgencia", "AgenciaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AgenciasTransporteTarifas_AgenciaID",
                table: "AgenciasTransporteTarifas",
                column: "AgenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_AgenciasTransporteTarifasDetalle_TarifaAgenciaID_AgenciaID",
                table: "AgenciasTransporteTarifasDetalle",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_AgenciasTransporteTarifasDetalle_UnidadMedidaID",
                table: "AgenciasTransporteTarifasDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_AgenciasTransporteTarifasDetalle_ZonaID",
                table: "AgenciasTransporteTarifasDetalle",
                column: "ZonaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_CentroCosteID",
                table: "AlbaranesCompra",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_ContactoID",
                table: "AlbaranesCompra",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_EjercicioID",
                table: "AlbaranesCompra",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_EmpleadoID",
                table: "AlbaranesCompra",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_EmpresaID",
                table: "AlbaranesCompra",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_EstadoID",
                table: "AlbaranesCompra",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_IDCDBO",
                table: "AlbaranesCompra",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_IVAGrupoID",
                table: "AlbaranesCompra",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_MedioID",
                table: "AlbaranesCompra",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_PersonaDireccionFacturaID",
                table: "AlbaranesCompra",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_PersonaID_EjercicioID",
                table: "AlbaranesCompra",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_PortesTipoID",
                table: "AlbaranesCompra",
                column: "PortesTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_ProyectoID",
                table: "AlbaranesCompra",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompra_SerieID",
                table: "AlbaranesCompra",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_CabeceraID",
                table: "AlbaranesCompraDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_CDBO",
                table: "AlbaranesCompraDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_CentroCosteID",
                table: "AlbaranesCompraDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_ConceptoRetencionID",
                table: "AlbaranesCompraDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_EstadoID",
                table: "AlbaranesCompraDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_IvaClaseID",
                table: "AlbaranesCompraDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_IVAGrupoID",
                table: "AlbaranesCompraDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_IvaTipoID",
                table: "AlbaranesCompraDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_MargenTipoID",
                table: "AlbaranesCompraDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_MedidaID",
                table: "AlbaranesCompraDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_ProductoID",
                table: "AlbaranesCompraDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_TipoLineaID",
                table: "AlbaranesCompraDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_UnidadMedidaID",
                table: "AlbaranesCompraDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_UnidadMedidaID_Corte_X",
                table: "AlbaranesCompraDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_UnidadMedidaID_Corte_Y",
                table: "AlbaranesCompraDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesCompraDetalle_UnidadMedidaID_Corte_Z",
                table: "AlbaranesCompraDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_CDBO",
                table: "AlbaranesVenta",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_CentroCosteID",
                table: "AlbaranesVenta",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_ComercialID",
                table: "AlbaranesVenta",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_ComisionID",
                table: "AlbaranesVenta",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_ContactoID",
                table: "AlbaranesVenta",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_DirRecogida_EntidadOrigenID",
                table: "AlbaranesVenta",
                column: "DirRecogida_EntidadOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_EjercicioID",
                table: "AlbaranesVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_EmpleadoID",
                table: "AlbaranesVenta",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_EmpleadoResponsableID",
                table: "AlbaranesVenta",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_EmpresaID",
                table: "AlbaranesVenta",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_EstadoID",
                table: "AlbaranesVenta",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_IVAGrupoID",
                table: "AlbaranesVenta",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_MedioID",
                table: "AlbaranesVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_PersonaDireccionFacturaID",
                table: "AlbaranesVenta",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_PersonaID_EjercicioID",
                table: "AlbaranesVenta",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_ProyectoID",
                table: "AlbaranesVenta",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_SerieID",
                table: "AlbaranesVenta",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVenta_TarifaAgenciaID_AgenciaID",
                table: "AlbaranesVenta",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaAnticipos_CabeceraDestinoID",
                table: "AlbaranesVentaAnticipos",
                column: "CabeceraDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaAnticipos_CabeceraOrigenID",
                table: "AlbaranesVentaAnticipos",
                column: "CabeceraOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaAnticipos_CuentaEmpresaID",
                table: "AlbaranesVentaAnticipos",
                column: "CuentaEmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaAnticipos_MedioID",
                table: "AlbaranesVentaAnticipos",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaAnticipos_PersonaID",
                table: "AlbaranesVentaAnticipos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaAnticipos_VencimientoDestinoID",
                table: "AlbaranesVentaAnticipos",
                column: "VencimientoDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_CabeceraID",
                table: "AlbaranesVentaDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_CDBO",
                table: "AlbaranesVentaDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_CentroCosteID",
                table: "AlbaranesVentaDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_ConceptoRetencionID",
                table: "AlbaranesVentaDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_EstadoID",
                table: "AlbaranesVentaDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_IvaClaseID",
                table: "AlbaranesVentaDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_IVAGrupoID",
                table: "AlbaranesVentaDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_IvaTipoID",
                table: "AlbaranesVentaDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_LineaID_NumLinea",
                table: "AlbaranesVentaDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_MargenClaveID",
                table: "AlbaranesVentaDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_MargenTipoID",
                table: "AlbaranesVentaDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_MedidaID",
                table: "AlbaranesVentaDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_ProductoID",
                table: "AlbaranesVentaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_ProveedorID",
                table: "AlbaranesVentaDetalle",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_TipoLineaID",
                table: "AlbaranesVentaDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_UnidadMedidaID",
                table: "AlbaranesVentaDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_UnidadMedidaID_Corte_X",
                table: "AlbaranesVentaDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_UnidadMedidaID_Corte_Y",
                table: "AlbaranesVentaDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_AlbaranesVentaDetalle_UnidadMedidaID_Corte_Z",
                table: "AlbaranesVentaDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_Almacenes_CentroID",
                table: "Almacenes",
                column: "CentroID");

            migrationBuilder.CreateIndex(
                name: "IX_AlmacenesUbicaciones",
                table: "AlmacenesUbicaciones",
                columns: new[] { "IDUbicacion", "AlmacenID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AlmacenesUbicaciones_AlmacenID",
                table: "AlmacenesUbicaciones",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_AlmacenesUbicaciones_UbicacionID",
                table: "AlmacenesUbicaciones",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_CDBO",
                table: "ALQ_Alquileres",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_CentroCosteID",
                table: "ALQ_Alquileres",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_ComercialID",
                table: "ALQ_Alquileres",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_ComisionID",
                table: "ALQ_Alquileres",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_ContactoID",
                table: "ALQ_Alquileres",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_EjercicioID",
                table: "ALQ_Alquileres",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_EmpleadoID",
                table: "ALQ_Alquileres",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_EmpresaID",
                table: "ALQ_Alquileres",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_EstadoID",
                table: "ALQ_Alquileres",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_IVAGrupoID",
                table: "ALQ_Alquileres",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_MedioID",
                table: "ALQ_Alquileres",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_PersonaDireccionFacturaID",
                table: "ALQ_Alquileres",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_PersonaID",
                table: "ALQ_Alquileres",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_SerieID",
                table: "ALQ_Alquileres",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Alquileres_TarifaAgenciaID_AgenciaID",
                table: "ALQ_Alquileres",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDescuentosGenerales_CabeceraID",
                table: "ALQ_AlquileresDescuentosGenerales",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDescuentosGenerales_ProductoTipoID",
                table: "ALQ_AlquileresDescuentosGenerales",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDescuentosGenerales_TipoLineaID",
                table: "ALQ_AlquileresDescuentosGenerales",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_CabeceraID",
                table: "ALQ_AlquileresDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_CentroCosteID",
                table: "ALQ_AlquileresDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_ConceptoRetencionID",
                table: "ALQ_AlquileresDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_EmpleadoID",
                table: "ALQ_AlquileresDetalle",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_EstadoID",
                table: "ALQ_AlquileresDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_IDCDBO",
                table: "ALQ_AlquileresDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_IvaClaseID",
                table: "ALQ_AlquileresDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_IVAGrupoID",
                table: "ALQ_AlquileresDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_IvaTipoID",
                table: "ALQ_AlquileresDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_LineaID_NumLinea",
                table: "ALQ_AlquileresDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_MargenTipoID",
                table: "ALQ_AlquileresDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_MedidaID",
                table: "ALQ_AlquileresDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_ProductoID",
                table: "ALQ_AlquileresDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_TipoLineaID",
                table: "ALQ_AlquileresDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetalle_UnidadMedidaID",
                table: "ALQ_AlquileresDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetallePicking_CabeceraID",
                table: "ALQ_AlquileresDetallePicking",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetallePicking_PickingEntradaID",
                table: "ALQ_AlquileresDetallePicking",
                column: "PickingEntradaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresDetallePicking_PickingSalidaID",
                table: "ALQ_AlquileresDetallePicking",
                column: "PickingSalidaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresPicking_CabeceraID",
                table: "ALQ_AlquileresPicking",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_AlquileresPicking_TipoID",
                table: "ALQ_AlquileresPicking",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_CDBO",
                table: "ALQ_Presupuestos",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_CentroCosteID",
                table: "ALQ_Presupuestos",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_ComercialID",
                table: "ALQ_Presupuestos",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_ComisionID",
                table: "ALQ_Presupuestos",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_ContactoID",
                table: "ALQ_Presupuestos",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_EjercicioID",
                table: "ALQ_Presupuestos",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_EmpleadoID",
                table: "ALQ_Presupuestos",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_EmpresaID",
                table: "ALQ_Presupuestos",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_EstadoID",
                table: "ALQ_Presupuestos",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_IVAGrupoID",
                table: "ALQ_Presupuestos",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_MedioID",
                table: "ALQ_Presupuestos",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_PersonaDireccionFacturaID",
                table: "ALQ_Presupuestos",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_PersonaID",
                table: "ALQ_Presupuestos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_SerieID",
                table: "ALQ_Presupuestos",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_Presupuestos_TarifaAgenciaID_AgenciaID",
                table: "ALQ_Presupuestos",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDescuentosGenerales_CabeceraID",
                table: "ALQ_PresupuestosDescuentosGenerales",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDescuentosGenerales_ProductoTipoID",
                table: "ALQ_PresupuestosDescuentosGenerales",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDescuentosGenerales_TipoLineaID",
                table: "ALQ_PresupuestosDescuentosGenerales",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_CabeceraID",
                table: "ALQ_PresupuestosDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_CentroCosteID",
                table: "ALQ_PresupuestosDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_ConceptoRetencionID",
                table: "ALQ_PresupuestosDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_EmpleadoID",
                table: "ALQ_PresupuestosDetalle",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_EstadoID",
                table: "ALQ_PresupuestosDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_IDCDBO",
                table: "ALQ_PresupuestosDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_IvaClaseID",
                table: "ALQ_PresupuestosDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_IVAGrupoID",
                table: "ALQ_PresupuestosDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_IvaTipoID",
                table: "ALQ_PresupuestosDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_LineaID_NumLinea",
                table: "ALQ_PresupuestosDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_MargenTipoID",
                table: "ALQ_PresupuestosDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_MedidaID",
                table: "ALQ_PresupuestosDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_ProductoID",
                table: "ALQ_PresupuestosDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_TipoLineaID",
                table: "ALQ_PresupuestosDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_ALQ_PresupuestosDetalle_UnidadMedidaID",
                table: "ALQ_PresupuestosDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_Asientos_Diario_CentroCosteID",
                table: "Asientos_Diario",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AtributosCatalogo_AtributoProductoID",
                table: "AtributosCatalogo",
                column: "AtributoProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_AtributosCatalogo_CatalogoAtributoID",
                table: "AtributosCatalogo",
                column: "CatalogoAtributoID");

            migrationBuilder.CreateIndex(
                name: "IX_AtributosProductos_AtributoProductoID",
                table: "AtributosProductos",
                column: "AtributoProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_AtributosProductos_TipoID",
                table: "AtributosProductos",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_AtributosValoresFotosLog_ValorAtributoID",
                table: "AtributosValoresFotosLog",
                column: "ValorAtributoID");

            migrationBuilder.CreateIndex(
                name: "IX_Autofacturas_EjercicioID",
                table: "Autofacturas",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_Autofacturas_EmpleadoID",
                table: "Autofacturas",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Autofacturas_EmpresaID",
                table: "Autofacturas",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_Autofacturas_EstadoID",
                table: "Autofacturas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Autofacturas_FacturaCompraID",
                table: "Autofacturas",
                column: "FacturaCompraID");

            migrationBuilder.CreateIndex(
                name: "IX_Autofacturas_SerieID",
                table: "Autofacturas",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_AlmacenID",
                table: "BienesAmortizables",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_CategoriaID",
                table: "BienesAmortizables",
                column: "CategoriaID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_CausaBajaID",
                table: "BienesAmortizables",
                column: "CausaBajaID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_EstadoID",
                table: "BienesAmortizables",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_FacturaCompraDetalleID",
                table: "BienesAmortizables",
                column: "FacturaCompraDetalleID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_LoteID",
                table: "BienesAmortizables",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_NaturalezaID",
                table: "BienesAmortizables",
                column: "NaturalezaID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_ProductoID",
                table: "BienesAmortizables",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_ResponsableID",
                table: "BienesAmortizables",
                column: "ResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_TipoID",
                table: "BienesAmortizables",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizables_UbicacionID",
                table: "BienesAmortizables",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_BienesAmortizablesDetalle_EjercicioID",
                table: "BienesAmortizablesDetalle",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_BO_nueva_BOID",
                table: "BO",
                column: "BOID")
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_BO_cuentas_nueva_BOID",
                table: "BO_Cuentas",
                column: "BOID")
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_BO_cuentas_nueva_cuenta",
                table: "BO_Cuentas",
                column: "Cuenta");

            migrationBuilder.CreateIndex(
                name: "IX_CalendarioDiasEmpleado_EmpleadoID",
                table: "CalendarioDiasEmpleado",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CalendarioDiasEmpleado_TurnoID",
                table: "CalendarioDiasEmpleado",
                column: "TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_Nombre",
                table: "Calendarios",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Domingo_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Domingo_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Jueves_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Jueves_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Lunes_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Lunes_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Martes_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Martes_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Miercoles_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Miercoles_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Sabado_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Sabado_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Calendarios_PlanSemanal_Def_Viernes_TurnoID",
                table: "Calendarios_PlanSemanal_Def",
                column: "Viernes_TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_CalendariosDias_TurnoID",
                table: "CalendariosDias",
                column: "TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_CalendariosEjercicios_EjercicioID",
                table: "CalendariosEjercicios",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_CantidadesPrecargaComisiones_OperacionID",
                table: "CantidadesPrecargaComisiones",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_CDBO_ParametrosAnaliticos_UsrTypeID",
                table: "CDBO_ParametrosAnaliticos",
                column: "UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_CDBP_Entidades_EntidadID",
                table: "CDBP_Entidades",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "UIX_CDBP_Processes_Codigo",
                table: "CDBP_Processes",
                column: "Codigo",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CDBP_Steps_ProcessID",
                table: "CDBP_Steps",
                column: "ProcessID");

            migrationBuilder.CreateIndex(
                name: "IX_CentrosEmpleados_EmpleadoID",
                table: "CentrosEmpleados",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CentrosMaquinas_MaquinaID",
                table: "CentrosMaquinas",
                column: "MaquinaID");

            migrationBuilder.CreateIndex(
                name: "IX_CentrosTrabajo_CualificacionID",
                table: "CentrosTrabajo",
                column: "CualificacionID");

            migrationBuilder.CreateIndex(
                name: "IX_CentrosTrabajo_ProveedorID",
                table: "CentrosTrabajo",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_Certificaciones_AVDLiquidacion",
                table: "Certificaciones",
                column: "AVDLiquidacion");

            migrationBuilder.CreateIndex(
                name: "IX_Certificaciones_FacturaDetalleDestinoID",
                table: "Certificaciones",
                column: "FacturaDetalleDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_Certificaciones_FormaPagoID",
                table: "Certificaciones",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_Certificaciones_MedioID",
                table: "Certificaciones",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_CentroCosteID",
                table: "Clientes",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_ConceptoRetencionID",
                table: "Clientes",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_DireccionEntregaID",
                table: "Clientes",
                column: "DireccionEntregaID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_FE_FormatoID",
                table: "Clientes",
                column: "FE_FormatoID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_IDCDBO",
                table: "Clientes",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_IVAGrupoID",
                table: "Clientes",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_SerieID",
                table: "Clientes",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "Clientes_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_DatosDinamicos_PersonaID",
                table: "Clientes_DatosDinamicos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesCentrosAdministrativos_PersonaID",
                table: "ClientesCentrosAdministrativos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesContactos",
                table: "ClientesContactos",
                columns: new[] { "ID", "PersonaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ClientesContactos_ContactoTipoID",
                table: "ClientesContactos",
                column: "ContactoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesContactos_PersonaDireccionID_PersonaID",
                table: "ClientesContactos",
                columns: new[] { "PersonaDireccionID", "PersonaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ClientesContactos_PersonaID",
                table: "ClientesContactos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesCuentasBancarias_PersonaID",
                table: "ClientesCuentasBancarias",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDescuentos_FamiliaID",
                table: "ClientesDescuentos",
                column: "FamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDescuentos_Root_ProductoTipoID",
                table: "ClientesDescuentos_Root",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDireccion_LocProvPais",
                table: "ClientesDirecciones",
                columns: new[] { "LocalidadID", "ProvinciaID", "PaisID" });

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDirecciones",
                table: "ClientesDirecciones",
                columns: new[] { "IDPersonaDireccion", "PersonaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDirecciones_IDCDBO",
                table: "ClientesDirecciones",
                column: "IDCDBO");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDirecciones_LocalidadID",
                table: "ClientesDirecciones",
                column: "LocalidadID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDirecciones_PaisID",
                table: "ClientesDirecciones",
                column: "PaisID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDirecciones_PersonaID",
                table: "ClientesDirecciones",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesDirecciones_ProvinciaID",
                table: "ClientesDirecciones",
                column: "ProvinciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesMandatos_CuentaBancariaID",
                table: "ClientesMandatos",
                column: "CuentaBancariaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesMandatos_PersonaID",
                table: "ClientesMandatos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "clientesRole",
                column: "NormalizedName",
                unique: true,
                filter: "([NormalizedName] IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "IX_clientesroleclaim_RoleId",
                table: "clientesroleclaim",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesTelefonos_PersonaDireccionID",
                table: "ClientesTelefonos",
                column: "PersonaDireccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesTelefonos_PersonaID",
                table: "ClientesTelefonos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ClientesTipos",
                table: "ClientesTipos",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_clientesUserClaim_UserId",
                table: "clientesUserClaim",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_clientesUserLogin_UserId",
                table: "clientesUserLogin",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_clientesUserRole_RoleId",
                table: "clientesUserRole",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "ClientesUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "ClientesUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "([NormalizedUserName] IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "IX_Comarcas_PaisID",
                table: "Comarcas",
                column: "PaisID");

            migrationBuilder.CreateIndex(
                name: "IX_Comerciales_ComercialID",
                table: "Comerciales",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_Comerciales_ComercialTipoID",
                table: "Comerciales",
                column: "ComercialTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Comerciales_ComisionID",
                table: "Comerciales",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_Comerciales_ComisionResponsableID",
                table: "Comerciales",
                column: "ComisionResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_Comerciales_EmpleadoID",
                table: "Comerciales",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Comerciales_ProveedorID",
                table: "Comerciales",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_ComercialesClientes_ComercialID",
                table: "ComercialesClientes",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_ComisionesDetalle",
                table: "ComisionesDetalle",
                columns: new[] { "ComisionID", "ProductoID", "CantidadDesde" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ComisionesDetalle_OperacionID",
                table: "ComisionesDetalle",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_ComisionesDetalle_ProductoID",
                table: "ComisionesDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ComisionesDetalle_UnidadMedidaID_MedidaID",
                table: "ComisionesDetalle",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ConceptosRetencion_CtaCompras",
                table: "ConceptosRetencion",
                column: "CtaCompras");

            migrationBuilder.CreateIndex(
                name: "IX_ConceptosRetencion_CtaVentas",
                table: "ConceptosRetencion",
                column: "CtaVentas");

            migrationBuilder.CreateIndex(
                name: "IX_ConfiguracionBloques_ModeloID",
                table: "ConfiguracionBloques",
                column: "ModeloID");

            migrationBuilder.CreateIndex(
                name: "IX_ConfiguracionEmpresa_CTA_EmpresaID",
                table: "ConfiguracionEmpresa_CTA",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_ConfiguracionEmpresa_CTA_M303_CCBDevolucionID",
                table: "ConfiguracionEmpresa_CTA",
                column: "M303_CCBDevolucionID");

            migrationBuilder.CreateIndex(
                name: "IX_ConfiguracionEmpresa_CTA_M303_CCBIngresoID",
                table: "ConfiguracionEmpresa_CTA",
                column: "M303_CCBIngresoID");

            migrationBuilder.CreateIndex(
                name: "IX_ConfiguracionEmpresa_CTA_TerritorioID",
                table: "ConfiguracionEmpresa_CTA",
                column: "TerritorioID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_CabeceraOrigenID",
                table: "CRM_Acciones",
                column: "CabeceraOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_CabeceraRecurrenceID",
                table: "CRM_Acciones",
                column: "CabeceraRecurrenceID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_ComercialEmpleadoID",
                table: "CRM_Acciones",
                column: "ComercialEmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_ComercialID",
                table: "CRM_Acciones",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_EjercicioID",
                table: "CRM_Acciones",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_EmpleadoID",
                table: "CRM_Acciones",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_EmpresaID",
                table: "CRM_Acciones",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_EstadoAccionID",
                table: "CRM_Acciones",
                column: "EstadoAccionID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_IDCDBO",
                table: "CRM_Acciones",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_IniciativaID",
                table: "CRM_Acciones",
                column: "IniciativaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_MedioID",
                table: "CRM_Acciones",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_PersonaContactoID_PersonaID",
                table: "CRM_Acciones",
                columns: new[] { "PersonaContactoID", "PersonaID" });

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_PersonaDireccionID_PersonaID",
                table: "CRM_Acciones",
                columns: new[] { "PersonaDireccionID", "PersonaID" });

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_PersonaID",
                table: "CRM_Acciones",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_ResultadoID",
                table: "CRM_Acciones",
                column: "ResultadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Acciones_TipoAccionID",
                table: "CRM_Acciones",
                column: "TipoAccionID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_AccionesTipos_TipoGenericoID",
                table: "CRM_AccionesTipos",
                column: "TipoGenericoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Campanyas",
                table: "CRM_Campanyas",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Campanyas_EjercicioID",
                table: "CRM_Campanyas",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Campanyas_EmpleadoID",
                table: "CRM_Campanyas",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Campanyas_EmpresaID",
                table: "CRM_Campanyas",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Campanyas_EstadoID",
                table: "CRM_Campanyas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Campanyas_TipoID",
                table: "CRM_Campanyas",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasCriterios_CabeceraID",
                table: "CRM_CampanyasCriterios",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasCriterios_CampoCriterioID",
                table: "CRM_CampanyasCriterios",
                column: "CampoCriterioID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDestinatarios_CabeceraID",
                table: "CRM_CampanyasDestinatarios",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDestinatarios_ContactoID",
                table: "CRM_CampanyasDestinatarios",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDestinatarios_PersonaID",
                table: "CRM_CampanyasDestinatarios",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDetalle",
                table: "CRM_CampanyasDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDetalle_CabeceraID",
                table: "CRM_CampanyasDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDetalle_DocumentoID",
                table: "CRM_CampanyasDetalle",
                column: "DocumentoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDocumentos_CabeceraID",
                table: "CRM_CampanyasDocumentos",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDocumentos_FormatoID",
                table: "CRM_CampanyasDocumentos",
                column: "FormatoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasDocumentos_TipoID",
                table: "CRM_CampanyasDocumentos",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasSeguimientos_CabeceraID",
                table: "CRM_CampanyasSeguimientos",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CampanyasSeguimientos_DestinatarioID",
                table: "CRM_CampanyasSeguimientos",
                column: "DestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CamposCriterios_SegmentoID",
                table: "CRM_CamposCriterios",
                column: "SegmentoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_CanjesDetalle_CanjeID",
                table: "CRM_CanjesDetalle",
                column: "CanjeID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesPuntosCabeceras_CabeceraDocGest",
                table: "CRM_ClientesPuntosCabeceras",
                columns: new[] { "PersonaID", "DocumentoGestionID", "DocumentoGestionCabeceraID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesPuntosCabeceras_DocumentoGestionID",
                table: "CRM_ClientesPuntosCabeceras",
                column: "DocumentoGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesPuntosCabeceras_LiquidacionID",
                table: "CRM_ClientesPuntosCabeceras",
                column: "LiquidacionID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesPuntosDetalle_LineaDoc",
                table: "CRM_ClientesPuntosDetalle",
                columns: new[] { "CabeceraID", "DocumentoGestionLineaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesPuntosDetalle_PuntosTablaDetalleID_PuntosTablaID_ProductoID",
                table: "CRM_ClientesPuntosDetalle",
                columns: new[] { "PuntosTablaDetalleID", "PuntosTablaID", "ProductoID" });

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesPuntosDetalle_PuntosTablaID",
                table: "CRM_ClientesPuntosDetalle",
                column: "PuntosTablaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesSegmentos_ContactoID",
                table: "CRM_ClientesSegmentos",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesSegmentos_PersonaID",
                table: "CRM_ClientesSegmentos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_ClientesSegmentos_SegmentoID",
                table: "CRM_ClientesSegmentos",
                column: "SegmentoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Liquidaciones_CanjeID",
                table: "CRM_Liquidaciones",
                column: "CanjeID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Liquidaciones_PersonaID",
                table: "CRM_Liquidaciones",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Oportunidades_EstadoID",
                table: "CRM_Oportunidades",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Oportunidades_PersonaID",
                table: "CRM_Oportunidades",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Oportunidades_PrioridadID",
                table: "CRM_Oportunidades",
                column: "PrioridadID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_PuntosTablaDetalle",
                table: "CRM_PuntosTablaDetalle",
                columns: new[] { "PuntosTablaID", "ProductoID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CRM_PuntosTablaDetalle_PK_PuntosTablaID_ProductoID",
                table: "CRM_PuntosTablaDetalle",
                columns: new[] { "IDPuntosTablaDetalle", "PuntosTablaID", "ProductoID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CRM_PuntosTablaDetalle_ProductoID",
                table: "CRM_PuntosTablaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Segmentos_UsrTypeID",
                table: "CRM_Segmentos",
                column: "UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_CTA_AsientosOrigenes_DocumentoGestionID",
                table: "CTA_AsientosOrigenes",
                column: "DocumentoGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_CTA_CentroCoste_CentroCosteID",
                table: "CTA_CentroCoste",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_CTA_CentroCoste_DepartamentoID",
                table: "CTA_CentroCoste",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_CTA_CentroCoste_SeccionID_DepartamentoID",
                table: "CTA_CentroCoste",
                columns: new[] { "SeccionID", "DepartamentoID" });

            migrationBuilder.CreateIndex(
                name: "IX_CTA_Cuentas_Intercambio_EmpleadoID",
                table: "CTA_Cuentas_Intercambio",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Cualificaciones_Atributo_Valor",
                table: "Cualificaciones",
                columns: new[] { "AtributoID", "ValorID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Cualificaciones_ValorID",
                table: "Cualificaciones",
                column: "ValorID");

            migrationBuilder.CreateIndex(
                name: "IX_DatosDinamicos_UsrTypeID",
                table: "DatosDinamicos",
                column: "UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_DatosDinamicos_GS_EntidadesDef_DatoDinamicoID",
                table: "DatosDinamicos_GS_EntidadesDef",
                column: "DatoDinamicoID");

            migrationBuilder.CreateIndex(
                name: "IX_DatosDinamicos_GS_EntidadesDef_EntidadID",
                table: "DatosDinamicos_GS_EntidadesDef",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_CDBO",
                table: "DevolucionesVenta",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_CentroCosteID",
                table: "DevolucionesVenta",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_ComercialID",
                table: "DevolucionesVenta",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_ComisionID",
                table: "DevolucionesVenta",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_ContactoID",
                table: "DevolucionesVenta",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_DirRecogida_EntidadOrigenID",
                table: "DevolucionesVenta",
                column: "DirRecogida_EntidadOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_EjercicioID",
                table: "DevolucionesVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_EmpleadoID",
                table: "DevolucionesVenta",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_EmpleadoResponsableID",
                table: "DevolucionesVenta",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_EmpresaID",
                table: "DevolucionesVenta",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_EstadoID",
                table: "DevolucionesVenta",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_IVAGrupoID",
                table: "DevolucionesVenta",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_MedioID",
                table: "DevolucionesVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_PersonaDireccionFacturaID",
                table: "DevolucionesVenta",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_PersonaID_EjercicioID",
                table: "DevolucionesVenta",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_ProyectoID",
                table: "DevolucionesVenta",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_SerieID",
                table: "DevolucionesVenta",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVenta_TarifaAgenciaID_AgenciaID",
                table: "DevolucionesVenta",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_CabeceraID",
                table: "DevolucionesVentaDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_CDBO",
                table: "DevolucionesVentaDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_CentroCosteID",
                table: "DevolucionesVentaDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_ConceptoRetencionID",
                table: "DevolucionesVentaDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_EstadoID",
                table: "DevolucionesVentaDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_IvaClaseID",
                table: "DevolucionesVentaDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_IVAGrupoID",
                table: "DevolucionesVentaDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_IvaTipoID",
                table: "DevolucionesVentaDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_LineaID",
                table: "DevolucionesVentaDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_MargenClaveID",
                table: "DevolucionesVentaDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_MargenTipoID",
                table: "DevolucionesVentaDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_MedidaID",
                table: "DevolucionesVentaDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_ProductoID",
                table: "DevolucionesVentaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_TipoLineaID",
                table: "DevolucionesVentaDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_UnidadMedidaID",
                table: "DevolucionesVentaDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_UnidadMedidaID_Corte_X",
                table: "DevolucionesVentaDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_UnidadMedidaID_Corte_Y",
                table: "DevolucionesVentaDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_DevolucionesVentaDetalle_UnidadMedidaID_Corte_Z",
                table: "DevolucionesVentaDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_DG_DGDirecciones_DGDireccionID",
                table: "DG_DGDirecciones",
                column: "DGDireccionID");

            migrationBuilder.CreateIndex(
                name: "IX_DG_DGDirecciones_DocumentoGestionID",
                table: "DG_DGDirecciones",
                column: "DocumentoGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_DGD_Ubicaciones_AlmacenID",
                table: "DGD_Ubicaciones",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_DGD_Ubicaciones_LoteID",
                table: "DGD_Ubicaciones",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_DGD_Ubicaciones_MedidaID",
                table: "DGD_Ubicaciones",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_DGD_Ubicaciones_ProductoID",
                table: "DGD_Ubicaciones",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_DGD_Ubicaciones_UbicacionID",
                table: "DGD_Ubicaciones",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_DGD_Ubicaciones_UnidadMedidaID",
                table: "DGD_Ubicaciones",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_Diario_CentroCosteID",
                table: "Diario",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_Diario_Cuenta",
                table: "Diario",
                column: "Cuenta");

            migrationBuilder.CreateIndex(
                name: "IX_Diario_Fecha",
                table: "Diario",
                column: "Fecha");

            migrationBuilder.CreateIndex(
                name: "IX_Diario_IDDiario",
                table: "Diario",
                column: "IDDiario",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Diario_OrigenID",
                table: "Diario",
                column: "OrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_Direcciones_EntidadesOrigen_EntidadID",
                table: "Direcciones_EntidadesOrigen",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_Codigo",
                table: "DMN_DataSet",
                column: "Codigo",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_GridDefinitionID",
                table: "DMN_DataSet",
                column: "GridDefinitionID");

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_QueryFormID",
                table: "DMN_DataSet",
                column: "QueryFormID");

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_Parameter_DataSetID",
                table: "DMN_DataSet_Parameter",
                column: "DataSetID");

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_Parameter_OperatorID",
                table: "DMN_DataSet_Parameter",
                column: "OperatorID");

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_Parameter_UsrTypeID",
                table: "DMN_DataSet_Parameter",
                column: "UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "UIX_DMN_DataSet_Parameter_DataSetID_Name",
                table: "DMN_DataSet_Parameter",
                columns: new[] { "DataSetID", "Name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DMN_DataSet_rel_IDDataSet_2",
                table: "DMN_DataSet_rel",
                column: "IDDataSet_2");

            migrationBuilder.CreateIndex(
                name: "UIX_DMN_DataSet_rel_IDDataSet_1_2",
                table: "DMN_DataSet_rel",
                columns: new[] { "IDDataSet_1", "IDDataSet_2" },
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_DMN_QueryForm_FormularioID",
                table: "DMN_QueryForm",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "UIX_DMN_QueryForm_Codigo",
                table: "DMN_QueryForm",
                column: "Codigo",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestion_DocumentoGestionDestinatarioID",
                table: "DocumentosGestion",
                column: "DocumentoGestionDestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestion_DocumentoGestionID",
                table: "DocumentosGestion",
                column: "DocumentoGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestion_EntidadID",
                table: "DocumentosGestion",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestion_FormularioID",
                table: "DocumentosGestion",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestion_ModuloGestionID",
                table: "DocumentosGestion",
                column: "ModuloGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDestinatariosEntidad",
                table: "DocumentosGestionDestinatarios",
                column: "NombreEntidad",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDestinatariosTableName",
                table: "DocumentosGestionDestinatarios",
                column: "TableName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDetalleUbicaciones_AlmacenID",
                table: "DocumentosGestionDetalleUbicaciones",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDetalleUbicaciones_LoteID",
                table: "DocumentosGestionDetalleUbicaciones",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDetalleUbicaciones_MedidaID",
                table: "DocumentosGestionDetalleUbicaciones",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDetalleUbicaciones_ProductoID",
                table: "DocumentosGestionDetalleUbicaciones",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDetalleUbicaciones_UbicacionID",
                table: "DocumentosGestionDetalleUbicaciones",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionDetalleUbicaciones_UnidadMedidaID",
                table: "DocumentosGestionDetalleUbicaciones",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionMargenesClaves_MargenClaveID",
                table: "DocumentosGestionMargenesClaves",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionRegistroAlmacen_CabeceraDestinoID",
                table: "DocumentosGestionRegistroAlmacen",
                column: "CabeceraDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionRegistroAlmacen_DetalleDestinoID",
                table: "DocumentosGestionRegistroAlmacen",
                column: "DetalleDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionRegistroAlmacen_DocumentoGestionDestinoID",
                table: "DocumentosGestionRegistroAlmacen",
                column: "DocumentoGestionDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTiposLinea_FormularioID",
                table: "DocumentosGestionTiposLinea",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTiposLinea_TipoLineaID",
                table: "DocumentosGestionTiposLinea",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTiposLineaProductosTipos_ProductoTipoID",
                table: "DocumentosGestionTiposLineaProductosTipos",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTiposLineaTiposLinea_FormularioID",
                table: "DocumentosGestionTiposLineaTiposLinea",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTiposLineaTiposLinea_Parent_TipoLineaID",
                table: "DocumentosGestionTiposLineaTiposLinea",
                column: "Parent_TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTiposLineaTiposLinea_TipoLineaID",
                table: "DocumentosGestionTiposLineaTiposLinea",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTraspasos_DocumentoGestionDestinoID_CabeceraDestinoID_Tipo",
                table: "DocumentosGestionTraspasos",
                columns: new[] { "DocumentoGestionDestinoID", "CabeceraDestinoID", "Tipo" });

            migrationBuilder.CreateIndex(
                name: "IX_DocumentosGestionTraspasosSetup_DocumentoGestionDestinoID",
                table: "DocumentosGestionTraspasosSetup",
                column: "DocumentoGestionDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_CalendarioID",
                table: "Empleados",
                column: "CalendarioID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_CualificacionID",
                table: "Empleados",
                column: "CualificacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_DepartamentoID",
                table: "Empleados",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_EmpleadoContratoTipoID",
                table: "Empleados",
                column: "EmpleadoContratoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_EmpleadoDepartamentoID",
                table: "Empleados",
                column: "EmpleadoDepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_EmpleadoEstadoCivilID",
                table: "Empleados",
                column: "EmpleadoEstadoCivilID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_SeccionID",
                table: "Empleados",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_Empleados_TipoCarneConducirID",
                table: "Empleados",
                column: "TipoCarneConducirID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpleadosDirecciones_EmpleadoID",
                table: "EmpleadosDirecciones",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpleadosDirecciones_LocalidadID",
                table: "EmpleadosDirecciones",
                column: "LocalidadID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpleadosDirecciones_PaisID",
                table: "EmpleadosDirecciones",
                column: "PaisID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpleadosDirecciones_ProvinciaID",
                table: "EmpleadosDirecciones",
                column: "ProvinciaID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpleadosPuestos_PuestoID",
                table: "EmpleadosPuestos",
                column: "PuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpleadosTelefonos_EmpleadoID",
                table: "EmpleadosTelefonos",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpresasCuentasBancarias_TitularID",
                table: "EmpresasCuentasBancarias",
                column: "TitularID");

            migrationBuilder.CreateIndex(
                name: "IX_EmpresasEmailCuentas_EmpresaID",
                table: "EmpresasEmailCuentas",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_EjercicioID",
                table: "Expediciones",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_EmpleadoID",
                table: "Expediciones",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_EmpleadoResponsableID",
                table: "Expediciones",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_EmpresaID",
                table: "Expediciones",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_IDCDBO",
                table: "Expediciones",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_PersonaID",
                table: "Expediciones",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_SerieID",
                table: "Expediciones",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_Expediciones_TarifaAgenciaID",
                table: "Expediciones",
                column: "TarifaAgenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_CabeceraID",
                table: "ExpedicionesDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_DGOrigenID",
                table: "ExpedicionesDetalle",
                column: "DGOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_DirEntrega_EntidadOrigenID",
                table: "ExpedicionesDetalle",
                column: "DirEntrega_EntidadOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_DirSalida_EntidadOrigenID",
                table: "ExpedicionesDetalle",
                column: "DirSalida_EntidadOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_EstadoID",
                table: "ExpedicionesDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_IDCDBO",
                table: "ExpedicionesDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_LineaID",
                table: "ExpedicionesDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_PaqueteFormatoID",
                table: "ExpedicionesDetalle",
                column: "PaqueteFormatoID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_PortesTipoID",
                table: "ExpedicionesDetalle",
                column: "PortesTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ExpedicionesDetalle_TipoLineaID",
                table: "ExpedicionesDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturacionPlanificacion_FormaPagoID",
                table: "FacturacionPlanificacion",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturacionPlanificacion_MedioID",
                table: "FacturacionPlanificacion",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_CDBO",
                table: "FacturasCompra",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_CentroCosteID",
                table: "FacturasCompra",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_ContactoID",
                table: "FacturasCompra",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_EjercicioID",
                table: "FacturasCompra",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_EmpleadoID",
                table: "FacturasCompra",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_EmpresaID",
                table: "FacturasCompra",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_EstadoID",
                table: "FacturasCompra",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_FormaPagoID",
                table: "FacturasCompra",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_IVAGrupoID",
                table: "FacturasCompra",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_PersonaDireccionFacturaID",
                table: "FacturasCompra",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_PersonaID_EjercicioID",
                table: "FacturasCompra",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_PortesTipoID",
                table: "FacturasCompra",
                column: "PortesTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_ProyectoID",
                table: "FacturasCompra",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompra_SerieID",
                table: "FacturasCompra",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_CabeceraID",
                table: "FacturasCompraDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_CDBO",
                table: "FacturasCompraDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_CentroCosteID",
                table: "FacturasCompraDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_ConceptoRetencionID",
                table: "FacturasCompraDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_EstadoID",
                table: "FacturasCompraDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_IvaClaseID",
                table: "FacturasCompraDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_IVAGrupoID",
                table: "FacturasCompraDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_IvaTipoID",
                table: "FacturasCompraDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_MargenTipoID",
                table: "FacturasCompraDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_MedidaID",
                table: "FacturasCompraDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_ProductoID",
                table: "FacturasCompraDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_TipoLineaID",
                table: "FacturasCompraDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_UnidadMedidaID",
                table: "FacturasCompraDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_UnidadMedidaID_Corte_X",
                table: "FacturasCompraDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_UnidadMedidaID_Corte_Y",
                table: "FacturasCompraDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraDetalle_UnidadMedidaID_Corte_Z",
                table: "FacturasCompraDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraPie_IVAClaseID",
                table: "FacturasCompraPie",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraPie_IVAGrupoID",
                table: "FacturasCompraPie",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasCompraPie_IVATipoID",
                table: "FacturasCompraPie",
                column: "IVATipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_CDBO",
                table: "FacturasVenta",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_CentroCosteID",
                table: "FacturasVenta",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_ComercialID",
                table: "FacturasVenta",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_ComisionID",
                table: "FacturasVenta",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_ContactoID",
                table: "FacturasVenta",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_EjercicioID",
                table: "FacturasVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_EmpleadoID",
                table: "FacturasVenta",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_EmpresaID",
                table: "FacturasVenta",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_EstadoID",
                table: "FacturasVenta",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_FacturaRectificadaID",
                table: "FacturasVenta",
                column: "FacturaRectificadaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_FE_FormatoID",
                table: "FacturasVenta",
                column: "FE_FormatoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_FormaPagoID",
                table: "FacturasVenta",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_MedioID",
                table: "FacturasVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_PersonaID_EjercicioID",
                table: "FacturasVenta",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_ProyectoID",
                table: "FacturasVenta",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_SerieID",
                table: "FacturasVenta",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVenta_TarifaAgenciaID_AgenciaID",
                table: "FacturasVenta",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle",
                table: "FacturasVentaDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_CabeceraID",
                table: "FacturasVentaDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_CentroCosteID",
                table: "FacturasVentaDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_ConceptoRetencionID",
                table: "FacturasVentaDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_EstadoID",
                table: "FacturasVentaDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_IvaClaseID",
                table: "FacturasVentaDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_IVAGrupoID",
                table: "FacturasVentaDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_IvaTipoID",
                table: "FacturasVentaDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_LineaID_NumLinea",
                table: "FacturasVentaDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_MargenClaveID",
                table: "FacturasVentaDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_MargenTipoID",
                table: "FacturasVentaDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_MedidaID",
                table: "FacturasVentaDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_ProductoID",
                table: "FacturasVentaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_ProveedorID",
                table: "FacturasVentaDetalle",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_TipoLineaID",
                table: "FacturasVentaDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_UnidadMedidaID",
                table: "FacturasVentaDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_UnidadMedidaID_Corte_X",
                table: "FacturasVentaDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_UnidadMedidaID_Corte_Y",
                table: "FacturasVentaDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_FacturasVentaDetalle_UnidadMedidaID_Corte_Z",
                table: "FacturasVentaDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_Familias_CatalogoAtributoID",
                table: "Familias",
                column: "CatalogoAtributoID");

            migrationBuilder.CreateIndex(
                name: "IX_Familias_CentroCosteID",
                table: "Familias",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_Familias_FamiliaID",
                table: "Familias",
                column: "FamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_Familias_ProductoTipoID",
                table: "Familias",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Familias_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "Familias_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_Familias_DatosDinamicos_FamiliaID",
                table: "Familias_DatosDinamicos",
                column: "FamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_Fases_FaseID",
                table: "Fases",
                column: "FaseID");

            migrationBuilder.CreateIndex(
                name: "IX_Fases_OperacionID",
                table: "Fases",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IXU_Fases_RutaID_Orden",
                table: "Fases",
                columns: new[] { "RutaID", "Orden" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FasesCentros_CentroID",
                table: "FasesCentros",
                column: "CentroID");

            migrationBuilder.CreateIndex(
                name: "IX_FasesCentros_FaseID",
                table: "FasesCentros",
                column: "FaseID");

            migrationBuilder.CreateIndex(
                name: "IX_FasesCentros_ProductoID",
                table: "FasesCentros",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_CabeceraID",
                table: "Fichajes",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_EstadoID",
                table: "Fichajes",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_PersonaID",
                table: "Fichajes",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_TurnoID",
                table: "Fichajes",
                column: "TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Ordenes_Operaciones_Lista_OperacionID",
                table: "Fichajes_Ordenes_Operaciones_Lista",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_CabeceraID",
                table: "Fichajes_Partes",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_DetalleID",
                table: "Fichajes_Partes",
                column: "FichajeDetalleID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_EstadoID",
                table: "Fichajes_Partes",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_MaquinaID",
                table: "Fichajes_Partes",
                column: "MaquinaID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_OfID",
                table: "Fichajes_Partes",
                column: "OfID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_OperacionID",
                table: "Fichajes_Partes",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_OsID",
                table: "Fichajes_Partes",
                column: "OsID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Partes_ParteID",
                table: "Fichajes_Partes",
                column: "ParteID");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Steeps_Next_SteepID",
                table: "Fichajes_Steeps",
                column: "Next_SteepID",
                unique: true,
                filter: "[Next_SteepID] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Fichajes_Tareas_StandBy_PersonaID",
                table: "Fichajes_Tareas_StandBy",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_FichajesDetalle_CabeceraID",
                table: "FichajesDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_FichajesDetalle_LineaID",
                table: "FichajesDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_FichajesDetalle_TipoID",
                table: "FichajesDetalle",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_FormasPagoAPI_FormaPagoID",
                table: "FormasPagoAPI",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_Formularios_CategoriaID",
                table: "Formularios",
                column: "CategoriaID");

            migrationBuilder.CreateIndex(
                name: "IXU_Formularios_Nombre",
                table: "Formularios",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FormulariosCategorias_CategoriaID",
                table: "FormulariosCategorias",
                column: "CategoriaID");

            migrationBuilder.CreateIndex(
                name: "IX_GastosFacturacion_IVAClaseID",
                table: "GastosFacturacion",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_GD_Documentos_DocumentoID",
                table: "GD_Documentos",
                column: "DocumentoID");

            migrationBuilder.CreateIndex(
                name: "IX_GD_Documentos_FormatoID",
                table: "GD_Documentos",
                column: "FormatoID");

            migrationBuilder.CreateIndex(
                name: "IX_GD_Documentos_TipoID",
                table: "GD_Documentos",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_GD_DocumentosEntidades_DocumentoID",
                table: "GD_DocumentosEntidades",
                column: "DocumentoID");

            migrationBuilder.CreateIndex(
                name: "IX_GD_Entidades_FormularioID",
                table: "GD_Entidades",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_GD_FormatosArchivos_AplicacionID",
                table: "GD_FormatosArchivos",
                column: "AplicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_Entidades_FormularioID",
                table: "GS_Entidades",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IXU_GS_Entidades_Nombre",
                table: "GS_Entidades",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_GS_GridColumns_DataBinding_FieldName",
                table: "GS_GridColumns",
                column: "DataBinding_FieldName");

            migrationBuilder.CreateIndex(
                name: "IX_GS_GridColumns_GridDefinitionID",
                table: "GS_GridColumns",
                column: "GridDefinitionID");

            migrationBuilder.CreateIndex(
                name: "UIX_GS_GridColumns_GridDefinitionID_BandIndex_ColIndex_RowIndex",
                table: "GS_GridColumns",
                columns: new[] { "GridDefinitionID", "Position_BandIndex", "Position_RowIndex", "Position_ColIndex" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_GS_GridDefinitions_EntidadID",
                table: "GS_GridDefinitions",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_GridDefinitions_GridDefinitionID",
                table: "GS_GridDefinitions",
                column: "GridDefinitionID");

            migrationBuilder.CreateIndex(
                name: "UIX_GS_GridDefinitions",
                table: "GS_GridDefinitions",
                column: "Codigo",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_GS_GridsViews_EntidadID",
                table: "GS_GridsViews",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_GridsViews_FormularioID",
                table: "GS_GridsViews",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_RecordsKeys_EntidadID",
                table: "GS_RecordsKeys",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrComboLists_Items_UsrTypeID",
                table: "GS_UsrComboLists",
                column: "Items_UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrComboLists_UsrTypeID",
                table: "GS_UsrComboLists",
                column: "UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrComboListsItems_ComboListID_ItemIndex",
                table: "GS_UsrComboListsItems",
                columns: new[] { "ComboListID", "ItemIndex" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrGridsViewsCustomizations_GridViewID",
                table: "GS_UsrGridsViewsCustomizations",
                column: "GridViewID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrGridsViewsCustomizations_PersonaID",
                table: "GS_UsrGridsViewsCustomizations",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrTypes_EditMaskTypeID",
                table: "GS_UsrTypes",
                column: "EditMaskTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_GS_UsrTypes_InternalTypeID",
                table: "GS_UsrTypes",
                column: "InternalTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Actividades_ActividadID",
                table: "ISO_Actividades",
                column: "ActividadID");

            migrationBuilder.CreateIndex(
                name: "IX_Orden",
                table: "ISO_Actividades",
                columns: new[] { "ProcesoID", "Orden" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ActividadesMaquinas_MaquinaID",
                table: "ISO_ActividadesMaquinas",
                column: "MaquinaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ActividadesPersonal_ActividadID",
                table: "ISO_ActividadesPersonal",
                column: "ActividadID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ActividadesPersonal_DepartamentoID",
                table: "ISO_ActividadesPersonal",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ActividadesPersonal_EmpleadoID",
                table: "ISO_ActividadesPersonal",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ActividadesPersonal_PuestoID",
                table: "ISO_ActividadesPersonal",
                column: "PuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ActividadesPersonal_SeccionID",
                table: "ISO_ActividadesPersonal",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Comunicaciones_TipoDestDemandaID",
                table: "ISO_Comunicaciones",
                column: "TipoDestDemandaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Comunicaciones_TipoDestRespuestaID",
                table: "ISO_Comunicaciones",
                column: "TipoDestRespuestaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_CriteriosEficacia_FrecuenciaID",
                table: "ISO_CriteriosEficacia",
                column: "FrecuenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_CriteriosEficacia_PlanFormacionID",
                table: "ISO_CriteriosEficacia",
                column: "PlanFormacionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Cursos_DepartamentoID",
                table: "ISO_Cursos",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Cursos_PlanFormacionID",
                table: "ISO_Cursos",
                column: "PlanFormacionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Cursos_SeccionID",
                table: "ISO_Cursos",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_CursosAsistentes_EmpleadoID",
                table: "ISO_CursosAsistentes",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Documentos_EmpleadoID",
                table: "ISO_Documentos",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Documentos_TipoRegistroID",
                table: "ISO_Documentos",
                column: "TipoRegistroID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Encuestas_EncuestadorID",
                table: "ISO_Encuestas",
                column: "EncuestadorID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Encuestas_PersonaID",
                table: "ISO_Encuestas",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_EncuestasDetalle_EncuestaID",
                table: "ISO_EncuestasDetalle",
                column: "EncuestaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_EncuestasDetalle_PreguntaID",
                table: "ISO_EncuestasDetalle",
                column: "PreguntaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_EncuestasDetalle_RespuestaID",
                table: "ISO_EncuestasDetalle",
                column: "RespuestaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Incidencias_DepartamentoID",
                table: "ISO_Incidencias",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Incidencias_EmpleadoID",
                table: "ISO_Incidencias",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Incidencias_EstadoID",
                table: "ISO_Incidencias",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Incidencias_SeccionID",
                table: "ISO_Incidencias",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Incidencias_TipoDestinatarioID",
                table: "ISO_Incidencias",
                column: "TipoDestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Incidencias_TipoIncidenciaID",
                table: "ISO_Incidencias",
                column: "TipoIncidenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_IncidenciasDetalle_CabeceraID",
                table: "ISO_IncidenciasDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_IncidenciasDetalle_EmpleadoID",
                table: "ISO_IncidenciasDetalle",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_IncidenciasDetalle_TipoAccionID",
                table: "ISO_IncidenciasDetalle",
                column: "TipoAccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Indicadores_DepartamentoID",
                table: "ISO_Indicadores",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Indicadores_EmpleadoID",
                table: "ISO_Indicadores",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Indicadores_FrecuenciaID",
                table: "ISO_Indicadores",
                column: "FrecuenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Indicadores_ProcesoID",
                table: "ISO_Indicadores",
                column: "ProcesoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Indicadores_SeccionID",
                table: "ISO_Indicadores",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Indicadores_TendenciaID",
                table: "ISO_Indicadores",
                column: "TendenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_IndicadoresDetalle_IndicadorID",
                table: "ISO_IndicadoresDetalle",
                column: "IndicadorID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Mantenimientos_EmpleadoID",
                table: "ISO_Mantenimientos",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Mantenimientos_FrecuenciaID",
                table: "ISO_Mantenimientos",
                column: "FrecuenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Mantenimientos_MaquinaID",
                table: "ISO_Mantenimientos",
                column: "MaquinaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Mantenimientos_ProveedorID",
                table: "ISO_Mantenimientos",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Mantenimientos_TipoID",
                table: "ISO_Mantenimientos",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_MantenimientosDetalle_CabeceraID",
                table: "ISO_MantenimientosDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_MantenimientosDetalle_ProductoID",
                table: "ISO_MantenimientosDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_PedidosCompra_CalificacionID",
                table: "ISO_PedidosCompra",
                column: "CalificacionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_PedidosCompraDetalle_CalificacionID",
                table: "ISO_PedidosCompraDetalle",
                column: "CalificacionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ProductosRequisitos_RequisitoID",
                table: "ISO_ProductosRequisitos",
                column: "RequisitoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Proveedores_EmpleadoID",
                table: "ISO_Proveedores",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_ProveedoresCriterios_CriterioID",
                table: "ISO_ProveedoresCriterios",
                column: "CriterioID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_PuestosDocumentos_DocumentoID",
                table: "ISO_PuestosDocumentos",
                column: "DocumentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_PuestosRequisitos_RequisitoID",
                table: "ISO_PuestosRequisitos",
                column: "RequisitoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Registros_DocumentoID",
                table: "ISO_Registros",
                column: "DocumentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Registros_EmpleadoID",
                table: "ISO_Registros",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Registros_TipoRegistroID",
                table: "ISO_Registros",
                column: "TipoRegistroID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Requisitos_DocumentoID",
                table: "ISO_Requisitos",
                column: "DocumentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Requisitos_ModuloGestionID",
                table: "ISO_Requisitos",
                column: "ModuloGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Requisitos_TipoNormaID",
                table: "ISO_Requisitos",
                column: "TipoNormaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Respuestas_PreguntaID",
                table: "ISO_Respuestas",
                column: "PreguntaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Revisiones_DepartamentoID",
                table: "ISO_Revisiones",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Revisiones_SeccionID",
                table: "ISO_Revisiones",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_RevisionesAcuerdos_RevisionID",
                table: "ISO_RevisionesAcuerdos",
                column: "RevisionID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_RevisionesAsistentes_EmpleadoID",
                table: "ISO_RevisionesAsistentes",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_TiposIncidencias_TipoDestinatarioID",
                table: "ISO_TiposIncidencias",
                column: "TipoDestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Vencimientos_FrecuenciaID",
                table: "ISO_Vencimientos",
                column: "FrecuenciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Vencimientos_TipoDestinatarioID",
                table: "ISO_Vencimientos",
                column: "TipoDestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_ISO_Vencimientos_TipoVencimientoID",
                table: "ISO_Vencimientos",
                column: "TipoVencimientoID");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroRepercutido_CtaConta",
                table: "IVA_LibroRepercutido",
                column: "CtaConta");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroRepercutido_EjercicioID",
                table: "IVA_LibroRepercutido",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroRepercutido_IVAGrupoID",
                table: "IVA_LibroRepercutido",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroRepercutido_TipoClaveID",
                table: "IVA_LibroRepercutido",
                column: "TipoClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroSoportado_CtaConta",
                table: "IVA_LibroSoportado",
                column: "CtaConta");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroSoportado_EjercicioID",
                table: "IVA_LibroSoportado",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroSoportado_IVAGrupoID",
                table: "IVA_LibroSoportado",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_IVA_LibroSoportado_TipoClaveID",
                table: "IVA_LibroSoportado",
                column: "TipoClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_IvaTipos_IvaClaseID",
                table: "IvaTipos",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines",
                table: "LAB_Boletines",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_ContactoID",
                table: "LAB_Boletines",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_EjercicioID",
                table: "LAB_Boletines",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_EmpleadoID",
                table: "LAB_Boletines",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_EmpresaID",
                table: "LAB_Boletines",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_EstadoID",
                table: "LAB_Boletines",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_IVAGrupoID",
                table: "LAB_Boletines",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_PrioridadID",
                table: "LAB_Boletines",
                column: "PrioridadID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_ProyectoID",
                table: "LAB_Boletines",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_ResponsableRecepcionID",
                table: "LAB_Boletines",
                column: "ResponsableRecepcionID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_SerieID",
                table: "LAB_Boletines",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Boletines_TarifaID",
                table: "LAB_Boletines",
                column: "TarifaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle",
                table: "LAB_BoletinesDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_AnalisisTipoID",
                table: "LAB_BoletinesDetalle",
                column: "AnalisisTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_CabeceraID",
                table: "LAB_BoletinesDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_CentroCosteID",
                table: "LAB_BoletinesDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_ConceptoRetencionID",
                table: "LAB_BoletinesDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_EstadoID",
                table: "LAB_BoletinesDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_IVAClaseID",
                table: "LAB_BoletinesDetalle",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_IVAGrupoID",
                table: "LAB_BoletinesDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_IvaTipoID",
                table: "LAB_BoletinesDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_LineaID",
                table: "LAB_BoletinesDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_MargenTipoID",
                table: "LAB_BoletinesDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_MedidaID",
                table: "LAB_BoletinesDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_ProductoCompuestoID",
                table: "LAB_BoletinesDetalle",
                column: "ProductoCompuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_ProductoID",
                table: "LAB_BoletinesDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_ResponsableRecepcionID",
                table: "LAB_BoletinesDetalle",
                column: "ResponsableRecepcionID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_TarifaID",
                table: "LAB_BoletinesDetalle",
                column: "TarifaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_TipoLineaID",
                table: "LAB_BoletinesDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_UnidadMedidaID",
                table: "LAB_BoletinesDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesDetalle_DatosDinamicos_LineaID",
                table: "LAB_BoletinesDetalle_DatosDinamicos",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesPool_CabeceraID",
                table: "LAB_BoletinesPool",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesPool_EstadoID",
                table: "LAB_BoletinesPool",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesPoolDetalle_CabeceraID",
                table: "LAB_BoletinesPoolDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesPoolDetalle_DetalleID",
                table: "LAB_BoletinesPoolDetalle",
                column: "DetalleID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_BoletinesPoolDetalle_PoolID",
                table: "LAB_BoletinesPoolDetalle",
                column: "PoolID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_DatosDinamicos_UsrTypeID",
                table: "LAB_DatosDinamicos",
                column: "UsrTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_DatosDinamicos_LineasDef_DatoDinamicoID",
                table: "LAB_DatosDinamicos_LineasDef",
                column: "DatoDinamicoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_DatosDinamicos_LineasDef_LAB_TipoLineaID",
                table: "LAB_DatosDinamicos_LineasDef",
                column: "LAB_TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_Matrices_MatrizID",
                table: "LAB_Matrices",
                column: "MatrizID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_NormativasParametros_IDCDBO",
                table: "LAB_NormativasParametros",
                column: "IDCDBO");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs",
                table: "LAB_OAs",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_EjercicioID",
                table: "LAB_OAs",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_EmpleadoID",
                table: "LAB_OAs",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_EmpresaID",
                table: "LAB_OAs",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_EstadoID",
                table: "LAB_OAs",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_PersonaID",
                table: "LAB_OAs",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_PrioridadID",
                table: "LAB_OAs",
                column: "PrioridadID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_ProductoID",
                table: "LAB_OAs",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_ProyectoID",
                table: "LAB_OAs",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_ResponsableID",
                table: "LAB_OAs",
                column: "ResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_SerieID",
                table: "LAB_OAs",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAs_TarifaID",
                table: "LAB_OAs",
                column: "TarifaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle",
                table: "LAB_OAsDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_CabeceraID",
                table: "LAB_OAsDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_CentroCosteID",
                table: "LAB_OAsDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_IvaTipoID",
                table: "LAB_OAsDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_LineaID",
                table: "LAB_OAsDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_MargenTipoID",
                table: "LAB_OAsDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_ProcedimientoEnsayoID",
                table: "LAB_OAsDetalle",
                column: "ProcedimientoEnsayoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsDetalle_ProductoCompuestoID",
                table: "LAB_OAsDetalle",
                column: "ProductoCompuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsLecturas_EstadoID",
                table: "LAB_OAsLecturas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsLecturas_LineaID",
                table: "LAB_OAsLecturas",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LAB_OAsLecturas_ResponsableID",
                table: "LAB_OAsLecturas",
                column: "ResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial",
                table: "LiquidacionesComercial",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_ComercialID",
                table: "LiquidacionesComercial",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_EjercicioID",
                table: "LiquidacionesComercial",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_EmpleadoDestinatarioID",
                table: "LiquidacionesComercial",
                column: "EmpleadoDestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_EmpleadoID",
                table: "LiquidacionesComercial",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_EmpresaID",
                table: "LiquidacionesComercial",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_EstadoID",
                table: "LiquidacionesComercial",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_FormaPagoID",
                table: "LiquidacionesComercial",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_IVAGrupoID",
                table: "LiquidacionesComercial",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_MedioID",
                table: "LiquidacionesComercial",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_ProveedorDestinatarioID",
                table: "LiquidacionesComercial",
                column: "ProveedorDestinatarioID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercial_SerieID",
                table: "LiquidacionesComercial",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle",
                table: "LiquidacionesComercialDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_CabeceraID",
                table: "LiquidacionesComercialDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_ComisionID",
                table: "LiquidacionesComercialDetalle",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_EstadoID",
                table: "LiquidacionesComercialDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_IVAClaseID",
                table: "LiquidacionesComercialDetalle",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_IvaTipoID",
                table: "LiquidacionesComercialDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_LineaID",
                table: "LiquidacionesComercialDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_OperacionID",
                table: "LiquidacionesComercialDetalle",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_ProductoID",
                table: "LiquidacionesComercialDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_TipoLineaID",
                table: "LiquidacionesComercialDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_LiquidacionesComercialDetalle_UnidadMedidaID_MedidaID",
                table: "LiquidacionesComercialDetalle",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_Localidades_ComarcaID",
                table: "Localidades",
                column: "ComarcaID");

            migrationBuilder.CreateIndex(
                name: "IX_Localidades_ProvinciaID",
                table: "Localidades",
                column: "ProvinciaID");

            migrationBuilder.CreateIndex(
                name: "IX_Lotes_ClienteID",
                table: "Lotes",
                column: "ClienteID");

            migrationBuilder.CreateIndex(
                name: "IX_Lotes_EstadoID",
                table: "Lotes",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Lotes_IDCDBO",
                table: "Lotes",
                column: "IDCDBO");

            migrationBuilder.CreateIndex(
                name: "IX_Lotes_ProductoID",
                table: "Lotes",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Lotes_ProveedorID",
                table: "Lotes",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_Lotes_CDBO",
                table: "Lotes_CDBO",
                column: "IDCDBO",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_LotesTraza_LineaOSIDDestino",
                table: "LotesTraza",
                column: "LineaOSIDDestino");

            migrationBuilder.CreateIndex(
                name: "IX_LotesTraza_LineaOSIDOrigen",
                table: "LotesTraza",
                column: "LineaOSIDOrigen");

            migrationBuilder.CreateIndex(
                name: "IX_LotesTraza_LoteIDDestino",
                table: "LotesTraza",
                column: "LoteIDDestino");

            migrationBuilder.CreateIndex(
                name: "IX_LotesTraza_LoteIDOrigen",
                table: "LotesTraza",
                column: "LoteIDOrigen");

            migrationBuilder.CreateIndex(
                name: "IX_Maquinas_DepartamentoID",
                table: "Maquinas",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_Maquinas_EstadoID",
                table: "Maquinas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Maquinas_GrupoID",
                table: "Maquinas",
                column: "GrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_Maquinas_PuestoID",
                table: "Maquinas",
                column: "PuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_Maquinas_SeccionID",
                table: "Maquinas",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_MediosPago_CargoCuentaID",
                table: "MediosPago",
                column: "CargoCuentaID");

            migrationBuilder.CreateIndex(
                name: "IX_MediosPago_CuentaEmpresaID",
                table: "MediosPago",
                column: "CuentaEmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_ModulosGestion_ModuloGestionID",
                table: "ModulosGestion",
                column: "ModuloGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacen_DocumentoAlmacenTipoID",
                table: "MovimientosAlmacen",
                column: "DocumentoAlmacenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle",
                table: "MovimientosAlmacenDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_AlmacenID",
                table: "MovimientosAlmacenDetalle",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_CabeceraID",
                table: "MovimientosAlmacenDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_LoteID",
                table: "MovimientosAlmacenDetalle",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_ProductoID_MedidaID",
                table: "MovimientosAlmacenDetalle",
                columns: new[] { "ProductoID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_TipoID",
                table: "MovimientosAlmacenDetalle",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_UbicacionID",
                table: "MovimientosAlmacenDetalle",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenDetalle_UnidadMedidaID",
                table: "MovimientosAlmacenDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenSaldos_AlmacenID",
                table: "MovimientosAlmacenSaldos",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenSaldos_LoteID",
                table: "MovimientosAlmacenSaldos",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenSaldos_ProductoID",
                table: "MovimientosAlmacenSaldos",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosAlmacenSaldos_UbicacionID",
                table: "MovimientosAlmacenSaldos",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Operaciones_Atributo_Valor",
                table: "Operaciones",
                columns: new[] { "AtributoID", "ValorID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Operaciones_ValorID",
                table: "Operaciones",
                column: "ValorID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs",
                table: "OPEs",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_CentroCosteID",
                table: "OPEs",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_CentroID",
                table: "OPEs",
                column: "CentroID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_ContactoID",
                table: "OPEs",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_EjercicioID",
                table: "OPEs",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_EmpleadoID",
                table: "OPEs",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_EmpresaID",
                table: "OPEs",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_EstadoID",
                table: "OPEs",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_FormaPagoID",
                table: "OPEs",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_IVAGrupoID",
                table: "OPEs",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_MedioID",
                table: "OPEs",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_PersonaDireccionEntregaID",
                table: "OPEs",
                column: "PersonaDireccionEntregaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_PersonaDireccionFacturaID",
                table: "OPEs",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_PersonaID_EjercicioID",
                table: "OPEs",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_PortesTipoID",
                table: "OPEs",
                column: "PortesTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_ProyectoID",
                table: "OPEs",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEs_SerieID",
                table: "OPEs",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle",
                table: "OPEsDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_CabeceraID",
                table: "OPEsDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_CentroCosteID",
                table: "OPEsDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_ConceptoRetencionID",
                table: "OPEsDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_EstadoID",
                table: "OPEsDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_IVAClaseID",
                table: "OPEsDetalle",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_IVAGrupoID",
                table: "OPEsDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_IvaTipoID",
                table: "OPEsDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_LineaID",
                table: "OPEsDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_LoteID",
                table: "OPEsDetalle",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_MedidaID",
                table: "OPEsDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_MedidaPFID",
                table: "OPEsDetalle",
                column: "MedidaPFID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_OfID",
                table: "OPEsDetalle",
                column: "OfID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_OsID",
                table: "OPEsDetalle",
                column: "OsID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_ProductoID",
                table: "OPEsDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_ProductoPFID",
                table: "OPEsDetalle",
                column: "ProductoPFID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_TipoLineaID",
                table: "OPEsDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_UnidadMedidaID",
                table: "OPEsDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_UnidadMedidaID_Corte_X",
                table: "OPEsDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_UnidadMedidaID_Corte_Y",
                table: "OPEsDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_UnidadMedidaID_Corte_Z",
                table: "OPEsDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsDetalle_UnidadMedidaPFID",
                table: "OPEsDetalle",
                column: "UnidadMedidaPFID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_AlmacenDestinoID",
                table: "OPEsEnvioMaterial",
                column: "AlmacenDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_AlmacenOrigenID",
                table: "OPEsEnvioMaterial",
                column: "AlmacenOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_LoteID",
                table: "OPEsEnvioMaterial",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_MedidaID",
                table: "OPEsEnvioMaterial",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_ProductoID",
                table: "OPEsEnvioMaterial",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_UbicacionDestinoID",
                table: "OPEsEnvioMaterial",
                column: "UbicacionDestinoID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_UbicacionOrigenID",
                table: "OPEsEnvioMaterial",
                column: "UbicacionOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_OPEsEnvioMaterial_UnidadMedidaID",
                table: "OPEsEnvioMaterial",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_EjercicioID",
                table: "OrdenesFabricacion",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_EmpleadoID",
                table: "OrdenesFabricacion",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_EmpleadoResponsableID",
                table: "OrdenesFabricacion",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_EmpresaID",
                table: "OrdenesFabricacion",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_EstadoID",
                table: "OrdenesFabricacion",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_IVAGrupoID",
                table: "OrdenesFabricacion",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_OrigenID",
                table: "OrdenesFabricacion",
                column: "OrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_PersonaID_EjercicioID",
                table: "OrdenesFabricacion",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_PrioridadID",
                table: "OrdenesFabricacion",
                column: "PrioridadID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_ProyectoID",
                table: "OrdenesFabricacion",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_SerieID",
                table: "OrdenesFabricacion",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_TipoID",
                table: "OrdenesFabricacion",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_DatosDinamicos_CabeceraID",
                table: "OrdenesFabricacion_DatosDinamicos",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacion_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "OrdenesFabricacion_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_CabeceraID",
                table: "OrdenesFabricacionDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_EstadoID",
                table: "OrdenesFabricacionDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_IvaClaseID",
                table: "OrdenesFabricacionDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_IVAGrupoID",
                table: "OrdenesFabricacionDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_IvaTipoID",
                table: "OrdenesFabricacionDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_MargenTipoIDReal",
                table: "OrdenesFabricacionDetalle",
                column: "MargenTipoIDReal");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_MargenTipoIDTeorico",
                table: "OrdenesFabricacionDetalle",
                column: "MargenTipoIDTeorico");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_MedidaID",
                table: "OrdenesFabricacionDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_ProductoID",
                table: "OrdenesFabricacionDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_UnidadMedidaID",
                table: "OrdenesFabricacionDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_UnidadMedidaID_Corte_X",
                table: "OrdenesFabricacionDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_UnidadMedidaID_Corte_Y",
                table: "OrdenesFabricacionDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalle_UnidadMedidaID_Corte_Z",
                table: "OrdenesFabricacionDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalleEmpleados_CabeceraID",
                table: "OrdenesFabricacionDetalleEmpleados",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalleEmpleados_EmpleadoID",
                table: "OrdenesFabricacionDetalleEmpleados",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalleEmpleados_LineaID",
                table: "OrdenesFabricacionDetalleEmpleados",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesFabricacionDetalleEmpleados_PuestoID",
                table: "OrdenesFabricacionDetalleEmpleados",
                column: "PuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_ConjuntoID",
                table: "OrdenesSeriadas",
                column: "ConjuntoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_EjercicioID",
                table: "OrdenesSeriadas",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_EmpleadoID",
                table: "OrdenesSeriadas",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_EmpleadoResponsableID",
                table: "OrdenesSeriadas",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_EmpresaID",
                table: "OrdenesSeriadas",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_EstadoID",
                table: "OrdenesSeriadas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_IVAGrupoID",
                table: "OrdenesSeriadas",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_MedidaID",
                table: "OrdenesSeriadas",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_OrigenID",
                table: "OrdenesSeriadas",
                column: "OrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_PersonaID_EjercicioID",
                table: "OrdenesSeriadas",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_PrioridadID",
                table: "OrdenesSeriadas",
                column: "PrioridadID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_ProyectoID",
                table: "OrdenesSeriadas",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_SerieID",
                table: "OrdenesSeriadas",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_TipoID",
                table: "OrdenesSeriadas",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_UnidadMedidaID",
                table: "OrdenesSeriadas",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_DatosDinamicos_CabeceraID",
                table: "OrdenesSeriadas_DatosDinamicos",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadas_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "OrdenesSeriadas_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle",
                table: "OrdenesSeriadasDetalle",
                columns: new[] { "IDLinea", "LoteID" },
                unique: true,
                filter: "[LoteID] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_CabeceraID",
                table: "OrdenesSeriadasDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_CentroID",
                table: "OrdenesSeriadasDetalle",
                column: "CentroID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_CualificacionID",
                table: "OrdenesSeriadasDetalle",
                column: "CualificacionID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_EstadoID",
                table: "OrdenesSeriadasDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_IvaClaseID",
                table: "OrdenesSeriadasDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_IVAGrupoID",
                table: "OrdenesSeriadasDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_IvaTipoID",
                table: "OrdenesSeriadasDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_LineaID",
                table: "OrdenesSeriadasDetalle",
                column: "LineaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_LoteID",
                table: "OrdenesSeriadasDetalle",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_MargenTipoIDReal",
                table: "OrdenesSeriadasDetalle",
                column: "MargenTipoIDReal");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_MargenTipoIDTeorico",
                table: "OrdenesSeriadasDetalle",
                column: "MargenTipoIDTeorico");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_MedidaID",
                table: "OrdenesSeriadasDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_MedidaPFID",
                table: "OrdenesSeriadasDetalle",
                column: "MedidaPFID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_OperacionID",
                table: "OrdenesSeriadasDetalle",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_ProductoID",
                table: "OrdenesSeriadasDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_UnidadMedidaID",
                table: "OrdenesSeriadasDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasDetalle_UnidadMedidaPFID",
                table: "OrdenesSeriadasDetalle",
                column: "UnidadMedidaPFID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasExplosiones_EjercicioID",
                table: "OrdenesSeriadasExplosiones",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasExplosiones_EmpleadoID",
                table: "OrdenesSeriadasExplosiones",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasExplosiones_EmpresaID",
                table: "OrdenesSeriadasExplosiones",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasExplosiones_ExplosionID",
                table: "OrdenesSeriadasExplosiones",
                column: "ExplosionID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasExplosiones_ExplosionSessionID",
                table: "OrdenesSeriadasExplosiones",
                column: "ExplosionSessionID");

            migrationBuilder.CreateIndex(
                name: "IX_OrdenesSeriadasExplosiones_SerieID",
                table: "OrdenesSeriadasExplosiones",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes",
                table: "Partes",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_AlmacenID",
                table: "Partes",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_CentroID",
                table: "Partes",
                column: "CentroID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_CentroTipoID",
                table: "Partes",
                column: "CentroTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_CualificacionID",
                table: "Partes",
                column: "CualificacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_EmpleadoID",
                table: "Partes",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_LoteID",
                table: "Partes",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_MaquinaID",
                table: "Partes",
                column: "MaquinaID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_OfDetalleID",
                table: "Partes",
                column: "OfDetalleID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_OfTipoID",
                table: "Partes",
                column: "OfTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_OperacionID",
                table: "Partes",
                column: "OperacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_OsDetalleID",
                table: "Partes",
                column: "OsDetalleID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_ParteTipoID",
                table: "Partes",
                column: "ParteTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_ProductoID",
                table: "Partes",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_UbicacionID",
                table: "Partes",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_UnidadMedidaID_Corte_X",
                table: "Partes",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_UnidadMedidaID_Corte_Y",
                table: "Partes",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_UnidadMedidaID_Corte_Z",
                table: "Partes",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_Partes_UnidadMedidaID_MedidaID",
                table: "Partes",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_Partes_UnidadMedidaPFID_MedidaPFID",
                table: "Partes",
                columns: new[] { "UnidadMedidaPFID", "MedidaPFID" });

            migrationBuilder.CreateIndex(
                name: "IX_PartesFormularios_FormularioID",
                table: "PartesFormularios",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_PartesTipos_FormularioID",
                table: "PartesTipos",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_PartesTipos_TipoLineaID",
                table: "PartesTipos",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PartesTiposOFTipos_OFTipoID",
                table: "PartesTiposOFTipos",
                column: "OFTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_CentroCosteID",
                table: "PedidosCompra",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_ContactoID",
                table: "PedidosCompra",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_EjercicioID",
                table: "PedidosCompra",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_EmpleadoID",
                table: "PedidosCompra",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_EmpresaID",
                table: "PedidosCompra",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_EstadoID",
                table: "PedidosCompra",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_IDCDBO",
                table: "PedidosCompra",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_IVAGrupoID",
                table: "PedidosCompra",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_MedioID",
                table: "PedidosCompra",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_PersonaDireccionFacturaID",
                table: "PedidosCompra",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_PersonaID_EjercicioID",
                table: "PedidosCompra",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_PortesTipoID",
                table: "PedidosCompra",
                column: "PortesTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_ProyectoID",
                table: "PedidosCompra",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_SerieID",
                table: "PedidosCompra",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompra_TarifaAgenciaID_AgenciaID",
                table: "PedidosCompra",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_CabeceraID",
                table: "PedidosCompraDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_CDBO",
                table: "PedidosCompraDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_CentroCosteID",
                table: "PedidosCompraDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_ConceptoRetencionID",
                table: "PedidosCompraDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_EstadoID",
                table: "PedidosCompraDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_IvaClaseID",
                table: "PedidosCompraDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_IVAGrupoID",
                table: "PedidosCompraDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_IvaTipoID",
                table: "PedidosCompraDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_MargenTipoID",
                table: "PedidosCompraDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_MedidaID",
                table: "PedidosCompraDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_ProductoID",
                table: "PedidosCompraDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_TipoLineaID",
                table: "PedidosCompraDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_UnidadMedidaID",
                table: "PedidosCompraDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_UnidadMedidaID_Corte_X",
                table: "PedidosCompraDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_UnidadMedidaID_Corte_Y",
                table: "PedidosCompraDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosCompraDetalle_UnidadMedidaID_Corte_Z",
                table: "PedidosCompraDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta",
                table: "PedidosVenta",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_CentroCosteID",
                table: "PedidosVenta",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_ComercialID",
                table: "PedidosVenta",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_ComisionID",
                table: "PedidosVenta",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_ContactoID",
                table: "PedidosVenta",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_EjercicioID",
                table: "PedidosVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_EmpleadoID",
                table: "PedidosVenta",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_EmpleadoResponsableID",
                table: "PedidosVenta",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_EmpresaID",
                table: "PedidosVenta",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_EstadoID",
                table: "PedidosVenta",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_IVAGrupoID",
                table: "PedidosVenta",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_MedioID",
                table: "PedidosVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_PersonaDireccionFacturaID",
                table: "PedidosVenta",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_PersonaID_EjercicioID",
                table: "PedidosVenta",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_ProyectoID",
                table: "PedidosVenta",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_SerieID",
                table: "PedidosVenta",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_TarifaAgenciaID_AgenciaID",
                table: "PedidosVenta",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_DatosDinamicos_CabeceraID",
                table: "PedidosVenta_DatosDinamicos",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVenta_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "PedidosVenta_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDescuentosGenerales_CabeceraID",
                table: "PedidosVentaDescuentosGenerales",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDescuentosGenerales_ProductoTipoID",
                table: "PedidosVentaDescuentosGenerales",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDescuentosGenerales_TipoLineaID",
                table: "PedidosVentaDescuentosGenerales",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_CabeceraID",
                table: "PedidosVentaDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_CentroCosteID",
                table: "PedidosVentaDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_ConceptoRetencionID",
                table: "PedidosVentaDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_EstadoID",
                table: "PedidosVentaDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_IDCDBO",
                table: "PedidosVentaDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_IvaClaseID",
                table: "PedidosVentaDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_IVAGrupoID",
                table: "PedidosVentaDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_IvaTipoID",
                table: "PedidosVentaDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_LineaID_NumLinea",
                table: "PedidosVentaDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_MargenClaveID",
                table: "PedidosVentaDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_MargenTipoID",
                table: "PedidosVentaDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_MedidaID",
                table: "PedidosVentaDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_ProductoID",
                table: "PedidosVentaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_ProveedorID",
                table: "PedidosVentaDetalle",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_TipoLineaID",
                table: "PedidosVentaDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_UnidadMedidaID",
                table: "PedidosVentaDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_UnidadMedidaID_Corte_X",
                table: "PedidosVentaDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_UnidadMedidaID_Corte_Y",
                table: "PedidosVentaDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_PedidosVentaDetalle_UnidadMedidaID_Corte_Z",
                table: "PedidosVentaDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_Periodos_EjercicioID",
                table: "Periodos",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_Periodos_PeriodoTipoID",
                table: "Periodos",
                column: "PeriodoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PermisosAcciones_ClassFormIDP1",
                table: "PermisosAcciones",
                column: "ClassFormIDP1");

            migrationBuilder.CreateIndex(
                name: "IX_PermisosAcciones_ClassFormIDP2",
                table: "PermisosAcciones",
                column: "ClassFormIDP2");

            migrationBuilder.CreateIndex(
                name: "IX_PermisosAcciones_FormularioID",
                table: "PermisosAcciones",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_PermisosAcciones_PermisoCategoriaID",
                table: "PermisosAcciones",
                column: "PermisoCategoriaID");

            migrationBuilder.CreateIndex(
                name: "IX_PermisosCategorias_ModuloGestionID",
                table: "PermisosCategorias",
                column: "ModuloGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_PermisosEmpleados_PermisoAccionID",
                table: "PermisosEmpleados",
                column: "PermisoAccionID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_CDBO",
                table: "PresupuestosCompra",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_CentroCosteID",
                table: "PresupuestosCompra",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_ContactoID",
                table: "PresupuestosCompra",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_EjercicioID",
                table: "PresupuestosCompra",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_EmpleadoID",
                table: "PresupuestosCompra",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_EmpresaID",
                table: "PresupuestosCompra",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_EstadoID",
                table: "PresupuestosCompra",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_IVAGrupoID",
                table: "PresupuestosCompra",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_MedioID",
                table: "PresupuestosCompra",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_PersonaDireccionFacturaID",
                table: "PresupuestosCompra",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_PersonaID_EjercicioID",
                table: "PresupuestosCompra",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_PortesTipoID",
                table: "PresupuestosCompra",
                column: "PortesTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_ProyectoID",
                table: "PresupuestosCompra",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompra_SerieID",
                table: "PresupuestosCompra",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_CabeceraID",
                table: "PresupuestosCompraDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_CDBO",
                table: "PresupuestosCompraDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_CentroCosteID",
                table: "PresupuestosCompraDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_ConceptoRetencionID",
                table: "PresupuestosCompraDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_EstadoID",
                table: "PresupuestosCompraDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_IvaClaseID",
                table: "PresupuestosCompraDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_IVAGrupoID",
                table: "PresupuestosCompraDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_IvaTipoID",
                table: "PresupuestosCompraDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_MargenTipoID",
                table: "PresupuestosCompraDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_MedidaID",
                table: "PresupuestosCompraDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_ProductoID",
                table: "PresupuestosCompraDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_TipoLineaID",
                table: "PresupuestosCompraDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_UnidadMedidaID",
                table: "PresupuestosCompraDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_UnidadMedidaID_Corte_X",
                table: "PresupuestosCompraDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_UnidadMedidaID_Corte_Y",
                table: "PresupuestosCompraDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosCompraDetalle_UnidadMedidaID_Corte_Z",
                table: "PresupuestosCompraDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta",
                table: "PresupuestosVenta",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_CentroCosteID",
                table: "PresupuestosVenta",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_ComercialID",
                table: "PresupuestosVenta",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_ComisionID",
                table: "PresupuestosVenta",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_ContactoID",
                table: "PresupuestosVenta",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_EjercicioID",
                table: "PresupuestosVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_EmpleadoID",
                table: "PresupuestosVenta",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_EmpleadoResponsableID",
                table: "PresupuestosVenta",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_EmpresaID",
                table: "PresupuestosVenta",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_EstadoID",
                table: "PresupuestosVenta",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_IVAGrupoID",
                table: "PresupuestosVenta",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_MedioID",
                table: "PresupuestosVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_PersonaDireccionFacturaID",
                table: "PresupuestosVenta",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_PersonaID_EjercicioID",
                table: "PresupuestosVenta",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_ProyectoID",
                table: "PresupuestosVenta",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_SerieID",
                table: "PresupuestosVenta",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVenta_TarifaAgenciaID_AgenciaID",
                table: "PresupuestosVenta",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDescuentosGenerales_CabeceraID",
                table: "PresupuestosVentaDescuentosGenerales",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDescuentosGenerales_ProductoTipoID",
                table: "PresupuestosVentaDescuentosGenerales",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDescuentosGenerales_TipoLineaID",
                table: "PresupuestosVentaDescuentosGenerales",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle",
                table: "PresupuestosVentaDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_CabeceraID",
                table: "PresupuestosVentaDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_CentroCosteID",
                table: "PresupuestosVentaDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_ConceptoRetencionID",
                table: "PresupuestosVentaDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_EstadoID",
                table: "PresupuestosVentaDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_IvaClaseID",
                table: "PresupuestosVentaDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_IVAGrupoID",
                table: "PresupuestosVentaDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_IvaTipoID",
                table: "PresupuestosVentaDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_LineaID_NumLinea",
                table: "PresupuestosVentaDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_MargenClaveID",
                table: "PresupuestosVentaDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_MargenTipoID",
                table: "PresupuestosVentaDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_MedidaID",
                table: "PresupuestosVentaDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_ProductoID",
                table: "PresupuestosVentaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_ProveedorID",
                table: "PresupuestosVentaDetalle",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_TipoLineaID",
                table: "PresupuestosVentaDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_UnidadMedidaID",
                table: "PresupuestosVentaDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_UnidadMedidaID_Corte_X",
                table: "PresupuestosVentaDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_UnidadMedidaID_Corte_Y",
                table: "PresupuestosVentaDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_UnidadMedidaID_Corte_Z",
                table: "PresupuestosVentaDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_CDBO_ProcedimientoEnsayoID",
                table: "PresupuestosVentaDetalle_CDBO",
                column: "ProcedimientoEnsayoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaDetalle_CDBO_ProductoCompuestoID",
                table: "PresupuestosVentaDetalle_CDBO",
                column: "ProductoCompuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaProductosActualizables_CabeceraID",
                table: "PresupuestosVentaProductosActualizables",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PresupuestosVentaProductosActualizables_ProductoID",
                table: "PresupuestosVentaProductosActualizables",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos",
                table: "Productos",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_CentroCosteID",
                table: "Productos",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_CodigoBarras",
                table: "Productos",
                column: "CodigoBarras");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_CodigoPropio",
                table: "Productos",
                column: "CodigoPropio");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_ConceptoRetencionID",
                table: "Productos",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_EmpleadoResponsableID",
                table: "Productos",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_FamiliaID_ProductoTipoID",
                table: "Productos",
                columns: new[] { "FamiliaID", "ProductoTipoID" });

            migrationBuilder.CreateIndex(
                name: "IX_Productos_IVAClaseID",
                table: "Productos",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_MarcaID",
                table: "Productos",
                column: "MarcaID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_MargenCompraID",
                table: "Productos",
                column: "MargenCompraID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_MargenTipoID",
                table: "Productos",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_MedidaID_Corte",
                table: "Productos",
                column: "MedidaID_Corte");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_ProductoBaseID",
                table: "Productos",
                column: "ProductoBaseID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_ProductoEstadoID",
                table: "Productos",
                column: "ProductoEstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_ProductoTipoID",
                table: "Productos",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_UnidadMedidaID_Corte_MedidaID_Corte",
                table: "Productos",
                columns: new[] { "UnidadMedidaID_Corte", "MedidaID_Corte" });

            migrationBuilder.CreateIndex(
                name: "IX_Productos_UnidadMedidaID_Corte_X",
                table: "Productos",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_UnidadMedidaID_Corte_Y",
                table: "Productos",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_UnidadMedidaID_Corte_Z",
                table: "Productos",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_Atribs_Valores_AtributoProductoID",
                table: "Productos_Atribs_Valores",
                column: "AtributoProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_Atribs_Valores_ProductoID",
                table: "Productos_Atribs_Valores",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_Atribs_Valores_ValorProductoID",
                table: "Productos_Atribs_Valores",
                column: "ValorProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_CDBO",
                table: "Productos_CDBO",
                column: "IDCDBO",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Productos_CDBO_MatrizID",
                table: "Productos_CDBO",
                column: "MatrizID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_CDBO_ProcedimientoEnsayoID",
                table: "Productos_CDBO",
                column: "ProcedimientoEnsayoID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "Productos_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_Productos_DatosDinamicos_ProductoID",
                table: "Productos_DatosDinamicos",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosAlmacen_LoteID",
                table: "ProductosAlmacen",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosAlmacen_ProductoID",
                table: "ProductosAlmacen",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosAlmacen_UbicacionID_AlmacenID",
                table: "ProductosAlmacen",
                columns: new[] { "UbicacionID", "AlmacenID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_CentroCosteID",
                table: "ProductosBase",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_FamiliaID",
                table: "ProductosBase",
                column: "FamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_IDCDBO",
                table: "ProductosBase",
                column: "IDCDBO");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_MarcaID",
                table: "ProductosBase",
                column: "MarcaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_MargenTipoID",
                table: "ProductosBase",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_ProductoEstadoID",
                table: "ProductosBase",
                column: "ProductoEstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBase_ProductoTipoID",
                table: "ProductosBase",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBaseUnidadesModulos_ModuloGestionID",
                table: "ProductosBaseUnidadesModulos",
                column: "ModuloGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosBaseUnidadesModulos_ProductoBaseID_MedidaID",
                table: "ProductosBaseUnidadesModulos",
                columns: new[] { "ProductoBaseID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCodigosBarras_ProductoID_MedidaID",
                table: "ProductosCodigosBarras",
                columns: new[] { "ProductoID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCodigosBarras_UnidadMedidaID_MedidaID",
                table: "ProductosCodigosBarras",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "UIX_ProductosCodigosBarras_ProductoID_CodigoBarras",
                table: "ProductosCodigosBarras",
                columns: new[] { "ProductoID", "CodigoBarras" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestos",
                table: "ProductosCompuestos",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestos_ProductoCompuestoID",
                table: "ProductosCompuestos",
                column: "ProductoCompuestoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestos_ProductoID",
                table: "ProductosCompuestos",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestos_UnidadMedidaID_MedidaID",
                table: "ProductosCompuestos",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestos_CDBO_ProcedimientoEnsayoID",
                table: "ProductosCompuestos_CDBO",
                column: "ProcedimientoEnsayoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestosPlantillas_Log_ProductoCompuestoPlantillaID",
                table: "ProductosCompuestosPlantillas_Log",
                column: "ProductoCompuestoPlantillaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestosPlantillas_Log_ProductoGeneratorID",
                table: "ProductosCompuestosPlantillas_Log",
                column: "ProductoGeneratorID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestosPlantillasComponentes_ProductoCompuestoPlantillaID_ProductoID",
                table: "ProductosCompuestosPlantillasComponentes",
                columns: new[] { "ProductoCompuestoPlantillaID", "ProductoID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProductosCompuestosPlantillasComponentes_ProductoID_MedidaID",
                table: "ProductosCompuestosPlantillasComponentes",
                columns: new[] { "ProductoID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntos_ParteFormularioID",
                table: "ProductosConjuntos",
                column: "ParteFormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntos_ProductoID_MedidaID",
                table: "ProductosConjuntos",
                columns: new[] { "ProductoID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntos_UnidadMedidaID",
                table: "ProductosConjuntos",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntos_DatosDinamicos_ConjuntoID",
                table: "ProductosConjuntos_DatosDinamicos",
                column: "ConjuntoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntos_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "ProductosConjuntos_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntosComponentes_ConjuntoID",
                table: "ProductosConjuntosComponentes",
                column: "ConjuntoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntosComponentes_LoteID",
                table: "ProductosConjuntosComponentes",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntosComponentes_ProductoID_MedidaID",
                table: "ProductosConjuntosComponentes",
                columns: new[] { "ProductoID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntosComponentes_ProductoTipoID",
                table: "ProductosConjuntosComponentes",
                column: "ProductoTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosConjuntosComponentes_UnidadMedidaID_MedidaID",
                table: "ProductosConjuntosComponentes",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosSugeridos_ProductoSugeridoID",
                table: "ProductosSugeridos",
                column: "ProductoSugeridoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosTipos_Default_MargenCompraID",
                table: "ProductosTipos",
                column: "Default_MargenCompraID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosTipos_FormularioID",
                table: "ProductosTipos",
                column: "FormularioID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosTipos_IVAClaseID",
                table: "ProductosTipos",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosTipos_MargenTipoID",
                table: "ProductosTipos",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosTipos_UbicacionID_def_AlmacenID_def",
                table: "ProductosTipos",
                columns: new[] { "UbicacionID_def", "AlmacenID_def" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosTipos_UnidadMedidaID_MedidaID",
                table: "ProductosTipos",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductosUnidadesModulos_ModuloGestionID",
                table: "ProductosUnidadesModulos",
                column: "ModuloGestionID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductosUnidadesModulos_ProductoID_MedidaID",
                table: "ProductosUnidadesModulos",
                columns: new[] { "ProductoID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_PropuestasCompra_DocumentoOrigenID",
                table: "PropuestasCompra",
                column: "DocumentoOrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_PropuestasCompraDetalle_CabeceraID",
                table: "PropuestasCompraDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_PropuestasCompraDetalle_LoteID",
                table: "PropuestasCompraDetalle",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_PropuestasCompraDetalle_ProductoID",
                table: "PropuestasCompraDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_PropuestasCompraDetalle_ProveedorID",
                table: "PropuestasCompraDetalle",
                column: "ProveedorID");

            migrationBuilder.CreateIndex(
                name: "IX_PropuestasCompraDetalle_UnidadMedidaID_MedidaID",
                table: "PropuestasCompraDetalle",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_CDBO",
                table: "Proveedores",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_CentroCosteID",
                table: "Proveedores",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_ConceptoRetencionID",
                table: "Proveedores",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_FormaPagoID",
                table: "Proveedores",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_IVAClaseID",
                table: "Proveedores",
                column: "IVAClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_IVAGrupoID",
                table: "Proveedores",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_MedioPagoID",
                table: "Proveedores",
                column: "MedioPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_SerieID",
                table: "Proveedores",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_TipoID",
                table: "Proveedores",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proveedores_ProveedoresGrupos_GrupoID",
                table: "Proveedores_ProveedoresGrupos",
                column: "GrupoID");

            migrationBuilder.CreateIndex(
                name: "PK_Proveedores_ProveedoresGrupos",
                table: "Proveedores_ProveedoresGrupos",
                columns: new[] { "PersonaID", "GrupoID" },
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresContactos_PersonaID",
                table: "ProveedoresContactos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresCuentasBancarias_PersonaID",
                table: "ProveedoresCuentasBancarias",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDescuentos",
                table: "ProveedoresDescuentos",
                columns: new[] { "PersonaID", "FamiliaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDescuentos_FamiliaID",
                table: "ProveedoresDescuentos",
                column: "FamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDescuentos_Root",
                table: "ProveedoresDescuentos_Root",
                columns: new[] { "ProductoTipoID", "PersonaID" });

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDescuentos_Root_PersonaID",
                table: "ProveedoresDescuentos_Root",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDirecciones",
                table: "ProveedoresDirecciones",
                columns: new[] { "IDPersonaDireccion", "PersonaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDirecciones_LocalidadID",
                table: "ProveedoresDirecciones",
                column: "LocalidadID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDirecciones_PaisID",
                table: "ProveedoresDirecciones",
                column: "PaisID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDirecciones_PersonaID",
                table: "ProveedoresDirecciones",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresDirecciones_ProvinciaID",
                table: "ProveedoresDirecciones",
                column: "ProvinciaID");

            migrationBuilder.CreateIndex(
                name: "IX_ProveedoresTelefonos_PersonaID",
                table: "ProveedoresTelefonos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_Provincias_PaisID",
                table: "Provincias",
                column: "PaisID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_EjercicioID",
                table: "Proyectos",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_EmpleadoID",
                table: "Proyectos",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_EmpleadoResponsableID",
                table: "Proyectos",
                column: "EmpleadoResponsableID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_EmpresaID",
                table: "Proyectos",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_EstadoID",
                table: "Proyectos",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_LoteID",
                table: "Proyectos",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_PersonaID_EjercicioID",
                table: "Proyectos",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_ProductoID",
                table: "Proyectos",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_DatosDinamicos_CabeceraID",
                table: "Proyectos_DatosDinamicos",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_Proyectos_DatosDinamicos_DatoDinamicoGS_EntidadDefID",
                table: "Proyectos_DatosDinamicos",
                column: "DatoDinamicoGS_EntidadDefID");

            migrationBuilder.CreateIndex(
                name: "IX_Puestos_DepartamentoID",
                table: "Puestos",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_Puestos_SeccionID",
                table: "Puestos",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_pyg_PyGID",
                table: "PyG",
                column: "PyGID")
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_PyG_Cuentas_PyGID",
                table: "PyG_Cuentas",
                column: "PyGID");

            migrationBuilder.CreateIndex(
                name: "IX_RegularizacionesAlmacen_AlmacenID",
                table: "RegularizacionesAlmacen",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_RegularizacionesAlmacen_LoteID",
                table: "RegularizacionesAlmacen",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_RegularizacionesAlmacen_MedidaID",
                table: "RegularizacionesAlmacen",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_RegularizacionesAlmacen_ProductoID",
                table: "RegularizacionesAlmacen",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_RegularizacionesAlmacen_UbicacionID",
                table: "RegularizacionesAlmacen",
                column: "UbicacionID");

            migrationBuilder.CreateIndex(
                name: "IX_RegularizacionesAlmacen_UnidadMedidaID",
                table: "RegularizacionesAlmacen",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_RemesasCompra_CuentaID",
                table: "RemesasCompra",
                column: "CuentaID");

            migrationBuilder.CreateIndex(
                name: "IX_RemesasCompra_EjercicioID",
                table: "RemesasCompra",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_RemesasVenta_CuentaID",
                table: "RemesasVenta",
                column: "CuentaID");

            migrationBuilder.CreateIndex(
                name: "IX_RemesasVenta_EjercicioID",
                table: "RemesasVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_Reports_ReportConstructorID",
                table: "Reports",
                column: "ReportConstructorID");

            migrationBuilder.CreateIndex(
                name: "IX_Reports_ReportFamiliaID",
                table: "Reports",
                column: "ReportFamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_Reports_ReportTipoID",
                table: "Reports",
                column: "ReportTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_ReportsCriterias_ReportLauncherID",
                table: "ReportsCriterias",
                column: "ReportLauncherID");

            migrationBuilder.CreateIndex(
                name: "IX_ReportsLaunchers_ReportID",
                table: "ReportsLaunchers",
                column: "ReportID");

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_AlmacenID",
                table: "ReservasStockDetalle",
                column: "AlmacenID");

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_AlmacenReservaID",
                table: "ReservasStockDetalle",
                column: "AlmacenReservaID");

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_CabeceraID",
                table: "ReservasStockDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_LoteID",
                table: "ReservasStockDetalle",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_ProductoID",
                table: "ReservasStockDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_UbicacionID_AlmacenID",
                table: "ReservasStockDetalle",
                columns: new[] { "UbicacionID", "AlmacenID" });

            migrationBuilder.CreateIndex(
                name: "IX_ReservasStockDetalle_UbicacionReservaID_AlmacenReservaID",
                table: "ReservasStockDetalle",
                columns: new[] { "UbicacionReservaID", "AlmacenReservaID" });

            migrationBuilder.CreateIndex(
                name: "IX_RP_Entidades_EntidadID",
                table: "RP_Entidades",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacion_EjercicioID",
                table: "RRHH_PrimasLiquidacion",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacion_EmpleadoID",
                table: "RRHH_PrimasLiquidacion",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacion_EmpresaID",
                table: "RRHH_PrimasLiquidacion",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacion_EstadoID",
                table: "RRHH_PrimasLiquidacion",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacion_PersonaID",
                table: "RRHH_PrimasLiquidacion",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacionDetalle_CabeceraID",
                table: "RRHH_PrimasLiquidacionDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacionDetalle_EmpleadoID",
                table: "RRHH_PrimasLiquidacionDetalle",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacionDetalle_TipoLineaID",
                table: "RRHH_PrimasLiquidacionDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_PrimasLiquidacionDetalle_TurnoID",
                table: "RRHH_PrimasLiquidacionDetalle",
                column: "TurnoID");

            migrationBuilder.CreateIndex(
                name: "IX_RRHH_Setup_CategoriaID",
                table: "RRHH_Setup",
                column: "CategoriaID");

            migrationBuilder.CreateIndex(
                name: "IX_Secciones_Departamento",
                table: "Secciones",
                columns: new[] { "IDSeccion", "DepartamentoID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Secciones_DepartamentoID",
                table: "Secciones",
                column: "DepartamentoID");

            migrationBuilder.CreateIndex(
                name: "IX_Secciones_SeccionID",
                table: "Secciones",
                column: "SeccionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos",
                table: "SRV_Contratos",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_CentroCosteID",
                table: "SRV_Contratos",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_ComercialID",
                table: "SRV_Contratos",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_ComisionID",
                table: "SRV_Contratos",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_ContactoID",
                table: "SRV_Contratos",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_EjercicioID",
                table: "SRV_Contratos",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_EmpleadoID",
                table: "SRV_Contratos",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_EmpresaID",
                table: "SRV_Contratos",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_EstadoID",
                table: "SRV_Contratos",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_IVAGrupoID",
                table: "SRV_Contratos",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_MedioID",
                table: "SRV_Contratos",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_PersonaDireccionFacturaID",
                table: "SRV_Contratos",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_PersonaID",
                table: "SRV_Contratos",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_ProyectoID",
                table: "SRV_Contratos",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_SerieID",
                table: "SRV_Contratos",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_Contratos_TarifaAgenciaID_AgenciaID",
                table: "SRV_Contratos",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle",
                table: "SRV_ContratosDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_CabeceraID",
                table: "SRV_ContratosDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_CentroCosteID",
                table: "SRV_ContratosDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_ConceptoRetencionID",
                table: "SRV_ContratosDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_DireccionInstalacionID",
                table: "SRV_ContratosDetalle",
                column: "DireccionInstalacionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_EstadoID",
                table: "SRV_ContratosDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_IvaClaseID",
                table: "SRV_ContratosDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_IVAGrupoID",
                table: "SRV_ContratosDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_IvaTipoID",
                table: "SRV_ContratosDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_LineaID_NumLinea",
                table: "SRV_ContratosDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_MargenClaveID",
                table: "SRV_ContratosDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_MargenTipoID",
                table: "SRV_ContratosDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_MedidaID",
                table: "SRV_ContratosDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_ProductoID",
                table: "SRV_ContratosDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_TipoLineaID",
                table: "SRV_ContratosDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_UnidadMedidaID",
                table: "SRV_ContratosDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_UnidadMedidaID_Corte_X",
                table: "SRV_ContratosDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_UnidadMedidaID_Corte_Y",
                table: "SRV_ContratosDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosDetalle_UnidadMedidaID_Corte_Z",
                table: "SRV_ContratosDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_ContratosPlanificacion_CabeceraID",
                table: "SRV_ContratosPlanificacion",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta",
                table: "SRV_PresupuestosVenta",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_CentroCosteID",
                table: "SRV_PresupuestosVenta",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_ComercialID",
                table: "SRV_PresupuestosVenta",
                column: "ComercialID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_ComisionID",
                table: "SRV_PresupuestosVenta",
                column: "ComisionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_ContactoID",
                table: "SRV_PresupuestosVenta",
                column: "ContactoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_EjercicioID",
                table: "SRV_PresupuestosVenta",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_EmpleadoID",
                table: "SRV_PresupuestosVenta",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_EmpresaID",
                table: "SRV_PresupuestosVenta",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_EstadoID",
                table: "SRV_PresupuestosVenta",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_IVAGrupoID",
                table: "SRV_PresupuestosVenta",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_MedioID",
                table: "SRV_PresupuestosVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_PersonaDireccionFacturaID",
                table: "SRV_PresupuestosVenta",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_PersonaID",
                table: "SRV_PresupuestosVenta",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_ProyectoID",
                table: "SRV_PresupuestosVenta",
                column: "ProyectoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_SerieID",
                table: "SRV_PresupuestosVenta",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVenta_TarifaAgenciaID_AgenciaID",
                table: "SRV_PresupuestosVenta",
                columns: new[] { "TarifaAgenciaID", "AgenciaID" });

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle",
                table: "SRV_PresupuestosVentaDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_CabeceraID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_CentroCosteID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "CentroCosteID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_ConceptoRetencionID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "ConceptoRetencionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_DireccionInstalacionID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "DireccionInstalacionID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_EstadoID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_IvaClaseID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "IvaClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_IVAGrupoID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_IvaTipoID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "IvaTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_LineaID_NumLinea",
                table: "SRV_PresupuestosVentaDetalle",
                columns: new[] { "LineaID", "NumLinea" });

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_MargenClaveID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "MargenClaveID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_MargenTipoID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "MargenTipoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_MedidaID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_ProductoID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_TipoLineaID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "TipoLineaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_UnidadMedidaID",
                table: "SRV_PresupuestosVentaDetalle",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_UnidadMedidaID_Corte_X",
                table: "SRV_PresupuestosVentaDetalle",
                column: "UnidadMedidaID_Corte_X");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_UnidadMedidaID_Corte_Y",
                table: "SRV_PresupuestosVentaDetalle",
                column: "UnidadMedidaID_Corte_Y");

            migrationBuilder.CreateIndex(
                name: "IX_SRV_PresupuestosVentaDetalle_UnidadMedidaID_Corte_Z",
                table: "SRV_PresupuestosVentaDetalle",
                column: "UnidadMedidaID_Corte_Z");

            migrationBuilder.CreateIndex(
                name: "IX_sync_Connections_TipoID",
                table: "sync_Connections",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_sync_Connections_Familias_FamiliaID",
                table: "sync_Connections_Familias",
                column: "FamiliaID");

            migrationBuilder.CreateIndex(
                name: "IX_sync_Entidades_Tipos_TipoID",
                table: "sync_Entidades_Tipos",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_sync_Synchronizations_ConnectionID",
                table: "sync_Synchronizations",
                column: "ConnectionID");

            migrationBuilder.CreateIndex(
                name: "IX_sync_SynchronizedRecords_EntidadID",
                table: "sync_SynchronizedRecords",
                column: "EntidadID");

            migrationBuilder.CreateIndex(
                name: "UIX_sync_SynchronizedRecords_ConnectionID_EntidadID_Entidad_KeyValue",
                table: "sync_SynchronizedRecords",
                columns: new[] { "ConnectionID", "EntidadID", "Entidad_KeyValue" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_EmpleadoAsignadoID",
                table: "Tareas",
                column: "EmpleadoAsignadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_EmpleadoID",
                table: "Tareas",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_EstadoID",
                table: "Tareas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_OrigenID",
                table: "Tareas",
                column: "OrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_PrioridadID",
                table: "Tareas",
                column: "PrioridadID");

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_TipoClaseID",
                table: "Tareas",
                column: "TipoClaseID");

            migrationBuilder.CreateIndex(
                name: "IX_Tareas_TipoID",
                table: "Tareas",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_TarifasDetalle",
                table: "TarifasDetalle",
                columns: new[] { "ProductoID", "CantidadDesde", "CalculoTipo", "Margen_Origen", "Margen_Operacion" });

            migrationBuilder.CreateIndex(
                name: "IX_TarifasDetalle_Producto_Tarifa_Cantidad",
                table: "TarifasDetalle",
                columns: new[] { "TarifaID", "ProductoID", "CantidadDesde" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TesoreriaApunte_CuentaEmpresaID_FOpe_Tipo",
                table: "TesoreriaApunte",
                columns: new[] { "CuentaEmpresaID", "FOperacion", "Tipo" });

            migrationBuilder.CreateIndex(
                name: "IX_TesoreriaApunte_TipoID",
                table: "TesoreriaApunte",
                column: "TipoID");

            migrationBuilder.CreateIndex(
                name: "IX_TesoreriaSaldosFecha_CuentaEmpresaID",
                table: "TesoreriaSaldosFecha",
                column: "CuentaEmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_TPV_UbicacionID_def_AlmacenID_def",
                table: "TPV",
                columns: new[] { "UbicacionID_def", "AlmacenID_def" });

            migrationBuilder.CreateIndex(
                name: "IX_TPVCambios_EmpleadoID",
                table: "TPVCambios",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVCambios_TPVID",
                table: "TPVCambios",
                column: "TPVID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVMovimientosCaja_CabeceraID",
                table: "TPVMovimientosCaja",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVMovimientosCaja_EmpleadoID",
                table: "TPVMovimientosCaja",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVMovimientosCaja_TPVid",
                table: "TPVMovimientosCaja",
                column: "TPVid");

            migrationBuilder.CreateIndex(
                name: "IX_TPVPagosPorCaja_EmpleadoID",
                table: "TPVPagosPorCaja",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVPagosPorCaja_TPVID",
                table: "TPVPagosPorCaja",
                column: "TPVID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets",
                table: "TPVTickets",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_EjercicioID",
                table: "TPVTickets",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_EmpleadoID",
                table: "TPVTickets",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_EmpresaID",
                table: "TPVTickets",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_EstadoID",
                table: "TPVTickets",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_IVAGrupoID",
                table: "TPVTickets",
                column: "IVAGrupoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_PersonaDireccionEntregaID",
                table: "TPVTickets",
                column: "PersonaDireccionEntregaID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_PersonaDireccionFacturaID",
                table: "TPVTickets",
                column: "PersonaDireccionFacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_PersonaID_EjercicioID",
                table: "TPVTickets",
                columns: new[] { "PersonaID", "EjercicioID" });

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_SerieID",
                table: "TPVTickets",
                column: "SerieID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_TarifaID",
                table: "TPVTickets",
                column: "TarifaID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTickets_TPVID",
                table: "TPVTickets",
                column: "TPVID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle",
                table: "TPVTicketsDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_CabeceraID",
                table: "TPVTicketsDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_EmpleadoID",
                table: "TPVTicketsDetalle",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_EstadoID",
                table: "TPVTicketsDetalle",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_IVATipoID",
                table: "TPVTicketsDetalle",
                column: "IVATipoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_LoteID",
                table: "TPVTicketsDetalle",
                column: "LoteID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_ProductoID",
                table: "TPVTicketsDetalle",
                column: "ProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_TPVTicketsDetalle_UnidadMedidaID_MedidaID",
                table: "TPVTicketsDetalle",
                columns: new[] { "UnidadMedidaID", "MedidaID" });

            migrationBuilder.CreateIndex(
                name: "IX_TSK_Tareas_EstadoID",
                table: "TSK_Tareas",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesMedida_MedidaID",
                table: "UnidadesMedida",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesMedida_MedidaID_IDUnidadMedida",
                table: "UnidadesMedida",
                columns: new[] { "IDUnidadMedida", "MedidaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesProducto_MedidaID",
                table: "UnidadesProducto",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesProducto_ProductoID_MedidaID_UnidadMedidaID",
                table: "UnidadesProducto",
                columns: new[] { "ProductoID", "MedidaID", "UnidadMedidaID" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesProducto_UnidadMedidaID",
                table: "UnidadesProducto",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesProductoBase_MedidaID",
                table: "UnidadesProductoBase",
                column: "MedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_UnidadesProductoBase_UnidadMedidaID",
                table: "UnidadesProductoBase",
                column: "UnidadMedidaID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales",
                table: "Vales",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_EjercicioID",
                table: "Vales",
                column: "EjercicioID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_EmpleadoID",
                table: "Vales",
                column: "EmpleadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_EmpresaID",
                table: "Vales",
                column: "EmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_EstadoID",
                table: "Vales",
                column: "EstadoID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_LiquidacionID",
                table: "Vales",
                column: "LiquidacionID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_OrigenID",
                table: "Vales",
                column: "OrigenID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_PersonaID",
                table: "Vales",
                column: "PersonaID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_ProductoObsequioID",
                table: "Vales",
                column: "ProductoObsequioID");

            migrationBuilder.CreateIndex(
                name: "IX_Vales_TicketID",
                table: "Vales",
                column: "TicketID");

            migrationBuilder.CreateIndex(
                name: "IX_ValesDetalle",
                table: "ValesDetalle",
                column: "IDCDBO",
                unique: true,
                filter: "[IDCDBO] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ValesDetalle_CabeceraID",
                table: "ValesDetalle",
                column: "CabeceraID");

            migrationBuilder.CreateIndex(
                name: "IX_ValesDetalle_TicketID",
                table: "ValesDetalle",
                column: "TicketID");

            migrationBuilder.CreateIndex(
                name: "IX_ValoresProductos",
                table: "ValoresProductos",
                column: "Nombre");

            migrationBuilder.CreateIndex(
                name: "IX_ValoresProductos_Indice",
                table: "ValoresProductos",
                columns: new[] { "AtributoProductoID", "Indice" });

            migrationBuilder.CreateIndex(
                name: "IX_ValoresProductos_ValorProductoID",
                table: "ValoresProductos",
                column: "ValorProductoID");

            migrationBuilder.CreateIndex(
                name: "IX_Vencimientos_FormaPagoID",
                table: "Vencimientos",
                column: "FormaPagoID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosCompra_CuentaEmpresaID",
                table: "VencimientosCompra",
                column: "CuentaEmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosCompra_FacturaID",
                table: "VencimientosCompra",
                column: "FacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosCompra_MedioID",
                table: "VencimientosCompra",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosCompra_RemesaID",
                table: "VencimientosCompra",
                column: "RemesaID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosVenta_CuentaEmpresaID",
                table: "VencimientosVenta",
                column: "CuentaEmpresaID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosVenta_FacturaID",
                table: "VencimientosVenta",
                column: "FacturaID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosVenta_MedioID",
                table: "VencimientosVenta",
                column: "MedioID");

            migrationBuilder.CreateIndex(
                name: "IX_VencimientosVenta_RemesaID",
                table: "VencimientosVenta",
                column: "RemesaID");

            migrationBuilder.CreateIndex(
                name: "IX_ZonasProvincias_ProvinciaID",
                table: "ZonasProvincias",
                column: "ProvinciaID");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesCompra_Proyectos",
                table: "AlbaranesCompra",
                column: "ProyectoID",
                principalTable: "Proyectos",
                principalColumn: "IDCabecera");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVenta_Clientes",
                table: "AlbaranesVenta",
                column: "PersonaID",
                principalTable: "Clientes",
                principalColumn: "IDPersona");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVenta_ClientesContactos",
                table: "AlbaranesVenta",
                column: "ContactoID",
                principalTable: "ClientesContactos",
                principalColumn: "ID");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVenta_ClientesDirecciones",
                table: "AlbaranesVenta",
                column: "PersonaDireccionFacturaID",
                principalTable: "ClientesDirecciones",
                principalColumn: "IDPersonaDireccion");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVenta_Proyectos",
                table: "AlbaranesVenta",
                column: "ProyectoID",
                principalTable: "Proyectos",
                principalColumn: "IDCabecera");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVentaAnticipos_Clientes",
                table: "AlbaranesVentaAnticipos",
                column: "PersonaID",
                principalTable: "Clientes",
                principalColumn: "IDPersona");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVentaAnticipos_FacturasVenta",
                table: "AlbaranesVentaAnticipos",
                column: "CabeceraDestinoID",
                principalTable: "FacturasVenta",
                principalColumn: "IDCabecera");

            migrationBuilder.AddForeignKey(
                name: "FK_AlbaranesVentaAnticipos_VencimientosVenta",
                table: "AlbaranesVentaAnticipos",
                column: "VencimientoDestinoID",
                principalTable: "VencimientosVenta",
                principalColumn: "IDVencimiento");

            migrationBuilder.AddForeignKey(
                name: "FK_ALQ_Alquileres_Clientes",
                table: "ALQ_Alquileres",
                column: "PersonaID",
                principalTable: "Clientes",
                principalColumn: "IDPersona");

            migrationBuilder.AddForeignKey(
                name: "FK_ALQ_Alquileres_ClientesContactos",
                table: "ALQ_Alquileres",
                column: "ContactoID",
                principalTable: "ClientesContactos",
                principalColumn: "ID");

            migrationBuilder.AddForeignKey(
                name: "FK_ALQ_Alquileres_ClientesDirecciones",
                table: "ALQ_Alquileres",
                column: "PersonaDireccionFacturaID",
                principalTable: "ClientesDirecciones",
                principalColumn: "IDPersonaDireccion");

            migrationBuilder.AddForeignKey(
                name: "FK_ALQ_Presupuestos_Clientes",
                table: "ALQ_Presupuestos",
                column: "PersonaID",
                principalTable: "Clientes",
                principalColumn: "IDPersona");

            migrationBuilder.AddForeignKey(
                name: "FK_ALQ_Presupuestos_ClientesContactos",
                table: "ALQ_Presupuestos",
                column: "ContactoID",
                principalTable: "ClientesContactos",
                principalColumn: "ID");

            migrationBuilder.AddForeignKey(
                name: "FK_ALQ_Presupuestos_ClientesDirecciones",
                table: "ALQ_Presupuestos",
                column: "PersonaDireccionFacturaID",
                principalTable: "ClientesDirecciones",
                principalColumn: "IDPersonaDireccion");

            migrationBuilder.AddForeignKey(
                name: "FK_Autofacturas_FacturasCompra",
                table: "Autofacturas",
                column: "FacturaCompraID",
                principalTable: "FacturasCompra",
                principalColumn: "IDCabecera");

            migrationBuilder.AddForeignKey(
                name: "FK_BienesAmortizables_FacturasCompraDetalle",
                table: "BienesAmortizables",
                column: "FacturaCompraDetalleID",
                principalTable: "FacturasCompraDetalle",
                principalColumn: "IDLinea");

            migrationBuilder.AddForeignKey(
                name: "FK_BienesAmortizables_Lotes",
                table: "BienesAmortizables",
                column: "LoteID",
                principalTable: "Lotes",
                principalColumn: "IDLote");

            migrationBuilder.AddForeignKey(
                name: "FK_Certificaciones_FacturasVentaDetalle",
                table: "Certificaciones",
                column: "FacturaDetalleDestinoID",
                principalTable: "FacturasVentaDetalle",
                principalColumn: "IDLinea",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "FK_Clientes_ClientesDirecciones",
                table: "Clientes",
                column: "DireccionEntregaID",
                principalTable: "ClientesDirecciones",
                principalColumn: "IDPersonaDireccion");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Clientes_CTA_CentroCoste",
                table: "Clientes");

            migrationBuilder.DropForeignKey(
                name: "FK_Clientes_IVAGrupos",
                table: "Clientes");

            migrationBuilder.DropForeignKey(
                name: "FK_Clientes_Series",
                table: "Clientes");

            migrationBuilder.DropForeignKey(
                name: "FK_Clientes_ConceptosRetencion",
                table: "Clientes");

            migrationBuilder.DropForeignKey(
                name: "FK_ClientesDirecciones_Clientes",
                table: "ClientesDirecciones");

            migrationBuilder.DropTable(
                name: "AE_Entidades");

            migrationBuilder.DropTable(
                name: "AEAT_M303");

            migrationBuilder.DropTable(
                name: "AEAT_M303_Tipos");

            migrationBuilder.DropTable(
                name: "AEAT_M340_Detalle");

            migrationBuilder.DropTable(
                name: "AEAT_M347");

            migrationBuilder.DropTable(
                name: "AEAT_M347_Detalle");

            migrationBuilder.DropTable(
                name: "AEAT_M349");

            migrationBuilder.DropTable(
                name: "AEAT_SII");

            migrationBuilder.DropTable(
                name: "AEAT_SII_Detalle");

            migrationBuilder.DropTable(
                name: "AEAT_SII_Subdetalle");

            migrationBuilder.DropTable(
                name: "Agencias");

            migrationBuilder.DropTable(
                name: "AgenciasTransporteTarifasDetalle");

            migrationBuilder.DropTable(
                name: "AlbaranesCompraDetalle");

            migrationBuilder.DropTable(
                name: "AlbaranesVentaAnticipos");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresDescuentosGenerales");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresDetalle");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresDetallePicking");

            migrationBuilder.DropTable(
                name: "ALQ_PresupuestosDescuentosGenerales");

            migrationBuilder.DropTable(
                name: "ALQ_PresupuestosDetalle");

            migrationBuilder.DropTable(
                name: "Asientos_Diario");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "AtributosCampos");

            migrationBuilder.DropTable(
                name: "AtributosCatalogo");

            migrationBuilder.DropTable(
                name: "AtributosValoresFotosLog");

            migrationBuilder.DropTable(
                name: "Autofacturas");

            migrationBuilder.DropTable(
                name: "Auxiliar_01");

            migrationBuilder.DropTable(
                name: "BienesAmortizables");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesDetalle");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesMetodos");

            migrationBuilder.DropTable(
                name: "BO_Cuentas");

            migrationBuilder.DropTable(
                name: "BO_Old");

            migrationBuilder.DropTable(
                name: "BO_Old_Cuentas");

            migrationBuilder.DropTable(
                name: "BOA");

            migrationBuilder.DropTable(
                name: "BOA_Cuentas");

            migrationBuilder.DropTable(
                name: "CalendarioDiasEmpleado");

            migrationBuilder.DropTable(
                name: "Calendarios_PlanSemanal_Def");

            migrationBuilder.DropTable(
                name: "Calendarios_Turnos_Def");

            migrationBuilder.DropTable(
                name: "CantidadesPrecargaComisiones");

            migrationBuilder.DropTable(
                name: "CDBO_CantidadesPrecargaTarifas");

            migrationBuilder.DropTable(
                name: "CDBO_ParametrosAnaliticos");

            migrationBuilder.DropTable(
                name: "CDBO_PedidosPendientesImportar");

            migrationBuilder.DropTable(
                name: "CDBO_ProductosX_Y_Fields");

            migrationBuilder.DropTable(
                name: "CDBP_Entidades");

            migrationBuilder.DropTable(
                name: "CDBP_Steps");

            migrationBuilder.DropTable(
                name: "CentrosEmpleados");

            migrationBuilder.DropTable(
                name: "CentrosMaquinas");

            migrationBuilder.DropTable(
                name: "Certificaciones");

            migrationBuilder.DropTable(
                name: "Clientes_CDBO");

            migrationBuilder.DropTable(
                name: "Clientes_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "ClientesCentrosAdministrativos");

            migrationBuilder.DropTable(
                name: "ClientesDepartamentos");

            migrationBuilder.DropTable(
                name: "ClientesDescuentos");

            migrationBuilder.DropTable(
                name: "ClientesDescuentos_Root");

            migrationBuilder.DropTable(
                name: "ClientesDiasPago");

            migrationBuilder.DropTable(
                name: "ClientesMandatos");

            migrationBuilder.DropTable(
                name: "ClientesPeriodosExentosPago");

            migrationBuilder.DropTable(
                name: "clientesroleclaim");

            migrationBuilder.DropTable(
                name: "ClientesTelefonos");

            migrationBuilder.DropTable(
                name: "ClientesTipoIdentificacion");

            migrationBuilder.DropTable(
                name: "ClientesTipos");

            migrationBuilder.DropTable(
                name: "clientesUserClaim");

            migrationBuilder.DropTable(
                name: "clientesUserLogin");

            migrationBuilder.DropTable(
                name: "clientesUserRole");

            migrationBuilder.DropTable(
                name: "clientesUsertoken");

            migrationBuilder.DropTable(
                name: "ComercialesClientes");

            migrationBuilder.DropTable(
                name: "ComisionesDetalle");

            migrationBuilder.DropTable(
                name: "ConceptosContabilidad");

            migrationBuilder.DropTable(
                name: "ConexionConta");

            migrationBuilder.DropTable(
                name: "ConfiguracionBloques");

            migrationBuilder.DropTable(
                name: "ConfiguracionEmpresa_CTA");

            migrationBuilder.DropTable(
                name: "CRM_Acciones");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasCriterios");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasDetalle");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasEmisionesTipos");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasSeguimientos");

            migrationBuilder.DropTable(
                name: "CRM_CanjesDetalle");

            migrationBuilder.DropTable(
                name: "CRM_ClientesPuntosDetalle");

            migrationBuilder.DropTable(
                name: "CRM_ClientesSegmentos");

            migrationBuilder.DropTable(
                name: "CRM_Oportunidades");

            migrationBuilder.DropTable(
                name: "CRM_TarjetasFidelizacion");

            migrationBuilder.DropTable(
                name: "CTA_Cuentas_Intercambio");

            migrationBuilder.DropTable(
                name: "Descuentos");

            migrationBuilder.DropTable(
                name: "DevolucionesVentaDetalle");

            migrationBuilder.DropTable(
                name: "DG_DGDirecciones");

            migrationBuilder.DropTable(
                name: "DGD_Ubicaciones");

            migrationBuilder.DropTable(
                name: "Diario");

            migrationBuilder.DropTable(
                name: "Diario_Aux");

            migrationBuilder.DropTable(
                name: "DiarioAUX");

            migrationBuilder.DropTable(
                name: "DMN_DataSet_Parameter");

            migrationBuilder.DropTable(
                name: "DMN_DataSet_rel");

            migrationBuilder.DropTable(
                name: "DocumentosGestionAsientos");

            migrationBuilder.DropTable(
                name: "DocumentosGestionDetalleObservaciones");

            migrationBuilder.DropTable(
                name: "DocumentosGestionDetalleUbicaciones");

            migrationBuilder.DropTable(
                name: "DocumentosGestionMargenesClaves");

            migrationBuilder.DropTable(
                name: "DocumentosGestionRegistroAlmacen");

            migrationBuilder.DropTable(
                name: "DocumentosGestionTipo1");

            migrationBuilder.DropTable(
                name: "DocumentosGestionTiposLineaProductosTipos");

            migrationBuilder.DropTable(
                name: "DocumentosGestionTiposLineaTiposLinea");

            migrationBuilder.DropTable(
                name: "DocumentosGestionTraspasos");

            migrationBuilder.DropTable(
                name: "DocumentosGestionTraspasosSetup");

            migrationBuilder.DropTable(
                name: "EmpleadosDirecciones");

            migrationBuilder.DropTable(
                name: "EmpleadosPuestos");

            migrationBuilder.DropTable(
                name: "EmpleadosTelefonos");

            migrationBuilder.DropTable(
                name: "EmpresasDiasPago");

            migrationBuilder.DropTable(
                name: "EmpresasEmailCuentas");

            migrationBuilder.DropTable(
                name: "EmpresasPeriodosExentosPago");

            migrationBuilder.DropTable(
                name: "EscalasMedidas");

            migrationBuilder.DropTable(
                name: "ExpedicionesDetalle");

            migrationBuilder.DropTable(
                name: "FacturacionPlanificacion");

            migrationBuilder.DropTable(
                name: "Facturae");

            migrationBuilder.DropTable(
                name: "FacturasCompraPie");

            migrationBuilder.DropTable(
                name: "FacturasVentaDetalle_Entregas");

            migrationBuilder.DropTable(
                name: "Familias_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "FasesCentros");

            migrationBuilder.DropTable(
                name: "FasesEstados");

            migrationBuilder.DropTable(
                name: "Fichajes_Ordenes_Operaciones_Lista");

            migrationBuilder.DropTable(
                name: "Fichajes_Steeps");

            migrationBuilder.DropTable(
                name: "Fichajes_Tareas_StandBy");

            migrationBuilder.DropTable(
                name: "FormasPagoAPI");

            migrationBuilder.DropTable(
                name: "GastosFacturacion");

            migrationBuilder.DropTable(
                name: "GD_DocumentosEntidades");

            migrationBuilder.DropTable(
                name: "GeneralSetup");

            migrationBuilder.DropTable(
                name: "GS_AccessLog");

            migrationBuilder.DropTable(
                name: "GS_Consultas_InfoAdd");

            migrationBuilder.DropTable(
                name: "GS_GridColumns");

            migrationBuilder.DropTable(
                name: "GS_RecordsKeys");

            migrationBuilder.DropTable(
                name: "GS_UsrComboListsItems");

            migrationBuilder.DropTable(
                name: "GS_UsrGridsViewsCustomizations");

            migrationBuilder.DropTable(
                name: "InstalacionesTipos");

            migrationBuilder.DropTable(
                name: "ISO_ActividadesMaquinas");

            migrationBuilder.DropTable(
                name: "ISO_ActividadesPersonal");

            migrationBuilder.DropTable(
                name: "ISO_Comunicaciones");

            migrationBuilder.DropTable(
                name: "ISO_CriteriosEficacia");

            migrationBuilder.DropTable(
                name: "ISO_CursosAsistentes");

            migrationBuilder.DropTable(
                name: "ISO_EncuestasDetalle");

            migrationBuilder.DropTable(
                name: "ISO_IncidenciasDetalle");

            migrationBuilder.DropTable(
                name: "ISO_IndicadoresDetalle");

            migrationBuilder.DropTable(
                name: "ISO_MantenimientosDetalle");

            migrationBuilder.DropTable(
                name: "ISO_PedidosCompra");

            migrationBuilder.DropTable(
                name: "ISO_PedidosCompraDetalle");

            migrationBuilder.DropTable(
                name: "ISO_Productos");

            migrationBuilder.DropTable(
                name: "ISO_ProductosRequisitos");

            migrationBuilder.DropTable(
                name: "ISO_Proveedores");

            migrationBuilder.DropTable(
                name: "ISO_ProveedoresCriterios");

            migrationBuilder.DropTable(
                name: "ISO_PuestosDocumentos");

            migrationBuilder.DropTable(
                name: "ISO_PuestosRequisitos");

            migrationBuilder.DropTable(
                name: "ISO_Registros");

            migrationBuilder.DropTable(
                name: "ISO_RevisionesAcuerdos");

            migrationBuilder.DropTable(
                name: "ISO_RevisionesAsistentes");

            migrationBuilder.DropTable(
                name: "ISO_Vencimientos");

            migrationBuilder.DropTable(
                name: "IVA_Libro_ClaveOperacion");

            migrationBuilder.DropTable(
                name: "IVA_LibroRepercutido");

            migrationBuilder.DropTable(
                name: "IVA_LibroSoportado");

            migrationBuilder.DropTable(
                name: "LAB_BoletinesDetalle_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "LAB_BoletinesPoolDetalle");

            migrationBuilder.DropTable(
                name: "LAB_DatosDinamicos_LineasDef");

            migrationBuilder.DropTable(
                name: "LAB_NormativasParametros");

            migrationBuilder.DropTable(
                name: "LAB_OAsDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "LAB_OAsLecturas");

            migrationBuilder.DropTable(
                name: "LiquidacionesComercialDetalle");

            migrationBuilder.DropTable(
                name: "Listados");

            migrationBuilder.DropTable(
                name: "Log_Compuestos");

            migrationBuilder.DropTable(
                name: "LogDebug");

            migrationBuilder.DropTable(
                name: "LotesTraza");

            migrationBuilder.DropTable(
                name: "MaquinasConsumos");

            migrationBuilder.DropTable(
                name: "MaquinasConsumosSaldos");

            migrationBuilder.DropTable(
                name: "Meses");

            migrationBuilder.DropTable(
                name: "MovimientosAlmacenSaldos");

            migrationBuilder.DropTable(
                name: "NIC_Diccionario");

            migrationBuilder.DropTable(
                name: "NIC_PGC_CuentasListados");

            migrationBuilder.DropTable(
                name: "OPEsDetalle");

            migrationBuilder.DropTable(
                name: "OPEsEnvioMaterial");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacion_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacionDetalleEmpleados");

            migrationBuilder.DropTable(
                name: "OrdenesSeriadas_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "OrdenesSeriadasExplosiones");

            migrationBuilder.DropTable(
                name: "PartesTiposOFTipos");

            migrationBuilder.DropTable(
                name: "PedidosVenta_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "PedidosVentaDescuentosGenerales");

            migrationBuilder.DropTable(
                name: "PedidosVentaDetalle");

            migrationBuilder.DropTable(
                name: "Periodos");

            migrationBuilder.DropTable(
                name: "PermisosEmpleados");

            migrationBuilder.DropTable(
                name: "Pgcnorma");

            migrationBuilder.DropTable(
                name: "PresupuestosCompraDetalle");

            migrationBuilder.DropTable(
                name: "PresupuestosVentaDescuentosGenerales");

            migrationBuilder.DropTable(
                name: "PresupuestosVentaDetalle");

            migrationBuilder.DropTable(
                name: "PresupuestosVentaProductosActualizables");

            migrationBuilder.DropTable(
                name: "Productos_Atribs_Valores");

            migrationBuilder.DropTable(
                name: "Productos_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "ProductosAlmacen");

            migrationBuilder.DropTable(
                name: "ProductosBaseUnidadesModulos");

            migrationBuilder.DropTable(
                name: "ProductosClientes");

            migrationBuilder.DropTable(
                name: "ProductosCodigosBarras");

            migrationBuilder.DropTable(
                name: "ProductosCompuestos");

            migrationBuilder.DropTable(
                name: "ProductosCompuestosPlantillas_Log");

            migrationBuilder.DropTable(
                name: "ProductosCompuestosPlantillasComponentes");

            migrationBuilder.DropTable(
                name: "ProductosConjuntos_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "ProductosConjuntosComponentes");

            migrationBuilder.DropTable(
                name: "ProductosEspeciales");

            migrationBuilder.DropTable(
                name: "ProductosFotosLog");

            migrationBuilder.DropTable(
                name: "ProductosProveedores");

            migrationBuilder.DropTable(
                name: "ProductosSugeridos");

            migrationBuilder.DropTable(
                name: "ProductosUnidadesModulos");

            migrationBuilder.DropTable(
                name: "PropuestasCompraDetalle");

            migrationBuilder.DropTable(
                name: "Proveedores_ProveedoresGrupos");

            migrationBuilder.DropTable(
                name: "ProveedoresCuentasBancarias");

            migrationBuilder.DropTable(
                name: "ProveedoresDescuentos");

            migrationBuilder.DropTable(
                name: "ProveedoresDescuentos_Root");

            migrationBuilder.DropTable(
                name: "ProveedoresDiasPago");

            migrationBuilder.DropTable(
                name: "ProveedoresMarcas");

            migrationBuilder.DropTable(
                name: "ProveedoresPeriodosExentosPago");

            migrationBuilder.DropTable(
                name: "ProveedoresTarifasProducto");

            migrationBuilder.DropTable(
                name: "ProveedoresTelefonos");

            migrationBuilder.DropTable(
                name: "Proyectos_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "Prueba");

            migrationBuilder.DropTable(
                name: "PyG_Cuentas");

            migrationBuilder.DropTable(
                name: "PyGA");

            migrationBuilder.DropTable(
                name: "PyGA_Cuentas");

            migrationBuilder.DropTable(
                name: "Rappels");

            migrationBuilder.DropTable(
                name: "RegularizacionesAlmacen");

            migrationBuilder.DropTable(
                name: "Rep_HorasExtras");

            migrationBuilder.DropTable(
                name: "ReportsCriterias");

            migrationBuilder.DropTable(
                name: "ReservasStockDetalle");

            migrationBuilder.DropTable(
                name: "Resultados");

            migrationBuilder.DropTable(
                name: "RP_Entidades");

            migrationBuilder.DropTable(
                name: "RP_ReportsCliente");

            migrationBuilder.DropTable(
                name: "RP_ReportsDefault");

            migrationBuilder.DropTable(
                name: "RP_ReportsDG");

            migrationBuilder.DropTable(
                name: "RP_ReportsProveedor");

            migrationBuilder.DropTable(
                name: "RRHH_PrimasLiquidacionDetalle");

            migrationBuilder.DropTable(
                name: "RRHH_Setup");

            migrationBuilder.DropTable(
                name: "SCTAB");

            migrationBuilder.DropTable(
                name: "SRV_ContratosDetalle");

            migrationBuilder.DropTable(
                name: "SRV_ContratosPlanificacion");

            migrationBuilder.DropTable(
                name: "SRV_PresupuestosVentaDetalle");

            migrationBuilder.DropTable(
                name: "SRV_PresupuestosVentaDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "Subcta");

            migrationBuilder.DropTable(
                name: "sync_Connections_Familias");

            migrationBuilder.DropTable(
                name: "sync_Entidades_Tipos");

            migrationBuilder.DropTable(
                name: "sync_Operations");

            migrationBuilder.DropTable(
                name: "sync_Synchronizations");

            migrationBuilder.DropTable(
                name: "sync_SynchronizedRecords");

            migrationBuilder.DropTable(
                name: "Tareas");

            migrationBuilder.DropTable(
                name: "TarifasDetalle");

            migrationBuilder.DropTable(
                name: "TarifasTipo");

            migrationBuilder.DropTable(
                name: "Temporadas");

            migrationBuilder.DropTable(
                name: "TesoreriaApunte");

            migrationBuilder.DropTable(
                name: "TesoreriaSaldosFecha");

            migrationBuilder.DropTable(
                name: "TipoFacturacion");

            migrationBuilder.DropTable(
                name: "TiposDireccion");

            migrationBuilder.DropTable(
                name: "TiposPortes");

            migrationBuilder.DropTable(
                name: "TPVCabeceraTicket");

            migrationBuilder.DropTable(
                name: "TPVCambios");

            migrationBuilder.DropTable(
                name: "TPVDescuentos");

            migrationBuilder.DropTable(
                name: "TPVFormasPago");

            migrationBuilder.DropTable(
                name: "TPVimg");

            migrationBuilder.DropTable(
                name: "TPVMensajesVisor");

            migrationBuilder.DropTable(
                name: "TPVMovimientosCaja");

            migrationBuilder.DropTable(
                name: "TPVPagosPorCaja");

            migrationBuilder.DropTable(
                name: "TPVPieTicket");

            migrationBuilder.DropTable(
                name: "TPVPromociones");

            migrationBuilder.DropTable(
                name: "TPVTicketsDetalle");

            migrationBuilder.DropTable(
                name: "Transactions");

            migrationBuilder.DropTable(
                name: "TSK_TareasTipo_Mantenimiento");

            migrationBuilder.DropTable(
                name: "ValesDetalle");

            migrationBuilder.DropTable(
                name: "ValoresLotes");

            migrationBuilder.DropTable(
                name: "Vencimientos");

            migrationBuilder.DropTable(
                name: "VencimientosCompra");

            migrationBuilder.DropTable(
                name: "Wizards");

            migrationBuilder.DropTable(
                name: "ZonasProvincias");

            migrationBuilder.DropTable(
                name: "AEAT_M340");

            migrationBuilder.DropTable(
                name: "Entidades");

            migrationBuilder.DropTable(
                name: "AlbaranesCompra");

            migrationBuilder.DropTable(
                name: "AlbaranesCompraDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "VencimientosVenta");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresPicking");

            migrationBuilder.DropTable(
                name: "ALQ_Presupuestos");

            migrationBuilder.DropTable(
                name: "ALQ_PresupuestosDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "Asientos");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "AutofacturasEstados");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesBajaCausas");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesCategorias");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesEstados");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesNaturalezas");

            migrationBuilder.DropTable(
                name: "BienesAmortizablesTipos");

            migrationBuilder.DropTable(
                name: "FacturasCompraDetalle");

            migrationBuilder.DropTable(
                name: "BO");

            migrationBuilder.DropTable(
                name: "CalendariosDias");

            migrationBuilder.DropTable(
                name: "CDBP_Processes");

            migrationBuilder.DropTable(
                name: "AlbaranesVentaDetalle");

            migrationBuilder.DropTable(
                name: "FacturasVentaDetalle");

            migrationBuilder.DropTable(
                name: "ClientesCuentasBancarias");

            migrationBuilder.DropTable(
                name: "clientesRole");

            migrationBuilder.DropTable(
                name: "ClientesUsers");

            migrationBuilder.DropTable(
                name: "Modelos");

            migrationBuilder.DropTable(
                name: "CTA_AEAT_Territorios");

            migrationBuilder.DropTable(
                name: "CRM_AccionesEstados");

            migrationBuilder.DropTable(
                name: "CRM_AccionesIniciativas");

            migrationBuilder.DropTable(
                name: "CRM_AccionesMedios");

            migrationBuilder.DropTable(
                name: "CRM_AccionesResultados");

            migrationBuilder.DropTable(
                name: "CRM_AccionesTipos");

            migrationBuilder.DropTable(
                name: "CRM_Acciones_CDBO");

            migrationBuilder.DropTable(
                name: "CRM_CamposCriterios");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasDocumentos");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasDestinatarios");

            migrationBuilder.DropTable(
                name: "CRM_ClientesPuntosCabeceras");

            migrationBuilder.DropTable(
                name: "CRM_PuntosTablaDetalle");

            migrationBuilder.DropTable(
                name: "CRM_OportunidadesEstados");

            migrationBuilder.DropTable(
                name: "CRM_OportunidadesPrioridades");

            migrationBuilder.DropTable(
                name: "DevolucionesVenta");

            migrationBuilder.DropTable(
                name: "DevolucionesVentaDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "DG_Direcciones");

            migrationBuilder.DropTable(
                name: "CTA_AsientosOrigenes");

            migrationBuilder.DropTable(
                name: "GS_UsrOperators");

            migrationBuilder.DropTable(
                name: "DMN_DataSet");

            migrationBuilder.DropTable(
                name: "MovimientosAlmacenDetalle");

            migrationBuilder.DropTable(
                name: "DocumentosGestionTiposLinea");

            migrationBuilder.DropTable(
                name: "EXP_PaquetesFormatos");

            migrationBuilder.DropTable(
                name: "Expediciones");

            migrationBuilder.DropTable(
                name: "ExpedicionesDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "ExpedicionesEstados");

            migrationBuilder.DropTable(
                name: "Fases");

            migrationBuilder.DropTable(
                name: "Fichajes_Partes");

            migrationBuilder.DropTable(
                name: "GD_Documentos");

            migrationBuilder.DropTable(
                name: "GD_Entidades");

            migrationBuilder.DropTable(
                name: "GS_UsrComboLists");

            migrationBuilder.DropTable(
                name: "GS_GridsViews");

            migrationBuilder.DropTable(
                name: "ISO_Actividades");

            migrationBuilder.DropTable(
                name: "ISO_Cursos");

            migrationBuilder.DropTable(
                name: "ISO_Encuestas");

            migrationBuilder.DropTable(
                name: "ISO_Respuestas");

            migrationBuilder.DropTable(
                name: "ISO_Incidencias");

            migrationBuilder.DropTable(
                name: "ISO_TiposAcciones");

            migrationBuilder.DropTable(
                name: "ISO_Indicadores");

            migrationBuilder.DropTable(
                name: "ISO_Mantenimientos");

            migrationBuilder.DropTable(
                name: "ISO_CalificacionesCompra");

            migrationBuilder.DropTable(
                name: "PedidosCompraDetalle");

            migrationBuilder.DropTable(
                name: "ISO_CriteriosSeleccion");

            migrationBuilder.DropTable(
                name: "ISO_Requisitos");

            migrationBuilder.DropTable(
                name: "ISO_Revisiones");

            migrationBuilder.DropTable(
                name: "ISO_TiposVencimientos");

            migrationBuilder.DropTable(
                name: "IVA_Libro_TipoClave");

            migrationBuilder.DropTable(
                name: "LAB_BoletinesDetalle");

            migrationBuilder.DropTable(
                name: "LAB_BoletinesPool");

            migrationBuilder.DropTable(
                name: "LAB_DatosDinamicos");

            migrationBuilder.DropTable(
                name: "LAB_OAsDetalle");

            migrationBuilder.DropTable(
                name: "LAB_OAsLecturasEstados");

            migrationBuilder.DropTable(
                name: "ComisionesOperaciones");

            migrationBuilder.DropTable(
                name: "LiquidacionesComercial");

            migrationBuilder.DropTable(
                name: "LiquidacionesComercialDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "OPEs");

            migrationBuilder.DropTable(
                name: "OPEsDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "PedidosVenta");

            migrationBuilder.DropTable(
                name: "PedidosVentaDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "PeriodosTipos");

            migrationBuilder.DropTable(
                name: "PermisosAcciones");

            migrationBuilder.DropTable(
                name: "PresupuestosCompra");

            migrationBuilder.DropTable(
                name: "PresupuestosCompraDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "PresupuestosVentaDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "PresupuestosVenta");

            migrationBuilder.DropTable(
                name: "UnidadesProductoBase");

            migrationBuilder.DropTable(
                name: "ProductosCompuestos_CDBO");

            migrationBuilder.DropTable(
                name: "ProductosCompuestosPlantillas");

            migrationBuilder.DropTable(
                name: "PropuestasCompra");

            migrationBuilder.DropTable(
                name: "ProveedoresGrupos");

            migrationBuilder.DropTable(
                name: "DatosDinamicos_GS_EntidadesDef");

            migrationBuilder.DropTable(
                name: "PyG");

            migrationBuilder.DropTable(
                name: "ReportsLaunchers");

            migrationBuilder.DropTable(
                name: "ReservasStock");

            migrationBuilder.DropTable(
                name: "RRHH_PrimasLiquidacion");

            migrationBuilder.DropTable(
                name: "RRHH_SetupCategorias");

            migrationBuilder.DropTable(
                name: "SRV_ContratosDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "SRV_Contratos");

            migrationBuilder.DropTable(
                name: "SRV_PresupuestosVenta");

            migrationBuilder.DropTable(
                name: "sync_Connections");

            migrationBuilder.DropTable(
                name: "TSK_TareasClases");

            migrationBuilder.DropTable(
                name: "TSK_TareasMantenimientoTipos");

            migrationBuilder.DropTable(
                name: "TSK_TareasOrigenes");

            migrationBuilder.DropTable(
                name: "TSK_TareasPrioridades");

            migrationBuilder.DropTable(
                name: "TesoreriaApunteTipo");

            migrationBuilder.DropTable(
                name: "TPVTicketsDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "TSK_Tareas");

            migrationBuilder.DropTable(
                name: "Vales");

            migrationBuilder.DropTable(
                name: "ValesDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "RemesasCompra");

            migrationBuilder.DropTable(
                name: "Zonas");

            migrationBuilder.DropTable(
                name: "AlbaranesCompraEstados");

            migrationBuilder.DropTable(
                name: "AlbaranesCompra_CDBO");

            migrationBuilder.DropTable(
                name: "RemesasVenta");

            migrationBuilder.DropTable(
                name: "ALQ_Alquileres");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresPickingTipos");

            migrationBuilder.DropTable(
                name: "ALQ_PresupuestosEstados");

            migrationBuilder.DropTable(
                name: "ALQ_Presupuestos_CDBO");

            migrationBuilder.DropTable(
                name: "FacturasCompra");

            migrationBuilder.DropTable(
                name: "FacturasCompraDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "CalendariosEjercicios");

            migrationBuilder.DropTable(
                name: "AlbaranesVenta");

            migrationBuilder.DropTable(
                name: "AlbaranesVentaDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "FacturasVenta");

            migrationBuilder.DropTable(
                name: "FacturasVentaDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "MargenesClaves");

            migrationBuilder.DropTable(
                name: "CRM_AccionesTiposGenericos");

            migrationBuilder.DropTable(
                name: "CRM_Segmentos");

            migrationBuilder.DropTable(
                name: "CRM_DocumentosTipos");

            migrationBuilder.DropTable(
                name: "CRM_Campanyas");

            migrationBuilder.DropTable(
                name: "CRM_ClientesPuntos");

            migrationBuilder.DropTable(
                name: "CRM_PuntosTabla");

            migrationBuilder.DropTable(
                name: "DevolucionesVentaEstados");

            migrationBuilder.DropTable(
                name: "DevolucionesVenta_CDBO");

            migrationBuilder.DropTable(
                name: "DMN_QueryForm");

            migrationBuilder.DropTable(
                name: "GS_GridDefinitions");

            migrationBuilder.DropTable(
                name: "MovimientosAlmacen");

            migrationBuilder.DropTable(
                name: "MovimientosAlmacenTipos");

            migrationBuilder.DropTable(
                name: "Expediciones_CDBO");

            migrationBuilder.DropTable(
                name: "RutasProduccion");

            migrationBuilder.DropTable(
                name: "FichajesDetalle");

            migrationBuilder.DropTable(
                name: "Fichajes_PartesEstados");

            migrationBuilder.DropTable(
                name: "Partes");

            migrationBuilder.DropTable(
                name: "GD_FormatosArchivos");

            migrationBuilder.DropTable(
                name: "GD_Tipos");

            migrationBuilder.DropTable(
                name: "ISO_PlanesFormacion");

            migrationBuilder.DropTable(
                name: "ISO_Preguntas");

            migrationBuilder.DropTable(
                name: "ISO_IncidenciasEstados");

            migrationBuilder.DropTable(
                name: "ISO_TiposIncidencias");

            migrationBuilder.DropTable(
                name: "ISO_Procesos");

            migrationBuilder.DropTable(
                name: "ISO_Tendencias");

            migrationBuilder.DropTable(
                name: "ISO_Frecuencias");

            migrationBuilder.DropTable(
                name: "ISO_TiposMantenimientos");

            migrationBuilder.DropTable(
                name: "PedidosCompra");

            migrationBuilder.DropTable(
                name: "PedidosCompraDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "ISO_Documentos");

            migrationBuilder.DropTable(
                name: "ISO_TiposNormas");

            migrationBuilder.DropTable(
                name: "LAB_AnalisisTipos");

            migrationBuilder.DropTable(
                name: "LAB_BoletinesDetalle_CDBO");

            migrationBuilder.DropTable(
                name: "LAB_Boletines");

            migrationBuilder.DropTable(
                name: "LAB_OAs");

            migrationBuilder.DropTable(
                name: "LiquidacionesComercialEstados");

            migrationBuilder.DropTable(
                name: "LiquidacionesComercial_CDBO");

            migrationBuilder.DropTable(
                name: "OPEsEstados");

            migrationBuilder.DropTable(
                name: "OPEs_CDBO");

            migrationBuilder.DropTable(
                name: "PedidosVentaEstados");

            migrationBuilder.DropTable(
                name: "PedidosVenta_CDBO");

            migrationBuilder.DropTable(
                name: "PermisosCategorias");

            migrationBuilder.DropTable(
                name: "PresupuestosCompraEstados");

            migrationBuilder.DropTable(
                name: "PresupuestosCompra_CDBO");

            migrationBuilder.DropTable(
                name: "PresupuestosVentaEstados");

            migrationBuilder.DropTable(
                name: "PresupuestosVenta_CDBO");

            migrationBuilder.DropTable(
                name: "DocumentosGestion");

            migrationBuilder.DropTable(
                name: "DatosDinamicos");

            migrationBuilder.DropTable(
                name: "DatosDinamicos_GS_Entidades");

            migrationBuilder.DropTable(
                name: "Reports");

            migrationBuilder.DropTable(
                name: "RRHH_PrimasLiquidacionEstados");

            migrationBuilder.DropTable(
                name: "SRV_ContratosEstados");

            migrationBuilder.DropTable(
                name: "SRV_Contratos_CDBO");

            migrationBuilder.DropTable(
                name: "SRV_PresupuestosVentaEstados");

            migrationBuilder.DropTable(
                name: "SRV_PresupuestosVenta_CDBO");

            migrationBuilder.DropTable(
                name: "sync_Tipos");

            migrationBuilder.DropTable(
                name: "TSK_TareasEstados");

            migrationBuilder.DropTable(
                name: "CRM_Liquidaciones");

            migrationBuilder.DropTable(
                name: "TPVTickets");

            migrationBuilder.DropTable(
                name: "ValesEstados");

            migrationBuilder.DropTable(
                name: "ValesOrigenes");

            migrationBuilder.DropTable(
                name: "Vales_CDBO");

            migrationBuilder.DropTable(
                name: "ALQ_AlquileresEstados");

            migrationBuilder.DropTable(
                name: "ALQ_Alquileres_CDBO");

            migrationBuilder.DropTable(
                name: "FacturasCompraEstados");

            migrationBuilder.DropTable(
                name: "FacturasCompra_CDBO");

            migrationBuilder.DropTable(
                name: "AlbaranesVentaEstados");

            migrationBuilder.DropTable(
                name: "AlbaranesVenta_CDBO");

            migrationBuilder.DropTable(
                name: "Direcciones_EntidadesOrigen");

            migrationBuilder.DropTable(
                name: "Comerciales");

            migrationBuilder.DropTable(
                name: "FacturasVentaEstados");

            migrationBuilder.DropTable(
                name: "FacturasVenta_CDBO");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasEstados");

            migrationBuilder.DropTable(
                name: "CRM_CampanyasTipos");

            migrationBuilder.DropTable(
                name: "CRM_Campanyas_CDBO");

            migrationBuilder.DropTable(
                name: "DocumentosAlmacenTipos");

            migrationBuilder.DropTable(
                name: "Fichajes");

            migrationBuilder.DropTable(
                name: "FichajesTipos");

            migrationBuilder.DropTable(
                name: "CentrosTipos");

            migrationBuilder.DropTable(
                name: "Maquinas");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacionDetalle");

            migrationBuilder.DropTable(
                name: "OrdenesSeriadasDetalle");

            migrationBuilder.DropTable(
                name: "PartesTipos");

            migrationBuilder.DropTable(
                name: "Partes_CDBO");

            migrationBuilder.DropTable(
                name: "GD_Aplicaciones");

            migrationBuilder.DropTable(
                name: "AgenciasTransporteTarifas");

            migrationBuilder.DropTable(
                name: "PedidosCompraEstados");

            migrationBuilder.DropTable(
                name: "PedidosCompra_CDBO");

            migrationBuilder.DropTable(
                name: "PortesTipos");

            migrationBuilder.DropTable(
                name: "ProveedoresContactos");

            migrationBuilder.DropTable(
                name: "ProveedoresDirecciones");

            migrationBuilder.DropTable(
                name: "ISO_TiposRegistros");

            migrationBuilder.DropTable(
                name: "ClientesContactos");

            migrationBuilder.DropTable(
                name: "LAB_BoletinesEstados");

            migrationBuilder.DropTable(
                name: "LAB_Boletines_CDBO");

            migrationBuilder.DropTable(
                name: "LAB_OAsEstados");

            migrationBuilder.DropTable(
                name: "LAB_OAs_CDBO");

            migrationBuilder.DropTable(
                name: "LAB_Prioridades");

            migrationBuilder.DropTable(
                name: "DocumentosGestionDestinatarios");

            migrationBuilder.DropTable(
                name: "ModulosGestion");

            migrationBuilder.DropTable(
                name: "GS_UsrTypes");

            migrationBuilder.DropTable(
                name: "ReportsConstructor");

            migrationBuilder.DropTable(
                name: "ReportsFamilias");

            migrationBuilder.DropTable(
                name: "ReportsTipos");

            migrationBuilder.DropTable(
                name: "CRM_Canjes");

            migrationBuilder.DropTable(
                name: "TPV");

            migrationBuilder.DropTable(
                name: "TPVTicketsEstados");

            migrationBuilder.DropTable(
                name: "TPVTickets_CDBO");

            migrationBuilder.DropTable(
                name: "Tarifas");

            migrationBuilder.DropTable(
                name: "GS_Entidades");

            migrationBuilder.DropTable(
                name: "ComercialesTipos");

            migrationBuilder.DropTable(
                name: "Comisiones");

            migrationBuilder.DropTable(
                name: "FichajesEstados");

            migrationBuilder.DropTable(
                name: "Turnos");

            migrationBuilder.DropTable(
                name: "MaquinasEstados");

            migrationBuilder.DropTable(
                name: "MaquinasGrupos");

            migrationBuilder.DropTable(
                name: "Puestos");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacion");

            migrationBuilder.DropTable(
                name: "IvaTipos");

            migrationBuilder.DropTable(
                name: "Operaciones");

            migrationBuilder.DropTable(
                name: "OrdenesSeriadas");

            migrationBuilder.DropTable(
                name: "TiposLinea");

            migrationBuilder.DropTable(
                name: "ClientesContactosTipos");

            migrationBuilder.DropTable(
                name: "GS_EditMasksTypes");

            migrationBuilder.DropTable(
                name: "GS_InternalTypes");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacionEstados");

            migrationBuilder.DropTable(
                name: "OperacionesAtributos");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacionOrigenes");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacionPrioridades");

            migrationBuilder.DropTable(
                name: "OrdenesFabricacionTipos");

            migrationBuilder.DropTable(
                name: "OrdenesSeriadasEstados");

            migrationBuilder.DropTable(
                name: "ProductosConjuntos");

            migrationBuilder.DropTable(
                name: "Proyectos");

            migrationBuilder.DropTable(
                name: "PartesFormularios");

            migrationBuilder.DropTable(
                name: "UnidadesProducto");

            migrationBuilder.DropTable(
                name: "Ejercicios");

            migrationBuilder.DropTable(
                name: "Lotes");

            migrationBuilder.DropTable(
                name: "ProyectosEstados");

            migrationBuilder.DropTable(
                name: "LotesEstados");

            migrationBuilder.DropTable(
                name: "Lotes_CDBO");

            migrationBuilder.DropTable(
                name: "Productos");

            migrationBuilder.DropTable(
                name: "ProductosBase");

            migrationBuilder.DropTable(
                name: "Productos_CDBO");

            migrationBuilder.DropTable(
                name: "Empleados");

            migrationBuilder.DropTable(
                name: "Familias");

            migrationBuilder.DropTable(
                name: "Marcas");

            migrationBuilder.DropTable(
                name: "ProductosBase_CDBO");

            migrationBuilder.DropTable(
                name: "ProductosEstado");

            migrationBuilder.DropTable(
                name: "LAB_Matrices");

            migrationBuilder.DropTable(
                name: "LAB_ProcedimientosEnsayo");

            migrationBuilder.DropTable(
                name: "Calendarios");

            migrationBuilder.DropTable(
                name: "CarneConducirTipos");

            migrationBuilder.DropTable(
                name: "EmpleadosContratosTipos");

            migrationBuilder.DropTable(
                name: "EmpleadosDepartamentos");

            migrationBuilder.DropTable(
                name: "EmpleadosEstadosCiviles");

            migrationBuilder.DropTable(
                name: "CatalogosAtributos");

            migrationBuilder.DropTable(
                name: "ProductosTipos");

            migrationBuilder.DropTable(
                name: "AlmacenesUbicaciones");

            migrationBuilder.DropTable(
                name: "Formularios");

            migrationBuilder.DropTable(
                name: "MargenesTipos");

            migrationBuilder.DropTable(
                name: "UnidadesMedida");

            migrationBuilder.DropTable(
                name: "Almacenes");

            migrationBuilder.DropTable(
                name: "FormulariosCategorias");

            migrationBuilder.DropTable(
                name: "Medidas");

            migrationBuilder.DropTable(
                name: "CentrosTrabajo");

            migrationBuilder.DropTable(
                name: "Cualificaciones");

            migrationBuilder.DropTable(
                name: "Proveedores");

            migrationBuilder.DropTable(
                name: "CualificacionesAtributos");

            migrationBuilder.DropTable(
                name: "ValoresProductos");

            migrationBuilder.DropTable(
                name: "FormasPago");

            migrationBuilder.DropTable(
                name: "IvaClases");

            migrationBuilder.DropTable(
                name: "MediosPago");

            migrationBuilder.DropTable(
                name: "Proveedores_CDBO");

            migrationBuilder.DropTable(
                name: "ProveedoresTipos");

            migrationBuilder.DropTable(
                name: "AtributosProductos");

            migrationBuilder.DropTable(
                name: "EmpresasCuentasBancarias");

            migrationBuilder.DropTable(
                name: "MediosPago_CargoCuenta");

            migrationBuilder.DropTable(
                name: "AtributosTipos");

            migrationBuilder.DropTable(
                name: "ConfiguracionEmpresa");

            migrationBuilder.DropTable(
                name: "CTA_CentroCoste");

            migrationBuilder.DropTable(
                name: "Secciones");

            migrationBuilder.DropTable(
                name: "Departamentos");

            migrationBuilder.DropTable(
                name: "IVAGrupos");

            migrationBuilder.DropTable(
                name: "Series");

            migrationBuilder.DropTable(
                name: "ConceptosRetencion");

            migrationBuilder.DropTable(
                name: "PGC");

            migrationBuilder.DropTable(
                name: "Clientes");

            migrationBuilder.DropTable(
                name: "ClientesDirecciones");

            migrationBuilder.DropTable(
                name: "FE_Formatos");

            migrationBuilder.DropTable(
                name: "ClientesDirecciones_CDBO");

            migrationBuilder.DropTable(
                name: "Localidades");

            migrationBuilder.DropTable(
                name: "Comarcas");

            migrationBuilder.DropTable(
                name: "Provincias");

            migrationBuilder.DropTable(
                name: "Paises");
        }
    }
}
