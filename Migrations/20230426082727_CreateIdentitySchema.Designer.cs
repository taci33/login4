// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using login4.Models.EF;

#nullable disable

namespace login4.Migrations
{
    [DbContext(typeof(IntranetSenasaData230209Context))]
    [Migration("20230426082727_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CdbpEntidade", b =>
                {
                    b.Property<int>("ProcessId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessID");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.HasKey("ProcessId", "EntidadId");

                    b.HasIndex("EntidadId");

                    b.ToTable("CDBP_Entidades", (string)null);
                });

            modelBuilder.Entity("CentrosEmpleado", b =>
                {
                    b.Property<int>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.HasKey("CentroId", "EmpleadoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("CentrosEmpleados", (string)null);
                });

            modelBuilder.Entity("CentrosMaquina", b =>
                {
                    b.Property<int>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<int>("MaquinaId")
                        .HasColumnType("int")
                        .HasColumnName("MaquinaID");

                    b.HasKey("CentroId", "MaquinaId");

                    b.HasIndex("MaquinaId");

                    b.ToTable("CentrosMaquinas", (string)null);
                });

            modelBuilder.Entity("ClientesUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_clientesUserRole_RoleId");

                    b.ToTable("clientesUserRole", (string)null);
                });

            modelBuilder.Entity("ComercialesCliente", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.HasKey("PersonaId", "ComercialId");

                    b.HasIndex("ComercialId");

                    b.ToTable("ComercialesClientes", (string)null);
                });

            modelBuilder.Entity("DocumentosGestionTiposLineaProductosTipo", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.HasKey("DocumentoGestionId", "TipoLineaId", "ProductoTipoId");

                    b.HasIndex("ProductoTipoId");

                    b.ToTable("DocumentosGestionTiposLineaProductosTipos", (string)null);
                });

            modelBuilder.Entity("EmpleadosPuesto", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int")
                        .HasColumnName("PuestoID");

                    b.HasKey("EmpleadoId", "PuestoId");

                    b.HasIndex("PuestoId");

                    b.ToTable("EmpleadosPuestos", (string)null);
                });

            modelBuilder.Entity("IsoActividadesMaquina", b =>
                {
                    b.Property<int>("ActividadId")
                        .HasColumnType("int")
                        .HasColumnName("ActividadID");

                    b.Property<int>("MaquinaId")
                        .HasColumnType("int")
                        .HasColumnName("MaquinaID");

                    b.HasKey("ActividadId", "MaquinaId");

                    b.HasIndex("MaquinaId");

                    b.ToTable("ISO_ActividadesMaquinas", (string)null);
                });

            modelBuilder.Entity("IsoCursosAsistente", b =>
                {
                    b.Property<int>("CursoId")
                        .HasColumnType("int")
                        .HasColumnName("CursoID");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.HasKey("CursoId", "EmpleadoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("ISO_CursosAsistentes", (string)null);
                });

            modelBuilder.Entity("IsoProductosRequisito", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("RequisitoId")
                        .HasColumnType("int")
                        .HasColumnName("RequisitoID");

                    b.HasKey("ProductoId", "RequisitoId");

                    b.HasIndex("RequisitoId");

                    b.ToTable("ISO_ProductosRequisitos", (string)null);
                });

            modelBuilder.Entity("IsoProveedoresCriterio", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("CriterioId")
                        .HasColumnType("int")
                        .HasColumnName("CriterioID");

                    b.HasKey("PersonaId", "CriterioId");

                    b.HasIndex("CriterioId");

                    b.ToTable("ISO_ProveedoresCriterios", (string)null);
                });

            modelBuilder.Entity("IsoPuestosDocumento", b =>
                {
                    b.Property<int>("PuestoId")
                        .HasColumnType("int")
                        .HasColumnName("PuestoID");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID");

                    b.HasKey("PuestoId", "DocumentoId");

                    b.HasIndex("DocumentoId");

                    b.ToTable("ISO_PuestosDocumentos", (string)null);
                });

            modelBuilder.Entity("IsoPuestosRequisito", b =>
                {
                    b.Property<int>("PuestoId")
                        .HasColumnType("int")
                        .HasColumnName("PuestoID");

                    b.Property<int>("RequisitoId")
                        .HasColumnType("int")
                        .HasColumnName("RequisitoID");

                    b.HasKey("PuestoId", "RequisitoId");

                    b.HasIndex("RequisitoId");

                    b.ToTable("ISO_PuestosRequisitos", (string)null);
                });

            modelBuilder.Entity("IsoRevisionesAsistente", b =>
                {
                    b.Property<int>("RevisionId")
                        .HasColumnType("int")
                        .HasColumnName("RevisionID");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.HasKey("RevisionId", "EmpleadoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("ISO_RevisionesAsistentes", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PartesTiposOftipo", b =>
                {
                    b.Property<int>("ParteTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ParteTipoID");

                    b.Property<int>("OftipoId")
                        .HasColumnType("int")
                        .HasColumnName("OFTipoID");

                    b.HasKey("ParteTipoId", "OftipoId");

                    b.HasIndex("OftipoId");

                    b.ToTable("PartesTiposOFTipos", (string)null);
                });

            modelBuilder.Entity("RpEntidade", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.HasKey("ReportId", "EntidadId");

                    b.HasIndex("EntidadId");

                    b.ToTable("RP_Entidades", (string)null);
                });

            modelBuilder.Entity("SyncConnectionsFamilia", b =>
                {
                    b.Property<int>("ConnectionId")
                        .HasColumnType("int")
                        .HasColumnName("ConnectionID");

                    b.Property<int>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.HasKey("ConnectionId", "FamiliaId");

                    b.HasIndex("FamiliaId");

                    b.ToTable("sync_Connections_Familias", (string)null);
                });

            modelBuilder.Entity("SyncEntidadesTipo", b =>
                {
                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("EntidadId", "TipoId");

                    b.HasIndex("TipoId");

                    b.ToTable("sync_Entidades_Tipos", (string)null);
                });

            modelBuilder.Entity("ZonasProvincia", b =>
                {
                    b.Property<int>("ZonaId")
                        .HasColumnType("int")
                        .HasColumnName("ZonaID");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.HasKey("ZonaId", "ProvinciaId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("ZonasProvincias", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeEntidade", b =>
                {
                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.HasKey("EntidadId");

                    b.ToTable("AE_Entidades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM303", b =>
                {
                    b.Property<int>("Idmodelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDModelo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmodelo"));

                    b.Property<decimal?>("Adeducir")
                        .HasColumnType("money")
                        .HasColumnName("ADeducir");

                    b.Property<decimal?>("AdministracionEstado")
                        .HasColumnType("money");

                    b.Property<decimal?>("AdministracionEstadoPerCent")
                        .HasColumnType("money");

                    b.Property<bool>("Complementaria")
                        .HasColumnType("bit");

                    b.Property<string>("ComplementariaJustificante")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<decimal?>("CuotasAcompensar")
                        .HasColumnType("money")
                        .HasColumnName("CuotasACompensar");

                    b.Property<decimal?>("CuotasAcompensarAplicadasEnPeriodo")
                        .HasColumnType("money")
                        .HasColumnName("CuotasACompensarAplicadasEnPeriodo");

                    b.Property<decimal?>("CuotasAcompensarAplicadasPeriodosPosteriores")
                        .HasColumnType("money")
                        .HasColumnName("CuotasACompensarAplicadasPeriodosPosteriores");

                    b.Property<decimal?>("DedAdquisicionIntracomunitariaCorrientesBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_AdquisicionIntracomunitariaCorrientes_BI");

                    b.Property<decimal?>("DedAdquisicionIntracomunitariaCorrientesCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_AdquisicionIntracomunitariaCorrientes_Cuota");

                    b.Property<decimal?>("DedAdquisicionIntracomunitariaInversionBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_AdquisicionIntracomunitariaInversion_BI");

                    b.Property<decimal?>("DedAdquisicionIntracomunitariaInversionCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_AdquisicionIntracomunitariaInversion_Cuota");

                    b.Property<decimal?>("DedCompensacionRegimenEspecialAgp")
                        .HasColumnType("money")
                        .HasColumnName("DED_CompensacionRegimenEspecialAGP");

                    b.Property<decimal?>("DedImportacionCorrientesBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_ImportacionCorrientes_BI");

                    b.Property<decimal?>("DedImportacionCorrientesCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_ImportacionCorrientes_Cuota");

                    b.Property<decimal?>("DedImportacionInversionBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_ImportacionInversion_BI");

                    b.Property<decimal?>("DedImportacionInversionCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_ImportacionInversion_Cuota");

                    b.Property<decimal?>("DedModificacionBasesYcuotasBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_ModificacionBasesYCuotas_BI");

                    b.Property<decimal?>("DedModificacionBasesYcuotasCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_ModificacionBasesYCuotas_Cuota");

                    b.Property<decimal?>("DedOpInterioresBienesInversionBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_OpInterioresBienesInversion_BI");

                    b.Property<decimal?>("DedOpInterioresBienesInversionCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_OpInterioresBienesInversion_Cuota");

                    b.Property<decimal?>("DedOpInterioresCorrientesBi")
                        .HasColumnType("money")
                        .HasColumnName("DED_OpInterioresCorrientes_BI");

                    b.Property<decimal?>("DedOpInterioresCorrientesCuota")
                        .HasColumnType("money")
                        .HasColumnName("DED_OpInterioresCorrientes_Cuota");

                    b.Property<decimal?>("DedRegularizacionAplicacionPerCentProrrata")
                        .HasColumnType("money")
                        .HasColumnName("DED_RegularizacionAplicacionPerCentProrrata");

                    b.Property<decimal?>("DedRegularizacionInversiones")
                        .HasColumnType("money")
                        .HasColumnName("DED_RegularizacionInversiones");

                    b.Property<decimal?>("DedTotalAdeducir")
                        .HasColumnType("money")
                        .HasColumnName("DED_TotalADeducir");

                    b.Property<decimal?>("Dev1Bi")
                        .HasColumnType("money")
                        .HasColumnName("DEV1_BI");

                    b.Property<decimal?>("Dev1Cuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV1_Cuota");

                    b.Property<decimal?>("Dev1Tipo")
                        .HasColumnType("money")
                        .HasColumnName("DEV1_Tipo");

                    b.Property<decimal?>("Dev2Bi")
                        .HasColumnType("money")
                        .HasColumnName("DEV2_BI");

                    b.Property<decimal?>("Dev2Cuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV2_Cuota");

                    b.Property<decimal?>("Dev2Tipo")
                        .HasColumnType("money")
                        .HasColumnName("DEV2_Tipo");

                    b.Property<decimal?>("Dev3Bi")
                        .HasColumnType("money")
                        .HasColumnName("DEV3_BI");

                    b.Property<decimal?>("Dev3Cuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV3_Cuota");

                    b.Property<decimal?>("Dev3Tipo")
                        .HasColumnType("money")
                        .HasColumnName("DEV3_Tipo");

                    b.Property<decimal?>("DevAdquisionesIntracomunitariasBi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_AdquisionesIntracomunitarias_BI");

                    b.Property<decimal?>("DevAdquisionesIntracomunitariasCuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_AdquisionesIntracomunitarias_Cuota");

                    b.Property<decimal?>("DevModificacionBasesYcuotasBi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_ModificacionBasesYCuotas_BI");

                    b.Property<decimal?>("DevModificacionBasesYcuotasCuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_ModificacionBasesYCuotas_Cuota");

                    b.Property<decimal?>("DevModificacionBasesYcuotasReBi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_ModificacionBasesYCuotas_RE_BI");

                    b.Property<decimal?>("DevModificacionBasesYcuotasReCuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_ModificacionBasesYCuotas_RE_Cuota");

                    b.Property<decimal?>("DevOtrasActividadesInversionSujetoPasivoBi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_OtrasActividadesInversionSujetoPasivo_BI");

                    b.Property<decimal?>("DevOtrasActividadesInversionSujetoPasivoCuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_OtrasActividadesInversionSujetoPasivo_Cuota");

                    b.Property<decimal?>("DevRe1Bi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE1_BI");

                    b.Property<decimal?>("DevRe1Cuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE1_Cuota");

                    b.Property<decimal?>("DevRe1Tipo")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE1_Tipo");

                    b.Property<decimal?>("DevRe2Bi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE2_BI");

                    b.Property<decimal?>("DevRe2Cuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE2_Cuota");

                    b.Property<decimal?>("DevRe2Tipo")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE2_Tipo");

                    b.Property<decimal?>("DevRe3Bi")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE3_BI");

                    b.Property<decimal?>("DevRe3Cuota")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE3_Cuota");

                    b.Property<decimal?>("DevRe3Tipo")
                        .HasColumnType("money")
                        .HasColumnName("DEV_RE3_Tipo");

                    b.Property<decimal?>("DevTotalDevengado")
                        .HasColumnType("money")
                        .HasColumnName("DEV_TotalDevengado");

                    b.Property<string>("DevolCcb")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("varchar(34)")
                        .HasColumnName("DEVOL_CCB");

                    b.Property<decimal?>("DevolImporte")
                        .HasColumnType("money")
                        .HasColumnName("DEVOL_Importe");

                    b.Property<decimal?>("Diferencia")
                        .HasColumnType("money");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<decimal?>("EntregasIntracomunitarias")
                        .HasColumnType("money");

                    b.Property<decimal?>("ExportacionesYoperacionsAsimiladas")
                        .HasColumnType("money")
                        .HasColumnName("ExportacionesYOperacionsAsimiladas");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("IaExonClave1")
                        .HasColumnType("int")
                        .HasColumnName("IA_Exon_Clave_1");

                    b.Property<int>("IaExonClave2")
                        .HasColumnType("int")
                        .HasColumnName("IA_Exon_Clave_2");

                    b.Property<int>("IaExonClave3")
                        .HasColumnType("int")
                        .HasColumnName("IA_Exon_Clave_3");

                    b.Property<int>("IaExonClave4")
                        .HasColumnType("int")
                        .HasColumnName("IA_Exon_Clave_4");

                    b.Property<int>("IaExonClave5")
                        .HasColumnType("int")
                        .HasColumnName("IA_Exon_Clave_5");

                    b.Property<int>("IaExonClaveP")
                        .HasColumnType("int")
                        .HasColumnName("IA_Exon_Clave_P");

                    b.Property<string>("IaExonIae1")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("IA_Exon_IAE_1")
                        .IsFixedLength();

                    b.Property<string>("IaExonIae2")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("IA_Exon_IAE_2")
                        .IsFixedLength();

                    b.Property<string>("IaExonIae3")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("IA_Exon_IAE_3")
                        .IsFixedLength();

                    b.Property<string>("IaExonIae4")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("IA_Exon_IAE_4")
                        .IsFixedLength();

                    b.Property<string>("IaExonIae5")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("IA_Exon_IAE_5")
                        .IsFixedLength();

                    b.Property<string>("IaExonIaeP")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("IA_Exon_IAE_P")
                        .IsFixedLength();

                    b.Property<string>("IaExonMarcaTercerasPers")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IA_Exon_Marca_TercerasPers")
                        .IsFixedLength();

                    b.Property<decimal?>("IaExonOperEntIntrocomExentas")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_EntIntrocomExentas");

                    b.Property<decimal?>("IaExonOperEntregasBienesInsMont")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_EntregasBienesInsMont");

                    b.Property<decimal?>("IaExonOperEntregasBienesNoHabituales")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_EntregasBienesNoHabituales");

                    b.Property<decimal?>("IaExonOperExentasSinDeduccion")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_Exentas_SinDeduccion");

                    b.Property<decimal?>("IaExonOperExportaciones")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_Exportaciones");

                    b.Property<decimal?>("IaExonOperNoSujetasLocal")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_NoSujetasLocal");

                    b.Property<decimal?>("IaExonOperReAgenciasViajes")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RE_AgenciasViajes");

                    b.Property<decimal?>("IaExonOperReAgricultura")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RE_Agricultura");

                    b.Property<decimal?>("IaExonOperReBiensUsados")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RE_BiensUsados");

                    b.Property<decimal?>("IaExonOperReEntregasBi")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RE_EntregasBI");

                    b.Property<decimal?>("IaExonOperRecc")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RECC");

                    b.Property<decimal?>("IaExonOperRg")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RG");

                    b.Property<decimal?>("IaExonOperRsimplificado")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_RSimplificado");

                    b.Property<decimal?>("IaExonOperSujetosRe")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_Sujetos_RE");

                    b.Property<decimal?>("IaExonOperTotalVolumen")
                        .HasColumnType("money")
                        .HasColumnName("IA_Exon_Oper_TotalVolumen");

                    b.Property<bool>("IdAplicacionProrrataEspecial")
                        .HasColumnType("bit")
                        .HasColumnName("ID_AplicacionProrrataEspecial");

                    b.Property<bool>("IdAplicacionProrrataEspecialRevocacion")
                        .HasColumnType("bit")
                        .HasColumnName("ID_AplicacionProrrataEspecial_Revocacion");

                    b.Property<bool>("IdAutoliquidacionConjunta")
                        .HasColumnType("bit")
                        .HasColumnName("ID_AutoliquidacionConjunta");

                    b.Property<bool>("IdCriterioDeCaja")
                        .HasColumnType("bit")
                        .HasColumnName("ID_CriterioDeCaja");

                    b.Property<bool>("IdCriterioDeCajaDestinatario")
                        .HasColumnType("bit")
                        .HasColumnName("ID_CriterioDeCajaDestinatario");

                    b.Property<int>("IdDeclaracionConcursoDictadoEnPeriodo")
                        .HasColumnType("int")
                        .HasColumnName("ID_DeclaracionConcursoDictadoEnPeriodo");

                    b.Property<DateTime?>("IdDeclaracionConcursoFechaAuto")
                        .HasColumnType("datetime")
                        .HasColumnName("ID_DeclaracionConcursoFechaAuto");

                    b.Property<bool>("IdDeclaradoConcursoAcreedoresPresentePeriodo")
                        .HasColumnType("bit")
                        .HasColumnName("ID_DeclaradoConcursoAcreedoresPresentePeriodo");

                    b.Property<int>("IdExisteVolumenOperacionesLiva")
                        .HasColumnType("int")
                        .HasColumnName("ID_ExisteVolumenOperaciones_LIVA");

                    b.Property<int>("IdExonerado390")
                        .HasColumnType("int")
                        .HasColumnName("ID_Exonerado390");

                    b.Property<bool>("IdTributaExclusivamenteRegimenSimplificado")
                        .HasColumnType("bit")
                        .HasColumnName("ID_TributaExclusivamenteRegimenSimplificado");

                    b.Property<decimal?>("ImporteAcompensar")
                        .HasColumnType("money")
                        .HasColumnName("ImporteACompensar");

                    b.Property<string>("IngCcb")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("varchar(34)")
                        .HasColumnName("ING_CCB");

                    b.Property<string>("IngFormaPago")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ING_FormaPago")
                        .IsFixedLength();

                    b.Property<decimal?>("IngImporte")
                        .HasColumnType("money")
                        .HasColumnName("ING_Importe");

                    b.Property<bool>("InscritoRegistroDevMensual")
                        .HasColumnType("bit");

                    b.Property<string>("Localidad")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIF")
                        .IsFixedLength();

                    b.Property<string>("NotasInternas")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("OperacionesNoSujetas")
                        .HasColumnType("money");

                    b.Property<decimal?>("OperacionesSujetasIsp")
                        .HasColumnType("money")
                        .HasColumnName("OperacionesSujetas_ISP");

                    b.Property<decimal?>("OssOperacionesNosujetasLocalizacion")
                        .HasColumnType("money")
                        .HasColumnName("OSS_OperacionesNOSujetasLocalizacion");

                    b.Property<decimal?>("OssOperacionesSujetas")
                        .HasColumnType("money")
                        .HasColumnName("OSS_OperacionesSujetas");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("char(45)")
                        .IsFixedLength();

                    b.Property<decimal?>("ReccAdquisicionesBienesYserviciosBi")
                        .HasColumnType("money")
                        .HasColumnName("RECC_AdquisicionesBienesYServicios_BI");

                    b.Property<decimal?>("ReccAdquisicionesBienesYserviciosCuota")
                        .HasColumnType("money")
                        .HasColumnName("RECC_AdquisicionesBienesYServicios_Cuota");

                    b.Property<decimal?>("ReccEntregasBienesYserviciosBi")
                        .HasColumnType("money")
                        .HasColumnName("RECC_EntregasBienesYServicios_BI");

                    b.Property<decimal?>("ReccEntregasBienesYserviciosCuota")
                        .HasColumnType("money")
                        .HasColumnName("RECC_EntregasBienesYServicios_Cuota");

                    b.Property<decimal?>("Resultado")
                        .HasColumnType("money");

                    b.Property<decimal?>("ResultadoLiquidacion")
                        .HasColumnType("money");

                    b.Property<bool>("SinActividad")
                        .HasColumnType("bit");

                    b.Property<int>("SujPasivoTributaExcForalAduana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("Tipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<decimal?>("TributacionConjunta")
                        .HasColumnType("money");

                    b.Property<decimal?>("TributacionPorTerritorio")
                        .HasColumnType("money");

                    b.Property<int>("VoluntarioLivasede")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoluntarioLIVASede")
                        .HasDefaultValueSql("((2))");

                    b.HasKey("Idmodelo");

                    b.HasIndex("EjercicioId");

                    b.ToTable("AEAT_M303", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM303Tipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Idtipo");

                    b.ToTable("AEAT_M303_Tipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM340", b =>
                {
                    b.Property<int>("Idmodelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDModelo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmodelo"));

                    b.Property<string>("Contacto")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("ContactoTelefono")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("Contacto_Telefono")
                        .IsFixedLength();

                    b.Property<bool>("DeclaracionComplementaria")
                        .HasColumnType("bit");

                    b.Property<bool>("DeclaracionSustitutiva")
                        .HasColumnType("bit");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<decimal?>("ImporteTotalBi")
                        .HasColumnType("money")
                        .HasColumnName("ImporteTotalBI");

                    b.Property<decimal?>("ImporteTotalCuota")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTotalOperaciones")
                        .HasColumnType("money");

                    b.Property<string>("NidentificativoDeclaracionAnterior")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .HasColumnName("NIdentificativoDeclaracionAnterior")
                        .IsFixedLength();

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIF")
                        .IsFixedLength();

                    b.Property<string>("NifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFRepresentanteLegal")
                        .IsFixedLength();

                    b.Property<int?>("Nregistros")
                        .HasColumnType("int")
                        .HasColumnName("NRegistros");

                    b.Property<string>("NumeroPresentacion")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .IsFixedLength();

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("TipoSoporte")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('T')")
                        .IsFixedLength();

                    b.Property<bool?>("Valida")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idmodelo");

                    b.ToTable("AEAT_M340", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM340Detalle", b =>
                {
                    b.Property<int>("Iddetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddetalle"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal?>("BaseImponibleAcoste")
                        .HasColumnType("money")
                        .HasColumnName("BaseImponibleACoste");

                    b.Property<string>("ClaveDeclarado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ClaveIdentificacion")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ClaveOperacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ClaveTipoLibro")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("CobroCuenta")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("char(34)")
                        .HasColumnName("Cobro_Cuenta")
                        .IsFixedLength();

                    b.Property<DateTime?>("CobroFecha")
                        .HasColumnType("datetime")
                        .HasColumnName("Cobro_Fecha");

                    b.Property<decimal?>("CobroImporte")
                        .HasColumnType("money")
                        .HasColumnName("Cobro_Importe");

                    b.Property<string>("CobroMedio")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("Cobro_Medio")
                        .IsFixedLength();

                    b.Property<string>("CodigoEstadoMiembro")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("CodigoFactura")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("CodigoPais")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<decimal>("CuotaImpuesto")
                        .HasColumnType("money");

                    b.Property<string>("DescripcionBienes")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("char(35)")
                        .IsFixedLength();

                    b.Property<string>("DireccionOperadorIntracomunitarioCp")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("DireccionOperadorIntracomunitario_CP")
                        .IsFixedLength();

                    b.Property<string>("DireccionOperadorIntracomunitarioDomicilio")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .HasColumnName("DireccionOperadorIntracomunitario_Domicilio")
                        .IsFixedLength();

                    b.Property<string>("DireccionOperadorIntracomunitarioPoblacion")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("char(22)")
                        .HasColumnName("DireccionOperadorIntracomunitario_Poblacion")
                        .IsFixedLength();

                    b.Property<string>("FacturaRectificada")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<DateTime>("FechaExpedicion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioUtilizacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("IdentificacionBien")
                        .HasColumnType("datetime");

                    b.Property<string>("IdentificacionEntrega")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<decimal?>("ImporteMetalico")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteTotal")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTransmisionesInmuebles")
                        .HasColumnType("money");

                    b.Property<int?>("InmuebleSituacion")
                        .HasColumnType("int")
                        .HasColumnName("Inmueble_Situacion");

                    b.Property<int?>("IntervaloAcumulacionFin")
                        .HasColumnType("int")
                        .HasColumnName("IntervaloAcumulacion_Fin");

                    b.Property<int?>("IntervaloAcumulacionInicio")
                        .HasColumnType("int")
                        .HasColumnName("IntervaloAcumulacion_Inicio");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("ModeloID");

                    b.Property<int?>("Nfacturas")
                        .HasColumnType("int")
                        .HasColumnName("NFacturas");

                    b.Property<string>("NifPaisResidencia")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("NIF_PaisResidencia")
                        .IsFixedLength();

                    b.Property<string>("Nifdeclarado")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFDeclarado")
                        .IsFixedLength();

                    b.Property<string>("NifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFRepresentanteLegal")
                        .IsFixedLength();

                    b.Property<int?>("Nregistros")
                        .HasColumnType("int")
                        .HasColumnName("NRegistros");

                    b.Property<int>("NumeroRegistro")
                        .HasColumnType("int");

                    b.Property<int?>("PlazoOperacion")
                        .HasColumnType("int");

                    b.Property<string>("ProrrataAnualDefinitiva")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocialDeclarado")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<decimal?>("RecargoEqCuota")
                        .HasColumnType("money")
                        .HasColumnName("RecargoEq_Cuota");

                    b.Property<decimal?>("RecargoEqTipo")
                        .HasColumnType("money")
                        .HasColumnName("RecargoEq_Tipo");

                    b.Property<string>("ReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .IsFixedLength();

                    b.Property<decimal?>("RegularizacionAnualDeduccion")
                        .HasColumnType("money");

                    b.Property<decimal?>("RegularizacionDeduccionEfectuad")
                        .HasColumnType("money");

                    b.Property<decimal>("TipoImpositivo")
                        .HasColumnType("money");

                    b.Property<string>("TipoOperacionIntracomunitari")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Iddetalle");

                    b.HasIndex("ModeloId");

                    b.ToTable("AEAT_M340_Detalle", null, t =>
                        {
                            t.HasTrigger("tr_AEAT_M340_Detalle_Upd_Cabecera");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM347", b =>
                {
                    b.Property<int>("Idmodelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDModelo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmodelo"));

                    b.Property<string>("Contacto")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("ContactoTelefono")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("Contacto_Telefono")
                        .IsFixedLength();

                    b.Property<bool>("DeclaracionComplementaria")
                        .HasColumnType("bit");

                    b.Property<bool>("DeclaracionSustitutiva")
                        .HasColumnType("bit");

                    b.Property<string>("Ejercicio")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal?>("ImporteTotalAnualOperaciones")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTotalArrendamiento")
                        .HasColumnType("money");

                    b.Property<string>("NidentificativoDeclaracionAnterior")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .HasColumnName("NIdentificativoDeclaracionAnterior")
                        .IsFixedLength();

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIF")
                        .IsFixedLength();

                    b.Property<string>("NifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFRepresentanteLegal")
                        .IsFixedLength();

                    b.Property<int?>("NumeroInmuebles")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroPersonasYentidades")
                        .HasColumnType("int")
                        .HasColumnName("NumeroPersonasYEntidades");

                    b.Property<string>("NumeroPresentacion")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("TipoSoporte")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('T')")
                        .IsFixedLength();

                    b.HasKey("Idmodelo");

                    b.ToTable("AEAT_M347", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM347Detalle", b =>
                {
                    b.Property<int>("Iddetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddetalle"));

                    b.Property<string>("ArrendamientoLocalNegocio")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ClaveOperacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("CodigoPais")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("CodigoPaisNifoperador")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("CodigoPaisNIFOperador")
                        .IsFixedLength();

                    b.Property<string>("CodigoProvincia")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleBloque")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_Bloque")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleCalificadorNumero")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_CalificadorNumero")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleCodigoMunicipio")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DireccionInmueble_CodigoMunicipio")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleCodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DireccionInmueble_CodigoPostal")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleCodigoProvincia")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("DireccionInmueble_CodigoProvincia")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleComplemento")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .HasColumnName("DireccionInmueble_Complemento")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleEscalera")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_Escalera")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleLocalidad")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("DireccionInmueble_Localidad")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleMunicipio")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("DireccionInmueble_Municipio")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleNombreVia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("DireccionInmueble_NombreVia")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleNumero")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DireccionInmueble_Numero")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmueblePlanta")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_Planta")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmueblePortal")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_Portal")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmueblePuerta")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_Puerta")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleTipoNumeracion")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DireccionInmueble_TipoNumeracion")
                        .IsFixedLength();

                    b.Property<string>("DireccionInmuebleTipoVia")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DireccionInmueble_TipoVia")
                        .IsFixedLength();

                    b.Property<string>("EjercicioImporteMetalico")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal?>("ImporteAnual")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteAnualOperacionesCriterioCaja")
                        .HasColumnType("money")
                        .HasColumnName("ImporteAnualOPeracionesCriterioCaja");

                    b.Property<decimal?>("ImporteAnualTransmisionesInmuebles")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteMetalico")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestre1")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestre2")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestre3")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestre4")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestreTransmisionesInmuebles1")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestreTransmisionesInmuebles2")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestreTransmisionesInmuebles3")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTrimestreTransmisionesInmuebles4")
                        .HasColumnType("money");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("ModeloID");

                    b.Property<string>("Nifdeclarado")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFDeclarado")
                        .IsFixedLength();

                    b.Property<string>("NifoperadorComunitario")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("NIFOperadorComunitario")
                        .IsFixedLength();

                    b.Property<string>("NifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFRepresentanteLegal")
                        .IsFixedLength();

                    b.Property<string>("OperacionInversionSujetoPasivo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("OPeracionInversionSujetoPasivo")
                        .IsFixedLength();

                    b.Property<string>("OperacionRegimenDepositoDistintoAduanero")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("OperacionSeguro")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("OperacionesCriterioCaja")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocialOperador")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("ReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .IsFixedLength();

                    b.Property<string>("SituacionInmueble")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("TipoHoja")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Iddetalle");

                    b.ToTable("AEAT_M347_Detalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatM349", b =>
                {
                    b.Property<int>("Idmodelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDModelo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmodelo"));

                    b.Property<string>("Contacto")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("ContactoTelefono")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("Contacto_Telefono")
                        .IsFixedLength();

                    b.Property<bool>("DeclaracionComplementaria")
                        .HasColumnType("bit");

                    b.Property<bool>("DeclaracionSustitutiva")
                        .HasColumnType("bit");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<decimal?>("ImporteTotalOperaciones")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTotalOperacionesRectificat")
                        .HasColumnType("money");

                    b.Property<string>("IndicadorCambioPeriodicidad")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("NidentificativoDeclaracionAnterior")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .HasColumnName("NIdentificativoDeclaracionAnterior")
                        .IsFixedLength();

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIF")
                        .IsFixedLength();

                    b.Property<string>("NifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("NIFRepresentanteLegal")
                        .IsFixedLength();

                    b.Property<int?>("NoperadoresIntracomunitarios")
                        .HasColumnType("int")
                        .HasColumnName("NOperadoresIntracomunitarios");

                    b.Property<int?>("NoperadoresIntracomunitariosRectificat")
                        .HasColumnType("int")
                        .HasColumnName("NOperadoresIntracomunitariosRectificat");

                    b.Property<string>("NumeroPresentacion")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .IsFixedLength();

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<string>("TipoSoporte")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('T')")
                        .IsFixedLength();

                    b.Property<bool?>("Valida")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idmodelo");

                    b.ToTable("AEAT_M349", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatSii", b =>
                {
                    b.Property<int>("Idpresentacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPresentacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpresentacion"));

                    b.Property<string>("Autorizacion")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.Property<string>("ComunicacionTipo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Csv")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("char(16)")
                        .HasColumnName("CSV")
                        .IsFixedLength();

                    b.Property<bool>("EditedCsvmanual")
                        .HasColumnType("bit")
                        .HasColumnName("EditedCSVManual");

                    b.Property<string>("Ejercicio")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<short?>("EstadoEnvio")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nifdeclarante")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("NIFDeclarante");

                    b.Property<string>("NifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("NIFRepresentanteLegal");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<byte[]>("TimestampPresentacion")
                        .HasMaxLength(8)
                        .HasColumnType("varbinary(8)");

                    b.Property<int?>("TipoLibro")
                        .HasColumnType("int");

                    b.HasKey("Idpresentacion");

                    b.ToTable("AEAT_SII", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatSiiDetalle", b =>
                {
                    b.Property<int>("Iddetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddetalle"));

                    b.Property<decimal?>("BaseImponibleAcoste")
                        .HasColumnType("money")
                        .HasColumnName("BaseImponibleACoste");

                    b.Property<decimal?>("BaseRectificada")
                        .HasColumnType("money");

                    b.Property<DateTime?>("BiFechaInicioUso")
                        .HasColumnType("datetime")
                        .HasColumnName("BI_FechaInicioUso");

                    b.Property<string>("BiIdentificacionBien")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("BI_IdentificacionBien");

                    b.Property<string>("BiIdentificacionEntrega")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("BI_identificacionEntrega");

                    b.Property<double?>("BiProrrataAnualDefinitiva")
                        .HasColumnType("float")
                        .HasColumnName("BI_ProrrataAnualDefinitiva");

                    b.Property<decimal?>("BiRegularizacionAnualDeduccion")
                        .HasColumnType("money")
                        .HasColumnName("BI_RegularizacionAnualDeduccion");

                    b.Property<decimal?>("BiRegularizacionDeduccion")
                        .HasColumnType("money")
                        .HasColumnName("BI_RegularizacionDeduccion");

                    b.Property<int?>("CodigoErrorRegistro")
                        .HasColumnType("int");

                    b.Property<string>("ContraparteClaveIdentificacion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<bool?>("ContraparteEsNif")
                        .HasColumnType("bit")
                        .HasColumnName("ContraparteEsNIF");

                    b.Property<string>("ContraparteIdentificacionPais")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContraparteNif")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("ContraparteNIF");

                    b.Property<string>("ContraparteNifrepresentante")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("ContraparteNIFRepresentante");

                    b.Property<string>("ContrapartePais")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("ContraparteRazonSocial")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Csv")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("char(16)")
                        .HasColumnName("CSV")
                        .IsFixedLength();

                    b.Property<string>("CuentaBancariaCobro")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("varchar(34)");

                    b.Property<decimal?>("CuotaRecargoRectificada")
                        .HasColumnType("money");

                    b.Property<decimal?>("CuotaRectificada")
                        .HasColumnType("money");

                    b.Property<string>("DescripcionErrorRegistro")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("EstadoRegistro")
                        .HasColumnType("smallint");

                    b.Property<string>("FacturaClaveTipo")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<DateTime>("FacturaFecha")
                        .HasColumnType("datetime");

                    b.Property<string>("FacturaNifemisor")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FacturaNIFEmisor");

                    b.Property<string>("FacturaNumero")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("FacturaNumeroFin")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("FacturaOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaOrigenID");

                    b.Property<string>("FacturaRectificativaTipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("FacturasRectificadas")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FacturasSimplificadasSustituidas")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FeBiminorporBonificaciones")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FE_BIminorporBonificaciones")
                        .IsFixedLength();

                    b.Property<decimal?>("FeExentaBaseImponible")
                        .HasColumnType("money")
                        .HasColumnName("FE_ExentaBaseImponible");

                    b.Property<string>("FeExentaCausa")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("FE_ExentaCausa")
                        .IsFixedLength();

                    b.Property<string>("FeFacturaEmitidaTerceros")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FE_FacturaEmitidaTerceros")
                        .IsFixedLength();

                    b.Property<string>("FeFacturaVariosDestinatarios")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FE_FacturaVariosDestinatarios")
                        .IsFixedLength();

                    b.Property<decimal?>("FeImporteNoSujeta")
                        .HasColumnType("money")
                        .HasColumnName("FE_ImporteNoSujeta");

                    b.Property<decimal?>("FeImporteNoSujetaLocalizacion")
                        .HasColumnType("money")
                        .HasColumnName("FE_ImporteNoSujetaLocalizacion");

                    b.Property<decimal?>("FeImporteTransmisionesInmuebles")
                        .HasColumnType("money")
                        .HasColumnName("FE_ImporteTransmisionesInmuebles");

                    b.Property<string>("FeNoExentaTipoExencion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("FE_NoExentaTipoExencion")
                        .IsFixedLength();

                    b.Property<DateTime?>("FechaCobro")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaExpedicion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FrCuotaDeducible")
                        .HasColumnType("money")
                        .HasColumnName("FR_CuotaDeducible");

                    b.Property<DateTime?>("FrFechaRegistroContable")
                        .HasColumnType("datetime")
                        .HasColumnName("FR_FechaRegistroContable");

                    b.Property<decimal?>("ImporteCobrado")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteTotal")
                        .HasColumnType("money");

                    b.Property<string>("InmuebleReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("InmuebleSituacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("MedioCobro")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("OiClaveDeclarado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("OI_ClaveDeclarado")
                        .IsFixedLength();

                    b.Property<string>("OiCodigoEstadoMiembro")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("OI_CodigoEstadoMiembro")
                        .IsFixedLength();

                    b.Property<string>("OiDescripcionBienes")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("OI_DescripcionBienes");

                    b.Property<string>("OiDireccionOperadorIntracomunitario")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("OI_DireccionOperadorIntracomunitario");

                    b.Property<string>("OiOtrasFacturas")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("OI_OtrasFacturas");

                    b.Property<int?>("OiPlazoOperacion")
                        .HasColumnType("int")
                        .HasColumnName("OI_PlazoOperacion");

                    b.Property<double?>("OiTipoOi")
                        .HasColumnType("float")
                        .HasColumnName("OI_TipoOI");

                    b.Property<string>("OperacionClaveTributaria")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("OperacionDescripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PresentacionId")
                        .HasColumnType("int")
                        .HasColumnName("PresentacionID");

                    b.HasKey("Iddetalle");

                    b.ToTable("AEAT_SII_Detalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AeatSiiSubdetalle", b =>
                {
                    b.Property<int>("Idsubdetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSubdetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsubdetalle"));

                    b.Property<int?>("DetalleId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleID");

                    b.Property<decimal?>("FeNoExentaBaseImponible")
                        .HasColumnType("money")
                        .HasColumnName("FE_NoExentaBaseImponible");

                    b.Property<decimal?>("FeNoExentaCuota")
                        .HasColumnType("money")
                        .HasColumnName("FE_NoExentaCuota");

                    b.Property<decimal?>("FeNoExentaCuotaRe")
                        .HasColumnType("money")
                        .HasColumnName("FE_NoExentaCuotaRE");

                    b.Property<double?>("FeNoExentaTipo")
                        .HasColumnType("float")
                        .HasColumnName("FE_NoExentaTipo");

                    b.Property<double?>("FeNoExentaTipoRe")
                        .HasColumnType("float")
                        .HasColumnName("FE_NoExentaTipoRE");

                    b.Property<decimal?>("FrBi")
                        .HasColumnType("money")
                        .HasColumnName("FR_BI");

                    b.Property<decimal?>("FrCompensacionReagyp")
                        .HasColumnType("money")
                        .HasColumnName("FR_CompensacionREAGYP");

                    b.Property<decimal?>("FrCuota")
                        .HasColumnType("money")
                        .HasColumnName("FR_Cuota");

                    b.Property<decimal?>("FrCuotaRe")
                        .HasColumnType("money")
                        .HasColumnName("FR_CuotaRE");

                    b.Property<decimal?>("FrIspBi")
                        .HasColumnType("money")
                        .HasColumnName("FR_ISP_BI");

                    b.Property<decimal?>("FrIspCuota")
                        .HasColumnType("money")
                        .HasColumnName("FR_ISP_Cuota");

                    b.Property<decimal?>("FrIspCuotaRe")
                        .HasColumnType("money")
                        .HasColumnName("FR_ISP_CuotaRE");

                    b.Property<double?>("FrIspTipo")
                        .HasColumnType("float")
                        .HasColumnName("FR_ISP_Tipo");

                    b.Property<double?>("FrIspTipoRe")
                        .HasColumnType("float")
                        .HasColumnName("FR_ISP_TipoRE");

                    b.Property<double?>("FrPercentCompensacionReagyp")
                        .HasColumnType("float")
                        .HasColumnName("FR_PercentCompensacionREAGYP");

                    b.Property<double?>("FrTipo")
                        .HasColumnType("float")
                        .HasColumnName("FR_Tipo");

                    b.Property<double?>("FrTipoRe")
                        .HasColumnType("float")
                        .HasColumnName("FR_TipoRE");

                    b.HasKey("Idsubdetalle");

                    b.ToTable("AEAT_SII_Subdetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Agencia", b =>
                {
                    b.Property<string>("Idagencia")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("IDAgencia");

                    b.Property<string>("CodigoEntidad")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idagencia");

                    b.HasIndex("CodigoEntidad");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("login4.Models.EF.AgenciasTransporteTarifa", b =>
                {
                    b.Property<int>("IdtarifaAgencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarifaAgencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtarifaAgencia"));

                    b.Property<int?>("AgenciaId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaiCodeProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TAI_Code_Producto");

                    b.Property<string>("TaiCodeServicio")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TAI_Code_Servicio");

                    b.HasKey("IdtarifaAgencia")
                        .HasName("PK_AgenciasTransporte");

                    b.HasIndex("AgenciaId");

                    b.HasIndex(new[] { "IdtarifaAgencia", "AgenciaId" }, "IX_AgenciasTransporteTarifas")
                        .IsUnique();

                    b.ToTable("AgenciasTransporteTarifas");
                });

            modelBuilder.Entity("login4.Models.EF.AgenciasTransporteTarifasDetalle", b =>
                {
                    b.Property<int>("IdtarifaAgenciaDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarifaAgenciaDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtarifaAgenciaDetalle"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<double>("PesoDesde")
                        .HasColumnType("float");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int")
                        .HasColumnName("ZonaID");

                    b.HasKey("IdtarifaAgenciaDetalle")
                        .HasName("PK_AgenciasTransporteTarifas");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("ZonaId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.ToTable("AgenciasTransporteTarifasDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompra", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera")
                        .HasName("PK_AlbaranesCompra_1");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PortesTipoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_AlbaranesCompra_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_AlbaranesCompra_PersonaID_EjercicioID");

                    b.ToTable("AlbaranesCompra", null, t =>
                        {
                            t.HasTrigger("Act_Num_AlbaranesCompra");

                            t.HasTrigger("AlbaranesCompra_Delete_CDBO");

                            t.HasTrigger("MaxAlbaranCompraAnno");

                            t.HasTrigger("UpdateAlbaranCompraFromDescuento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("AlbaranesCompra_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea")
                        .HasName("PK_AlbaranesCompraDetalle_1");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_AlbaranesCompraDetalle_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_AlbaranesCompraDetalle_CabeceraID");

                    b.HasIndex(new[] { "ProductoId" }, "IX_AlbaranesCompraDetalle_ProductoID");

                    b.ToTable("AlbaranesCompraDetalle", null, t =>
                        {
                            t.HasTrigger("AlbaranesCompraDetalleAfterDelete");

                            t.HasTrigger("AlbaranesCompraDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateAlbaranesCompraDetalleNumeroLinea");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsAlbaranesCompraDetalle");

                            t.HasTrigger("UpdateDGDUbicacionesFromAlbaranCompraDetalle");

                            t.HasTrigger("UpdateProductosPrecioCompraFromAlbaranesCompra");

                            t.HasTrigger("UpdateProductosProveedoresPrecioUltimaCompra");

                            t.HasTrigger("UpdateStateAlbaranesCompra");

                            t.HasTrigger("UpdateStateAlbaranesCompraDetalle");

                            t.HasTrigger("tr_ACD_DG_Related_Update");

                            t.HasTrigger("tr_AlbaranesCompraDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_AlbaranesCompraDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_AlbaranesCompraDetalle_UpdateTotalesCabecera");

                            t.HasTrigger("tr_AlbaranesCompraDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("AlbaranesCompraDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("AlbaranesCompraEstados");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaAnticipo", b =>
                {
                    b.Property<int>("Idanticipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAnticipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idanticipo"));

                    b.Property<int?>("CabeceraDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraDestinoID");

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("CuentaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaEmpresaID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Efectos")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("FechaCargo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Iban")
                        .HasColumnType("bit")
                        .HasColumnName("IBAN");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NumeroAnticipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasDefaultValueSql("('(#)')")
                        .IsFixedLength();

                    b.Property<bool?>("Pagado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("PersonaNif")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("PersonaNIF")
                        .IsFixedLength();

                    b.Property<string>("PersonaNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<bool>("Traspasado")
                        .HasColumnType("bit");

                    b.Property<int?>("VencimientoDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("VencimientoDestinoID");

                    b.HasKey("Idanticipo");

                    b.HasIndex("CabeceraDestinoId");

                    b.HasIndex("CabeceraOrigenId");

                    b.HasIndex("CuentaEmpresaId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("VencimientoDestinoId");

                    b.ToTable("AlbaranesVentaAnticipos", t =>
                        {
                            t.HasTrigger("AVAnticipo_InsertCodContaYEfectosACobrar");

                            t.HasTrigger("GeneraNumeroAVAnticipo");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("AlbaranesVenta_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<double?>("Descuento")
                        .HasColumnType("float");

                    b.Property<double?>("DtoCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool?>("IncluirMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_Material")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IncluirMo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_MO")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<double?>("Margen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_AlbaranesVentaDetalle_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_AlbaranesVentaDetalle_CabeceraID");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_AlbaranesVentaDetalle_LineaID_NumLinea");

                    b.HasIndex(new[] { "ProductoId" }, "IX_AlbaranesVentaDetalle_ProductoID");

                    b.ToTable("AlbaranesVentaDetalle", null, t =>
                        {
                            t.HasTrigger("AlbaranesVentaDetalleAfterDelete");

                            t.HasTrigger("AlbaranesVentaDetalle_Delete_CDBO");

                            t.HasTrigger("AlbaranesVentaDetalle_UpdateCoste");

                            t.HasTrigger("InsertarProductosClientes");

                            t.HasTrigger("UpdateAlbaranesVentaTotalesCabecera");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsAlbaranesVentaDetalle");

                            t.HasTrigger("UpdateDGDUbicacionesFromAlbaranVentaDetalle");

                            t.HasTrigger("UpdatePortesAlbaranesVenta");

                            t.HasTrigger("UpdateStateAlbaranesVenta");

                            t.HasTrigger("tr_AVD_DG_Related_Update");

                            t.HasTrigger("tr_AlbaranesVentaDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_AlbaranesVentaDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_AlbaranesVentaDetalle_Update_NumLinea");

                            t.HasTrigger("tr_AlbaranesVentaDetalle_Update_StateDetalles");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("AlbaranesVentaDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("AlbaranesVentaEstados");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentum", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int")
                        .HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<bool>("DirRecogida")
                        .HasColumnType("bit");

                    b.Property<int?>("DirRecogidaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("DirRecogida_DireccionID");

                    b.Property<int?>("DirRecogidaEntidadOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DirRecogida_EntidadOrigenID");

                    b.Property<int?>("DirRecogidaKeyFieldValueId")
                        .HasColumnType("int")
                        .HasColumnName("DirRecogida_KeyFieldValueID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailSentFenvio")
                        .HasColumnType("datetime")
                        .HasColumnName("EmailSentFEnvio");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoId1")
                        .HasColumnType("int")
                        .HasColumnName("TipoID_1");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("DirRecogidaEntidadOrigenId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_AlbaranesVenta_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_AlbaranesVenta_PersonaID_EjercicioID");

                    b.ToTable("AlbaranesVenta", t =>
                        {
                            t.HasTrigger("Act_Num_AlbaranesVenta");

                            t.HasTrigger("AlbaranesVenta_Delete_CDBO");

                            t.HasTrigger("MaxAlbaranVentaAnno");

                            t.HasTrigger("UpdateAlbaranVentaFromDescuento");

                            t.HasTrigger("UpdateStatePedidosVentaFromAlbaranesVenta");

                            t.HasTrigger("tr_AlbaranesVenta_Delete_Direccion");

                            t.HasTrigger("tr_AlbaranesVenta_Insert_Direccion");

                            t.HasTrigger("tr_AlbaranesVenta_Update_Direccion");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Almacene", b =>
                {
                    b.Property<int>("Idalmacen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAlmacen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idalmacen"));

                    b.Property<bool>("AutogenerarNombreUbicaciones")
                        .HasColumnType("bit");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("DepositoOpe")
                        .HasColumnType("bit")
                        .HasColumnName("DepositoOPE");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<bool?>("IsReserva")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0),0))");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("bit");

                    b.Property<int?>("LocalidadId")
                        .HasColumnType("int")
                        .HasColumnName("LocalidadID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.Property<string>("PalabraBaseUbicaciones")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.HasKey("Idalmacen");

                    b.HasIndex("CentroId");

                    b.ToTable("Almacenes", t =>
                        {
                            t.HasTrigger("InsertAlmacenUbicacionMaestra");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlmacenesUbicacione", b =>
                {
                    b.Property<int>("Idubicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDUbicacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idubicacion"));

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('#')");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.HasKey("Idubicacion");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex(new[] { "Idubicacion", "AlmacenId" }, "IX_AlmacenesUbicaciones")
                        .IsUnique();

                    b.ToTable("AlmacenesUbicaciones", t =>
                        {
                            t.HasTrigger("CheckUbicacionMaestraNotDeleted");

                            t.HasTrigger("GestAlmacenesUbicaciones_Nivel_Nombre");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquilere", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<bool>("Aval")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<string>("ContactosTrabajo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("DireccionTrabajo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<decimal>("ImporteAval")
                        .HasColumnType("money");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroDias")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<string>("Telefonos")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ALQ_Alquileres_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("ALQ_Alquileres", null, t =>
                        {
                            t.HasTrigger("ALQ_Alquileres_Delete_CDBO");

                            t.HasTrigger("ALQ_Alquileres_UpdateStateAnulado");

                            t.HasTrigger("MaxALQ_AlquileresAnno");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("ALQ_Alquileres_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDescuentosGenerale", b =>
                {
                    b.Property<int>("Iddescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDescuento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddescuento"));

                    b.Property<bool>("Acumular")
                        .HasColumnType("bit");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int?>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<int?>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.HasKey("Iddescuento");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ProductoTipoId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("ALQ_AlquileresDescuentosGenerales", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DescuentoGeneral")
                        .HasColumnType("money");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool?>("IncluirMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_Material")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IncluirMo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_MO")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<decimal>("NumeroDiasFacturar")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("NumeroDiasTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_ALQ_AlquileresDetalle_CabeceraID");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ALQ_AlquileresDetalle_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_ALQ_AlquileresDetalle_LineaID_NumLinea");

                    b.HasIndex(new[] { "ProductoId" }, "IX_ALQ_AlquileresDetalle_ProductoID");

                    b.ToTable("ALQ_AlquileresDetalle", null, t =>
                        {
                            t.HasTrigger("ALQ_AlquileresDetalleAfterDelete");

                            t.HasTrigger("ALQ_AlquileresDetalle_Delete_CDBO");

                            t.HasTrigger("ALQ_AlquileresUpdateStateCabecera");

                            t.HasTrigger("ALQ_AlquileresUpdateStateDetalle");

                            t.HasTrigger("UpdateALQ_AlquileresTotalesCabecera");

                            t.HasTrigger("UpdateDGDUbicacionesFromALQ_AlquileresDetalle");

                            t.HasTrigger("UpdatePortesALQ_Alquileres");

                            t.HasTrigger("tr_ALQ_AlquileresDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_ALQ_AlquileresDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_ALQ_AlquileresDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("ALQ_AlquileresDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetallePicking", b =>
                {
                    b.Property<int>("IdpickingDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPickingDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpickingDetalle"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadEntrada")
                        .HasColumnType("float");

                    b.Property<bool>("CantidadEntradaAuto")
                        .HasColumnType("bit")
                        .HasComment("Determina si la línea se la Cantidad se ha informado de forma automática (sin lectura)");

                    b.Property<double>("CantidadSalida")
                        .HasColumnType("float");

                    b.Property<bool>("CantidadSalidaAuto")
                        .HasColumnType("bit")
                        .HasComment("Determina si la línea se la Cantidad se ha informado de forma automática (sin lectura)");

                    b.Property<bool>("EnDocumento")
                        .HasColumnType("bit");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("PickingEntradaId")
                        .HasColumnType("int")
                        .HasColumnName("PickingEntradaID");

                    b.Property<int?>("PickingSalidaId")
                        .HasColumnType("int")
                        .HasColumnName("PickingSalidaID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.HasKey("IdpickingDetalle");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("PickingEntradaId");

                    b.HasIndex("PickingSalidaId");

                    b.ToTable("ALQ_AlquileresDetallePicking", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("ALQ_AlquileresEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresPicking", b =>
                {
                    b.Property<int>("Idpicking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPicking");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpicking"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("Idpicking");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("TipoId");

                    b.ToTable("ALQ_AlquileresPicking", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresPickingTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idtipo");

                    b.ToTable("ALQ_AlquileresPickingTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuesto", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<bool>("Aval")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<string>("ContactosTrabajo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("DireccionTrabajo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<decimal>("ImporteAval")
                        .HasColumnType("money");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroDias")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<string>("Telefonos")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<string>("Version")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ALQ_Presupuestos_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("ALQ_Presupuestos", null, t =>
                        {
                            t.HasTrigger("ALQ_Presupuestos_Delete_CDBO");

                            t.HasTrigger("Act_Num_ALQ_Presupuestos");

                            t.HasTrigger("MaxALQ_PresupuestosAnno");

                            t.HasTrigger("UpdateStateALQ_PresupuestosDetalleFromHeader");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("TarifaDiasSemanaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaDiasSemanaID");

                    b.HasKey("Idcdbo");

                    b.ToTable("ALQ_Presupuestos_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDescuentosGenerale", b =>
                {
                    b.Property<int>("Iddescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDescuento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddescuento"));

                    b.Property<bool>("Acumular")
                        .HasColumnType("bit");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int?>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<int?>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.HasKey("Iddescuento");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ProductoTipoId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("ALQ_PresupuestosDescuentosGenerales", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DescuentoGeneral")
                        .HasColumnType("money");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool?>("IncluirMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_Material")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IncluirMo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_MO")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<decimal>("NumeroDiasFacturar")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("NumeroDiasTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_ALQ_PresupuestosDetalle_CabeceraID");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ALQ_PresupuestosDetalle_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_ALQ_PresupuestosDetalle_LineaID_NumLinea");

                    b.HasIndex(new[] { "ProductoId" }, "IX_ALQ_PresupuestosDetalle_ProductoID");

                    b.ToTable("ALQ_PresupuestosDetalle", null, t =>
                        {
                            t.HasTrigger("ALQ_PresupuestosDetalleAfterDelete");

                            t.HasTrigger("ALQ_PresupuestosDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateALQ_PresupuestosTotalesCabecera");

                            t.HasTrigger("UpdatePortesALQ_Presupuestos");

                            t.HasTrigger("tr_ALQPrD_Update_EstadoID");

                            t.HasTrigger("tr_ALQ_PresupuestosDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_ALQ_PresupuestosDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_ALQ_PresupuestosDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("ALQ_PresupuestosDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("ALQ_PresupuestosEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Asiento", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Clave");

                    b.ToTable("Asientos");
                });

            modelBuilder.Entity("login4.Models.EF.AsientosDiario", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<int>("Apunte")
                        .HasColumnType("int");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Concepto")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Dh")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DH");

                    b.Property<double>("Importe")
                        .HasColumnType("float");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int>("NumeroApunte")
                        .HasColumnType("int");

                    b.Property<double?>("TipoIva")
                        .HasColumnType("float")
                        .HasColumnName("Tipo_IVA");

                    b.HasKey("Clave", "Apunte");

                    b.HasIndex("CentroCosteId");

                    b.ToTable("Asientos_Diario", null, t =>
                        {
                            t.HasTrigger("InsertarNumeroApunte");

                            t.HasTrigger("tr_Asientos_Diario_Insert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AtributosCampo", b =>
                {
                    b.Property<int>("IdatributoCampo")
                        .HasColumnType("int")
                        .HasColumnName("IDAtributoCampo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdatributoCampo")
                        .HasName("PK_AtributosTallas");

                    b.ToTable("AtributosCampos");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosCatalogo", b =>
                {
                    b.Property<int>("IdatributoCatalogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAtributoCatalogo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdatributoCatalogo"));

                    b.Property<int>("AtributoProductoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoProductoID");

                    b.Property<int>("CatalogoAtributoId")
                        .HasColumnType("int")
                        .HasColumnName("CatalogoAtributoID");

                    b.Property<int?>("NumeroOrden")
                        .HasColumnType("int");

                    b.HasKey("IdatributoCatalogo");

                    b.HasIndex("AtributoProductoId");

                    b.HasIndex("CatalogoAtributoId");

                    b.ToTable("AtributosCatalogo", null, t =>
                        {
                            t.HasTrigger("tr_AtributosCatalogo_Delete");

                            t.HasTrigger("tr_AtributosCatalogo_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AtributosProducto", b =>
                {
                    b.Property<int>("IdatributoProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAtributoProducto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdatributoProducto"));

                    b.Property<int?>("Acabado")
                        .HasColumnType("int");

                    b.Property<int?>("AtributoProductoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoProductoID");

                    b.Property<bool?>("Combina")
                        .HasColumnType("bit");

                    b.Property<bool?>("ComponerNombre")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("Continuo")
                        .HasColumnType("bit");

                    b.Property<bool>("LoadValuesInWizard")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prefijo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Sufijo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("IdatributoProducto")
                        .HasName("PK_Atributos");

                    b.HasIndex("AtributoProductoId");

                    b.HasIndex("TipoId");

                    b.ToTable("AtributosProductos");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Hint")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtipo");

                    b.ToTable("AtributosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosValoresFotosLog", b =>
                {
                    b.Property<int>("Idlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlog"));

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("Operacion")
                        .HasColumnType("int");

                    b.Property<bool>("Procesado")
                        .HasColumnType("bit");

                    b.Property<int>("ValorAtributoId")
                        .HasColumnType("int")
                        .HasColumnName("ValorAtributoID");

                    b.HasKey("Idlog");

                    b.HasIndex("ValorAtributoId");

                    b.ToTable("AtributosValoresFotosLog", null, t =>
                        {
                            t.HasTrigger("FotosLog_UpdateFecha");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Autofactura", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Codigo")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<int>("FacturaCompraId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaCompraID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FacturaCompraId");

                    b.HasIndex("SerieId");

                    b.ToTable("Autofacturas", t =>
                        {
                            t.HasTrigger("MaxAutofacturaAnno");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.AutofacturasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool>("AllowModify")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("AutofacturasEstados");
                });

            modelBuilder.Entity("login4.Models.EF.Auxiliar01", b =>
                {
                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idaux")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAux");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idaux"));

                    b.Property<double?>("Valor")
                        .HasColumnType("float");

                    b.ToTable("Auxiliar_01", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizable", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("CategoriaID");

                    b.Property<int?>("CausaBajaId")
                        .HasColumnType("int")
                        .HasColumnName("CausaBajaID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CuentaAmortizacion")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("CuentaDotacion")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<int?>("FacturaCompraDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaCompraDetalleID");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaComienzoUso")
                        .HasColumnType("datetime");

                    b.Property<int>("LongitudPeriodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((12))");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MetodoDepreciacionId")
                        .HasColumnType("int")
                        .HasColumnName("MetodoDepreciacionID");

                    b.Property<int>("NaturalezaId")
                        .HasColumnType("int")
                        .HasColumnName("NaturalezaID");

                    b.Property<int>("Ndepreciaciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NDepreciaciones")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<bool?>("PrimeAmortProporcional")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("ResponsableID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<decimal>("ValorAmortizable")
                        .HasColumnType("money");

                    b.Property<decimal>("ValorBruto")
                        .HasColumnType("money");

                    b.Property<decimal>("ValorPendienteAmortizar")
                        .HasColumnType("money");

                    b.Property<decimal>("ValorResidual")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CausaBajaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FacturaCompraDetalleId");

                    b.HasIndex("LoteId");

                    b.HasIndex("NaturalezaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("TipoId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesBajaCausa", b =>
                {
                    b.Property<int>("IdcausaBaja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCausaBaja");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcausaBaja"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdcausaBaja");

                    b.ToTable("BienesAmortizablesBajaCausas");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesCategoria", b =>
                {
                    b.Property<int>("Idcategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCategoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcategoria"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CuentaAmortizacion")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("CuentaDotacion")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("LongitudPeriodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((12))");

                    b.Property<int>("MetodoDepreciacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MetodoDepreciacionID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Ndepreciaciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NDepreciaciones")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("Idcategoria");

                    b.ToTable("BienesAmortizablesCategorias");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesDetalle", b =>
                {
                    b.Property<int>("Iddetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddetalle"));

                    b.Property<string>("Anno")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<int?>("Asiento")
                        .HasColumnType("int");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorAmortizacion")
                        .HasColumnType("money");

                    b.HasKey("Iddetalle");

                    b.HasIndex("EjercicioId");

                    b.ToTable("BienesAmortizablesDetalle", null, t =>
                        {
                            t.HasTrigger("tr_BienesAmortizablesDetalle_UpdateCabecera");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool>("AllowModify")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("BienesAmortizablesEstados");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesMetodo", b =>
                {
                    b.Property<int>("Idmetodo")
                        .HasColumnType("int")
                        .HasColumnName("IDMetodo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idmetodo");

                    b.ToTable("BienesAmortizablesMetodos");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesNaturaleza", b =>
                {
                    b.Property<int>("Idnaturaleza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNaturaleza");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idnaturaleza"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Nombre")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idnaturaleza");

                    b.ToTable("BienesAmortizablesNaturalezas");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("BienesAmortizablesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.Bo", b =>
                {
                    b.Property<int>("Idbo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDBO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idbo"));

                    b.Property<int?>("Boid")
                        .HasColumnType("int")
                        .HasColumnName("BOID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idbo")
                        .HasName("PK_BO_nueva");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Idbo"), false);

                    b.HasIndex(new[] { "Boid" }, "IX_BO_nueva_BOID");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Boid" }, "IX_BO_nueva_BOID"));

                    b.ToTable("BO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.BoCuenta", b =>
                {
                    b.Property<int>("IdboCuentas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDBO_Cuentas");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdboCuentas"));

                    b.Property<int?>("Boid")
                        .HasColumnType("int")
                        .HasColumnName("BOID");

                    b.Property<string>("Cuenta")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Signo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdboCuentas")
                        .HasName("PK_BO_Cuentas_nueva");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdboCuentas"), false);

                    b.HasIndex(new[] { "Boid" }, "IX_BO_cuentas_nueva_BOID");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Boid" }, "IX_BO_cuentas_nueva_BOID"));

                    b.HasIndex(new[] { "Cuenta" }, "IX_BO_cuentas_nueva_cuenta");

                    b.ToTable("BO_Cuentas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.BoOld", b =>
                {
                    b.Property<string>("Ap")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AP");

                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Formato")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Nivel1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.ToTable("BO_Old", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.BoOldCuenta", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Signo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.ToTable("BO_Old_Cuentas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Boa", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Ap")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AP");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Formato")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Nivel1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("Clave");

                    b.ToTable("BOA", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.BoaCuenta", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Cuenta")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Signo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("Clave", "Cuenta");

                    b.ToTable("BOA_Cuentas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Calendario", b =>
                {
                    b.Property<int>("Idcalendario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCalendario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcalendario"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idcalendario");

                    b.HasIndex(new[] { "Nombre" }, "IX_Calendarios_Nombre")
                        .IsUnique();

                    b.ToTable("Calendarios");
                });

            modelBuilder.Entity("login4.Models.EF.CalendarioDiasEmpleado", b =>
                {
                    b.Property<int>("CalendarioId")
                        .HasColumnType("int")
                        .HasColumnName("CalendarioID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("TurnoID");

                    b.HasKey("CalendarioId", "EjercicioId", "Fecha", "EmpleadoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TurnoId");

                    b.ToTable("CalendarioDiasEmpleado", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosDia", b =>
                {
                    b.Property<int>("CalendarioId")
                        .HasColumnType("int")
                        .HasColumnName("CalendarioID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("Anno")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(year,[Fecha]))", false);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DiaAnno")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("Dia_Anno")
                        .HasComputedColumnSql("(datepart(dayofyear,[Fecha]))", false);

                    b.Property<int?>("DiaMes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("Dia_Mes")
                        .HasComputedColumnSql("(datepart(day,[Fecha]))", false);

                    b.Property<int?>("Mes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(month,[Fecha]))", false);

                    b.Property<int>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("TurnoID");

                    b.HasKey("CalendarioId", "EjercicioId", "Fecha");

                    b.HasIndex("TurnoId");

                    b.ToTable("CalendariosDias");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosEjercicio", b =>
                {
                    b.Property<int>("CalendarioId")
                        .HasColumnType("int")
                        .HasColumnName("CalendarioID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CalendarioId", "EjercicioId");

                    b.HasIndex("EjercicioId");

                    b.ToTable("CalendariosEjercicios");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosPlanSemanalDef", b =>
                {
                    b.Property<int>("CalendarioId")
                        .HasColumnType("int")
                        .HasColumnName("CalendarioID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int>("DomingoTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Domingo_TurnoID");

                    b.Property<int>("JuevesTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Jueves_TurnoID");

                    b.Property<int>("LunesTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Lunes_TurnoID");

                    b.Property<int>("MartesTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Martes_TurnoID");

                    b.Property<int>("MiercolesTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Miercoles_TurnoID");

                    b.Property<int>("SabadoTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Sabado_TurnoID");

                    b.Property<int>("ViernesTurnoId")
                        .HasColumnType("int")
                        .HasColumnName("Viernes_TurnoID");

                    b.HasKey("CalendarioId", "EjercicioId");

                    b.HasIndex("DomingoTurnoId");

                    b.HasIndex("JuevesTurnoId");

                    b.HasIndex("LunesTurnoId");

                    b.HasIndex("MartesTurnoId");

                    b.HasIndex("MiercolesTurnoId");

                    b.HasIndex("SabadoTurnoId");

                    b.HasIndex("ViernesTurnoId");

                    b.ToTable("Calendarios_PlanSemanal_Def", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosTurnosDef", b =>
                {
                    b.Property<int>("CalendarioId")
                        .HasColumnType("int")
                        .HasColumnName("CalendarioID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("TurnoID");

                    b.HasKey("CalendarioId", "EjercicioId", "FechaInicio")
                        .HasName("PK_Calendarios_Festivos_Def");

                    b.ToTable("Calendarios_Turnos_Def", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CantidadesPrecargaComisione", b =>
                {
                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("Comision")
                        .HasColumnType("float");

                    b.Property<int>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.HasIndex("OperacionId");

                    b.ToTable("CantidadesPrecargaComisiones");
                });

            modelBuilder.Entity("login4.Models.EF.CarneConducirTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("CarneConducirTipos");
                });

            modelBuilder.Entity("login4.Models.EF.CatalogosAtributo", b =>
                {
                    b.Property<int>("IdcatalogoAtributo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCatalogoAtributo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcatalogoAtributo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdcatalogoAtributo")
                        .HasName("PK_Catalogos");

                    b.ToTable("CatalogosAtributos");
                });

            modelBuilder.Entity("login4.Models.EF.CdboCantidadesPrecargaTarifa", b =>
                {
                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.ToTable("CDBO_CantidadesPrecargaTarifas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CdboParametrosAnalitico", b =>
                {
                    b.Property<int>("Idparametro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDParametro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idparametro"));

                    b.Property<int?>("ComboListId")
                        .HasColumnType("int")
                        .HasColumnName("ComboListID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit");

                    b.Property<int>("UsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsrTypeID");

                    b.HasKey("Idparametro");

                    b.HasIndex("UsrTypeId");

                    b.ToTable("CDBO_ParametrosAnaliticos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CdboPedidosPendientesImportar", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idpedido")
                        .HasColumnType("int")
                        .HasColumnName("IDPedido");

                    b.Property<double?>("Importe")
                        .HasColumnType("float");

                    b.Property<string>("MetodoPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Referencia")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable("CDBO_PedidosPendientesImportar", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CdboProductosXYField", b =>
                {
                    b.Property<int>("Idfield")
                        .HasColumnType("int")
                        .HasColumnName("IDField");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Currency")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayFormat")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("bit");

                    b.HasKey("Idfield");

                    b.ToTable("CDBO_ProductosX_Y_Fields", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CdbpProcess", b =>
                {
                    b.Property<int>("Idprocess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProcess");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idprocess"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasDefaultValueSql("('')")
                        .HasComment("Formato: CDBP_DDDD, del 3000 en adelante reservados para el usuario");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Hint")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Indica si el proceso es visible para los usuarios del ERP");

                    b.Property<int>("TipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1 > Proceso monolítico que se ejecuta en SIDBS");

                    b.HasKey("Idprocess");

                    b.HasIndex(new[] { "Codigo" }, "UIX_CDBP_Processes_Codigo")
                        .IsUnique();

                    b.ToTable("CDBP_Processes", null, t =>
                        {
                            t.HasTrigger("tr_CDBP_Processes_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.CdbpStep", b =>
                {
                    b.Property<int>("Idstep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDStep");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idstep"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("IdguidConnection")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDGUID_Connection");

                    b.Property<string>("LibraryName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("MethodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MethodTypeID")
                        .HasComment("1 > StoredProc; 2 > Llamada a código compilado (se comprueba LibraryName)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessID");

                    b.HasKey("Idstep");

                    b.HasIndex("ProcessId");

                    b.ToTable("CDBP_Steps", null, t =>
                        {
                            t.HasTrigger("tr_CDBP_Steps_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.CentrosTipo", b =>
                {
                    b.Property<int>("IdcentroTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDCentroTipo");

                    b.Property<string>("CampoLookup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CampoResultado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ConCualificacion")
                        .HasColumnType("bit");

                    b.Property<bool>("ConOperacion")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TablaLookup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdcentroTipo");

                    b.ToTable("CentrosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.CentrosTrabajo", b =>
                {
                    b.Property<int>("Idcentro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCentro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcentro"));

                    b.Property<double>("Capacidad")
                        .HasColumnType("float");

                    b.Property<bool>("CentroExterno")
                        .HasColumnType("bit");

                    b.Property<int>("CualificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CualificacionID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<decimal>("PhoraExtra")
                        .HasColumnType("money")
                        .HasColumnName("PHoraExtra");

                    b.Property<decimal>("PhoraExtraFestivo")
                        .HasColumnType("money")
                        .HasColumnName("PHoraExtraFestivo");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<decimal>("PrimaCompensacionFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaLaborable")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaMensual")
                        .HasColumnType("money");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idcentro");

                    b.HasIndex("CualificacionId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("CentrosTrabajo", null, t =>
                        {
                            t.HasTrigger("tr_CentrosTrabajo_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Certificacione", b =>
                {
                    b.Property<int>("Idcertificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCertificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcertificacion"));

                    b.Property<int?>("Avdliquidacion")
                        .HasColumnType("int")
                        .HasColumnName("AVDLiquidacion");

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CuentaContable")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DocumentoOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoOrigenID");

                    b.Property<int?>("FacturaDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaDestinoID");

                    b.Property<int?>("FacturaDetalleDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaDetalleDestinoID");

                    b.Property<DateTime>("FechaEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaFactura")
                        .HasColumnType("datetime");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<double?>("Importe")
                        .HasColumnType("float");

                    b.Property<int>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("Numero")
                        .HasMaxLength(28)
                        .IsUnicode(false)
                        .HasColumnType("varchar(28)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("Idcertificacion");

                    b.HasIndex("Avdliquidacion");

                    b.HasIndex("FacturaDetalleDestinoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("MedioId");

                    b.ToTable("Certificaciones", t =>
                        {
                            t.HasTrigger("tr_Certificaciones_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Cliente", b =>
                {
                    b.Property<int>("Idpersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPersona");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpersona"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<string>("AvEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("AV_Email");

                    b.Property<bool>("AvEnvioEmailReq")
                        .HasColumnType("bit")
                        .HasColumnName("AV_EnvioEmailReq");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CifNif")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<bool>("CopiaImpresa")
                        .HasColumnType("bit");

                    b.Property<bool>("CrmFidelizacion")
                        .HasColumnType("bit")
                        .HasColumnName("CRM_Fidelizacion")
                        .HasComment("Indica si lleva Gesti¥n de fidelizaci¥n de puntos para el m¥dulo de CRM");

                    b.Property<int?>("CuentaBancariaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaBancariaEmpresaID");

                    b.Property<int?>("CuentaBancariaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaBancariaID")
                        .HasComment("Cuenta bancaria por defecto para documentos");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<int?>("DescuentoId")
                        .HasColumnType("int")
                        .HasColumnName("DescuentoID");

                    b.Property<int?>("DireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionEntregaID");

                    b.Property<int?>("DireccionFraId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionFraID");

                    b.Property<decimal>("DtoComercial")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Efectos")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<bool>("ExentoIva")
                        .HasColumnType("bit")
                        .HasColumnName("ExentoIVA");

                    b.Property<bool>("Facturae")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FeEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("FE_Email");

                    b.Property<int?>("FeFormatoId")
                        .HasColumnType("int")
                        .HasColumnName("FE_FormatoID");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<bool>("M347Excluir")
                        .HasColumnType("bit")
                        .HasColumnName("M347_Excluir");

                    b.Property<int?>("MedioPagoId")
                        .HasColumnType("int")
                        .HasColumnName("MedioPagoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("NotasIntAviso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("NotasInt_Aviso")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Nproveedor")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NProveedor");

                    b.Property<string>("PaginaWeb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RappelId")
                        .HasColumnType("int")
                        .HasColumnName("RappelID");

                    b.Property<bool>("RecargoEq")
                        .HasColumnType("bit");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<string>("TaiEmailAviso")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TAI_EmailAviso");

                    b.Property<string>("TaiTelefono1Aviso")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("TAI_Telefono1Aviso");

                    b.Property<string>("TaiTelefono2Aviso")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("TAI_Telefono2Aviso")
                        .HasComment("Este normalmente será el móvil para SMS");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TipoFacturacionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoFacturacionID");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<int?>("TipoIdentificacionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoIdentificacionID");

                    b.Property<int?>("TipoPorteId")
                        .HasColumnType("int")
                        .HasColumnName("TipoPorteID");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.HasKey("Idpersona");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("DireccionEntregaId");

                    b.HasIndex("FeFormatoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("SerieId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Clientes_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("Clientes", t =>
                        {
                            t.HasTrigger("Clientes_CRM");

                            t.HasTrigger("Clientes_Delete_CDBO");

                            t.HasTrigger("tr_Clientes_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("Clientes_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesCentrosAdministrativo", b =>
                {
                    b.Property<int>("IdcentroAdministrativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCentroAdministrativo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcentroAdministrativo"));

                    b.Property<string>("OcCodigo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("OC_Codigo")
                        .HasComment("Oficina Contable Código");

                    b.Property<string>("OcNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("OC_Nombre")
                        .HasComment("Oficina Contable Nombre");

                    b.Property<string>("OgCodigo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("OG_Codigo")
                        .HasComment("Organo Gestor Código");

                    b.Property<string>("OgNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("OG_Nombre")
                        .HasComment("Organo Gestor Nombre");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("UtCodigo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("UT_Codigo")
                        .HasComment("Unidad Tramitadora Código");

                    b.Property<string>("UtNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("UT_Nombre")
                        .HasComment("Unidad Tramitadora Nombre");

                    b.HasKey("IdcentroAdministrativo");

                    b.HasIndex("PersonaId");

                    b.ToTable("ClientesCentrosAdministrativos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cargo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ContactoTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactoTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Departamento")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Notas")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("PersonaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Telefono1")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("Telefono2")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("ContactoTipoId");

                    b.HasIndex("PersonaDireccionId", "PersonaId");

                    b.HasIndex(new[] { "Id", "PersonaId" }, "IX_ClientesContactos")
                        .IsUnique();

                    b.HasIndex(new[] { "PersonaId" }, "IX_ClientesContactos_PersonaID");

                    b.ToTable("ClientesContactos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesContactosTipo", b =>
                {
                    b.Property<int>("IdcontactoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDContactoTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcontactoTipo"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdcontactoTipo");

                    b.ToTable("ClientesContactosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesCuentasBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Iban")
                        .HasColumnType("bit")
                        .HasColumnName("IBAN");

                    b.Property<string>("Ibancodigo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("IBANCodigo");

                    b.Property<string>("Ibancuenta")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("varchar(34)")
                        .HasColumnName("IBANCuenta");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumCta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Swift1")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("SWIFT1");

                    b.Property<string>("Swift2")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWIFT2");

                    b.Property<string>("Swift3")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWIFT3");

                    b.Property<string>("Swift4")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("SWIFT4");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("ClientesCuentasBancarias");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Clientes_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDepartamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ClientesDepartamentos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDescuento", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<bool>("ApplySubfamilias")
                        .HasColumnType("bit")
                        .HasColumnName("Apply_Subfamilias");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.HasKey("PersonaId", "FamiliaId");

                    b.HasIndex("FamiliaId");

                    b.ToTable("ClientesDescuentos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDescuentosRoot", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.HasKey("PersonaId", "ProductoTipoId");

                    b.HasIndex("ProductoTipoId");

                    b.ToTable("ClientesDescuentos_Root", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDiasPago", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("DiaInicio")
                        .HasColumnType("int");

                    b.Property<int>("DiaFin")
                        .HasColumnType("int");

                    b.HasKey("PersonaId", "DiaInicio")
                        .HasName("PK_Tabla2");

                    b.ToTable("ClientesDiasPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDireccione", b =>
                {
                    b.Property<int>("IdpersonaDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPersonaDireccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpersonaDireccion"));

                    b.Property<bool?>("Activa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Horario")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Instalacion")
                        .HasColumnType("bit");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int")
                        .HasColumnName("LocalidadID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.Property<int?>("TipoDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDireccionID");

                    b.Property<int?>("TipoInstalacionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoInstalacionID");

                    b.HasKey("IdpersonaDireccion");

                    b.HasIndex("Idcdbo");

                    b.HasIndex(new[] { "LocalidadId", "ProvinciaId", "PaisId" }, "IX_ClientesDireccion_LocProvPais");

                    b.HasIndex(new[] { "IdpersonaDireccion", "PersonaId" }, "IX_ClientesDirecciones")
                        .IsUnique();

                    b.HasIndex(new[] { "LocalidadId" }, "IX_ClientesDirecciones_LocalidadID");

                    b.HasIndex(new[] { "PaisId" }, "IX_ClientesDirecciones_PaisID");

                    b.HasIndex(new[] { "PersonaId" }, "IX_ClientesDirecciones_PersonaID");

                    b.HasIndex(new[] { "ProvinciaId" }, "IX_ClientesDirecciones_ProvinciaID");

                    b.ToTable("ClientesDirecciones", t =>
                        {
                            t.HasTrigger("ClientesDirecciones_Delete_CDBO");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDireccionesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("ClientesDirecciones_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesMandato", b =>
                {
                    b.Property<int>("Idmandato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMandato");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmandato"));

                    b.Property<int?>("CuentaBancariaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaBancariaID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Ffirma")
                        .HasColumnType("datetime")
                        .HasColumnName("FFirma");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<bool>("Puntual")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenciaMandato")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("TipoMandatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoMandatoID")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idmandato");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("PersonaId");

                    b.ToTable("ClientesMandatos", t =>
                        {
                            t.HasTrigger("trClientesMandatos_Generar");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesPeriodosExentosPago", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PersonaId", "FechaInicio");

                    b.ToTable("ClientesPeriodosExentosPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("clientesRole", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesTelefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PersonaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Telefono")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaDireccionId");

                    b.HasIndex("PersonaId");

                    b.ToTable("ClientesTelefonos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtipo");

                    b.HasIndex(new[] { "Nombre" }, "IX_ClientesTipos")
                        .IsUnique();

                    b.ToTable("ClientesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesTipoIdentificacion", b =>
                {
                    b.Property<int>("IdtipoIdentificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoIdentificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoIdentificacion"));

                    b.Property<string>("TipoIdentificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdtipoIdentificacion");

                    b.ToTable("ClientesTipoIdentificacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("ClientesUsers");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_clientesUserClaim_UserId");

                    b.ToTable("clientesUserClaim", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_clientesUserLogin_UserId");

                    b.ToTable("clientesUserLogin", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUsertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("clientesUsertoken", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Clientesroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_clientesroleclaim_RoleId");

                    b.ToTable("clientesroleclaim", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Comarca", b =>
                {
                    b.Property<int>("Idcomarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComarca");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcomarca"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.HasKey("Idcomarca");

                    b.HasIndex("PaisId");

                    b.ToTable("Comarcas");
                });

            modelBuilder.Entity("login4.Models.EF.Comerciale", b =>
                {
                    b.Property<int>("Idcomercial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComercial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcomercial"));

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComercialTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialTipoID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ComisionResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionResponsableID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<bool>("Externo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.HasKey("Idcomercial");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComercialTipoId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ComisionResponsableId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Comerciales");
                });

            modelBuilder.Entity("login4.Models.EF.ComercialesTipo", b =>
                {
                    b.Property<int>("IdcomercialTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComercialTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcomercialTipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdcomercialTipo");

                    b.ToTable("ComercialesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.Comisione", b =>
                {
                    b.Property<int>("Idcomision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComision");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcomision"));

                    b.Property<decimal?>("ComisionFija")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idcomision");

                    b.ToTable("Comisiones");
                });

            modelBuilder.Entity("login4.Models.EF.ComisionesDetalle", b =>
                {
                    b.Property<int>("IdcomisionDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComisionDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcomisionDetalle"));

                    b.Property<double>("CantidadDesde")
                        .HasColumnType("float");

                    b.Property<double>("Comision")
                        .HasColumnType("float");

                    b.Property<int>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("IdcomisionDetalle");

                    b.HasIndex("OperacionId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.HasIndex(new[] { "ComisionId", "ProductoId", "CantidadDesde" }, "IX_ComisionesDetalle")
                        .IsUnique();

                    b.ToTable("ComisionesDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ComisionesOperacione", b =>
                {
                    b.Property<int>("Idoperacion")
                        .HasColumnType("int")
                        .HasColumnName("IDOperacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idoperacion");

                    b.ToTable("ComisionesOperaciones");
                });

            modelBuilder.Entity("login4.Models.EF.ConceptosContabilidad", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Clave");

                    b.ToTable("ConceptosContabilidad", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ConceptosRetencion", b =>
                {
                    b.Property<int>("IdconceptoRetencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDConceptoRetencion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdconceptoRetencion"));

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CtaCompras")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("CtaVentas")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.HasKey("IdconceptoRetencion");

                    b.HasIndex("CtaCompras");

                    b.HasIndex("CtaVentas");

                    b.ToTable("ConceptosRetencion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ConexionContum", b =>
                {
                    b.Property<string>("ConceptoFactura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Concepto_Factura");

                    b.Property<string>("ConceptoRecibo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Concepto_Recibo");

                    b.Property<string>("CuentaFactura1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_Factura_1");

                    b.Property<string>("CuentaFactura2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_Factura_2");

                    b.Property<string>("CuentaRecibo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_Recibo");

                    b.Property<string>("LugarConexion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Lugar_Conexion");

                    b.ToTable("ConexionConta");
                });

            modelBuilder.Entity("login4.Models.EF.ConfiguracionBloque", b =>
                {
                    b.Property<int>("IdconfiguracionBloque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDConfiguracionBloque");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdconfiguracionBloque"));

                    b.Property<string>("Ak")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("AK");

                    b.Property<string>("Dle")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DLE");

                    b.Property<string>("Dle0")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DLE0");

                    b.Property<string>("Dle1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DLE1");

                    b.Property<string>("Enq")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ENQ");

                    b.Property<string>("Eot")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("EOT");

                    b.Property<string>("Etb")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ETB");

                    b.Property<string>("Etx")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ETX");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("ModeloID");

                    b.Property<string>("Nak")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NAK");

                    b.Property<string>("Stx")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("STX");

                    b.HasKey("IdconfiguracionBloque");

                    b.HasIndex("ModeloId");

                    b.ToTable("ConfiguracionBloques");
                });

            modelBuilder.Entity("login4.Models.EF.ConfiguracionEmpresa", b =>
                {
                    b.Property<int>("Idempresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpresa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idempresa"));

                    b.Property<string>("AliasReport")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodigoCuentaCotizacion")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength();

                    b.Property<string>("Cp")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CP");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<Guid?>("Idguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDGUID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LaboratorioCodigo")
                        .HasColumnType("int");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int")
                        .HasColumnName("LocalidadID");

                    b.Property<string>("NifCif")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NIF_CIF");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<byte>("NumeroEmpresa")
                        .HasColumnType("tinyint");

                    b.Property<string>("PaginaWeb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.Property<bool>("RegimenEspecial")
                        .HasColumnType("bit")
                        .HasColumnName("Regimen_Especial");

                    b.Property<string>("Registro")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("RegistroIntracomunitario")
                        .HasColumnType("bit")
                        .HasColumnName("Registro_Intracomunitario");

                    b.Property<string>("Rgpdtext")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("RGPDText");

                    b.Property<string>("Telefono1")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Telefono2")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.HasKey("Idempresa");

                    b.ToTable("ConfiguracionEmpresa", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ConfiguracionEmpresaCtum", b =>
                {
                    b.Property<int>("Idctaempresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCTAEmpresa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idctaempresa"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<string>("LiActividadGrupoCDef")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("LI_ActividadGrupo_C_def")
                        .IsFixedLength();

                    b.Property<string>("LiActividadGrupoVDef")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("LI_ActividadGrupo_V_def")
                        .IsFixedLength();

                    b.Property<string>("LiActividadTipoCDef")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LI_ActividadTipo_C_def")
                        .IsFixedLength();

                    b.Property<string>("LiActividadTipoVDef")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LI_ActividadTipo_V_def")
                        .IsFixedLength();

                    b.Property<string>("LiConceptoCDef")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("LI_Concepto_C_def")
                        .IsFixedLength();

                    b.Property<string>("LiConceptoVDef")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("LI_Concepto_V_def")
                        .IsFixedLength();

                    b.Property<bool>("M303")
                        .HasColumnType("bit");

                    b.Property<int?>("M303CcbdevolucionId")
                        .HasColumnType("int")
                        .HasColumnName("M303_CCBDevolucionID");

                    b.Property<int?>("M303CcbingresoId")
                        .HasColumnType("int")
                        .HasColumnName("M303_CCBIngresoID");

                    b.Property<bool>("M303InscritoRegistroDevMensual")
                        .HasColumnType("bit")
                        .HasColumnName("M303_InscritoRegistroDevMensual");

                    b.Property<string>("M303Path")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("M303_Path");

                    b.Property<int?>("M303Periodicidad")
                        .HasColumnType("int")
                        .HasColumnName("M303_Periodicidad");

                    b.Property<string>("SiiNifrepresentanteLegal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("SII_NIFRepresentanteLegal")
                        .IsFixedLength();

                    b.Property<int?>("TerritorioId")
                        .HasColumnType("int")
                        .HasColumnName("TerritorioID");

                    b.HasKey("Idctaempresa");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("M303CcbdevolucionId");

                    b.HasIndex("M303CcbingresoId");

                    b.HasIndex("TerritorioId");

                    b.ToTable("ConfiguracionEmpresa_CTA", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccione", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("ActualFinish")
                        .HasColumnType("int");

                    b.Property<int?>("ActualStart")
                        .HasColumnType("int");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("AppointmentItemEntryId")
                        .HasMaxLength(140)
                        .IsUnicode(false)
                        .HasColumnType("varchar(140)")
                        .HasColumnName("AppointmentItem_EntryID");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<int?>("CabeceraRecurrenceId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraRecurrenceID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<int?>("ComercialEmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialEmpleadoID");

                    b.Property<int>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<decimal>("Coste")
                        .HasColumnType("money");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoAccionId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoAccionID");

                    b.Property<int>("EstadoComercialEmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoComercialEmpleadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int>("IniciativaId")
                        .HasColumnType("int")
                        .HasColumnName("IniciativaID");

                    b.Property<int>("LabelColor")
                        .HasColumnType("int");

                    b.Property<string>("Lugar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("Motivo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notas")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("OportunidadId")
                        .HasColumnType("int")
                        .HasColumnName("OportunidadID");

                    b.Property<int?>("Options")
                        .HasColumnType("int");

                    b.Property<string>("Origen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PersonaContactoId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaContactoID");

                    b.Property<int?>("PersonaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("RecurrenceIndex")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReminderMinutesBeforeStart")
                        .HasColumnType("int");

                    b.Property<string>("ReminderResourcesData")
                        .HasColumnType("text");

                    b.Property<int?>("ResultadoId")
                        .HasColumnType("int")
                        .HasColumnName("ResultadoID");

                    b.Property<int?>("TaskComplete")
                        .HasColumnType("int");

                    b.Property<int?>("TaskIndex")
                        .HasColumnType("int");

                    b.Property<string>("TaskLinks")
                        .HasColumnType("text");

                    b.Property<int?>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<int?>("TipoAccionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoAccionID");

                    b.HasKey("Idcabecera")
                        .HasName("PK_CRM_Acciones_1");

                    b.HasIndex("CabeceraOrigenId");

                    b.HasIndex("CabeceraRecurrenceId");

                    b.HasIndex("ComercialEmpleadoId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoAccionId");

                    b.HasIndex("IniciativaId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ResultadoId");

                    b.HasIndex("TipoAccionId");

                    b.HasIndex("PersonaContactoId", "PersonaId");

                    b.HasIndex("PersonaDireccionId", "PersonaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_CRM_Acciones_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("CRM_Acciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("CRM_Acciones_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("FontColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("Traspaso")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idestado");

                    b.ToTable("CRM_AccionesEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesIniciativa", b =>
                {
                    b.Property<int>("Idiniciativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDIniciativa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idiniciativa"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Idiniciativa");

                    b.ToTable("CRM_AccionesIniciativas", null, t =>
                        {
                            t.HasTrigger("CRM_AccionesIniciativas_SetOrden");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesMedio", b =>
                {
                    b.Property<int>("Idmedio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMedio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmedio"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idmedio");

                    b.ToTable("CRM_AccionesMedios", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesResultado", b =>
                {
                    b.Property<int>("Idresultado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDResultado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idresultado"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idresultado")
                        .HasName("PK_CRM_AccionesResultado");

                    b.ToTable("CRM_AccionesResultados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TipoGenericoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoGenericoID");

                    b.HasKey("Idtipo");

                    b.HasIndex("TipoGenericoId");

                    b.ToTable("CRM_AccionesTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesTiposGenerico", b =>
                {
                    b.Property<int>("IdtipoGenerico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoGenerico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoGenerico"));

                    b.Property<int?>("LabelColor")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdtipoGenerico")
                        .HasName("PK_CRM_Acciones_TiposGenerico");

                    b.ToTable("CRM_AccionesTiposGenericos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanya", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<DateTime?>("FsigEmision")
                        .HasColumnType("datetime")
                        .HasColumnName("FSigEmision");

                    b.Property<DateTime?>("FultEmision")
                        .HasColumnType("datetime")
                        .HasColumnName("FUltEmision");

                    b.Property<bool?>("Generico")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Objetivos")
                        .HasColumnType("text");

                    b.Property<int>("TipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_CRM_Campanyas")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("CRM_Campanyas", null, t =>
                        {
                            t.HasTrigger("CRM_Campanyas_Delete_CDBO");

                            t.HasTrigger("MaxCRM_CampanyasAnno");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("CRM_Campanyas_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasCriterio", b =>
                {
                    b.Property<int>("Idcriterio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCriterio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcriterio"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("CampoCriterioId")
                        .HasColumnType("int")
                        .HasColumnName("CampoCriterioID");

                    b.Property<string>("Clausula")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<int>("OperadorId")
                        .HasColumnType("int")
                        .HasColumnName("OperadorID");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idcriterio");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("CampoCriterioId");

                    b.ToTable("CRM_CampanyasCriterios", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDestinatario", b =>
                {
                    b.Property<int>("Iddestinatario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDestinatario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddestinatario"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("Iddestinatario");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("PersonaId");

                    b.ToTable("CRM_CampanyasDestinatarios", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID");

                    b.Property<DateTime>("Femision")
                        .HasColumnType("datetime")
                        .HasColumnName("FEmision");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idlinea");

                    b.HasIndex("DocumentoId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_CRM_CampanyasDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_CRM_CampanyasDetalle_CabeceraID");

                    b.ToTable("CRM_CampanyasDetalle", null, t =>
                        {
                            t.HasTrigger("CRM_CampanyasDetalle_Delete_CDBO");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("CRM_CampanyasDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDocumento", b =>
                {
                    b.Property<int>("Iddocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddocumento"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Fichero")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("FormatoId")
                        .HasColumnType("int")
                        .HasColumnName("FormatoID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("Iddocumento");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("FormatoId");

                    b.HasIndex("TipoId");

                    b.ToTable("CRM_CampanyasDocumentos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasEmisionesTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("CRM_CampanyasEmisionesTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("CRM_CampanyasEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasSeguimiento", b =>
                {
                    b.Property<int>("Idseguimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSeguimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idseguimiento"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("DestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("DestinatarioID");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Respuesta")
                        .HasColumnType("text");

                    b.HasKey("Idseguimiento");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DestinatarioId");

                    b.ToTable("CRM_CampanyasSeguimientos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("CRM_CampanyasTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCamposCriterio", b =>
                {
                    b.Property<int>("IdcampoCriterio")
                        .HasColumnType("int")
                        .HasColumnName("IDCampoCriterio")
                        .HasComment("ID 1-100 para Fijos; Segmentos a partir de 100");

                    b.Property<string>("FieldName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Funcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SegmentoId")
                        .HasColumnType("int")
                        .HasColumnName("SegmentoID");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdcampoCriterio");

                    b.HasIndex("SegmentoId");

                    b.ToTable("CRM_CamposCriterios", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCanje", b =>
                {
                    b.Property<int>("Idcanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCanje");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcanje"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TiempoCaducidad")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorFijo")
                        .HasColumnType("money");

                    b.HasKey("Idcanje");

                    b.ToTable("CRM_Canjes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmCanjesDetalle", b =>
                {
                    b.Property<int>("IdcanjeDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCanjeDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcanjeDetalle"));

                    b.Property<int>("CanjeId")
                        .HasColumnType("int")
                        .HasColumnName("CanjeID");

                    b.Property<string>("Obsequio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PuntosDesde")
                        .HasColumnType("int");

                    b.Property<decimal>("Vale")
                        .HasColumnType("money");

                    b.HasKey("IdcanjeDetalle");

                    b.HasIndex("CanjeId");

                    b.ToTable("CRM_CanjesDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPunto", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PuntosActuales")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Actuales");

                    b.Property<int>("PuntosAcumulados")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Acumulados");

                    b.Property<int>("PuntosSobrantes")
                        .HasColumnType("int")
                        .HasColumnName("Puntos_Sobrantes");

                    b.HasKey("PersonaId");

                    b.ToTable("CRM_ClientesPuntos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPuntosCabecera", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int>("DocumentoGestionCabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionCabeceraID");

                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("FechaLiquidacion")
                        .HasColumnType("datetime");

                    b.Property<int?>("LiquidacionId")
                        .HasColumnType("int")
                        .HasColumnName("LiquidacionID");

                    b.Property<bool>("Liquidado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("Idcabecera");

                    b.HasIndex("DocumentoGestionId");

                    b.HasIndex("LiquidacionId");

                    b.HasIndex(new[] { "PersonaId", "DocumentoGestionId", "DocumentoGestionCabeceraId" }, "IX_CRM_ClientesPuntosCabeceras_CabeceraDocGest")
                        .IsUnique();

                    b.ToTable("CRM_ClientesPuntosCabeceras", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPuntosDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("DocumentoGestionLineaId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionLineaID");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.Property<int?>("PuntosTablaDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("PuntosTablaDetalleID");

                    b.Property<int>("PuntosTablaId")
                        .HasColumnType("int")
                        .HasColumnName("PuntosTablaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("PuntosTablaId");

                    b.HasIndex("PuntosTablaDetalleId", "PuntosTablaId", "ProductoId");

                    b.HasIndex(new[] { "CabeceraId", "DocumentoGestionLineaId" }, "IX_CRM_ClientesPuntosDetalle_LineaDoc")
                        .IsUnique();

                    b.ToTable("CRM_ClientesPuntosDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesSegmento", b =>
                {
                    b.Property<int>("IdclienteSegmento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDClienteSegmento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdclienteSegmento"));

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("SegmentoId")
                        .HasColumnType("int")
                        .HasColumnName("SegmentoID");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IdclienteSegmento");

                    b.HasIndex("ContactoId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SegmentoId");

                    b.ToTable("CRM_ClientesSegmentos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmDocumentosTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("CRM_DocumentosTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmLiquidacione", b =>
                {
                    b.Property<int>("Idliquidacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLiquidacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idliquidacion"));

                    b.Property<int>("CanjeId")
                        .HasColumnType("int")
                        .HasColumnName("CanjeID");

                    b.Property<bool>("Canjeado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCaducidad")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaLiquidacion")
                        .HasColumnType("datetime");

                    b.Property<string>("Obsequio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.Property<decimal>("Vale")
                        .HasColumnType("money");

                    b.HasKey("Idliquidacion");

                    b.HasIndex("CanjeId");

                    b.HasIndex("PersonaId");

                    b.ToTable("CRM_Liquidaciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmOportunidade", b =>
                {
                    b.Property<int>("Idoportunidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOportunidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idoportunidad"));

                    b.Property<string>("Asunto")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.HasKey("Idoportunidad");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("PrioridadId");

                    b.ToTable("CRM_Oportunidades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmOportunidadesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<string>("FontColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("CRM_OportunidadesEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmOportunidadesPrioridade", b =>
                {
                    b.Property<int>("Idprioridad")
                        .HasColumnType("int")
                        .HasColumnName("IDPrioridad");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("ImageIndex")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Idprioridad");

                    b.ToTable("CRM_OportunidadesPrioridades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmPuntosTabla", b =>
                {
                    b.Property<int>("IdpuntosTabla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPuntosTabla");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpuntosTabla"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorFijo")
                        .HasColumnType("money");

                    b.HasKey("IdpuntosTabla");

                    b.ToTable("CRM_PuntosTabla", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmPuntosTablaDetalle", b =>
                {
                    b.Property<int>("IdpuntosTablaDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPuntosTablaDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpuntosTablaDetalle"));

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("PuntosTablaId")
                        .HasColumnType("int")
                        .HasColumnName("PuntosTablaID");

                    b.Property<decimal>("ValorPunto")
                        .HasColumnType("money");

                    b.HasKey("IdpuntosTablaDetalle");

                    b.HasIndex("ProductoId");

                    b.HasIndex(new[] { "PuntosTablaId", "ProductoId" }, "IX_CRM_PuntosTablaDetalle")
                        .IsUnique();

                    b.HasIndex(new[] { "IdpuntosTablaDetalle", "PuntosTablaId", "ProductoId" }, "IX_CRM_PuntosTablaDetalle_PK_PuntosTablaID_ProductoID")
                        .IsUnique();

                    b.ToTable("CRM_PuntosTablaDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmSegmento", b =>
                {
                    b.Property<int>("Idsegmento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSegmento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsegmento"));

                    b.Property<int?>("ComboListId")
                        .HasColumnType("int")
                        .HasColumnName("ComboListID");

                    b.Property<bool>("Contacto")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsrTypeID");

                    b.HasKey("Idsegmento");

                    b.HasIndex("UsrTypeId");

                    b.ToTable("CRM_Segmentos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CrmTarjetasFidelizacion", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("NumeroTarjeta")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("1: Tarjeta Activa. 0: Tarjeta Inactiva");

                    b.HasKey("PersonaId", "NumeroTarjeta");

                    b.ToTable("CRM_TarjetasFidelizacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CtaAeatTerritorio", b =>
                {
                    b.Property<int>("Idterritorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTerritorio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idterritorio"));

                    b.Property<decimal>("M303PerCent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("M303_PerCent")
                        .HasDefaultValueSql("((100))");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idterritorio");

                    b.ToTable("CTA_AEAT_Territorios", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CtaAsientosOrigene", b =>
                {
                    b.Property<int>("Idorigen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOrigen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idorigen"));

                    b.Property<int?>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idorigen");

                    b.HasIndex("DocumentoGestionId");

                    b.ToTable("CTA_AsientosOrigenes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.CtaCentroCoste", b =>
                {
                    b.Property<int>("IdcentroCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCentroCoste");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcentroCoste"));

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsDetail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.HasKey("IdcentroCoste");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("SeccionId", "DepartamentoId");

                    b.ToTable("CTA_CentroCoste", null, t =>
                        {
                            t.HasTrigger("CTA_CentroCoste_Calcular_Codigo");

                            t.HasTrigger("CTA_CentroCoste_IsDetail");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.CtaCuentasIntercambio", b =>
                {
                    b.Property<int>("Idintercambio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDIntercambio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idintercambio"));

                    b.Property<string>("CuentaDestino")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CuentaOrigen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaDesde")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaHasta")
                        .HasColumnType("datetime");

                    b.HasKey("Idintercambio");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("CTA_Cuentas_Intercambio", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Cualificacione", b =>
                {
                    b.Property<int>("Idcualificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCualificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcualificacion"));

                    b.Property<int>("AtributoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoID")
                        .HasComment("Referencia a la tabla AtributosProducto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<int>("ValorId")
                        .HasColumnType("int")
                        .HasColumnName("ValorID")
                        .HasComment("Referencia a la tabla ValoresProductos");

                    b.HasKey("Idcualificacion");

                    b.HasIndex("ValorId");

                    b.HasIndex(new[] { "AtributoId", "ValorId" }, "IX_Cualificaciones_Atributo_Valor")
                        .IsUnique();

                    b.ToTable("Cualificaciones");
                });

            modelBuilder.Entity("login4.Models.EF.CualificacionesAtributo", b =>
                {
                    b.Property<int>("AtributoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoID");

                    b.HasKey("AtributoId");

                    b.ToTable("CualificacionesAtributos");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamico"));

                    b.Property<int?>("ComboListId")
                        .HasColumnType("int")
                        .HasColumnName("ComboListID");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsrTypeID");

                    b.HasKey("IddatoDinamico");

                    b.HasIndex("UsrTypeId");

                    b.ToTable("DatosDinamicos");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamicosGsEntidade", b =>
                {
                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID")
                        .HasComment("Determina la CategorÝa en la que aparecerß la Entidad (0 = Documentos de Gesti¾n, 1 = Productos, 2 = Clientes)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("EntidadId");

                    b.ToTable("DatosDinamicos_GS_Entidades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamicosGsEntidadesDef", b =>
                {
                    b.Property<int>("IddatoDinamicoGsEntidadDef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoGS_EntidadDef");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoGsEntidadDef"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("DatoDinamicoId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoID");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<bool?>("Precargar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IddatoDinamicoGsEntidadDef");

                    b.HasIndex("DatoDinamicoId");

                    b.HasIndex("EntidadId");

                    b.ToTable("DatosDinamicos_GS_EntidadesDef", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DatosIva", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Dinero")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<decimal>("General")
                        .HasColumnType("decimal(18, 4)");

                    b.ToTable((string)null);

                    b.ToView("DatosIVA", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DatosMovimientoCaja", b =>
                {
                    b.Property<decimal?>("Acuenta")
                        .HasColumnType("money")
                        .HasColumnName("ACuenta");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("DtoTotal")
                        .HasColumnType("money");

                    b.Property<decimal?>("Entra")
                        .HasColumnType("money");

                    b.Property<decimal?>("Sale")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("DatosMovimientoCaja", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DatosTicket", b =>
                {
                    b.Property<int?>("Caja")
                        .HasColumnType("int");

                    b.Property<double?>("Cantidad")
                        .HasColumnType("float");

                    b.Property<string>("Cliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CodProd")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Empleado")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<decimal?>("PrecioVentaRebajado")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Producto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("Pvp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PVP");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalNeto")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable((string)null);

                    b.ToView("DatosTicket", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Departamento", b =>
                {
                    b.Property<int>("Iddepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddepartamento"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Iddepartamento");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("login4.Models.EF.Descuento", b =>
                {
                    b.Property<int>("Iddescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDescuento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddescuento"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("money");

                    b.HasKey("Iddescuento");

                    b.ToTable("Descuentos");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("DevolucionesVenta_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadDevolucion")
                        .HasColumnType("float");

                    b.Property<double>("CantidadDevolucionPrevista")
                        .HasColumnType("float");

                    b.Property<double>("CantidadOrigen")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaDevolucionPrevista")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_DevolucionesVentaDetalle_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("DevolucionesVentaDetalle", null, t =>
                        {
                            t.HasTrigger("DevolucionesVentaDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateDGDUbicacionesFromDevolucionesVentaDetalle");

                            t.HasTrigger("tr_DVD_UpdateStateDV");

                            t.HasTrigger("tr_DevolucionesVentaDetalle_AfterDelete");

                            t.HasTrigger("tr_DevolucionesVentaDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_DevolucionesVentaDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_DevolucionesVentaDetalle_Update_NumLinea");

                            t.HasTrigger("tr_DevolucionesVenta_TotalesCabecera");

                            t.HasTrigger("tr_DevolucionesVenta_UpdatePortes");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("DevolucionesVentaDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("DevolucionesVentaEstados");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentum", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int")
                        .HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<bool>("DirRecogida")
                        .HasColumnType("bit");

                    b.Property<int?>("DirRecogidaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("DirRecogida_DireccionID");

                    b.Property<int?>("DirRecogidaEntidadOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DirRecogida_EntidadOrigenID");

                    b.Property<int?>("DirRecogidaKeyFieldValueId")
                        .HasColumnType("int")
                        .HasColumnName("DirRecogida_KeyFieldValueID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaAviso")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaDevolucionPrevista")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("PreAviso")
                        .HasColumnType("bit");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoId1")
                        .HasColumnType("int")
                        .HasColumnName("TipoID_1");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("DirRecogidaEntidadOrigenId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_DevolucionesVenta_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_DevolucionesVenta_PersonaID_EjercicioID");

                    b.ToTable("DevolucionesVenta", t =>
                        {
                            t.HasTrigger("Act_Num_DevolucionesVenta");

                            t.HasTrigger("DevolucionesVenta_Delete_CDBO");

                            t.HasTrigger("tr_DevolucionVenta_UpdateFromDescuento");

                            t.HasTrigger("tr_DevolucionesVenta_MaxAnno_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.DgDgdireccione", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DgdireccionId")
                        .HasColumnType("int")
                        .HasColumnName("DGDireccionID");

                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.HasIndex("DgdireccionId");

                    b.HasIndex("DocumentoGestionId");

                    b.ToTable("DG_DGDirecciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DgDireccione", b =>
                {
                    b.Property<int>("Iddgdireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDGDireccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddgdireccion"));

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int")
                        .HasColumnName("LocalidadID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.Property<int?>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.HasKey("Iddgdireccion");

                    b.ToTable("DG_Direcciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DgdUbicacione", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("Iddgdu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDdgdu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddgdu"));

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("DocumentoGestionId", "LineaId", "UbicacionId", "LoteId");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UnidadMedidaId");

                    b.ToTable("DGD_Ubicaciones", null, t =>
                        {
                            t.HasTrigger("UpdateMovimientosAlmacenFromDGD_Ubicaciones");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Diario", b =>
                {
                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int>("Asiento")
                        .HasColumnType("int");

                    b.Property<int>("Apunte")
                        .HasColumnType("int");

                    b.Property<int?>("Anno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(datepart(year,getdate()))");

                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Concepto")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<bool>("Descuadre")
                        .HasColumnType("bit");

                    b.Property<string>("Dh")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DH");

                    b.Property<bool>("ExcluirListadosEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Exportado")
                        .HasColumnType("bit");

                    b.Property<string>("Factura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FacturaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaExp")
                        .HasColumnType("datetime");

                    b.Property<int>("Iddiario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDiario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddiario"));

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteRe")
                        .HasColumnType("money")
                        .HasColumnName("ImporteRE");

                    b.Property<string>("Incidencia")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID");

                    b.Property<bool>("Punteado")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Re")
                        .HasColumnType("money")
                        .HasColumnName("RE");

                    b.Property<int?>("RemesaId")
                        .HasColumnType("int")
                        .HasColumnName("RemesaID");

                    b.Property<double?>("TipoIva")
                        .HasColumnType("float")
                        .HasColumnName("Tipo_IVA");

                    b.Property<int?>("VencimientoId")
                        .HasColumnType("int")
                        .HasColumnName("VencimientoID");

                    b.HasKey("EjercicioId", "Asiento", "Apunte");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("OrigenId");

                    b.HasIndex(new[] { "Cuenta" }, "IX_Diario_Cuenta");

                    b.HasIndex(new[] { "Fecha" }, "IX_Diario_Fecha");

                    b.HasIndex(new[] { "Iddiario" }, "IX_Diario_IDDiario")
                        .IsUnique();

                    b.ToTable("Diario", null, t =>
                        {
                            t.HasTrigger("ActualizarFactura");

                            t.HasTrigger("ActualizarFecha");

                            t.HasTrigger("Actualizar_Mayor_DELETE");

                            t.HasTrigger("Diario_DescontabilizarFactura_delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.DiarioAux", b =>
                {
                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int>("Asiento")
                        .HasColumnType("int");

                    b.Property<int>("Apunte")
                        .HasColumnType("int");

                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Concepto")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Descuadre")
                        .HasColumnType("bit");

                    b.Property<string>("Dh")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DH");

                    b.Property<string>("Factura")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FacturaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaID");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<double>("Importe")
                        .HasColumnType("float");

                    b.Property<decimal?>("ImporteRe")
                        .HasColumnType("money")
                        .HasColumnName("ImporteRE");

                    b.Property<string>("Incidencia")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal?>("Re")
                        .HasColumnType("money")
                        .HasColumnName("RE");

                    b.Property<double?>("TipoIva")
                        .HasColumnType("float")
                        .HasColumnName("Tipo_IVA");

                    b.HasKey("EjercicioId", "Asiento", "Apunte");

                    b.ToTable("Diario_Aux", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DiarioAux1", b =>
                {
                    b.Property<int?>("Anno")
                        .HasColumnType("int");

                    b.Property<int>("Apunte")
                        .HasColumnType("int");

                    b.Property<int>("Asiento")
                        .HasColumnType("int");

                    b.Property<string>("Concepto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Descuadre")
                        .HasColumnType("bit");

                    b.Property<string>("Dh")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DH");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<string>("Factura")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<double>("Importe")
                        .HasColumnType("float");

                    b.Property<string>("Incidencia")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<double?>("TipoIva")
                        .HasColumnType("float")
                        .HasColumnName("Tipo_IVA");

                    b.ToTable("DiarioAUX", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DireccionesEntidadesOrigen", b =>
                {
                    b.Property<int>("Idorigen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOrigen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idorigen"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idorigen");

                    b.HasIndex("EntidadId");

                    b.ToTable("Direcciones_EntidadesOrigen", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSet", b =>
                {
                    b.Property<int>("IddataSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDataSet");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddataSet"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasDefaultValueSql("('')")
                        .HasComment("Código único para identificar el DataSet > Formato: [Cod. Entidad]_00000");

                    b.Property<string>("CommandText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CommandType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(3)")
                        .HasComment("0 = cmdUnknown, 1 = cmdText, 2 = cmdTable, 3 = cmdStoredProc, 4 = cmdFile, 5 = cmdTableDirect");

                    b.Property<int>("GridDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("GridDefinitionID");

                    b.Property<int>("QueryFormId")
                        .HasColumnType("int")
                        .HasColumnName("QueryFormID");

                    b.HasKey("IddataSet");

                    b.HasIndex(new[] { "Codigo" }, "IX_DMN_DataSet_Codigo")
                        .IsUnique();

                    b.HasIndex(new[] { "GridDefinitionId" }, "IX_DMN_DataSet_GridDefinitionID");

                    b.HasIndex(new[] { "QueryFormId" }, "IX_DMN_DataSet_QueryFormID");

                    b.ToTable("DMN_DataSet", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSetParameter", b =>
                {
                    b.Property<int>("Idparameter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDParameter");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idparameter"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DataSetId")
                        .HasColumnType("int")
                        .HasColumnName("DataSetID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int")
                        .HasColumnName("OperatorID");

                    b.Property<int>("UsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsrTypeID");

                    b.HasKey("Idparameter");

                    b.HasIndex(new[] { "DataSetId" }, "IX_DMN_DataSet_Parameter_DataSetID");

                    b.HasIndex(new[] { "OperatorId" }, "IX_DMN_DataSet_Parameter_OperatorID");

                    b.HasIndex(new[] { "UsrTypeId" }, "IX_DMN_DataSet_Parameter_UsrTypeID");

                    b.HasIndex(new[] { "DataSetId", "Name" }, "UIX_DMN_DataSet_Parameter_DataSetID_Name")
                        .IsUnique();

                    b.ToTable("DMN_DataSet_Parameter", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSetRel", b =>
                {
                    b.Property<int>("IddataSet1")
                        .HasColumnType("int")
                        .HasColumnName("IDDataSet_1");

                    b.Property<int>("IddataSet2")
                        .HasColumnType("int")
                        .HasColumnName("IDDataSet_2");

                    b.HasIndex("IddataSet2");

                    b.HasIndex(new[] { "IddataSet1", "IddataSet2" }, "UIX_DMN_DataSet_rel_IDDataSet_1_2")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "IddataSet1", "IddataSet2" }, "UIX_DMN_DataSet_rel_IDDataSet_1_2"));

                    b.ToTable("DMN_DataSet_rel", null, t =>
                        {
                            t.HasTrigger("DMN_DataSet_rel_OnInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.DmnQueryForm", b =>
                {
                    b.Property<int>("IdqueryForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDQueryForm");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdqueryForm"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasDefaultValueSql("('')")
                        .HasComment("Mantenido por Soltic > Formato: Prefijo_DDDD, del 3000 en adelante reservados para el usuario");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.HasKey("IdqueryForm");

                    b.HasIndex(new[] { "FormularioId" }, "IX_DMN_QueryForm_FormularioID");

                    b.HasIndex(new[] { "Codigo" }, "UIX_DMN_QueryForm_Codigo")
                        .IsUnique();

                    b.ToTable("DMN_QueryForm", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosAlmacenTipo", b =>
                {
                    b.Property<int>("IddocumentoAlmacenTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDDocumentoAlmacenTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("UpdatePrecioCompra")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Update_PrecioCompra")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool?>("UpdateStock")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Update_Stock")
                        .HasDefaultValueSql("(1)");

                    b.HasKey("IddocumentoAlmacenTipo");

                    b.ToTable("DocumentosAlmacenTipos");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestion", b =>
                {
                    b.Property<int>("IddocumentoGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDocumentoGestion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddocumentoGestion"));

                    b.Property<bool?>("AllowCopy")
                        .HasColumnType("bit")
                        .HasColumnName("Allow_Copy");

                    b.Property<bool>("AllowInProyecto")
                        .HasColumnType("bit")
                        .HasColumnName("Allow_InProyecto");

                    b.Property<bool>("AllowPedidoAgencia")
                        .HasColumnType("bit")
                        .HasColumnName("Allow_PedidoAgencia");

                    b.Property<bool>("CalculoPortes")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentoGestionDestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionDestinatarioID");

                    b.Property<int?>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID")
                        .HasComment("Referencia a la tabla GS_Entidades");

                    b.Property<int?>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<int>("ModuloGestionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuloGestionID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("OrdenProceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("1: Recalculamos Precio al cambiar Cantidad; 0: No recalculamos");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TipoEdicionCabecera")
                        .HasColumnType("int");

                    b.Property<string>("WhereCabecera")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WhereDestinatario")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IddocumentoGestion");

                    b.HasIndex("DocumentoGestionDestinatarioId");

                    b.HasIndex("DocumentoGestionId");

                    b.HasIndex("ModuloGestionId");

                    b.HasIndex(new[] { "EntidadId" }, "IX_DocumentosGestion_EntidadID");

                    b.HasIndex(new[] { "FormularioId" }, "IX_DocumentosGestion_FormularioID");

                    b.ToTable("DocumentosGestion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionAsiento", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int>("Asiento")
                        .HasColumnType("int");

                    b.HasKey("DocumentoGestionId", "CabeceraId", "EjercicioId", "Asiento");

                    b.ToTable("DocumentosGestionAsientos");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionDestinatario", b =>
                {
                    b.Property<int>("IddocumentoGestionDestinatario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDocumentoGestionDestinatario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddocumentoGestionDestinatario"));

                    b.Property<string>("NombreEntidad")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NombreEntidadSingular")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IddocumentoGestionDestinatario");

                    b.HasIndex(new[] { "NombreEntidad" }, "IX_DocumentosGestionDestinatariosEntidad")
                        .IsUnique();

                    b.HasIndex(new[] { "TableName" }, "IX_DocumentosGestionDestinatariosTableName")
                        .IsUnique();

                    b.ToTable("DocumentosGestionDestinatarios");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionDetalleObservacione", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DetalleId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleID");

                    b.Property<int?>("FirstCabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("FirstCabeceraID");

                    b.Property<int?>("FirstDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("FirstDetalleID");

                    b.Property<int?>("FirstDocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("FirstDocumentoGestionID");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.HasKey("DocumentoGestionId", "CabeceraId", "DetalleId");

                    b.ToTable("DocumentosGestionDetalleObservaciones");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionDetalleUbicacione", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("DtoCoste")
                        .HasColumnType("float");

                    b.Property<int>("Iddgdu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDdgdu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddgdu"));

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCosteSinDto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("DocumentoGestionId", "LineaId", "UbicacionId", "LoteId");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UnidadMedidaId");

                    b.ToTable("DocumentosGestionDetalleUbicaciones", t =>
                        {
                            t.HasTrigger("UpdateMovimientosAlmacenFromDGDUbicaciones");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionMargenesClafe", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.HasKey("DocumentoGestionId", "CabeceraId", "MargenClaveId");

                    b.HasIndex("MargenClaveId");

                    b.ToTable("DocumentosGestionMargenesClaves");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionRegistroAlmacen", b =>
                {
                    b.Property<int>("DocumentoGestionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionOrigenID");

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<int>("DetalleOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleOrigenID");

                    b.Property<int>("DocumentoGestionDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionDestinoID");

                    b.Property<int>("CabeceraDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraDestinoID");

                    b.Property<int>("DetalleDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleDestinoID");

                    b.Property<int?>("DgduId")
                        .HasColumnType("int")
                        .HasColumnName("dgduID");

                    b.HasKey("DocumentoGestionOrigenId", "CabeceraOrigenId", "DetalleOrigenId", "DocumentoGestionDestinoId", "CabeceraDestinoId", "DetalleDestinoId");

                    b.HasIndex("CabeceraDestinoId");

                    b.HasIndex("DetalleDestinoId");

                    b.HasIndex("DocumentoGestionDestinoId");

                    b.ToTable("DocumentosGestionRegistroAlmacen", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTipo1", b =>
                {
                    b.Property<string>("Abreviatura")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("DocumentosGestionTipo1", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTiposLinea", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.HasKey("DocumentoGestionId", "TipoLineaId");

                    b.HasIndex("FormularioId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("DocumentosGestionTiposLinea", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTiposLineaTiposLinea", b =>
                {
                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int>("ParentTipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_TipoLineaID");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.HasKey("DocumentoGestionId", "TipoLineaId", "ParentTipoLineaId");

                    b.HasIndex("FormularioId");

                    b.HasIndex("ParentTipoLineaId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("DocumentosGestionTiposLineaTiposLinea", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTraspaso", b =>
                {
                    b.Property<int>("DocumentoGestionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionOrigenID");

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<int>("DetalleOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleOrigenID");

                    b.Property<int>("DocumentoGestionDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionDestinoID");

                    b.Property<int>("CabeceraDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraDestinoID");

                    b.Property<int>("DetalleDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleDestinoID");

                    b.Property<bool?>("GestCantidadServidaOrigen")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("DocumentoGestionOrigenId", "CabeceraOrigenId", "DetalleOrigenId", "DocumentoGestionDestinoId", "CabeceraDestinoId", "DetalleDestinoId")
                        .HasName("PK_DocumentosGestionTraspasos_1");

                    b.HasIndex(new[] { "DocumentoGestionDestinoId", "CabeceraDestinoId", "Tipo" }, "IX_DocumentosGestionTraspasos_DocumentoGestionDestinoID_CabeceraDestinoID_Tipo");

                    b.ToTable("DocumentosGestionTraspasos", t =>
                        {
                            t.HasTrigger("CopyDocumentoGestionDetalleObservaciones");

                            t.HasTrigger("InformarCoste");

                            t.HasTrigger("InformarFacturasMedioPago");

                            t.HasTrigger("InformarIVAClaseYRecargo");

                            t.HasTrigger("UpdateDocumentoDestinoCantidadServida");

                            t.HasTrigger("UpdateStatePedidoApartadoSinLineas");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTraspasosSetup", b =>
                {
                    b.Property<int>("DocumentoGestionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionOrigenID");

                    b.Property<int>("DocumentoGestionDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionDestinoID");

                    b.Property<int>("DocumentoGestionStateOrigen")
                        .HasColumnType("int");

                    b.Property<bool>("CalculoPortesDestino")
                        .HasColumnType("bit");

                    b.Property<bool?>("CopiarObservaciones")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool?>("GestCantidadServidaOrigen")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("DocumentoGestionOrigenId", "DocumentoGestionDestinoId", "DocumentoGestionStateOrigen")
                        .HasName("PK_DocumentosGestionTraspasos");

                    b.HasIndex("DocumentoGestionDestinoId");

                    b.ToTable("DocumentosGestionTraspasosSetup", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Ejercicio", b =>
                {
                    b.Property<int>("IdEjercicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEjercicio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEjercicio"));

                    b.Property<int>("Anno")
                        .HasColumnType("int");

                    b.Property<bool>("Cerrado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdEjercicio");

                    b.ToTable("Ejercicios");
                });

            modelBuilder.Entity("login4.Models.EF.Empleado", b =>
                {
                    b.Property<int>("Idempleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idempleado"));

                    b.Property<bool>("AccesoPartesOtrosEmpleados")
                        .HasColumnType("bit");

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("AllowAllComerciales")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("AutoEdit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("CalendarioId")
                        .HasColumnType("int")
                        .HasColumnName("CalendarioID");

                    b.Property<bool>("CarneConducir")
                        .HasColumnType("bit");

                    b.Property<int>("CotizacionPerCent")
                        .HasColumnType("int");

                    b.Property<int?>("CualificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CualificacionID");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<bool?>("Discapacidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("DiscapacidadPorcentaje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMail");

                    b.Property<int?>("EmpleadoContratoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoContratoTipoID");

                    b.Property<int?>("EmpleadoDepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoDepartamentoID");

                    b.Property<int?>("EmpleadoEstadoCivilId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoEstadoCivilID");

                    b.Property<int?>("EmpleadoPuestoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoPuestoID");

                    b.Property<string>("Empresas")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FiAllowUpdateTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("FI_AllowUpdateTime")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Fichajes")
                        .HasColumnType("bit")
                        .HasComment("Determina si el Empleado realiza o no Fichajes, se tiene en cuenta en el Visor de Fichajes a la hora de mostrar los Fichajes no realizados");

                    b.Property<DateTime?>("FinContrato")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Fotografia")
                        .HasColumnType("image");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("LiquidacionPrimas")
                        .HasColumnType("bit");

                    b.Property<string>("LiquidacionPrimasObservaciones")
                        .HasColumnType("text")
                        .HasColumnName("LiquidacionPrimas_Observaciones");

                    b.Property<double>("NhorasSemanaContrato")
                        .HasColumnType("float")
                        .HasColumnName("NHorasSemanaContrato");

                    b.Property<string>("Nif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NIF");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NumeroHijos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("NumeroSs")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("NumeroSS");

                    b.Property<string>("NumeroTarjetaId")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("NumeroTarjetaID");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<decimal>("PcosteHora")
                        .HasColumnType("money")
                        .HasColumnName("PCosteHora");

                    b.Property<decimal>("PhoraExtra")
                        .HasColumnType("money")
                        .HasColumnName("PHoraExtra");

                    b.Property<decimal>("PhoraExtraFestivo")
                        .HasColumnType("money")
                        .HasColumnName("PHoraExtraFestivo");

                    b.Property<decimal>("PhoraReten")
                        .HasColumnType("money")
                        .HasColumnName("PHoraReten");

                    b.Property<decimal>("PrimaCompensacionFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaLaborable")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaMensual")
                        .HasColumnType("money");

                    b.Property<string>("Puestos")
                        .HasColumnType("text");

                    b.Property<string>("Pw")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("pw");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.Property<decimal>("ServicioReten")
                        .HasColumnType("money");

                    b.Property<int?>("TipoCarneConducirId")
                        .HasColumnType("int")
                        .HasColumnName("TipoCarneConducirID");

                    b.Property<string>("Usr")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("usr");

                    b.HasKey("Idempleado");

                    b.HasIndex("CalendarioId");

                    b.HasIndex("CualificacionId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpleadoContratoTipoId");

                    b.HasIndex("EmpleadoDepartamentoId");

                    b.HasIndex("EmpleadoEstadoCivilId");

                    b.HasIndex("SeccionId");

                    b.HasIndex("TipoCarneConducirId");

                    b.ToTable("Empleados", t =>
                        {
                            t.HasTrigger("Empleados_Chk_Unique_usr");

                            t.HasTrigger("Insert_PermisosEmpleadosFromEmpleado");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosContratosTipo", b =>
                {
                    b.Property<int>("IdempleadoContratoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleadoContratoTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdempleadoContratoTipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdempleadoContratoTipo");

                    b.ToTable("EmpleadosContratosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosDepartamento", b =>
                {
                    b.Property<int>("IdempleadoDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleadoDepartamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdempleadoDepartamento"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdempleadoDepartamento");

                    b.ToTable("EmpleadosDepartamentos");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosDireccione", b =>
                {
                    b.Property<int>("IdempleadoDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleadoDireccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdempleadoDireccion"));

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int")
                        .HasColumnName("LocalidadID");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.HasKey("IdempleadoDireccion");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("PaisId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("EmpleadosDirecciones");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosEstadosCivile", b =>
                {
                    b.Property<int>("IdempleadoEstadoCivil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleadoEstadoCivil");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdempleadoEstadoCivil"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdempleadoEstadoCivil");

                    b.ToTable("EmpleadosEstadosCiviles");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosTelefono", b =>
                {
                    b.Property<int>("IdempleadoTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleadoTelefono");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdempleadoTelefono"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdempleadoTelefono");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("EmpleadosTelefonos");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasCuentasBancaria", b =>
                {
                    b.Property<int>("Idcuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCuenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcuenta"));

                    b.Property<bool?>("Activa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Alias")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Bic")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("BIC");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaDescuento")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ExtensionFicherosN19")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("ExtensionFicherosN58")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Ibancodigo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("IBANCodigo");

                    b.Property<string>("Ibancuenta")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("IBANCuenta");

                    b.Property<decimal>("LimiteDescuento")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumCta")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("RutaFicherosN19")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RutaFicherosN58")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SufijoPresentador")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("Sufijo_Presentador")
                        .IsFixedLength();

                    b.Property<int>("TitularId")
                        .HasColumnType("int")
                        .HasColumnName("TitularID");

                    b.HasKey("Idcuenta");

                    b.HasIndex("TitularId");

                    b.ToTable("EmpresasCuentasBancarias");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasDiasPago", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("DiaInicio")
                        .HasColumnType("int");

                    b.Property<int>("DiaFin")
                        .HasColumnType("int");

                    b.HasKey("EmpresaId", "DiaInicio");

                    b.ToTable("EmpresasDiasPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasEmailCuenta", b =>
                {
                    b.Property<int>("IdemailAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmailAccount");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdemailAccount"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit")
                        .HasColumnName("EnableSSL");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Organization")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<short>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((25))");

                    b.Property<string>("ReplyToAddress")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ServerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServerTypeID")
                        .HasDefaultValueSql("((1))")
                        .HasComment("(1 = SMTP)");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdemailAccount");

                    b.HasIndex("EmpresaId");

                    b.ToTable("EmpresasEmailCuentas");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasPeriodosExentosPago", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmpresaId", "FechaInicio");

                    b.ToTable("EmpresasPeriodosExentosPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Entidade", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Codigo");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("login4.Models.EF.EscalasMedida", b =>
                {
                    b.Property<int>("IdescalaMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEscalaMedida");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdescalaMedida"));

                    b.Property<string>("LookupText")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("LookupValue")
                        .HasColumnType("float");

                    b.HasKey("IdescalaMedida");

                    b.ToTable("EscalasMedidas");
                });

            modelBuilder.Entity("login4.Models.EF.ExpPaquetesFormato", b =>
                {
                    b.Property<int>("Idformato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFormato");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idformato"));

                    b.Property<double>("A")
                        .HasColumnType("float");

                    b.Property<double>("H")
                        .HasColumnType("float");

                    b.Property<double>("L")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idformato");

                    b.ToTable("EXP_PaquetesFormatos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Expedicione", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fsalida")
                        .HasColumnType("datetime")
                        .HasColumnName("FSalida");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Interna")
                        .HasColumnType("bit");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaContactoId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaContactoID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Transportista")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransportistaTelefono")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("VehiculoMatricula")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Expediciones_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("Expediciones", t =>
                        {
                            t.HasTrigger("tr_Expediciones_Delete_CDBO");

                            t.HasTrigger("tr_Expediciones_Insert_Codigo");

                            t.HasTrigger("tr_Expediciones_Update_Codigo");

                            t.HasTrigger("tr_Expediciones_Update_Estado");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("Expediciones_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<double>("Alto")
                        .HasColumnType("float");

                    b.Property<double>("Ancho")
                        .HasColumnType("float");

                    b.Property<string>("AvisoEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AvisoEmailOrigen")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AvisoEmail_Origen");

                    b.Property<string>("AvisoTelefono")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("AvisoTelefono2")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("AvisoTelefono2Origen")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("AvisoTelefono2_Origen");

                    b.Property<string>("AvisoTelefonoOrigen")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("AvisoTelefono_Origen");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<bool>("ContraReembolso")
                        .HasColumnType("bit");

                    b.Property<int>("ContraReembolsoPortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContraReembolsoPortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ContraReembolsoValor")
                        .HasColumnType("money");

                    b.Property<string>("DatosAdicionales")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("DatosAdicionalesOrigen")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("DatosAdicionales_Origen");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("DgorigenId")
                        .HasColumnType("int")
                        .HasColumnName("DGOrigenID");

                    b.Property<int?>("DirEntregaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("DirEntrega_DireccionID");

                    b.Property<int?>("DirEntregaEntidadOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DirEntrega_EntidadOrigenID");

                    b.Property<int?>("DirEntregaKeyFieldValueId")
                        .HasColumnType("int")
                        .HasColumnName("DirEntrega_KeyFieldValueID");

                    b.Property<int?>("DirSalidaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("DirSalida_DireccionID");

                    b.Property<int?>("DirSalidaEntidadOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DirSalida_EntidadOrigenID");

                    b.Property<int?>("DirSalidaKeyFieldValueId")
                        .HasColumnType("int")
                        .HasColumnName("DirSalida_KeyFieldValueID");

                    b.Property<bool>("EmEnviado")
                        .HasColumnType("bit")
                        .HasColumnName("EM_Enviado")
                        .HasComment("Email enviado");

                    b.Property<DateTime?>("EmFenvio")
                        .HasColumnType("datetime")
                        .HasColumnName("EM_FEnvio")
                        .HasComment("Email Fecha Envio");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaSalida")
                        .HasColumnType("datetime");

                    b.Property<float?>("HoraMannanaA")
                        .HasColumnType("real");

                    b.Property<float?>("HoraMannanaAOrigen")
                        .HasColumnType("real")
                        .HasColumnName("HoraMannanaA_Origen");

                    b.Property<float?>("HoraMannanaDe")
                        .HasColumnType("real");

                    b.Property<float?>("HoraMannanaDeOrigen")
                        .HasColumnType("real")
                        .HasColumnName("HoraMannanaDe_Origen");

                    b.Property<float?>("HoraTardeA")
                        .HasColumnType("real");

                    b.Property<float?>("HoraTardeAOrigen")
                        .HasColumnType("real")
                        .HasColumnName("HoraTardeA_Origen");

                    b.Property<float?>("HoraTardeDe")
                        .HasColumnType("real");

                    b.Property<float?>("HoraTardeDeOrigen")
                        .HasColumnType("real")
                        .HasColumnName("HoraTardeDe_Origen");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<double>("Largo")
                        .HasColumnType("float");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("Nbultos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NBultos")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nenvio")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NEnvio");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<int?>("PaqueteFormatoId")
                        .HasColumnType("int")
                        .HasColumnName("PaqueteFormatoID");

                    b.Property<double>("PesoReal")
                        .HasColumnType("float");

                    b.Property<double>("PesoRealFacturable")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Referencia")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Seguimiento")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasComment("Espcifica el Tipo refiriéndose al tipo de Servicio: Expedición Normal (0), Recogida (1), etc. Sólo tiene sentido en las líneas GroupHeader, en las hijas (Bultos) se copia el valor del padre");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DgorigenId");

                    b.HasIndex("DirEntregaEntidadOrigenId");

                    b.HasIndex("DirSalidaEntidadOrigenId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("PaqueteFormatoId");

                    b.HasIndex("PortesTipoId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ExpedicionesDetalle_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("ExpedicionesDetalle", null, t =>
                        {
                            t.HasTrigger("ExpedicionesDetalleAfterDelete");

                            t.HasTrigger("tr_ExpedicionesDetalle_Delete_CDBO");

                            t.HasTrigger("tr_ExpedicionesDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_ExpedicionesDetalle_Update_Estado");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("ExpedicionesDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool>("AllowModify")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("ExpedicionesEstados");
                });

            modelBuilder.Entity("login4.Models.EF.FacturacionPlanificacion", b =>
                {
                    b.Property<int>("Idplanificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPlanificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idplanificacion"));

                    b.Property<int?>("CabeceraDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraDestinoID");

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CuentaContable")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("DetalleDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleDestinoID");

                    b.Property<int?>("DocumentoDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoDestinoID");

                    b.Property<int>("DocumentoOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoOrigenID");

                    b.Property<DateTime?>("FechaDestino")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaPrevista")
                        .HasColumnType("datetime");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<double?>("Importe")
                        .HasColumnType("float");

                    b.Property<int>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("Numero")
                        .HasMaxLength(28)
                        .IsUnicode(false)
                        .HasColumnType("varchar(28)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("Idplanificacion");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("MedioId");

                    b.ToTable("FacturacionPlanificacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Facturae", b =>
                {
                    b.Property<string>("EmailBody")
                        .HasMaxLength(6144)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6144)")
                        .HasColumnName("Email_Body");

                    b.ToTable("Facturae", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompra", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("ClaveTipoFactura")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("ClaveTributariaOperacion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<string>("DescripcionOperacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<int?>("FacturaRectificadaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaRectificadaID");

                    b.Property<bool>("Facturae")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("FeFenvio")
                        .HasColumnType("datetime")
                        .HasColumnName("FE_Fenvio");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<string>("InmuebleReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .IsFixedLength();

                    b.Property<string>("InmuebleSituacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("LiActividadGrupo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("LI_ActividadGrupo")
                        .IsFixedLength();

                    b.Property<string>("LiActividadTipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LI_ActividadTipo")
                        .IsFixedLength();

                    b.Property<string>("LiConcepto")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("LI_Concepto")
                        .IsFixedLength();

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<bool?>("OperacionCriterioCaja")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("RectificativaClave")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<bool>("SiiExportado")
                        .HasColumnType("bit")
                        .HasColumnName("SII_Exportado");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PortesTipoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_FacturasCompra_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_FacturasCompra_PersonaID_EjercicioID");

                    b.ToTable("FacturasCompra", null, t =>
                        {
                            t.HasTrigger("Act_Num_FacturasCompra");

                            t.HasTrigger("FacturasCompra_Delete_CDBO");

                            t.HasTrigger("InsertGastosFacturacionIntoPie");

                            t.HasTrigger("MaxFacturaCompraAnno");

                            t.HasTrigger("UpdateFacturaCompraFromDescuento");

                            t.HasTrigger("UpdateStateFacturasCompraDetalleFromHeader");

                            t.HasTrigger("UpdateStateFacturasCompraFromTotal");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("FacturasCompra_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaRet")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cta_Ret");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<decimal?>("ImporteRet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("Importe_Ret")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("PorcentajeRet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("Porcentaje_Ret")
                        .HasDefaultValueSql("(0)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_FacturasCompraDetalle_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_FacturasCompraDetalle_CabeceraID");

                    b.HasIndex(new[] { "ProductoId" }, "IX_FacturasCompraDetalle_ProductoID");

                    b.ToTable("FacturasCompraDetalle", null, t =>
                        {
                            t.HasTrigger("FacturasCompraDetalleAfterDelete");

                            t.HasTrigger("FacturasCompraDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsFacturasCompraDetalle");

                            t.HasTrigger("UpdateFacturasCompraDetalleNumeroLinea");

                            t.HasTrigger("tr_FacturasCompraDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_FacturasCompraDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_FacturasCompraDetalle_UpdateTotalesCabecera");

                            t.HasTrigger("tr_FacturasCompraDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("FacturasCompraDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("FacturasCompraEstados");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraPie", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int>("RecargoEquivalencia")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal?>("Importe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("ImporteRecargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal>("Ivaporcentaje")
                        .HasColumnType("money")
                        .HasColumnName("IVAPorcentaje");

                    b.Property<int?>("IvatipoId")
                        .HasColumnType("int")
                        .HasColumnName("IVATipoID");

                    b.HasKey("CabeceraId", "IvaclaseId", "IvagrupoId", "RecargoEquivalencia");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("IvatipoId");

                    b.ToTable("FacturasCompraPie", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("FacturasVenta_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaRet")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cta_Ret");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<double?>("Descuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("DtoCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Entregado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<decimal?>("ImporteRet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("Importe_Ret")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("IncluirMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_Material")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IncluirMo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_MO")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<double?>("Margen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("PorcentajeRet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("Porcentaje_Ret")
                        .HasDefaultValueSql("(0)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_FacturasVentaDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_FacturasVentaDetalle_CabeceraID");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_FacturasVentaDetalle_LineaID_NumLinea");

                    b.HasIndex(new[] { "ProductoId" }, "IX_FacturasVentaDetalle_ProductoID");

                    b.ToTable("FacturasVentaDetalle", null, t =>
                        {
                            t.HasTrigger("FacturasVentaDetalleAfterDelete");

                            t.HasTrigger("FacturasVentaDetalle_Delete_CDBO");

                            t.HasTrigger("FacturasVentaDetalle_UpdateCoste");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsFacturasVentaDetalle");

                            t.HasTrigger("UpdateFacturasVentaTotalesCabecera");

                            t.HasTrigger("UpdatePortesFacturasVenta");

                            t.HasTrigger("tr_FacturasVentaDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_FacturasVentaDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_FacturasVentaDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("FacturasVentaDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaDetalleEntrega", b =>
                {
                    b.Property<int>("Identrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEntrega");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identrega"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.HasKey("Identrega");

                    b.ToTable("FacturasVentaDetalle_Entregas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("FacturasVentaEstados");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentum", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int")
                        .HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroAdministrativoId")
                        .HasColumnType("int")
                        .HasColumnName("CentroAdministrativoID");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("ClaveTipoFactura")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("ClaveTributariaOperacion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<bool>("CopiaImpresa")
                        .HasColumnType("bit");

                    b.Property<string>("DescripcionOperacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<string>("ExentaCausa")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<int?>("FacturaRectificadaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaRectificadaID");

                    b.Property<bool>("Facturae")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FeFenvio")
                        .HasColumnType("datetime")
                        .HasColumnName("FE_FEnvio");

                    b.Property<int?>("FeFormatoId")
                        .HasColumnType("int")
                        .HasColumnName("FE_FormatoID");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<string>("InmuebleReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .IsFixedLength();

                    b.Property<string>("InmuebleSituacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("LiActividadGrupo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("LI_ActividadGrupo")
                        .IsFixedLength();

                    b.Property<string>("LiActividadTipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LI_ActividadTipo")
                        .IsFixedLength();

                    b.Property<string>("LiConcepto")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("LI_Concepto")
                        .IsFixedLength();

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<bool?>("OperacionCriterioCaja")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("RectificativaClave")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<bool>("SiiExportado")
                        .HasColumnType("bit")
                        .HasColumnName("SII_Exportado");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoId1")
                        .HasColumnType("int")
                        .HasColumnName("TipoID_1");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FacturaRectificadaId");

                    b.HasIndex("FeFormatoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_FacturasVenta_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_FacturasVenta_PersonaID_EjercicioID");

                    b.ToTable("FacturasVenta", t =>
                        {
                            t.HasTrigger("Act_Num_FacturasVenta");

                            t.HasTrigger("FV_TR_Delete_VV");

                            t.HasTrigger("FacturasVenta_Delete_CDBO");

                            t.HasTrigger("MaxFacturaVentaAnno");

                            t.HasTrigger("T_FacturasVenta_CRM");

                            t.HasTrigger("UpdateFacturaVentaFromDescuento");

                            t.HasTrigger("UpdateStateFacturasVentaDetalleFromHeader");

                            t.HasTrigger("UpdateStateFacturasVentaFromTotal");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Familia", b =>
                {
                    b.Property<int>("Idfamilia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFamilia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idfamilia"));

                    b.Property<int?>("CatalogoAtributoId")
                        .HasColumnType("int")
                        .HasColumnName("CatalogoAtributoID");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CtaCompras")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaVentas")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<bool?>("Imprimir")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<string>("WmDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("wm_Description");

                    b.Property<string>("WmKeyword")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("wm_Keyword");

                    b.Property<string>("WmTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wm_Title");

                    b.HasKey("Idfamilia");

                    b.HasIndex("CatalogoAtributoId");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("FamiliaId");

                    b.HasIndex("ProductoTipoId");

                    b.ToTable("Familias", t =>
                        {
                            t.HasTrigger("BorrarSubFamilias");

                            t.HasTrigger("Familias_SetOrden");

                            t.HasTrigger("tr_Familias_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FamiliasDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<int>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.HasIndex("FamiliaId");

                    b.ToTable("Familias_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Fase", b =>
                {
                    b.Property<int>("Idfase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFase");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idfase"));

                    b.Property<decimal>("FactorSolapamiento")
                        .HasColumnType("money");

                    b.Property<int?>("FaseId")
                        .HasColumnType("int")
                        .HasColumnName("FaseID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<int>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("RutaId")
                        .HasColumnType("int")
                        .HasColumnName("RutaID");

                    b.Property<bool>("Solapamiento")
                        .HasColumnType("bit");

                    b.Property<double>("TotalPrecioCoste")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoPreparacion")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoProductividad")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoUnitario")
                        .HasColumnType("float");

                    b.HasKey("Idfase");

                    b.HasIndex("FaseId");

                    b.HasIndex("OperacionId");

                    b.HasIndex(new[] { "RutaId", "Orden" }, "IXU_Fases_RutaID_Orden")
                        .IsUnique();

                    b.ToTable("Fases", t =>
                        {
                            t.HasTrigger("Fases_UpdateFasesCentros_ProductoID");

                            t.HasTrigger("Fases_UpdateOrden");

                            t.HasTrigger("tr_Fases_UpdateRutas");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FasesCentro", b =>
                {
                    b.Property<int>("IdfaseCentro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFaseCentro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdfaseCentro"));

                    b.Property<int>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<int>("FaseId")
                        .HasColumnType("int")
                        .HasColumnName("FaseID");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<double>("TiempoPreparacion")
                        .HasColumnType("float");

                    b.Property<double>("TiempoUnitario")
                        .HasColumnType("float");

                    b.HasKey("IdfaseCentro");

                    b.HasIndex("CentroId");

                    b.HasIndex("FaseId");

                    b.HasIndex("ProductoId");

                    b.ToTable("FasesCentros", t =>
                        {
                            t.HasTrigger("FasesCentros_UpdateProductoID");

                            t.HasTrigger("FasesCentros_UpdateTiemposFase");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FasesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool>("AllowModify")
                        .HasColumnType("bit");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("PartesAllowModify")
                        .HasColumnType("bit")
                        .HasColumnName("Partes_AllowModify");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("FasesEstados");
                });

            modelBuilder.Entity("login4.Models.EF.FeFormato", b =>
                {
                    b.Property<int>("Idformato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFormato");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idformato"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Version")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.HasKey("Idformato");

                    b.ToTable("FE_Formatos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Fichaje", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FaltaInt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta_Int")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Modificado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("TotalHoras")
                        .HasColumnType("float");

                    b.Property<int?>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("TurnoID");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("TurnoId");

                    b.ToTable("Fichajes");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Hora");

                    b.Property<DateTime>("FechaHoraInt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Hora_Int")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaHoraOperario")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Hora_Operario");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("Idlinea");

                    b.HasIndex("LineaId");

                    b.HasIndex("TipoId");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_FichajesDetalle_CabeceraID");

                    b.ToTable("FichajesDetalle", null, t =>
                        {
                            t.HasTrigger("FichajesDetalle_OnDelete");

                            t.HasTrigger("FichajesDetalle_OnInsert_OnUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FichajesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("FichajesEstados");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesOrdenesOperacionesListum", b =>
                {
                    b.Property<int>("IdordenOperacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOrden_Operacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdordenOperacion"));

                    b.Property<bool>("CierreAutomatico")
                        .HasColumnType("bit")
                        .HasColumnName("Cierre_Automatico")
                        .HasComment("Determina como se comporta el sistema a la hora de realizar una Salida o Fin de Turno y tener la tarea de este tipo abierta");

                    b.Property<bool?>("Excluyente")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("Determina si al insertar una tarea de este tipo NO permitimos la inserción de otra tarea");

                    b.Property<int>("OfId")
                        .HasColumnType("int")
                        .HasColumnName("OfID")
                        .HasComment("ID de la Orden indirecta");

                    b.Property<int>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID")
                        .HasComment("ID de la Operación");

                    b.Property<string>("TextoObservaciones")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("Texto_Observaciones");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasComment("Tipo de la Orden (Indirecta, Fabricación, Seriada)");

                    b.HasKey("IdordenOperacion");

                    b.HasIndex("OperacionId");

                    b.ToTable("Fichajes_Ordenes_Operaciones_Lista", null, t =>
                        {
                            t.HasTrigger("Fichajes_Ordenes_Operaciones_Lista_OnDelete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FichajesParte", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPf")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPF");

                    b.Property<double>("CantidadPfrechazada")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFRechazada");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteMedio")
                        .HasColumnType("float");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("FichajeDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("FichajeDetalleID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("MaquinaId")
                        .HasColumnType("int")
                        .HasColumnName("MaquinaID");

                    b.Property<int?>("OfId")
                        .HasColumnType("int")
                        .HasColumnName("OfID");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<int?>("OsId")
                        .HasColumnType("int")
                        .HasColumnName("OsID");

                    b.Property<int?>("ParteId")
                        .HasColumnType("int")
                        .HasColumnName("ParteID");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("TiempoEfectivo")
                        .HasColumnType("float");

                    b.Property<double>("TiempoPreparacion")
                        .HasColumnType("float");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MaquinaId");

                    b.HasIndex("OfId");

                    b.HasIndex("OperacionId");

                    b.HasIndex("OsId");

                    b.HasIndex("ParteId");

                    b.HasIndex(new[] { "FichajeDetalleId" }, "IX_Fichajes_Partes_DetalleID");

                    b.ToTable("Fichajes_Partes", null, t =>
                        {
                            t.HasTrigger("Fichajes_Partes_InsertPartes");

                            t.HasTrigger("Fichajes_Partes_OnDelete");

                            t.HasTrigger("Fichajes_Partes_OnInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.FichajesPartesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("Fichajes_PartesEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FichajesSteep", b =>
                {
                    b.Property<int>("Idsteep")
                        .HasColumnType("int")
                        .HasColumnName("IDSteep");

                    b.Property<string>("HelpTextIdle")
                        .HasColumnType("text")
                        .HasColumnName("Help_Text_Idle");

                    b.Property<string>("HelpTextOnError")
                        .HasColumnType("text")
                        .HasColumnName("Help_Text_OnError");

                    b.Property<int>("ImageIndexIdle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Image_Index_Idle")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("ImageIndexOk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Image_Index_Ok")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("ImageIndexOnError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Image_Index_OnError")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int?>("NextSteepId")
                        .HasColumnType("int")
                        .HasColumnName("Next_SteepID");

                    b.Property<int?>("PrevSteepId")
                        .HasColumnType("int")
                        .HasColumnName("Prev_SteepID");

                    b.Property<int>("SteepNumber")
                        .HasColumnType("int")
                        .HasColumnName("Steep_Number");

                    b.Property<int>("TabIndex")
                        .HasColumnType("int");

                    b.HasKey("Idsteep");

                    b.HasIndex(new[] { "NextSteepId" }, "IX_Fichajes_Steeps_Next_SteepID")
                        .IsUnique()
                        .HasFilter("[Next_SteepID] IS NOT NULL");

                    b.ToTable("Fichajes_Steeps", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FichajesTareasStandBy", b =>
                {
                    b.Property<int>("FichajeParteId")
                        .HasColumnType("int")
                        .HasColumnName("Fichaje_ParteID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("FichajeParteId");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Fichajes_Tareas_StandBy_PersonaID");

                    b.ToTable("Fichajes_Tareas_StandBy", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FichajesTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idtipo");

                    b.ToTable("FichajesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.FormasPago", b =>
                {
                    b.Property<int>("IdformaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFormaPago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdformaPago"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdformaPago");

                    b.ToTable("FormasPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.FormasPagoApi", b =>
                {
                    b.Property<int>("IdformaPagoApi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFormaPagoAPI");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdformaPagoApi"));

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<byte[]>("PubKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SecKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Urlprefix")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("URLPrefix");

                    b.HasKey("IdformaPagoApi")
                        .HasName("PK__FormasPa__478D9C2607A9E6E1");

                    b.HasIndex("FormaPagoId");

                    b.ToTable("FormasPagoAPI", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Formulario", b =>
                {
                    b.Property<int>("Idformulario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFormulario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idformulario"));

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("CategoriaID");

                    b.Property<string>("Libreria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idformulario");

                    b.HasIndex("CategoriaId");

                    b.HasIndex(new[] { "Nombre" }, "IXU_Formularios_Nombre")
                        .IsUnique();

                    b.ToTable("Formularios");
                });

            modelBuilder.Entity("login4.Models.EF.FormulariosCategoria", b =>
                {
                    b.Property<int>("Idcategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCategoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcategoria"));

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("CategoriaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idcategoria");

                    b.HasIndex("CategoriaId");

                    b.ToTable("FormulariosCategorias");
                });

            modelBuilder.Entity("login4.Models.EF.GastosFacturacion", b =>
                {
                    b.Property<int>("IdgastoFacturacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGastoFacturacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdgastoFacturacion"));

                    b.Property<string>("CtaCompras")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaVentas")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("IvagrupoCompraId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoCompraID");

                    b.Property<int?>("IvagrupoVentaId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoVentaID");

                    b.Property<decimal?>("Ivaporcentaje")
                        .HasColumnType("money")
                        .HasColumnName("IVAPorcentaje");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdgastoFacturacion");

                    b.HasIndex("IvaclaseId");

                    b.ToTable("GastosFacturacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GdAplicacione", b =>
                {
                    b.Property<int>("Idaplicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAplicacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idaplicacion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idaplicacion");

                    b.ToTable("GD_Aplicaciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GdDocumento", b =>
                {
                    b.Property<int>("Iddocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddocumento"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID")
                        .HasComment("Para poder establecer relaciones entre Documentos");

                    b.Property<string>("Fichero")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("('#')")
                        .HasComment("Nombre Interno del fichero: 9 digitos +  '.' + 5 de extensión. Se autogenera por trigger");

                    b.Property<int>("FormatoId")
                        .HasColumnType("int")
                        .HasColumnName("FormatoID");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("Iddocumento");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("FormatoId");

                    b.HasIndex("TipoId");

                    b.ToTable("GD_Documentos", null, t =>
                        {
                            t.HasTrigger("GD_Documentos_SetFichero");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.GdDocumentosEntidade", b =>
                {
                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID");

                    b.Property<int>("IdentificadorEntidadId")
                        .HasColumnType("int")
                        .HasColumnName("IdentificadorEntidadID")
                        .HasComment("El valor del ID de la Identidad en su tabla correspondiente (x. ej. IDProducto de la tabla Productos)");

                    b.HasKey("EntidadId", "DocumentoId", "IdentificadorEntidadId");

                    b.HasIndex("DocumentoId");

                    b.ToTable("GD_DocumentosEntidades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GdEntidade", b =>
                {
                    b.Property<int>("Identidad")
                        .HasColumnType("int")
                        .HasColumnName("IDEntidad");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Identidad");

                    b.HasIndex("FormularioId");

                    b.ToTable("GD_Entidades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GdFormatosArchivo", b =>
                {
                    b.Property<int>("Idformato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFormato");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idformato"));

                    b.Property<int?>("AplicacionId")
                        .HasColumnType("int")
                        .HasColumnName("AplicacionID");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("image");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idformato")
                        .HasName("PK_GD_TipoArchivos");

                    b.HasIndex("AplicacionId");

                    b.ToTable("GD_FormatosArchivos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GdTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtipo");

                    b.ToTable("GD_Tipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GeneralSetup", b =>
                {
                    b.Property<string>("Variable")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Valor")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Caption")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Hint")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Variable", "Valor");

                    b.ToTable("GeneralSetup", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsAccessLog", b =>
                {
                    b.Property<long>("IdaccessLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IDAccessLog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdaccessLog"));

                    b.Property<int>("AplicacionId")
                        .HasColumnType("int")
                        .HasColumnName("AplicacionID");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("host");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(48)
                        .IsUnicode(false)
                        .HasColumnType("varchar(48)")
                        .HasColumnName("IP_address");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("Usr")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("usr");

                    b.HasKey("IdaccessLog");

                    b.ToTable("GS_AccessLog", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsConsultasInfoAdd", b =>
                {
                    b.Property<int>("Idgs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGS");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idgs"));

                    b.Property<int>("AtributoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoID");

                    b.Property<string>("AtributoLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Atributo_Label");

                    b.Property<string>("Consulta")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultaID");

                    b.HasKey("Idgs");

                    b.ToTable("GS_Consultas_InfoAdd", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsEditMasksType", b =>
                {
                    b.Property<int>("IdeditMaskType")
                        .HasColumnType("int")
                        .HasColumnName("IDEditMaskType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdeditMaskType")
                        .HasName("PK_GS_MaskTypes");

                    b.ToTable("GS_EditMasksTypes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsEntidade", b =>
                {
                    b.Property<int>("Identidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identidad"));

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<bool>("GestionCdbo")
                        .HasColumnType("bit")
                        .HasColumnName("Gestion_CDBO");

                    b.Property<string>("KeyField")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Identidad");

                    b.HasIndex(new[] { "Nombre" }, "IXU_GS_Entidades_Nombre")
                        .IsUnique();

                    b.HasIndex(new[] { "FormularioId" }, "IX_GS_Entidades_FormularioID");

                    b.ToTable("GS_Entidades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsGridColumn", b =>
                {
                    b.Property<int>("Idcolumn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDColumn");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcolumn"));

                    b.Property<int>("Alignment")
                        .HasColumnType("int")
                        .HasComment("(0 = taLeft, 1 = taRight, 2 = taCenter)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DataBindingFieldName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DataBinding_FieldName");

                    b.Property<int>("GridDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("GridDefinitionID");

                    b.Property<int>("PositionBandIndex")
                        .HasColumnType("int")
                        .HasColumnName("Position_BandIndex");

                    b.Property<int>("PositionColIndex")
                        .HasColumnType("int")
                        .HasColumnName("Position_ColIndex");

                    b.Property<int>("PositionRowIndex")
                        .HasColumnType("int")
                        .HasColumnName("Position_RowIndex");

                    b.Property<bool?>("Visible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Idcolumn");

                    b.HasIndex(new[] { "DataBindingFieldName" }, "IX_GS_GridColumns_DataBinding_FieldName");

                    b.HasIndex(new[] { "GridDefinitionId" }, "IX_GS_GridColumns_GridDefinitionID");

                    b.HasIndex(new[] { "GridDefinitionId", "PositionBandIndex", "PositionRowIndex", "PositionColIndex" }, "UIX_GS_GridColumns_GridDefinitionID_BandIndex_ColIndex_RowIndex")
                        .IsUnique();

                    b.ToTable("GS_GridColumns", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsGridDefinition", b =>
                {
                    b.Property<int>("IdgridDefinition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGridDefinition")
                        .HasComment("ID autonumerico debido a que se usará el código para localizar un registro (UIX)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdgridDefinition"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasDefaultValueSql("('')")
                        .HasComment("Formato: PrefijoEntidad_DDDD, del 3000 en adelante reservados para el usuario");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<int?>("GridDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("GridDefinitionID");

                    b.HasKey("IdgridDefinition");

                    b.HasIndex(new[] { "EntidadId" }, "IX_GS_GridDefinitions_EntidadID");

                    b.HasIndex(new[] { "GridDefinitionId" }, "IX_GS_GridDefinitions_GridDefinitionID");

                    b.HasIndex(new[] { "Codigo" }, "UIX_GS_GridDefinitions")
                        .IsUnique();

                    b.ToTable("GS_GridDefinitions", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsGridsView", b =>
                {
                    b.Property<int>("IdgridView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGridView");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdgridView"));

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<string>("GridViewName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdgridView");

                    b.HasIndex("EntidadId");

                    b.HasIndex("FormularioId");

                    b.ToTable("GS_GridsViews", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsInternalType", b =>
                {
                    b.Property<int>("IdinternalType")
                        .HasColumnType("int")
                        .HasColumnName("IDInternalType");

                    b.Property<bool>("AllowNulls")
                        .HasColumnType("bit");

                    b.Property<string>("DelphiFieldClassName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Delphi_FieldClassName");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SqlName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("SQL_Name");

                    b.Property<bool>("VariableLength")
                        .HasColumnType("bit");

                    b.HasKey("IdinternalType");

                    b.ToTable("GS_InternalTypes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsRecordsKey", b =>
                {
                    b.Property<long>("Idrecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IDRecord");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Idrecord"));

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<DateTime>("FechaHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasDefaultValueSql("(1)");

                    b.HasKey("Idrecord");

                    b.HasIndex("EntidadId");

                    b.ToTable("GS_RecordsKeys", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrComboList", b =>
                {
                    b.Property<int>("IdcomboList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComboList");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcomboList"));

                    b.Property<int>("ItemsUsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Items_UsrTypeID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("('GS_UsrComboListsItems')");

                    b.Property<int>("UsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsrTypeID");

                    b.HasKey("IdcomboList");

                    b.HasIndex("ItemsUsrTypeId");

                    b.HasIndex("UsrTypeId");

                    b.ToTable("GS_UsrComboLists", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrComboListsItem", b =>
                {
                    b.Property<int>("IdcomboListItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComboListItem");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcomboListItem"));

                    b.Property<int>("ComboListId")
                        .HasColumnType("int")
                        .HasColumnName("ComboListID");

                    b.Property<int>("ItemIndex")
                        .HasColumnType("int");

                    b.Property<string>("ItemValue")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdcomboListItem");

                    b.HasIndex(new[] { "ComboListId", "ItemIndex" }, "IX_GS_UsrComboListsItems_ComboListID_ItemIndex")
                        .IsUnique();

                    b.ToTable("GS_UsrComboListsItems", null, t =>
                        {
                            t.HasTrigger("GS_UsrComboListsItems_CalcItemIndex");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrGridsViewsCustomization", b =>
                {
                    b.Property<int>("IdusrGridViewCustomization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDUsrGridViewCustomization");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdusrGridViewCustomization"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("GridViewId")
                        .HasColumnType("int")
                        .HasColumnName("GridViewID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdusrGridViewCustomization");

                    b.HasIndex("GridViewId");

                    b.HasIndex("PersonaId");

                    b.ToTable("GS_UsrGridsViewsCustomizations", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrOperator", b =>
                {
                    b.Property<int>("Idoperator")
                        .HasColumnType("int")
                        .HasColumnName("IDOperator");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Idoperator");

                    b.ToTable("GS_UsrOperators", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrType", b =>
                {
                    b.Property<int>("IdusrType")
                        .HasColumnType("int")
                        .HasColumnName("IDUsrType");

                    b.Property<int>("DevExpIndexEditor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dev_Exp_IndexEditor")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("EditMask")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("EditMaskTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EditMaskTypeID");

                    b.Property<int>("InternalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InternalTypeID");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdusrType");

                    b.HasIndex("EditMaskTypeId");

                    b.HasIndex("InternalTypeId");

                    b.ToTable("GS_UsrTypes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.HorasExtra", b =>
                {
                    b.Property<int?>("Anno")
                        .HasColumnType("int");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<int>("Documentoid")
                        .HasColumnType("int")
                        .HasColumnName("documentoid");

                    b.Property<int?>("DíaDelMes")
                        .HasColumnType("int")
                        .HasColumnName("Día del mes");

                    b.Property<string>("Empleado")
                        .IsRequired()
                        .HasMaxLength(152)
                        .IsUnicode(false)
                        .HasColumnType("varchar(152)");

                    b.Property<DateTime?>("FechaImputacion")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("HorasExtras")
                        .HasColumnType("money")
                        .HasColumnName("Horas Extras");

                    b.Property<string>("Mes")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)");

                    b.Property<int?>("Mess")
                        .HasColumnType("int");

                    b.Property<int>("TipoOf")
                        .HasColumnType("int")
                        .HasColumnName("TipoOF");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.ToTable((string)null);

                    b.ToView("HorasExtras", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.InstalacionesTipo", b =>
                {
                    b.Property<int>("IdtipoInstalacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoInstalacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoInstalacion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdtipoInstalacion");

                    b.ToTable("InstalacionesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoActividade", b =>
                {
                    b.Property<int>("Idactividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDActividad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idactividad"));

                    b.Property<int?>("ActividadId")
                        .HasColumnType("int")
                        .HasColumnName("ActividadID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("ProcesoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcesoID");

                    b.HasKey("Idactividad");

                    b.HasIndex("ActividadId");

                    b.HasIndex(new[] { "ProcesoId", "Orden" }, "IX_Orden")
                        .IsUnique();

                    b.ToTable("ISO_Actividades", null, t =>
                        {
                            t.HasTrigger("ISO_Actividades_UpdateOrden");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.IsoActividadesPersonal", b =>
                {
                    b.Property<int>("IdactividadPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDActividadPersonal");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdactividadPersonal"));

                    b.Property<int>("ActividadId")
                        .HasColumnType("int")
                        .HasColumnName("ActividadID");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("PuestoId")
                        .HasColumnType("int")
                        .HasColumnName("PuestoID");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.HasKey("IdactividadPersonal");

                    b.HasIndex("ActividadId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("SeccionId");

                    b.ToTable("ISO_ActividadesPersonal", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoCalificacionesCompra", b =>
                {
                    b.Property<int>("Idcalificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCalificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcalificacion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idcalificacion");

                    b.ToTable("ISO_CalificacionesCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoComunicacione", b =>
                {
                    b.Property<int>("Idcomunicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComunicacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcomunicacion"));

                    b.Property<string>("Contenido")
                        .HasColumnType("text");

                    b.Property<string>("ContenidoRespuesta")
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocumentoDemanda")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocumentoRespuesta")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaRespuesta")
                        .HasColumnType("datetime");

                    b.Property<int?>("RespDemandaId")
                        .HasColumnType("int")
                        .HasColumnName("RespDemandaID");

                    b.Property<int?>("RespRespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("RespRespuestaID");

                    b.Property<int?>("TipoDestDemandaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDestDemandaID");

                    b.Property<int?>("TipoDestRespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDestRespuestaID");

                    b.HasKey("Idcomunicacion");

                    b.HasIndex("TipoDestDemandaId");

                    b.HasIndex("TipoDestRespuestaId");

                    b.ToTable("ISO_Comunicaciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoCriteriosEficacium", b =>
                {
                    b.Property<int>("IdcriterioEficacia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCriterioEficacia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcriterioEficacia"));

                    b.Property<int?>("FrecuenciaId")
                        .HasColumnType("int")
                        .HasColumnName("FrecuenciaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PlanFormacionId")
                        .HasColumnType("int")
                        .HasColumnName("PlanFormacionID");

                    b.HasKey("IdcriterioEficacia");

                    b.HasIndex("FrecuenciaId");

                    b.HasIndex("PlanFormacionId");

                    b.ToTable("ISO_CriteriosEficacia", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoCriteriosSeleccion", b =>
                {
                    b.Property<int>("Idcriterio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCriterio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcriterio"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idcriterio");

                    b.ToTable("ISO_CriteriosSeleccion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoCurso", b =>
                {
                    b.Property<int>("Idcurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCurso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcurso"));

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("Duracion")
                        .HasColumnType("int");

                    b.Property<bool>("Eficaz")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Impartido")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Lugar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Personal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PlanFormacionId")
                        .HasColumnType("int")
                        .HasColumnName("PlanFormacionID");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.HasKey("Idcurso");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("PlanFormacionId");

                    b.HasIndex("SeccionId");

                    b.ToTable("ISO_Cursos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoDocumento", b =>
                {
                    b.Property<int>("Iddocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddocumento"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Documento")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<bool>("Externo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaVigor")
                        .HasColumnType("datetime");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Revision")
                        .HasColumnType("int");

                    b.Property<int?>("TipoRegistroId")
                        .HasColumnType("int")
                        .HasColumnName("TipoRegistroID");

                    b.HasKey("Iddocumento");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TipoRegistroId");

                    b.ToTable("ISO_Documentos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoEncuesta", b =>
                {
                    b.Property<int>("Idencuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEncuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idencuesta"));

                    b.Property<int?>("EncuestadorId")
                        .HasColumnType("int")
                        .HasColumnName("EncuestadorID");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<bool?>("Satisfaccion")
                        .HasColumnType("bit");

                    b.Property<double?>("Valoracion")
                        .HasColumnType("float");

                    b.HasKey("Idencuesta");

                    b.HasIndex("EncuestadorId");

                    b.HasIndex("PersonaId");

                    b.ToTable("ISO_Encuestas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoEncuestasDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("EncuestaId")
                        .HasColumnType("int")
                        .HasColumnName("EncuestaID");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("PreguntaID");

                    b.Property<double?>("Puntuacion")
                        .HasColumnType("float");

                    b.Property<int?>("RespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("RespuestaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("EncuestaId");

                    b.HasIndex("PreguntaId");

                    b.HasIndex("RespuestaId");

                    b.ToTable("ISO_EncuestasDetalle", null, t =>
                        {
                            t.HasTrigger("ISO_EncuestasDetalle_UpdateCabecera");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.IsoFrecuencia", b =>
                {
                    b.Property<int>("Idfrecuencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFrecuencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idfrecuencia"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idfrecuencia");

                    b.ToTable("ISO_Frecuencias", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidencia", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool>("AperturaInforme")
                        .HasColumnType("bit");

                    b.Property<string>("Causas")
                        .HasColumnType("text");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("DestinatarioID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Resolucion")
                        .HasColumnType("text");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.Property<int>("TipoDestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDestinatarioID");

                    b.Property<int>("TipoIncidenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoIncidenciaID");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValueSql("('')");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("SeccionId");

                    b.HasIndex("TipoDestinatarioId");

                    b.HasIndex("TipoIncidenciaId");

                    b.ToTable("ISO_Incidencias", null, t =>
                        {
                            t.HasTrigger("ISO_Incidencias_Numero");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidenciasDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<bool?>("Eficaz")
                        .HasColumnType("bit");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<bool?>("Evaluado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaPrevista")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaRealizacion")
                        .HasColumnType("datetime");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("TipoAccionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoAccionID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TipoAccionId");

                    b.ToTable("ISO_IncidenciasDetalle", null, t =>
                        {
                            t.HasTrigger("ISO_IncidenciasDetalle_Numero");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidenciasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idestado");

                    b.ToTable("ISO_IncidenciasEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoIndicadore", b =>
                {
                    b.Property<int>("Idindicador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDIndicador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idindicador"));

                    b.Property<string>("Amenazas")
                        .HasColumnType("text");

                    b.Property<bool>("ConformeObjetivo")
                        .HasColumnType("bit");

                    b.Property<string>("Debilidades")
                        .HasColumnType("text");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime?>("FechaPrevista")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaRealizacion")
                        .HasColumnType("datetime");

                    b.Property<string>("Fortalezas")
                        .HasColumnType("text");

                    b.Property<int?>("FrecuenciaId")
                        .HasColumnType("int")
                        .HasColumnName("FrecuenciaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Objetivos")
                        .HasColumnType("text");

                    b.Property<string>("Oportunidades")
                        .HasColumnType("text");

                    b.Property<int?>("ProcesoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcesoID");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.Property<int?>("TendenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TendenciaID");

                    b.Property<double?>("ValorObjetivo")
                        .HasColumnType("float");

                    b.Property<double?>("ValorObtenido")
                        .HasColumnType("float");

                    b.HasKey("Idindicador");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("FrecuenciaId");

                    b.HasIndex("ProcesoId");

                    b.HasIndex("SeccionId");

                    b.HasIndex("TendenciaId");

                    b.ToTable("ISO_Indicadores", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoIndicadoresDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<string>("Acciones")
                        .HasColumnType("text");

                    b.Property<bool>("ConformeObjetivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaMedicion")
                        .HasColumnType("datetime");

                    b.Property<int>("IndicadorId")
                        .HasColumnType("int")
                        .HasColumnName("IndicadorID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<double?>("ValorObjetivo")
                        .HasColumnType("float");

                    b.Property<double?>("ValorObtenido")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("IndicadorId");

                    b.ToTable("ISO_IndicadoresDetalle", null, t =>
                        {
                            t.HasTrigger("ISO_IndicadoresDetalle_Numero");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.IsoMantenimiento", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<bool>("Apto")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<bool>("Externo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaProxima")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaRealizacion")
                        .HasColumnType("datetime");

                    b.Property<int?>("FrecuenciaId")
                        .HasColumnType("int")
                        .HasColumnName("FrecuenciaID");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int?>("IncidenciaId")
                        .HasColumnType("int")
                        .HasColumnName("IncidenciaID");

                    b.Property<int>("MaquinaId")
                        .HasColumnType("int")
                        .HasColumnName("MaquinaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<double>("Tiempo")
                        .HasColumnType("float");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("FrecuenciaId");

                    b.HasIndex("MaquinaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoId");

                    b.ToTable("ISO_Mantenimientos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoMantenimientosDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<string>("Cantidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ISO_MantenimientosDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoPedidosCompra", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<bool?>("Aprobado")
                        .HasColumnType("bit");

                    b.Property<int?>("CalificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CalificacionID");

                    b.Property<string>("ObservacionesCalidad")
                        .HasColumnType("text");

                    b.HasKey("CabeceraId");

                    b.HasIndex("CalificacionId");

                    b.ToTable("ISO_PedidosCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoPedidosCompraDetalle", b =>
                {
                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("CalificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CalificacionID");

                    b.Property<bool?>("Certificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("LineaId");

                    b.HasIndex("CalificacionId");

                    b.ToTable("ISO_PedidosCompraDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoPlanesFormacion", b =>
                {
                    b.Property<int>("IdplanFormacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPlanFormacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdplanFormacion"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("Duracion")
                        .HasColumnType("int");

                    b.Property<bool>("Eficaz")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Impartido")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Personal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdplanFormacion");

                    b.ToTable("ISO_PlanesFormacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoPregunta", b =>
                {
                    b.Property<int>("Idpregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPregunta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpregunta"));

                    b.Property<double?>("Ponderacion")
                        .HasColumnType("float");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idpregunta");

                    b.ToTable("ISO_Preguntas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoProceso", b =>
                {
                    b.Property<int>("Idproceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProceso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idproceso"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idproceso");

                    b.ToTable("ISO_Procesos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoProducto", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<string>("BuenasPracticas")
                        .HasColumnType("text");

                    b.HasKey("ProductoId");

                    b.ToTable("ISO_Productos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoProveedore", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaHomologacion")
                        .HasColumnType("datetime");

                    b.Property<bool>("Homologado")
                        .HasColumnType("bit");

                    b.Property<string>("ObservacionesCalidad")
                        .HasColumnType("text");

                    b.Property<bool>("SistCalidad")
                        .HasColumnType("bit");

                    b.Property<double?>("Valoracion")
                        .HasColumnType("float");

                    b.HasKey("PersonaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("ISO_Proveedores", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoRegistro", b =>
                {
                    b.Property<int>("Idregistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRegistro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idregistro"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Destruccion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime");

                    b.Property<string>("Formato")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Revision")
                        .HasColumnType("int");

                    b.Property<string>("TiempoConservacion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TipoRegistroId")
                        .HasColumnType("int")
                        .HasColumnName("TipoRegistroID");

                    b.HasKey("Idregistro");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TipoRegistroId");

                    b.ToTable("ISO_Registros", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoRequisito", b =>
                {
                    b.Property<int>("Idrequisito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRequisito");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrequisito"));

                    b.Property<string>("Ambito")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Derogada")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID");

                    b.Property<bool>("EnVigor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaVigor")
                        .HasColumnType("datetime");

                    b.Property<int>("ModuloGestionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuloGestionID")
                        .HasComment("En lugar de ModuloCalidadID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Resumen")
                        .HasColumnType("text");

                    b.Property<int?>("TipoNormaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoNormaID");

                    b.HasKey("Idrequisito");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("ModuloGestionId");

                    b.HasIndex("TipoNormaId");

                    b.ToTable("ISO_Requisitos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoRespuesta", b =>
                {
                    b.Property<int>("Idrespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRespuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrespuesta"));

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("PreguntaID");

                    b.Property<double?>("Puntuacion")
                        .HasColumnType("float");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idrespuesta");

                    b.HasIndex("PreguntaId");

                    b.ToTable("ISO_Respuestas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoRevisione", b =>
                {
                    b.Property<int>("Idrevision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRevision");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrevision"));

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.Property<string>("Temas")
                        .HasColumnType("text");

                    b.HasKey("Idrevision");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("SeccionId");

                    b.ToTable("ISO_Revisiones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoRevisionesAcuerdo", b =>
                {
                    b.Property<int>("IdrevisionAcuerdo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRevisionAcuerdo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdrevisionAcuerdo"));

                    b.Property<string>("Aspecto")
                        .HasColumnType("text");

                    b.Property<bool>("Eficaz")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCumplimiento")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaPrevista")
                        .HasColumnType("datetime");

                    b.Property<string>("IndCompetencia")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IndPropio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IndSector")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mejora")
                        .HasColumnType("text");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("RevisionId")
                        .HasColumnType("int")
                        .HasColumnName("RevisionID");

                    b.HasKey("IdrevisionAcuerdo");

                    b.HasIndex("RevisionId");

                    b.ToTable("ISO_RevisionesAcuerdos", null, t =>
                        {
                            t.HasTrigger("ISO_RevisionesAcuerdos_Numero");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTendencia", b =>
                {
                    b.Property<int>("Idtendencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTendencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtendencia"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtendencia");

                    b.ToTable("ISO_Tendencias", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposAccione", b =>
                {
                    b.Property<int>("IdtipoAccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoAccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoAccion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdtipoAccion");

                    b.ToTable("ISO_TiposAcciones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposIncidencia", b =>
                {
                    b.Property<int>("IdtipoIncidencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoIncidencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoIncidencia"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TipoDestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDestinatarioID");

                    b.HasKey("IdtipoIncidencia");

                    b.HasIndex("TipoDestinatarioId");

                    b.ToTable("ISO_TiposIncidencias", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposMantenimiento", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("ISO_TiposMantenimientos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposNorma", b =>
                {
                    b.Property<int>("IdtipoNorma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoNorma");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoNorma"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdtipoNorma");

                    b.ToTable("ISO_TiposNormas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposRegistro", b =>
                {
                    b.Property<int>("IdtipoRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoRegistro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoRegistro"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdtipoRegistro");

                    b.ToTable("ISO_TiposRegistros", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposVencimiento", b =>
                {
                    b.Property<int>("IdtipoVencimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoVencimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoVencimiento"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdtipoVencimiento");

                    b.ToTable("ISO_TiposVencimientos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IsoVencimiento", b =>
                {
                    b.Property<int>("Idvencimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDVencimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idvencimiento"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("DestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("DestinatarioID");

                    b.Property<DateTime?>("FechaProximaRevision")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaUltimaRevision")
                        .HasColumnType("datetime");

                    b.Property<int?>("FrecuenciaId")
                        .HasColumnType("int")
                        .HasColumnName("FrecuenciaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TipoDestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDestinatarioID");

                    b.Property<int?>("TipoVencimientoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoVencimientoID");

                    b.HasKey("Idvencimiento");

                    b.HasIndex("FrecuenciaId");

                    b.HasIndex("TipoDestinatarioId");

                    b.HasIndex("TipoVencimientoId");

                    b.ToTable("ISO_Vencimientos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IvaClase", b =>
                {
                    b.Property<int>("IdivaClase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDIvaClase");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdivaClase"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdivaClase");

                    b.ToTable("IvaClases");
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroClaveOperacion", b =>
                {
                    b.Property<int>("IdclaveOperacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDClaveOperacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdclaveOperacion"));

                    b.Property<string>("ClaveOperacion")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<bool>("ClaveVoluntaria")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("IdclaveOperacion");

                    b.ToTable("IVA_Libro_ClaveOperacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroRepercutido", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<bool?>("Abono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("ActividadGrupo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("ActividadTipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("Asiento")
                        .HasColumnType("int");

                    b.Property<int?>("AsientoAntiguo")
                        .HasColumnType("int")
                        .HasColumnName("Asiento_Antiguo");

                    b.Property<decimal?>("Base")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("ClaveTipoFactura")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("ClaveTributariaOperacion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<decimal?>("Computable")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<string>("Concepto")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("CtaConta")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("CuentaIva")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_IVA");

                    b.Property<string>("CuentaRet")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_Ret");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DescripcionOperacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Factura")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FacturaRectificada")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime");

                    b.Property<string>("InmuebleReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .IsFixedLength();

                    b.Property<string>("InmuebleSituacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<decimal?>("IrpfImporte")
                        .HasColumnType("decimal(14, 2)")
                        .HasColumnName("IRPF_Importe");

                    b.Property<decimal?>("IrpfRetencion")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("IRPF_Retencion");

                    b.Property<decimal?>("Iva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("IVA")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Nif")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NIF");

                    b.Property<int>("NifTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NIF_Tipo")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OperacionCriterioCaja")
                        .HasColumnType("bit");

                    b.Property<double?>("PorcentajeIva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("Porcentaje_IVA")
                        .HasDefaultValueSql("(0)");

                    b.Property<double?>("PorcentajeRe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("Porcentaje_RE")
                        .HasDefaultValueSql("(0)");

                    b.Property<double?>("PorcentajeRet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("Porcentaje_Ret")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("Re")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("RE")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("RectificativaClave")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<decimal?>("Retencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool>("SiiExportado")
                        .HasColumnType("bit")
                        .HasColumnName("SII_Exportado");

                    b.Property<int?>("TipoClaveId")
                        .HasColumnType("int")
                        .HasColumnName("TipoClaveID");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Clave", "EjercicioId");

                    b.HasIndex("CtaConta");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("TipoClaveId");

                    b.ToTable("IVA_LibroRepercutido", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroSoportado", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<bool?>("Abono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("ActividadGrupo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("ActividadTipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("Asiento")
                        .HasColumnType("int");

                    b.Property<int?>("AsientoAntiguo")
                        .HasColumnType("int")
                        .HasColumnName("Asiento_Antiguo");

                    b.Property<decimal?>("Base")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("ClaveTipoFactura")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("ClaveTributariaOperacion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Concepto")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("CtaConta")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("CuentaIva")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_IVA");

                    b.Property<string>("CuentaRet")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cuenta_Ret");

                    b.Property<decimal?>("Deducible")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DescripcionOperacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Factura")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FacturaRectificada")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaOperacion")
                        .HasColumnType("datetime");

                    b.Property<string>("InmuebleReferenciaCatastral")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .IsFixedLength();

                    b.Property<string>("InmuebleSituacion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<decimal?>("IrpfImporte")
                        .HasColumnType("decimal(14, 2)")
                        .HasColumnName("IRPF_Importe");

                    b.Property<decimal?>("IrpfRetencion")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("IRPF_Retencion");

                    b.Property<decimal?>("Iva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("IVA")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Nif")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NIF");

                    b.Property<int>("NifTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NIF_Tipo")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OperacionCriterioCaja")
                        .HasColumnType("bit");

                    b.Property<double?>("PorcentajeIva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("Porcentaje_IVA")
                        .HasDefaultValueSql("(0)");

                    b.Property<double?>("PorcentajeRe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("Porcentaje_RE")
                        .HasDefaultValueSql("(0)");

                    b.Property<double?>("PorcentajeRet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("Porcentaje_Ret")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("Re")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("RE")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("RectificativaClave")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<decimal?>("Retencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool>("SiiExportado")
                        .HasColumnType("bit")
                        .HasColumnName("SII_Exportado");

                    b.Property<int?>("TipoClaveId")
                        .HasColumnType("int")
                        .HasColumnName("TipoClaveID");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Clave", "EjercicioId");

                    b.HasIndex("CtaConta");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("TipoClaveId");

                    b.ToTable("IVA_LibroSoportado", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroTipoClave", b =>
                {
                    b.Property<int>("IdtipoClave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoClave");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoClave"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TipoClave")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("IdtipoClave");

                    b.ToTable("IVA_Libro_TipoClave", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.IvaTipo", b =>
                {
                    b.Property<int>("IdivaTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDIvaTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdivaTipo"));

                    b.Property<string>("CtaIvaintracomunitarioRepercutido")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("CtaIVAIntracomunitarioRepercutido");

                    b.Property<string>("CtaIvaintracomunitarioSoportado")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("CtaIVAIntracomunitarioSoportado");

                    b.Property<string>("CtaIvainversionSujetoPasivoR")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("CtaIVAInversionSujetoPasivo_R");

                    b.Property<string>("CtaIvainversionSujetoPasivoS")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("CtaIVAInversionSujetoPasivo_S");

                    b.Property<string>("CtaIvarepercutido")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CtaIVARepercutido");

                    b.Property<string>("CtaIvasoportado")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CtaIVASoportado");

                    b.Property<string>("CtaRecargoRepercutido")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("CtaRecargoSoportado")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<decimal>("General")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<decimal>("Recargo")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("IdivaTipo");

                    b.HasIndex("IvaClaseId");

                    b.ToTable("IvaTipos");
                });

            modelBuilder.Entity("login4.Models.EF.Ivagrupo", b =>
                {
                    b.Property<int>("Idivagrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDIVAGrupo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idivagrupo"));

                    b.Property<string>("CtaIvaDefault")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CtaIVA_Default");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("InversionSujetoPasivo")
                        .HasColumnType("bit");

                    b.Property<int?>("IvaclaveId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaveID");

                    b.Property<bool?>("M347")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Idivagrupo");

                    b.ToTable("IVAGrupos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabAnalisisTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Grupo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PuedeProducirIncumplimiento")
                        .HasColumnType("bit");

                    b.HasKey("Idtipo");

                    b.ToTable("LAB_AnalisisTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletine", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AnalisisTipoId")
                        .HasColumnType("int")
                        .HasColumnName("AnalisisTipoID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("CodificacionManual")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Codigo")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Fprevista")
                        .HasColumnType("datetime")
                        .HasColumnName("FPrevista");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<int?>("PuntoMuestreo")
                        .HasColumnType("int");

                    b.Property<string>("RefCliente")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ResponsableRecepcionId")
                        .HasColumnType("int")
                        .HasColumnName("ResponsableRecepcionID");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("VisiblePuntoEntrega")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idcabecera");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("ResponsableRecepcionId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_LAB_Boletines")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("LAB_Boletines", null, t =>
                        {
                            t.HasTrigger("LAB_Boletines_Delete_CDBO");

                            t.HasTrigger("MaxLAB_BoletinesAnno");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("LAB_Boletines_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<string>("Acondicionamiento")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Acreditado")
                        .HasColumnType("bit");

                    b.Property<string>("ActaMuestreo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("AnalisisTipoId")
                        .HasColumnType("int")
                        .HasColumnName("AnalisisTipoID");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoMuestra")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("DireccionRecogidaId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionRecogidaID");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<string>("Envase")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EnvaseMuestra")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Fprevista")
                        .HasColumnType("datetime")
                        .HasColumnName("FPrevista");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<DateTime?>("Frecogida")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecogida");

                    b.Property<DateTime?>("FrecogidaFin")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecogidaFin");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<string>("IdentificacionMuestra")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Incertidumbre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Legislacion")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("LimiteCuantificacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteDeteccion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteMaximo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<bool>("NecesitaAcondicionamiento")
                        .HasColumnType("bit");

                    b.Property<int>("Nenvases")
                        .HasColumnType("int")
                        .HasColumnName("NEnvases");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("NumeroManipulaciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int?>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<string>("ProcedimientoEnsayo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProcedimientoEnsayoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcedimientoEnsayoID");

                    b.Property<string>("ProcedimientoMuestreo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ProductoCompuestoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<string>("PuntoMuestreo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PuntoMuestreoSinac")
                        .HasColumnType("int")
                        .HasColumnName("PuntoMuestreoSINAC");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResponsableMuestreo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ResponsableRecepcionId")
                        .HasColumnType("int")
                        .HasColumnName("ResponsableRecepcionID");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<string>("TecnicaAnalisis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("TempEntrada")
                        .HasColumnType("float");

                    b.Property<string>("TempEntradaMuestra")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("TiempoEspera")
                        .HasColumnType("float");

                    b.Property<double>("TiempoMaximo")
                        .HasColumnType("float");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<string>("Unidades")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValorParametrico")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("VisiblePuntoEntrega")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idlinea");

                    b.HasIndex("AnalisisTipoId");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoCompuestoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ResponsableRecepcionId");

                    b.HasIndex("TarifaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_LAB_BoletinesDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_LAB_BoletinesDetalle_CabeceraID");

                    b.ToTable("LAB_BoletinesDetalle", null, t =>
                        {
                            t.HasTrigger("LAB_BoletinesDetalleAfterDelete");

                            t.HasTrigger("LAB_BoletinesDetalle_Delete_CDBO");

                            t.HasTrigger("LAB_UpdateStateBoletin");

                            t.HasTrigger("LAB_UpdateStateBoletinDetalle");

                            t.HasTrigger("UpdateLAB_BoletinesDetalleNumeroLinea");

                            t.HasTrigger("tr_LAB_BoletinesDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_LAB_BoletinesDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_LAB_BoletinesDetalle_Update_NumLinea");

                            t.HasTrigger("tr_LAB_BoletinesDetalle_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("LAB_BoletinesDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalleDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex(new[] { "LineaId" }, "IX_LAB_BoletinesDetalle_DatosDinamicos_LineaID");

                    b.ToTable("LAB_BoletinesDetalle_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("LAB_BoletinesEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesPool", b =>
                {
                    b.Property<int>("Idpool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPool");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpool"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fprevista")
                        .HasColumnType("datetime")
                        .HasColumnName("FPrevista");

                    b.Property<string>("IdentificacionMuestra")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("ReferenciaInterna")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("Idpool");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EstadoId");

                    b.ToTable("LAB_BoletinesPool", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesPoolDetalle", b =>
                {
                    b.Property<int>("Idrelacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRelacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrelacion"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DetalleId")
                        .HasColumnType("int")
                        .HasColumnName("DetalleID");

                    b.Property<int>("PoolId")
                        .HasColumnType("int")
                        .HasColumnName("PoolID");

                    b.HasKey("Idrelacion");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DetalleId");

                    b.HasIndex("PoolId");

                    b.ToTable("LAB_BoletinesPoolDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamico"));

                    b.Property<int?>("ComboListId")
                        .HasColumnType("int")
                        .HasColumnName("ComboListID");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UsrTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UsrTypeID");

                    b.HasKey("IddatoDinamico");

                    b.HasIndex("UsrTypeId");

                    b.ToTable("LAB_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabDatosDinamicosLineasDef", b =>
                {
                    b.Property<int>("IddatoDinamicoLineaDef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoLineaDef");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoLineaDef"));

                    b.Property<int>("DatoDinamicoId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoID");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("LabTipoLineaCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("LAB_TipoLineaCategoryID");

                    b.Property<int>("LabTipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("LAB_TipoLineaID");

                    b.HasKey("IddatoDinamicoLineaDef");

                    b.HasIndex("LabTipoLineaId");

                    b.HasIndex(new[] { "DatoDinamicoId" }, "IX_LAB_DatosDinamicos_LineasDef_DatoDinamicoID");

                    b.ToTable("LAB_DatosDinamicos_LineasDef", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabMatrix", b =>
                {
                    b.Property<int>("Idmatriz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMatriz");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmatriz"));

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<int?>("MatrizId")
                        .HasColumnType("int")
                        .HasColumnName("MatrizID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idmatriz");

                    b.HasIndex("MatrizId");

                    b.ToTable("LAB_Matrices", null, t =>
                        {
                            t.HasTrigger("tr_LAB_Matrices_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LabNormativasParametro", b =>
                {
                    b.Property<int>("Idnormativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNormativa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idnormativa"));

                    b.Property<string>("Documento")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idnormativa");

                    b.HasIndex("Idcdbo");

                    b.ToTable("LAB_NormativasParametros", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabOa", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<int>("Edicion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaInforme")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("FfinReal")
                        .HasColumnType("datetime")
                        .HasColumnName("FFinReal");

                    b.Property<DateTime?>("FfinTeorico")
                        .HasColumnType("datetime")
                        .HasColumnName("FFinTeorico");

                    b.Property<DateTime?>("FinicioReal")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicioReal");

                    b.Property<DateTime?>("FinicioTeorico")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicioTeorico");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<DateTime?>("Frecogida")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecogida");

                    b.Property<DateTime?>("Fvalidacion")
                        .HasColumnType("datetime")
                        .HasColumnName("FValidacion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("LineaOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("LineaOrigenID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("PoolOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("PoolOrigenID");

                    b.Property<int?>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("RefCliente")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("ResponsableID");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_LAB_OAs")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("LAB_OAs", null, t =>
                        {
                            t.HasTrigger("Act_Num_LAB_OAs");

                            t.HasTrigger("LAB_OAs_Delete_CDBO");

                            t.HasTrigger("LAB_UpdateStateBoletinOrigen");

                            t.HasTrigger("MaxLAB_OAsAnno");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LabOasCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("LAB_OAs_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabOasDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<string>("Acondicionamiento")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Acreditado")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<string>("Envase")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Fprevista")
                        .HasColumnType("datetime")
                        .HasColumnName("FPrevista");

                    b.Property<DateTime?>("Freal")
                        .HasColumnType("datetime")
                        .HasColumnName("FReal");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impreso")
                        .HasColumnType("bit");

                    b.Property<bool>("ImpresoOt")
                        .HasColumnType("bit")
                        .HasColumnName("Impreso_OT");

                    b.Property<decimal?>("Incertidumbre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("LimiteCuantificacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteDeteccion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteMaximo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("ProcedimientoEnsayo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProcedimientoEnsayoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcedimientoEnsayoID");

                    b.Property<int?>("ProductoCompuestoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("ResponsableID");

                    b.Property<string>("Resultado")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Resultado2")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Resultado3")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Resultado4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<string>("TecnicaAnalisis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("TiempoEspera")
                        .HasColumnType("float");

                    b.Property<double>("TiempoMaximo")
                        .HasColumnType("float");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<string>("Unidades")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValorParametrico")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("ProcedimientoEnsayoId");

                    b.HasIndex("ProductoCompuestoId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_LAB_OAsDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_LAB_OAsDetalle_CabeceraID");

                    b.ToTable("LAB_OAsDetalle", null, t =>
                        {
                            t.HasTrigger("LAB_OAsDetalleAfterDelete");

                            t.HasTrigger("LAB_OAsDetalle_Delete_CDBO");

                            t.HasTrigger("LAB_UpdateStateOA");

                            t.HasTrigger("tr_LAB_OAsDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_LAB_OAsDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_LAB_OAsDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LabOasDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("LAB_OAsDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabOasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("LAB_OAsEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabOasLectura", b =>
                {
                    b.Property<int>("Idlectura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLectura");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlectura"));

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Freal")
                        .HasColumnType("datetime")
                        .HasColumnName("FReal");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("ResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("ResponsableID");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Resultado2")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Resultado3")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Resultado4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Idlectura");

                    b.HasIndex("EstadoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("LAB_OAsLecturas", null, t =>
                        {
                            t.HasTrigger("LAB_UpdateOAOrigen");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LabOasLecturasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("LAB_OAsLecturasEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabPrioridade", b =>
                {
                    b.Property<int>("Idprioridad")
                        .HasColumnType("int")
                        .HasColumnName("IDPrioridad");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Idprioridad");

                    b.ToTable("LAB_Prioridades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LabProcedimientosEnsayo", b =>
                {
                    b.Property<int>("Idprocedimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProcedimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idprocedimiento"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Sinac")
                        .HasColumnType("int")
                        .HasColumnName("SINAC");

                    b.HasKey("Idprocedimiento");

                    b.ToTable("LAB_ProcedimientosEnsayo", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercial", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoDestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoDestinatarioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int?>("ProveedorDestinatarioId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorDestinatarioID");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("ComercialId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoDestinatarioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("ProveedorDestinatarioId");

                    b.HasIndex("SerieId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_LiquidacionesComercial")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("LiquidacionesComercial", null, t =>
                        {
                            t.HasTrigger("Act_Num_LiquidacionesComercial");

                            t.HasTrigger("LiquidacionesComercial_Delete_CDBO");

                            t.HasTrigger("MaxLiquidacionesComercialAnno");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("LiquidacionesComercial_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal>("Biventa")
                        .HasColumnType("money")
                        .HasColumnName("BIVenta");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID")
                        .HasComment("Lo Informaremos en los Apartados, para coger informaci¾n de la Factura sin usar DGT");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<double>("ImporteComision")
                        .HasColumnType("float");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<double>("PrecioVenta")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("LineaId");

                    b.HasIndex("OperacionId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_LiquidacionesComercialDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("LiquidacionesComercialDetalle", null, t =>
                        {
                            t.HasTrigger("LiquidacionesComercialDetalleAfterDelete");

                            t.HasTrigger("LiquidacionesComercialDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateLiquidacionesComercialTotalesCabecera");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("LiquidacionesComercialDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("LiquidacionesComercialEstados");
                });

            modelBuilder.Entity("login4.Models.EF.Listado", b =>
                {
                    b.Property<bool>("Aeat")
                        .HasColumnType("bit")
                        .HasColumnName("AEAT");

                    b.Property<bool>("Daa")
                        .HasColumnType("bit")
                        .HasColumnName("DAA");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Disponible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("IdListado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idListado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdListado"));

                    b.Property<string>("Informe")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TagCriteria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(1)");

                    b.ToTable("Listados");
                });

            modelBuilder.Entity("login4.Models.EF.Localidade", b =>
                {
                    b.Property<int>("Idlocalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLocalidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlocalidad"));

                    b.Property<int?>("ComarcaId")
                        .HasColumnType("int")
                        .HasColumnName("ComarcaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.HasKey("Idlocalidad");

                    b.HasIndex("ComarcaId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("login4.Models.EF.LogCompuesto", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.ToTable("Log_Compuestos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LogDebug", b =>
                {
                    b.Property<int>("Idlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idlog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlog"));

                    b.Property<string>("Texto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("texto");

                    b.Property<string>("Valor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("valor");

                    b.HasKey("Idlog")
                        .HasName("PK_Log");

                    b.ToTable("LogDebug", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Lote", b =>
                {
                    b.Property<int>("Idlote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLote");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlote"));

                    b.Property<double>("CantidadEnvase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("ClienteID");

                    b.Property<decimal>("DtoCompraUltima")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fbaja")
                        .HasColumnType("datetime")
                        .HasColumnName("FBaja");

                    b.Property<DateTime?>("FechaCaducidad")
                        .HasColumnType("datetime");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("LoteMaestro")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("('#')");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("(0)");

                    b.Property<double>("PrecioCompra")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraMedio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraSinDtoUltima")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVenta")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaMedio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<string>("ReferenciaProveedor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("StockActual")
                        .HasColumnType("float");

                    b.Property<double>("StockDisponible")
                        .HasColumnType("float");

                    b.Property<double>("StockMax")
                        .HasColumnType("float");

                    b.Property<double>("StockMin")
                        .HasColumnType("float");

                    b.Property<bool>("StockNegativo")
                        .HasColumnType("bit");

                    b.Property<double>("StockPedido")
                        .HasColumnType("float");

                    b.Property<double>("StockReservado")
                        .HasColumnType("float");

                    b.Property<double>("StockVirtual")
                        .HasColumnType("float");

                    b.HasKey("Idlote");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("Idcdbo");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Lotes", t =>
                        {
                            t.HasTrigger("CheckLoteMaestroNotDeleted");

                            t.HasTrigger("GetNumeroLote");

                            t.HasTrigger("Lotes_Delete_CDBO");

                            t.HasTrigger("UpdatePrecioVentaProductoFromPrecioCompraLotes");

                            t.HasTrigger("tr_Lotes_UpdateCaducidad");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.LotesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Lotes_CDBO")
                        .IsUnique();

                    b.ToTable("Lotes_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.LotesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idestado");

                    b.ToTable("LotesEstados");
                });

            modelBuilder.Entity("login4.Models.EF.LotesTraza", b =>
                {
                    b.Property<int>("IdloteTraza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLoteTraza");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdloteTraza"));

                    b.Property<int?>("LineaOsiddestino")
                        .HasColumnType("int")
                        .HasColumnName("LineaOSIDDestino");

                    b.Property<int?>("LineaOsidorigen")
                        .HasColumnType("int")
                        .HasColumnName("LineaOSIDOrigen");

                    b.Property<int>("LoteIddestino")
                        .HasColumnType("int")
                        .HasColumnName("LoteIDDestino");

                    b.Property<int>("LoteIdorigen")
                        .HasColumnType("int")
                        .HasColumnName("LoteIDOrigen");

                    b.HasKey("IdloteTraza");

                    b.HasIndex("LineaOsiddestino");

                    b.HasIndex("LineaOsidorigen");

                    b.HasIndex("LoteIddestino");

                    b.HasIndex("LoteIdorigen");

                    b.ToTable("LotesTraza", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Maquina", b =>
                {
                    b.Property<int>("Idmaquina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMaquina");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmaquina"));

                    b.Property<int?>("AnnoFabricacion")
                        .HasColumnType("int");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<string>("Fabricante")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("int")
                        .HasColumnName("GrupoID");

                    b.Property<bool>("IsVehiculo")
                        .HasColumnType("bit");

                    b.Property<string>("Mantenedor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<string>("Nserie")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NSerie");

                    b.Property<string>("Potencia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<int?>("PuestoId")
                        .HasColumnType("int")
                        .HasColumnName("PuestoID");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.Property<double>("TiempoPreparacion")
                        .HasColumnType("float");

                    b.Property<string>("Voltaje")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idmaquina");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("SeccionId");

                    b.ToTable("Maquinas");
                });

            modelBuilder.Entity("login4.Models.EF.MaquinasConsumo", b =>
                {
                    b.Property<int>("Idconsumo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDConsumo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idconsumo"));

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("FacturaCompraDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaCompraDetalleID");

                    b.Property<int?>("FacturaCompraId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaCompraID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaConsumo")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaquinaId")
                        .HasColumnType("int")
                        .HasColumnName("MaquinaID");

                    b.Property<double?>("NumeroKilometros")
                        .HasColumnType("float");

                    b.Property<double>("NumeroLitros")
                        .HasColumnType("float");

                    b.Property<int>("TipoConsumo")
                        .HasColumnType("int");

                    b.HasKey("Idconsumo");

                    b.ToTable("MaquinasConsumos");
                });

            modelBuilder.Entity("login4.Models.EF.MaquinasConsumosSaldo", b =>
                {
                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<double>("NlitrosDeposito")
                        .HasColumnType("float")
                        .HasColumnName("NLitrosDeposito");

                    b.Property<double>("NlitrosTotales")
                        .HasColumnType("float")
                        .HasColumnName("NLitrosTotales");

                    b.HasKey("Fecha");

                    b.ToTable("MaquinasConsumosSaldos", t =>
                        {
                            t.HasTrigger("MaquinasConsumosSaldos_Actualizar_TodasFechas");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.MaquinasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idestado");

                    b.ToTable("MaquinasEstados");
                });

            modelBuilder.Entity("login4.Models.EF.MaquinasGrupo", b =>
                {
                    b.Property<int>("Idgrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGrupo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idgrupo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idgrupo");

                    b.ToTable("MaquinasGrupos");
                });

            modelBuilder.Entity("login4.Models.EF.Marca", b =>
                {
                    b.Property<int>("Idmarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMarca");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmarca"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Imagen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idmarca");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("login4.Models.EF.MargenesClafe", b =>
                {
                    b.Property<int>("IdmargenClave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMargenClave");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdmargenClave"));

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdmargenClave");

                    b.ToTable("MargenesClaves");
                });

            modelBuilder.Entity("login4.Models.EF.MargenesTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo")
                        .HasComment("0: No se aplican Margenes; 1: Se aplica un margen sobre el P. de Compra; 2: se aplica un dto sobre el P. de Venta");

                    b.Property<string>("Aplica")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('D')")
                        .IsFixedLength();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtipo");

                    b.ToTable("MargenesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.Medida", b =>
                {
                    b.Property<int>("Idmedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMedida");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmedida"));

                    b.Property<int>("NdimCorte")
                        .HasColumnType("int")
                        .HasColumnName("NDimCorte");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Idmedida");

                    b.ToTable("Medidas");
                });

            modelBuilder.Entity("login4.Models.EF.MediosPago", b =>
                {
                    b.Property<int>("IdmedioPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMedioPago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdmedioPago"));

                    b.Property<int>("CargoCuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CargoCuentaID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("CuentaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaEmpresaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Remesable")
                        .HasColumnType("bit");

                    b.HasKey("IdmedioPago");

                    b.HasIndex("CargoCuentaId");

                    b.HasIndex("CuentaEmpresaId");

                    b.ToTable("MediosPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.MediosPagoCargoCuentum", b =>
                {
                    b.Property<int>("IdcuentaCargo")
                        .HasColumnType("int")
                        .HasColumnName("IDCuentaCargo")
                        .HasComment("1 Sin Cuenta, 2 Cuenta Empresa, 3 Cuenta Destinatario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdcuentaCargo");

                    b.ToTable("MediosPago_CargoCuenta", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Mese", b =>
                {
                    b.Property<int>("Idmes")
                        .HasColumnType("int")
                        .HasColumnName("IDMes");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Idmes");

                    b.ToTable("Meses");
                });

            modelBuilder.Entity("login4.Models.EF.Modelo", b =>
                {
                    b.Property<int>("Idmodelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDModelo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmodelo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Idmodelo");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("login4.Models.EF.ModulosGestion", b =>
                {
                    b.Property<int>("IdmoduloGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDModuloGestion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdmoduloGestion"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("ModuloGestionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuloGestionID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Precision")
                        .HasColumnType("int")
                        .HasComment("N║ de decimales empleados en cada m¾dulo");

                    b.HasKey("IdmoduloGestion");

                    b.HasIndex("ModuloGestionId");

                    b.ToTable("ModulosGestion", null, t =>
                        {
                            t.HasTrigger("ModulosGestion_SubModulos_Enabled");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacen", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<int?>("DocumentoAlmacenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoAlmacenTipoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Idcabecera");

                    b.HasIndex("DocumentoAlmacenTipoId");

                    b.ToTable("MovimientosAlmacen", null, t =>
                        {
                            t.HasTrigger("MaxMovimientoAlmacenAnno");

                            t.HasTrigger("MovimientosAlmacen_UpdateFecha");

                            t.HasTrigger("UpdateHora");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("DtoCoste")
                        .HasColumnType("float");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCosteSinDto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasComment("1 Entrada, 2 Salida, 3 Regularización");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("TipoId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("ProductoId", "MedidaId");

                    b.HasIndex(new[] { "ProductoId" }, "IX_MovimientosAlmacenDetalle");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_MovimientosAlmacenDetalle_CabeceraID");

                    b.HasIndex(new[] { "LoteId" }, "IX_MovimientosAlmacenDetalle_LoteID");

                    b.ToTable("MovimientosAlmacenDetalle", null, t =>
                        {
                            t.HasTrigger("MovimientosAlmacenDetalle_Update_PrecioCompraMedio");

                            t.HasTrigger("MovimientosAlmacenDetalle_Update_ProductosAlmacen");

                            t.HasTrigger("MovimientosAlmacenDetalle_Update_Saldos");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenSaldo", b =>
                {
                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<double>("Saldo")
                        .HasColumnType("float");

                    b.HasKey("Fecha", "ProductoId", "LoteId", "AlmacenId", "UbicacionId");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("MovimientosAlmacenSaldos");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idtipo");

                    b.ToTable("MovimientosAlmacenTipos");
                });

            modelBuilder.Entity("login4.Models.EF.NicDiccionario", b =>
                {
                    b.Property<int>("IdnicDiccionario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNIC_Diccionario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdnicDiccionario"));

                    b.Property<string>("CuentaDestino")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("Cuenta_Destino");

                    b.Property<string>("CuentaOrigen")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("Cuenta_Origen");

                    b.Property<string>("DescDestino")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Desc_Destino");

                    b.Property<string>("DescOrigen")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Desc_Origen");

                    b.HasKey("IdnicDiccionario");

                    b.ToTable("NIC_Diccionario", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.NicPgcCuentasListado", b =>
                {
                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<byte>("Nivel")
                        .HasColumnType("tinyint");

                    b.ToTable("NIC_PGC_CuentasListados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Ope", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<int>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaNecesidad")
                        .HasColumnType("datetime");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("TotalCosteTeorico")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("CentroId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionEntregaId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PortesTipoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_OPEs")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_OPEs_PersonaID_EjercicioID");

                    b.ToTable("OPEs", null, t =>
                        {
                            t.HasTrigger("Act_Num_OPEs");

                            t.HasTrigger("OPE_OnCreate");

                            t.HasTrigger("OPEs_Delete_CDBO");

                            t.HasTrigger("UpdateOPEFromDescuento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Operacione", b =>
                {
                    b.Property<int>("Idoperacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOperacion")
                        .HasComment("");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idoperacion"));

                    b.Property<int>("AtributoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoID")
                        .HasComment("Referencia a la tabla AtributosProducto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<int>("ValorId")
                        .HasColumnType("int")
                        .HasColumnName("ValorID")
                        .HasComment("Referencia a la tabla ValoresProductos");

                    b.HasKey("Idoperacion");

                    b.HasIndex("ValorId");

                    b.HasIndex(new[] { "AtributoId", "ValorId" }, "IX_Operaciones_Atributo_Valor")
                        .IsUnique();

                    b.ToTable("Operaciones");
                });

            modelBuilder.Entity("login4.Models.EF.OperacionesAtributo", b =>
                {
                    b.Property<int>("AtributoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoID");

                    b.HasKey("AtributoId");

                    b.ToTable("OperacionesAtributos");
                });

            modelBuilder.Entity("login4.Models.EF.OpesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("OPEs_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.OpesDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPfreal")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFReal");

                    b.Property<double>("CantidadPfrechazada")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFRechazada");

                    b.Property<double>("CantidadPfteorica")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFTeorica");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("MedidaPfid")
                        .HasColumnType("int")
                        .HasColumnName("MedidaPFID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<int?>("OfDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("OfDetalleID");

                    b.Property<int?>("OfId")
                        .HasColumnType("int")
                        .HasColumnName("OfID");

                    b.Property<int?>("OsDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("OsDetalleID");

                    b.Property<int?>("OsId")
                        .HasColumnType("int")
                        .HasColumnName("OsID");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProductoPfid")
                        .HasColumnType("int")
                        .HasColumnName("ProductoPFID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<int?>("UnidadMedidaPfid")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaPFID");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("MedidaPfid");

                    b.HasIndex("OfId");

                    b.HasIndex("OsId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProductoPfid");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex("UnidadMedidaPfid");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_OPEsDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("OPEsDetalle", null, t =>
                        {
                            t.HasTrigger("OPEsDetalleAfterDelete");

                            t.HasTrigger("OPEsDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateOPEsTotalesCabecera");

                            t.HasTrigger("UpdateStateOPEs");

                            t.HasTrigger("UpdateStateOPEsDetalle");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.OpesDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("OPEsDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.OpesEnvioMaterial", b =>
                {
                    b.Property<int?>("AlmacenDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenDestinoID");

                    b.Property<int?>("AlmacenOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenOrigenID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("UbicacionDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionDestinoID");

                    b.Property<int?>("UbicacionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionOrigenID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasIndex("AlmacenDestinoId");

                    b.HasIndex("AlmacenOrigenId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionDestinoId");

                    b.HasIndex("UbicacionOrigenId");

                    b.HasIndex("UnidadMedidaId");

                    b.ToTable("OPEsEnvioMaterial", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.OpesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("OPEsEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacion", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("DocumentoGestionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionOrigenID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaNecesidad")
                        .HasColumnType("datetime");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("LineaOrigenID");

                    b.Property<decimal>("MargenReal")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenTeorico")
                        .HasColumnType("money");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("PlanificacionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("PlanificacionOrigenID");

                    b.Property<int>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("TotalCosteReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCosteTeorico")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaTeorico")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("OrigenId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TipoId");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_OrdenesFabricacion_PersonaID_EjercicioID");

                    b.ToTable("OrdenesFabricacion", null, t =>
                        {
                            t.HasTrigger("tr_OrdenesFabricacion_Insert");

                            t.HasTrigger("tr_OrdenesFabricacion_Update");

                            t.HasTrigger("tr_OrdenesFabricacion_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.ToTable("OrdenesFabricacion_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("CantidadReal")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadTeorica")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<double>("CosteReal")
                        .HasColumnType("float");

                    b.Property<double>("CosteTeorico")
                        .HasColumnType("float");

                    b.Property<int?>("CualificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CualificacionID");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<bool>("Entregado")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("MargenReal")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenTeorico")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoIdreal")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoIDReal");

                    b.Property<int>("MargenTipoIdteorico")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoIDTeorico");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<double>("PrecioReal")
                        .HasColumnType("float");

                    b.Property<double>("PrecioTeorico")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("TotalCosteReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCosteTeorico")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaTeorico")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoIdreal");

                    b.HasIndex("MargenTipoIdteorico");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_OrdenesFabricacionDetalle_CabeceraID");

                    b.ToTable("OrdenesFabricacionDetalle", null, t =>
                        {
                            t.HasTrigger("OFD_BorrarDocumentosGestionTraspasos");

                            t.HasTrigger("OFD_BorrarPartes");

                            t.HasTrigger("OFD_CalcularTotalesCabecera");

                            t.HasTrigger("OFD_CalcularTotalesLinea");

                            t.HasTrigger("OFD_UpdatePropuestaCompra");

                            t.HasTrigger("OFDetalle_InformarOperacionCualificacion");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsOrdenesFabricacionDetalle");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDetalleEmpleado", b =>
                {
                    b.Property<int>("Idofde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOFDE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idofde"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("PuestoId")
                        .HasColumnType("int")
                        .HasColumnName("PuestoID");

                    b.HasKey("Idofde");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("PuestoId");

                    b.ToTable("OrdenesFabricacionDetalleEmpleados");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool?>("CantidadPendiente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("PartesAllowModify")
                        .HasColumnType("bit")
                        .HasColumnName("Partes_AllowModify");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado")
                        .HasName("PK_OrdenesEstados");

                    b.ToTable("OrdenesFabricacionEstados");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionOrigene", b =>
                {
                    b.Property<int>("Idorigen")
                        .HasColumnType("int")
                        .HasColumnName("IDOrigen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idorigen")
                        .HasName("PK_OrdenFabricacionOrigen");

                    b.ToTable("OrdenesFabricacionOrigenes");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionPrioridade", b =>
                {
                    b.Property<int>("Idprioridad")
                        .HasColumnType("int")
                        .HasColumnName("IDPrioridad");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Idprioridad")
                        .HasName("PK_OrdenesPrioridades");

                    b.ToTable("OrdenesFabricacionPrioridades");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtipo")
                        .HasName("PK_OrdenesTipos");

                    b.ToTable("OrdenesFabricacionTipos");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriada", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<int?>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<double>("CantidadReal")
                        .HasColumnType("float");

                    b.Property<double>("CantidadRechazada")
                        .HasColumnType("float");

                    b.Property<double>("CantidadTeorica")
                        .HasColumnType("float");

                    b.Property<string>("Codigo")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("ConjuntoId")
                        .HasColumnType("int")
                        .HasColumnName("ConjuntoID");

                    b.Property<int?>("DocumentoGestionOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionOrigenID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaNecesidad")
                        .HasColumnType("datetime");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("LineaOrigenID");

                    b.Property<decimal>("MargenReal")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenTeorico")
                        .HasColumnType("money");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<int?>("RutaId")
                        .HasColumnType("int")
                        .HasColumnName("RutaID");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("TotalCosteReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCosteTeorico")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaTeorico")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idcabecera");

                    b.HasIndex("ConjuntoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("OrigenId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TipoId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_OrdenesSeriadas_PersonaID_EjercicioID");

                    b.ToTable("OrdenesSeriadas", t =>
                        {
                            t.HasTrigger("OS_OnCreate");

                            t.HasTrigger("OS_UpdateCantidadPFEntradaFases");

                            t.HasTrigger("OS_UpdateFechaFinReal");

                            t.HasTrigger("OS_UpdateToStateParcialmenteTerminada");

                            t.HasTrigger("tr_OrdenesSeriadas_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.ToTable("OrdenesSeriadas_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("CantidadPfentrada")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFEntrada");

                    b.Property<double>("CantidadPfrechazada")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFRechazada");

                    b.Property<double>("CantidadPfterminada")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFTerminada");

                    b.Property<double>("CantidadReal")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadTeorica")
                        .HasColumnType("float");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<double>("CosteReal")
                        .HasColumnType("float");

                    b.Property<double>("CosteTeorico")
                        .HasColumnType("float");

                    b.Property<int?>("CualificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CualificacionID");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<decimal>("FactorSolapamiento")
                        .HasColumnType("money");

                    b.Property<int?>("FaseId")
                        .HasColumnType("int")
                        .HasColumnName("FaseID")
                        .HasComment("Para lineas Fase, informamos su Fase padre.");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID")
                        .HasComment("Para lineas NO Fase, informamos su Fase.");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("MargenReal")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenTeorico")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoIdreal")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoIDReal");

                    b.Property<int>("MargenTipoIdteorico")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoIDTeorico");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("MedidaPfid")
                        .HasColumnType("int")
                        .HasColumnName("MedidaPFID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<double>("PrecioReal")
                        .HasColumnType("float");

                    b.Property<double>("PrecioTeorico")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("TotalCosteReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCosteTeorico")
                        .HasColumnType("money");

                    b.Property<double>("TotalTiempoEjecucionReal")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoEjecucionTeorico")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoPreparacionReal")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoPreparacionTeorico")
                        .HasColumnType("float");

                    b.Property<decimal>("TotalVentaReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVentaTeorico")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaPfid")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaPFID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroId");

                    b.HasIndex("CualificacionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MargenTipoIdreal");

                    b.HasIndex("MargenTipoIdteorico");

                    b.HasIndex("MedidaId");

                    b.HasIndex("MedidaPfid");

                    b.HasIndex("OperacionId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaPfid");

                    b.HasIndex(new[] { "Idlinea", "LoteId" }, "IX_OrdenesSeriadasDetalle")
                        .IsUnique()
                        .HasFilter("[LoteID] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_OrdenesSeriadasDetalle_CabeceraID");

                    b.ToTable("OrdenesSeriadasDetalle", null, t =>
                        {
                            t.HasTrigger("OSD_BorrarPartes");

                            t.HasTrigger("OSD_CalcularTotalesCabecera");

                            t.HasTrigger("OSD_CalcularTotalesLinea");

                            t.HasTrigger("OSD_Fases_UpdateOrden");

                            t.HasTrigger("OSD_UpdateCantidadesCabecera");

                            t.HasTrigger("OSD_UpdateFechasFases");

                            t.HasTrigger("OSD_UpdateLotesTraza");

                            t.HasTrigger("OSD_UpdatePropuestaCompra");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("PartesAllowModify")
                        .HasColumnType("bit")
                        .HasColumnName("Partes_AllowModify");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("OrdenesSeriadasEstados");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasExplosione", b =>
                {
                    b.Property<int>("Idexplosion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDExplosion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idexplosion"));

                    b.Property<int>("AmeTreeLevel")
                        .HasColumnType("int")
                        .HasColumnName("AME_TreeLevel")
                        .HasComment("AuxMakeExplosion -> Auxiliar para la construcción del árbol de explosión");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int?>("ConjuntoId")
                        .HasColumnType("int")
                        .HasColumnName("ConjuntoID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int?>("ExplosionId")
                        .HasColumnType("int")
                        .HasColumnName("ExplosionID");

                    b.Property<int?>("ExplosionSessionId")
                        .HasColumnType("int")
                        .HasColumnName("ExplosionSessionID")
                        .HasComment("Columna auxiliar para construir el árbol -> Apunta al primer IDExplosion de cada Explosion. Parecido a un identificador de sesión.");

                    b.Property<DateTime?>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<bool>("GenerarOrdenSeriada")
                        .HasColumnType("bit");

                    b.Property<int?>("Idconjunto")
                        .HasColumnType("int")
                        .HasColumnName("IDConjunto");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("OrdenSeriadaId")
                        .HasColumnType("int")
                        .HasColumnName("OrdenSeriadaID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("RutaId")
                        .HasColumnType("int")
                        .HasColumnName("RutaID");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idexplosion");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ExplosionId");

                    b.HasIndex("ExplosionSessionId");

                    b.HasIndex("SerieId");

                    b.ToTable("OrdenesSeriadasExplosiones", t =>
                        {
                            t.HasTrigger("T_OSE_Create_OS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Paise", b =>
                {
                    b.Property<int>("Idpais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPais");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpais"));

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("ExentoIva")
                        .HasColumnType("bit")
                        .HasColumnName("ExentoIVA");

                    b.Property<string>("Iso31611Alfa2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("ISO_3161_1_Alfa_2")
                        .IsFixedLength();

                    b.Property<string>("Iso31611Alfa3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ISO_3161_1_Alfa_3")
                        .IsFixedLength();

                    b.Property<int>("Iso31611Num3")
                        .HasColumnType("int")
                        .HasColumnName("ISO_3161_1_Num_3");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("NombrePostal")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("PrefijoTel")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<bool>("Ue")
                        .HasColumnType("bit")
                        .HasColumnName("UE");

                    b.HasKey("Idpais");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("login4.Models.EF.Parte", b =>
                {
                    b.Property<int>("Idparte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDParte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idparte"));

                    b.Property<int?>("AceptadoPorEmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("AceptadoPorEmpleadoID");

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPf")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPF")
                        .HasComment("");

                    b.Property<double>("CantidadPfrechazada")
                        .HasColumnType("float")
                        .HasColumnName("CantidadPFRechazada");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<bool>("CentroExterno")
                        .HasColumnType("bit");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int")
                        .HasColumnName("CentroID");

                    b.Property<int?>("CentroTipoId")
                        .HasColumnType("int")
                        .HasColumnName("CentroTipoID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<int?>("CualificacionId")
                        .HasColumnType("int")
                        .HasColumnName("CualificacionID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaImputacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(convert(varchar,getdate(),103))");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaParte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int?>("MaquinaId")
                        .HasColumnType("int")
                        .HasColumnName("MaquinaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("MedidaPfid")
                        .HasColumnType("int")
                        .HasColumnName("MedidaPFID");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("OfDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("OfDetalleID");

                    b.Property<int?>("OfId")
                        .HasColumnType("int")
                        .HasColumnName("OfID");

                    b.Property<int>("OfTipoId")
                        .HasColumnType("int")
                        .HasColumnName("OfTipoID");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<int?>("OsDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("OsDetalleID");

                    b.Property<int?>("OsId")
                        .HasColumnType("int")
                        .HasColumnName("OsID");

                    b.Property<int>("ParteTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ParteTipoID");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<double>("TiempoEfectivo")
                        .HasColumnType("float");

                    b.Property<double>("TiempoPreparacion")
                        .HasColumnType("float");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<int?>("UnidadMedidaPfid")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaPFID");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idparte");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("CentroId");

                    b.HasIndex("CentroTipoId");

                    b.HasIndex("CualificacionId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MaquinaId");

                    b.HasIndex("OfDetalleId");

                    b.HasIndex("OfTipoId");

                    b.HasIndex("OperacionId");

                    b.HasIndex("OsDetalleId");

                    b.HasIndex("ParteTipoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.HasIndex("UnidadMedidaPfid", "MedidaPfid");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Partes")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("Partes", t =>
                        {
                            t.HasTrigger("ActilizarFechaOrden");

                            t.HasTrigger("OF_Partes_UbicarAlmacenVirtual");

                            t.HasTrigger("Partes_Delete_CDBO");

                            t.HasTrigger("Partes_GenerarParteMaterial_Explosion");

                            t.HasTrigger("Partes_GenerarPartePF");

                            t.HasTrigger("Partes_UpdateLineaWhenOperacionChanged");

                            t.HasTrigger("tr_Partes_CalcularOFD");

                            t.HasTrigger("tr_Partes_UpdateRelatedOPE");

                            t.HasTrigger("tr_Partes_del");

                            t.HasTrigger("tr_Partes_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PartesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("Partes_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PartesFormulario", b =>
                {
                    b.Property<int>("IdparteFormulario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDParteFormulario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdparteFormulario"));

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdparteFormulario");

                    b.HasIndex("FormularioId");

                    b.ToTable("PartesFormularios");
                });

            modelBuilder.Entity("login4.Models.EF.PartesTipo", b =>
                {
                    b.Property<int>("IdparteTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDParteTipo");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TipoEdicionParte")
                        .HasColumnType("int");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.HasKey("IdparteTipo")
                        .HasName("PK_PartesTipo");

                    b.HasIndex("FormularioId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("PartesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompra", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PortesTipoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PedidosCompra_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_PedidosCompra_PersonaID_EjercicioID");

                    b.ToTable("PedidosCompra", null, t =>
                        {
                            t.HasTrigger("Act_Num_PedidosCompra");

                            t.HasTrigger("MaxPedidoCompraAnno");

                            t.HasTrigger("PedidosCompra_Delete_CDBO");

                            t.HasTrigger("UpdatePedidoCompraFromDescuento");

                            t.HasTrigger("UpdateStateAnuladoInDetailsCompra");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PedidosCompra_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PedidosCompraDetalle_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_PedidosCompraDetalle_CabeceraID");

                    b.HasIndex(new[] { "ProductoId" }, "IX_PedidosCompraDetalle_ProductoID");

                    b.ToTable("PedidosCompraDetalle", null, t =>
                        {
                            t.HasTrigger("PedidosCompraDetalleAfterDelete");

                            t.HasTrigger("PedidosCompraDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsPedidosCompraDetalle");

                            t.HasTrigger("UpdatePedidosCompraDetalleNumeroLinea");

                            t.HasTrigger("UpdateStatePedidosCompra");

                            t.HasTrigger("UpdateStatePedidosCompraDetalle");

                            t.HasTrigger("tr_PedidosCompraDetalle_Actualizar_tProductos");

                            t.HasTrigger("tr_PedidosCompraDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_PedidosCompraDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_PedidosCompraDetalle_UpdateTotalesCabecera");

                            t.HasTrigger("tr_PedidosCompraDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PedidosCompraDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("PedidosCompraEstados");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PedidosVenta_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.ToTable("PedidosVenta_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDescuentosGenerale", b =>
                {
                    b.Property<int>("Iddescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDescuento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddescuento"));

                    b.Property<bool>("Acumular")
                        .HasColumnType("bit");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int?>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<int?>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.HasKey("Iddescuento");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ProductoTipoId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("PedidosVentaDescuentosGenerales");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<double?>("Descuento")
                        .HasColumnType("float");

                    b.Property<double?>("DescuentoGeneral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("DtoCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool?>("IncluirMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_Material")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IncluirMo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_MO")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<double?>("Margen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_PedidosVentaDetalle_CabeceraID");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PedidosVentaDetalle_IDCDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_PedidosVentaDetalle_LineaID_NumLinea");

                    b.HasIndex(new[] { "ProductoId" }, "IX_PedidosVentaDetalle_ProductoID");

                    b.ToTable("PedidosVentaDetalle", null, t =>
                        {
                            t.HasTrigger("PedidosVentaDetalleAfterDelete");

                            t.HasTrigger("PedidosVentaDetalle_Delete_CDBO");

                            t.HasTrigger("PedidosVentaDetalle_UpdateCoste");

                            t.HasTrigger("UpdateCantidadServidaRelatedDocsPedidosVentaDetalle");

                            t.HasTrigger("UpdatePedidosVentaTotalesCabecera");

                            t.HasTrigger("UpdatePortesPedidosVenta");

                            t.HasTrigger("UpdateStatePedidosVenta");

                            t.HasTrigger("tr_PedidosVentaDetalle_Actualizar_tProductos");

                            t.HasTrigger("tr_PedidosVentaDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_PedidosVentaDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_PedidosVentaDetalle_Update_NumLinea");

                            t.HasTrigger("tr_PedidosVentaDetalle_Update_StateDetalles");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PedidosVentaDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("StockPendienteServirEnFicha")
                        .HasColumnType("bit")
                        .HasColumnName("StockPendienteServir_EnFicha");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("PedidosVentaEstados");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentum", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int")
                        .HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int?>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("TipoId1")
                        .HasColumnType("int")
                        .HasColumnName("TipoID_1");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PedidosVenta")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_PedidosVenta_PersonaID_EjercicioID");

                    b.ToTable("PedidosVenta", t =>
                        {
                            t.HasTrigger("Act_Num_PedidosVenta");

                            t.HasTrigger("MaxPedidoVentaAnno");

                            t.HasTrigger("PasarACliente");

                            t.HasTrigger("PedidosVenta_Delete_CDBO");

                            t.HasTrigger("UpdatePedidoVentaFromDescuento");

                            t.HasTrigger("UpdateStateAnuladoInDetailsVenta");

                            t.HasTrigger("tr_PedidosVenta_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Periodo", b =>
                {
                    b.Property<int>("IdPeriodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPeriodo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPeriodo"));

                    b.Property<bool?>("Cerrado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PeriodoTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PeriodoTipoID")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IdPeriodo");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("PeriodoTipoId");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("login4.Models.EF.PeriodosTipo", b =>
                {
                    b.Property<int>("IdperiodoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPeriodoTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdperiodoTipo"));

                    b.Property<int>("Division")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdperiodoTipo");

                    b.ToTable("PeriodosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosAccione", b =>
                {
                    b.Property<int>("IdpermisoAccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPermisoAccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpermisoAccion"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ClassFormIdp1")
                        .HasColumnType("int")
                        .HasColumnName("ClassFormIDP1");

                    b.Property<int?>("ClassFormIdp2")
                        .HasColumnType("int")
                        .HasColumnName("ClassFormIDP2");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<int>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("PermisoCategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("PermisoCategoriaID");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdpermisoAccion");

                    b.HasIndex("ClassFormIdp1");

                    b.HasIndex("ClassFormIdp2");

                    b.HasIndex("FormularioId");

                    b.HasIndex("PermisoCategoriaId");

                    b.ToTable("PermisosAcciones", t =>
                        {
                            t.HasTrigger("Insert_PermisosEmpleadosFromAccion");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PermisosCategoria", b =>
                {
                    b.Property<int>("IdpermisoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPermisoCategoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpermisoCategoria"));

                    b.Property<int>("AplicacionId")
                        .HasColumnType("int")
                        .HasColumnName("AplicacionID");

                    b.Property<int?>("ModuloGestionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuloGestionID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PermisoCategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("PermisoCategoriaID");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("IdpermisoCategoria");

                    b.HasIndex("ModuloGestionId");

                    b.ToTable("PermisosCategorias");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosEmpleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int>("PermisoAccionId")
                        .HasColumnType("int")
                        .HasColumnName("PermisoAccionID");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("EmpleadoId", "PermisoAccionId");

                    b.HasIndex("PermisoAccionId");

                    b.ToTable("PermisosEmpleados");
                });

            modelBuilder.Entity("login4.Models.EF.Pgc", b =>
                {
                    b.Property<string>("Cuenta")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<byte>("Nivel")
                        .HasColumnType("tinyint");

                    b.HasKey("Cuenta");

                    b.ToTable("PGC", null, t =>
                        {
                            t.HasTrigger("tr_PGC_Insert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Pgcnorma", b =>
                {
                    b.Property<string>("Acpa")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("ACPA");

                    b.Property<string>("Bitmap")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("BITMAP");

                    b.Property<string>("Codbal")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CODBAL");

                    b.Property<string>("Cta")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("CTA");

                    b.Property<string>("Descrip")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIP");

                    b.Property<short?>("Desglose")
                        .HasColumnType("smallint")
                        .HasColumnName("DESGLOSE");

                    b.Property<string>("Doble")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("DOBLE");

                    b.Property<string>("Formula")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FORMULA");

                    b.Property<string>("Naturaleza")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("NATURALEZA");

                    b.Property<short?>("Nivel")
                        .HasColumnType("smallint")
                        .HasColumnName("NIVEL");

                    b.Property<string>("Numero")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("NUMERO");

                    b.Property<short?>("Tipo")
                        .HasColumnType("smallint")
                        .HasColumnName("TIPO");

                    b.ToTable("Pgcnorma", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PortesTipo", b =>
                {
                    b.Property<int>("IdportesTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDPortesTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdportesTipo");

                    b.ToTable("PortesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompra", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money")
                        .HasComment("");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PortesTipoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PresupuestosCompra_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_PresupuestosCompra_PersonaID_EjercicioID");

                    b.ToTable("PresupuestosCompra", null, t =>
                        {
                            t.HasTrigger("Act_Num_PresupuestosCompra");

                            t.HasTrigger("MaxPresupuestoCompraAnno");

                            t.HasTrigger("PresupuestosCompra_Delete_CDBO");

                            t.HasTrigger("SetStatePrVRechazadoWhenRelatedPrCAceptado");

                            t.HasTrigger("UpdatePresupuestoCompraFromDescuento");

                            t.HasTrigger("UpdateStatePresupuestosCompraDetalleFromHeader");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PresupuestosCompra_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PresupuestosCompraDetalle_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_PresupuestosCompraDetalle_CabeceraID");

                    b.HasIndex(new[] { "ProductoId" }, "IX_PresupuestosCompraDetalle_ProductoID");

                    b.ToTable("PresupuestosCompraDetalle", null, t =>
                        {
                            t.HasTrigger("PresupuestosCompraDetalleAfterDelete");

                            t.HasTrigger("PresupuestosCompraDetalle_Delete_CDBO");

                            t.HasTrigger("SetStateRechazadoWhenRelatedAceptado");

                            t.HasTrigger("UpdatePresupuestosCompraDetalleNumeroLinea");

                            t.HasTrigger("tr_PrCDetalle_Aceptado_SetRelated_ToRechazado");

                            t.HasTrigger("tr_PresupuestosCompraDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_PresupuestosCompraDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_PresupuestosCompraDetalle_UpdateTotalesCabecera");

                            t.HasTrigger("tr_PresupuestosCompraDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PresupuestosCompraDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("PresupuestosCompraEstados");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("PresupuestosVenta_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDescuentosGenerale", b =>
                {
                    b.Property<int>("Iddescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDescuento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddescuento"));

                    b.Property<bool>("Acumular")
                        .HasColumnType("bit");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int?>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<int?>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.HasKey("Iddescuento");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ProductoTipoId");

                    b.HasIndex("TipoLineaId");

                    b.ToTable("PresupuestosVentaDescuentosGenerales");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<double?>("Descuento")
                        .HasColumnType("float");

                    b.Property<double?>("DescuentoGeneral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("DtoCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool?>("IncluirMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_Material")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IncluirMo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Incluir_MO")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<double?>("Margen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PresupuestosVentaDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_PresupuestosVentaDetalle_CabeceraID");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_PresupuestosVentaDetalle_LineaID_NumLinea");

                    b.HasIndex(new[] { "ProductoId" }, "IX_PresupuestosVentaDetalle_ProductoID");

                    b.ToTable("PresupuestosVentaDetalle", null, t =>
                        {
                            t.HasTrigger("PresupuestosVentaDetalleAfterDelete");

                            t.HasTrigger("PresupuestosVentaDetalle_Delete_CDBO");

                            t.HasTrigger("PresupuestosVentaDetalle_UpdateCoste");

                            t.HasTrigger("UpdatePortesPresupuestosVenta");

                            t.HasTrigger("UpdatePresupuestosVentaTotalesCabecera");

                            t.HasTrigger("tr_PrVD_Update_EstadoID");

                            t.HasTrigger("tr_PresupuestosVentaDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_PresupuestosVentaDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_PresupuestosVentaDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.Property<string>("Acondicionamiento")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Acreditado")
                        .HasColumnType("bit");

                    b.Property<string>("Envase")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Frecuencia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Incertidumbre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Legislacion")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("LimiteCuantificacion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LimiteDeteccion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LimiteMaximo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcedimientoEnsayo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ProcedimientoEnsayoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcedimientoEnsayoID");

                    b.Property<int?>("ProductoCompuestoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoID");

                    b.Property<string>("TecnicaAnalisis")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("TiempoEspera")
                        .HasColumnType("float");

                    b.Property<double>("TiempoMaximo")
                        .HasColumnType("float");

                    b.Property<string>("Unidades")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ValorParametrico")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idcdbo");

                    b.HasIndex("ProcedimientoEnsayoId");

                    b.HasIndex("ProductoCompuestoId");

                    b.ToTable("PresupuestosVentaDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("PresupuestosVentaEstados");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaProductosActualizable", b =>
                {
                    b.Property<int>("IdproductoActualizable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoActualizable");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoActualizable"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.HasKey("IdproductoActualizable");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PresupuestosVentaProductosActualizables");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentum", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int")
                        .HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("NumeroBultos")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnvio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)")
                        .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoId1")
                        .HasColumnType("int")
                        .HasColumnName("TipoID_1");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<string>("Version")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_PresupuestosVenta")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_PresupuestosVenta_PersonaID_EjercicioID");

                    b.ToTable("PresupuestosVenta", t =>
                        {
                            t.HasTrigger("Act_Num_PresupuestosVenta");

                            t.HasTrigger("MaxPresupuestoVentaAnno");

                            t.HasTrigger("PresupuestosVenta_Delete_CDBO");

                            t.HasTrigger("UpdatePresupuestoVentaFromDescuento");

                            t.HasTrigger("UpdateStatePresupuestosVentaDetalleFromHeader");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Producto", b =>
                {
                    b.Property<int>("Idproducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProducto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idproducto"));

                    b.Property<string>("AbreviaturaLote")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoBarras")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodigoPropio")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<string>("CtaCompras")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaVentas")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Dbstate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DBState")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double?>("DescuentoMaximo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("DtoCompraSugerido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("DtoCompraUltima")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<DateTime?>("Fbaja")
                        .HasColumnType("datetime")
                        .HasColumnName("FBaja");

                    b.Property<bool>("GestAlmacen")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Almacen");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<bool>("GestCorteMultiplos")
                        .HasColumnType("bit")
                        .HasColumnName("GestCorte_Multiplos");

                    b.Property<bool>("GestCorteNumero")
                        .HasColumnType("bit")
                        .HasColumnName("GestCorte_Numero");

                    b.Property<bool>("GestLotes")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Lotes");

                    b.Property<bool>("GestMargen")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Margen");

                    b.Property<bool>("GestPreciosLotes")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_PreciosLotes");

                    b.Property<bool?>("GestStock")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Stock")
                        .HasDefaultValueSql("(1)");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<bool>("InstalacionRequired")
                        .HasColumnType("bit");

                    b.Property<int>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<double>("LoteMinCompra")
                        .HasColumnType("float");

                    b.Property<double>("LoteMinVenta")
                        .HasColumnType("float");

                    b.Property<int?>("MarcaId")
                        .HasColumnType("int")
                        .HasColumnName("MarcaID");

                    b.Property<double?>("Margen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MargenCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MargenCompraID")
                        .HasDefaultValueSql("((5))");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaIdCorte")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID_Corte");

                    b.Property<double>("Multiplicador")
                        .HasColumnType("float");

                    b.Property<int>("MultiploCorteX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Multiplo_Corte_X")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("MultiploCorteY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Multiplo_Corte_Y")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("MultiploCorteZ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Multiplo_Corte_Z")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<double>("PrecioCompra")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraMedio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraSinDtoSugerido")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraSinDtoUltima")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraSugerido")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVenta")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaMedio")
                        .HasColumnType("float");

                    b.Property<int?>("ProductoBaseId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoBaseID");

                    b.Property<int?>("ProductoCompuestoPlantillaId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoPlantillaID");

                    b.Property<int>("ProductoEstadoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoEstadoID");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<double>("Pvp")
                        .HasColumnType("float")
                        .HasColumnName("PVP");

                    b.Property<string>("ReferenciaProveedor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("StockActual")
                        .HasColumnType("float");

                    b.Property<double>("StockDisponible")
                        .HasColumnType("float");

                    b.Property<double>("StockMax")
                        .HasColumnType("float");

                    b.Property<double>("StockMin")
                        .HasColumnType("float");

                    b.Property<bool>("StockNegativo")
                        .HasColumnType("bit");

                    b.Property<double>("StockPedido")
                        .HasColumnType("float");

                    b.Property<double>("StockPendienteRecibir")
                        .HasColumnType("float");

                    b.Property<double>("StockPendienteServir")
                        .HasColumnType("float");

                    b.Property<double>("StockReservado")
                        .HasColumnType("float");

                    b.Property<double>("StockVirtual")
                        .HasColumnType("float");

                    b.Property<double>("StockWeb")
                        .HasColumnType("float");

                    b.Property<bool>("TarifaDiaria")
                        .HasColumnType("bit");

                    b.Property<int?>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("TemporadaID");

                    b.Property<int?>("TiempoCaducidad")
                        .HasColumnType("int");

                    b.Property<int?>("UnidadMedidaIdCorte")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.HasKey("Idproducto");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("MargenCompraId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaIdCorte");

                    b.HasIndex("ProductoBaseId");

                    b.HasIndex("ProductoEstadoId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex("UnidadMedidaIdCorte", "MedidaIdCorte");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Productos")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CodigoBarras" }, "IX_Productos_CodigoBarras");

                    b.HasIndex(new[] { "CodigoPropio" }, "IX_Productos_CodigoPropio");

                    b.HasIndex(new[] { "FamiliaId", "ProductoTipoId" }, "IX_Productos_FamiliaID_ProductoTipoID");

                    b.HasIndex(new[] { "ProductoTipoId" }, "IX_Productos_ProductoTipoID");

                    b.ToTable("Productos", t =>
                        {
                            t.HasTrigger("GetCodigoPropio");

                            t.HasTrigger("InsertProductoLoteMaestro");

                            t.HasTrigger("Productos_Delete_CDBO");

                            t.HasTrigger("Productos_UnidadesProducto_Ins");

                            t.HasTrigger("UpdatePVPandPrecioVenta");

                            t.HasTrigger("UpdatePrecioVentaProductoFromPrecioCompra");

                            t.HasTrigger("UpdateProductoLoteMaestro");

                            t.HasTrigger("tr_Productos_Delete_Cascade");

                            t.HasTrigger("tr_Productos_TarifasDetalle_upd");

                            t.HasTrigger("tr_Productos_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosAlmacen", b =>
                {
                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<double>("StockActual")
                        .HasColumnType("float");

                    b.HasKey("AlmacenId", "UbicacionId", "ProductoId", "LoteId")
                        .HasName("PK_ProductosAlmacenes");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId", "AlmacenId");

                    b.ToTable("ProductosAlmacen", null, t =>
                        {
                            t.HasTrigger("ProductosAlmacen_Update_Stock_Lote");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosAtribsValore", b =>
                {
                    b.Property<int>("Idpav")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPAV");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpav"));

                    b.Property<int>("AtributoProductoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoProductoID");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("ValorProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ValorProductoID");

                    b.HasKey("Idpav");

                    b.HasIndex("AtributoProductoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ValorProductoId");

                    b.ToTable("Productos_Atribs_Valores", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBase", b =>
                {
                    b.Property<int>("IdproductoBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoBase");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoBase"));

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoBarras")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodigoPropio")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CtaCompras")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaVentas")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<DateTime?>("Fbaja")
                        .HasColumnType("datetime")
                        .HasColumnName("FBaja");

                    b.Property<bool>("GestAlmacen")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Almacen");

                    b.Property<bool>("GestLotes")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Lotes");

                    b.Property<bool>("GestMargen")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Margen");

                    b.Property<bool?>("GestStock")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Stock")
                        .HasDefaultValueSql("(1)");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int?>("MarcaId")
                        .HasColumnType("int")
                        .HasColumnName("MarcaID");

                    b.Property<double?>("Margen")
                        .HasColumnType("float");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<double>("PrecioCompra")
                        .HasColumnType("float");

                    b.Property<double>("PrecioCompraMedio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVenta")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaMedio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoEstadoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoEstadoID");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<double>("Pvp")
                        .HasColumnType("float")
                        .HasColumnName("PVP");

                    b.Property<string>("ReferenciaProveedor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("StockActual")
                        .HasColumnType("float");

                    b.Property<double>("StockMax")
                        .HasColumnType("float");

                    b.Property<double>("StockMin")
                        .HasColumnType("float");

                    b.Property<bool>("StockNegativo")
                        .HasColumnType("bit");

                    b.Property<double>("StockPedido")
                        .HasColumnType("float");

                    b.Property<int?>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("TemporadaID");

                    b.HasKey("IdproductoBase");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("FamiliaId");

                    b.HasIndex("Idcdbo");

                    b.HasIndex("MarcaId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("ProductoEstadoId");

                    b.HasIndex("ProductoTipoId");

                    b.ToTable("ProductosBase", null, t =>
                        {
                            t.HasTrigger("InsetarUnidadesProductoBase");

                            t.HasTrigger("ProductosBase_Delete_CDBO");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBaseCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("ProductosBase_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBaseUnidadesModulo", b =>
                {
                    b.Property<int>("ProductoBaseId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoBaseID");

                    b.Property<int>("ModuloGestionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuloGestionID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("ProductoBaseId", "ModuloGestionId");

                    b.HasIndex("ModuloGestionId");

                    b.HasIndex("ProductoBaseId", "MedidaId");

                    b.ToTable("ProductosBaseUnidadesModulos");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.Property<string>("AbreviaturaLote")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Acondicionamiento")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Acreditado")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoSinac")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CodigoSINAC");

                    b.Property<string>("Envase")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Incertidumbre")
                        .HasColumnType("money");

                    b.Property<int>("IsSemielaborado")
                        .HasColumnType("int");

                    b.Property<string>("Legislacion")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LimiteCuantificacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteDeteccion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteMaximo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MatrizId")
                        .HasColumnType("int")
                        .HasColumnName("MatrizID");

                    b.Property<int?>("ParametroId")
                        .HasColumnType("int")
                        .HasColumnName("ParametroID");

                    b.Property<int?>("PlazoEntrega")
                        .HasColumnType("int");

                    b.Property<string>("ProcedimientoEnsayo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProcedimientoEnsayoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcedimientoEnsayoID");

                    b.Property<string>("TecnicaAnalisis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TiempoCaducidad")
                        .HasColumnType("int");

                    b.Property<double>("TiempoEspera")
                        .HasColumnType("float");

                    b.Property<double>("TiempoMaximo")
                        .HasColumnType("float");

                    b.Property<string>("Unidades")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValorParametrico")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idcdbo");

                    b.HasIndex("MatrizId");

                    b.HasIndex("ProcedimientoEnsayoId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Productos_CDBO")
                        .IsUnique();

                    b.ToTable("Productos_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCliente", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("CalculoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<double>("PrecioTarifa")
                        .HasColumnType("float");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Tarifa")
                        .HasColumnType("bit");

                    b.HasKey("ProductoId", "PersonaId");

                    b.ToTable("ProductosClientes");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCodigosBarra", b =>
                {
                    b.Property<int>("IdproductoCodigoBarras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoCodigoBarras");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoCodigoBarras"));

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("IdproductoCodigoBarras");

                    b.HasIndex("ProductoId", "MedidaId");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.HasIndex(new[] { "ProductoId", "CodigoBarras" }, "UIX_ProductosCodigosBarras_ProductoID_CodigoBarras")
                        .IsUnique();

                    b.ToTable("ProductosCodigosBarras");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuesto", b =>
                {
                    b.Property<int>("IdproductoCompuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoCompuesto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoCompuesto"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumeroOrden")
                        .HasColumnType("int");

                    b.Property<double>("PrecioVenta")
                        .HasColumnType("float");

                    b.Property<int?>("ProductoBaseId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoBaseID");

                    b.Property<int>("ProductoCompuestoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoID");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("IdproductoCompuesto");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ProductosCompuestos")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "ProductoCompuestoId" }, "IX_ProductosCompuestos_ProductoCompuestoID");

                    b.HasIndex(new[] { "ProductoId" }, "IX_ProductosCompuestos_ProductoID");

                    b.ToTable("ProductosCompuestos", t =>
                        {
                            t.HasTrigger("ProductosCompuestos_Delete_CDBO");

                            t.HasTrigger("tr_ProductosCompuestos_Delete");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<string>("Acondicionamiento")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Acreditado")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoSinac")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CodigoSINAC");

                    b.Property<string>("Envase")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Incertidumbre")
                        .HasColumnType("money");

                    b.Property<string>("LimiteCuantificacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteDeteccion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LimiteMaximo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProcedimientoEnsayo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProcedimientoEnsayoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcedimientoEnsayoID");

                    b.Property<string>("TecnicaAnalisis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("TiempoEspera")
                        .HasColumnType("float");

                    b.Property<double>("TiempoMaximo")
                        .HasColumnType("float");

                    b.Property<string>("Unidades")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValorParametrico")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idcdbo");

                    b.HasIndex("ProcedimientoEnsayoId");

                    b.ToTable("ProductosCompuestos_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosPlantilla", b =>
                {
                    b.Property<int>("IdproductoCompuestoPlantilla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoCompuestoPlantilla");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoCompuestoPlantilla"));

                    b.Property<byte>("GeneraCompuestoEstadoId")
                        .HasColumnType("tinyint")
                        .HasColumnName("GeneraCompuestoEstadoID")
                        .HasComment("Especifica si Genera Compuesto y en qué procesos (0 = No genera compuesto, 1 = Genera Compuesto siempre, 2 = Genera Compuesto en Alta manual de productos)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdproductoCompuestoPlantilla");

                    b.ToTable("ProductosCompuestosPlantillas");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosPlantillasComponente", b =>
                {
                    b.Property<int>("IdproductoCompuestoPlantillaComponente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoCompuestoPlantillaComponente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoCompuestoPlantillaComponente"));

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("ProductoCompuestoPlantillaId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoPlantillaID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("IdproductoCompuestoPlantillaComponente");

                    b.HasIndex("ProductoId", "MedidaId");

                    b.HasIndex(new[] { "ProductoCompuestoPlantillaId", "ProductoId" }, "IX_ProductosCompuestosPlantillasComponentes_ProductoCompuestoPlantillaID_ProductoID")
                        .IsUnique();

                    b.ToTable("ProductosCompuestosPlantillasComponentes");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosPlantillasLog", b =>
                {
                    b.Property<int>("Idlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlog"));

                    b.Property<int>("ProductoCompuestoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoID")
                        .HasComment("IDProductoCompuesto que se genera una vez llamado al proceso");

                    b.Property<int>("ProductoCompuestoPlantillaId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoPlantillaID")
                        .HasComment("IDPlantilla que tiene asociado el ProductoGeneratorID en el momento de la llamada al proceso de generaci¾n de compuestos");

                    b.Property<int>("ProductoGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoGeneratorID")
                        .HasComment("IDProducto que llama al proceso");

                    b.HasKey("Idlog");

                    b.HasIndex("ProductoCompuestoPlantillaId");

                    b.HasIndex("ProductoGeneratorId");

                    b.ToTable("ProductosCompuestosPlantillas_Log", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjunto", b =>
                {
                    b.Property<int>("Idconjunto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDConjunto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idconjunto"));

                    b.Property<double>("CantidadAgrupacion")
                        .HasColumnType("float");

                    b.Property<double>("CantidadMinima")
                        .HasColumnType("float");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<int?>("ParteFormularioId")
                        .HasColumnType("int")
                        .HasColumnName("ParteFormularioID");

                    b.Property<decimal>("PorcentajeDefectuosos")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("RutaId")
                        .HasColumnType("int")
                        .HasColumnName("RutaID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idconjunto");

                    b.HasIndex("ParteFormularioId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("ProductoId", "MedidaId");

                    b.ToTable("ProductosConjuntos", t =>
                        {
                            t.HasTrigger("tr_ProductosConjuntos_ins");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjuntosComponente", b =>
                {
                    b.Property<int>("Idcomponente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDComponente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcomponente"));

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("ConjuntoId")
                        .HasColumnType("int")
                        .HasColumnName("ConjuntoID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal>("Mermas")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<int?>("OperacionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idcomponente");

                    b.HasIndex("ConjuntoId");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoTipoId");

                    b.HasIndex("ProductoId", "MedidaId");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.ToTable("ProductosConjuntosComponentes");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjuntosDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("ConjuntoId")
                        .HasColumnType("int")
                        .HasColumnName("ConjuntoID");

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("ConjuntoId");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.ToTable("ProductosConjuntos_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Productos_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosEspeciale", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.HasKey("ProductoId");

                    b.ToTable("ProductosEspeciales");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosEstado", b =>
                {
                    b.Property<int>("IdproductoEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoEstado"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdproductoEstado");

                    b.ToTable("ProductosEstado", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosFotosLog", b =>
                {
                    b.Property<int>("Idlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlog"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Operacion")
                        .HasColumnType("int");

                    b.Property<bool>("Procesado")
                        .HasColumnType("bit");

                    b.HasKey("Idlog");

                    b.ToTable("ProductosFotosLog", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProductosProveedore", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("CantidadDesde")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUltimaCompra")
                        .HasColumnType("float");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DescuentoTarifa")
                        .HasColumnType("money");

                    b.Property<int?>("EmpleadoIdtarifa")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoIDTarifa")
                        .HasComment("Empleado que ha informado el precio de la Tarifa");

                    b.Property<DateTime?>("Ftarifa")
                        .HasColumnType("datetime")
                        .HasColumnName("FTarifa")
                        .HasComment("Fecha de última actualización del PrecioTarifa");

                    b.Property<DateTime?>("FultimaCompra")
                        .HasColumnType("datetime")
                        .HasColumnName("FUltimaCompra");

                    b.Property<int?>("PlazosEntrega")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioSinDtoTarifa")
                        .HasColumnType("float");

                    b.Property<double>("PrecioTarifa")
                        .HasColumnType("float");

                    b.Property<double>("PrecioUltimaCompra")
                        .HasColumnType("float");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Tarifa")
                        .HasColumnType("bit");

                    b.HasKey("ProductoId", "PersonaId", "CantidadDesde");

                    b.ToTable("ProductosProveedores");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosSugerido", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("ProductoSugeridoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoSugeridoID");

                    b.Property<double>("CantidadDesde")
                        .HasColumnType("float");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ProductoCompuestoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoCompuestoID");

                    b.Property<bool>("Requerido")
                        .HasColumnType("bit");

                    b.HasKey("ProductoId", "ProductoSugeridoId", "CantidadDesde");

                    b.HasIndex("ProductoSugeridoId");

                    b.ToTable("ProductosSugeridos");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosTipo", b =>
                {
                    b.Property<int>("IdproductoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProductoTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproductoTipo"));

                    b.Property<int?>("AlmacenIdDef")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID_def");

                    b.Property<string>("Codigo")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CtaCompras")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CtaVentas")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("DefaultGestAlmacen")
                        .HasColumnType("bit")
                        .HasColumnName("Default_Gest_Almacen")
                        .HasComment("Valor por defecto para el campo Gest_Almacen en Productos");

                    b.Property<bool>("DefaultGestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Default_Gest_Corte");

                    b.Property<bool>("DefaultGestLotes")
                        .HasColumnType("bit")
                        .HasColumnName("Default_Gest_Lotes")
                        .HasComment("Valor por defecto para el campo Gest_Lotes en Productos");

                    b.Property<bool>("DefaultGestMargen")
                        .HasColumnType("bit")
                        .HasColumnName("Default_Gest_Margen")
                        .HasComment("Valor por defecto para el campo Gest_Margen en Productos");

                    b.Property<bool>("DefaultGestPreciosLotes")
                        .HasColumnType("bit")
                        .HasColumnName("Default_Gest_PreciosLotes");

                    b.Property<bool>("DefaultGestStock")
                        .HasColumnType("bit")
                        .HasColumnName("Default_Gest_Stock")
                        .HasComment("Valor por defecto para el campo Gest_Stock en Productos");

                    b.Property<decimal>("DefaultMargen")
                        .HasColumnType("money")
                        .HasColumnName("Default_Margen")
                        .HasComment("Valor por defecto para el campo Margen en Productos");

                    b.Property<int>("DefaultMargenCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Default_MargenCompraID")
                        .HasDefaultValueSql("((5))");

                    b.Property<bool>("DefaultStockNegativo")
                        .HasColumnType("bit")
                        .HasColumnName("Default_StockNegativo")
                        .HasComment("Valor por defecto para el campo StockNegativo en Productos");

                    b.Property<double?>("Factor")
                        .HasColumnType("float");

                    b.Property<int?>("FormularioId")
                        .HasColumnType("int")
                        .HasColumnName("FormularioID");

                    b.Property<bool>("GestAlmacen")
                        .HasColumnType("bit");

                    b.Property<bool>("GestAtributos")
                        .HasColumnType("bit");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit");

                    b.Property<bool>("GestCorteMultiplos")
                        .HasColumnType("bit")
                        .HasColumnName("GestCorte_Multiplos");

                    b.Property<bool>("GestCorteNumero")
                        .HasColumnType("bit")
                        .HasColumnName("GestCorte_Numero");

                    b.Property<bool>("GestFabricacion")
                        .HasColumnType("bit");

                    b.Property<bool>("GestFamilias")
                        .HasColumnType("bit");

                    b.Property<bool>("GestLotes")
                        .HasColumnType("bit");

                    b.Property<bool?>("GestMedidas")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("GestPreciosLotes")
                        .HasColumnType("bit");

                    b.Property<bool>("GestStock")
                        .HasColumnType("bit");

                    b.Property<bool>("GestTarifasVenta")
                        .HasColumnType("bit");

                    b.Property<bool>("GestVentasMercaderias")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComponente")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompuesto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConjunto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConjuntoParametros")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDetalleCompuesto")
                        .HasColumnType("bit");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UbicacionIdDef")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID_def");

                    b.Property<decimal?>("UnidadAgrupacion")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<string>("WmDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("wm_Description");

                    b.Property<string>("WmKeyword")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("wm_Keyword");

                    b.Property<string>("WmTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wm_Title");

                    b.HasKey("IdproductoTipo");

                    b.HasIndex("DefaultMargenCompraId");

                    b.HasIndex("FormularioId");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("UbicacionIdDef", "AlmacenIdDef");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.ToTable("ProductosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosUnidadesModulo", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("ModuloGestionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuloGestionID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("ProductoId", "ModuloGestionId");

                    b.HasIndex("ModuloGestionId");

                    b.HasIndex("ProductoId", "MedidaId");

                    b.ToTable("ProductosUnidadesModulos");
                });

            modelBuilder.Entity("login4.Models.EF.PropuestasCompra", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<int>("DocumentoOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoOrigenID");

                    b.Property<bool>("Ejecutada")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<string>("Titulo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Idcabecera");

                    b.HasIndex("DocumentoOrigenId");

                    b.ToTable("PropuestasCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PropuestasCompraDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<double>("CantidadPedido")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Fnecesidad")
                        .HasColumnType("datetime")
                        .HasColumnName("FNecesidad");

                    b.Property<int>("LineaOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("LineaOrigenID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("ProveedorID");

                    b.Property<bool>("Seleccionado")
                        .HasColumnType("bit")
                        .HasComment("Marca si el registro ha sido seleccionado para pasar a la 2ª pantalla.");

                    b.Property<double>("StockNecesidad")
                        .HasColumnType("float");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.ToTable("PropuestasCompraDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Proveedore", b =>
                {
                    b.Property<int>("Idpersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPersona")
                        .HasComment("1: Proveedores; 0: Agencias de Transporte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpersona"));

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CifNif")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<int?>("CuentaBancariaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaBancariaEmpresaID");

                    b.Property<int?>("CuentaBancariaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaBancariaID")
                        .HasComment("Cuenta bancaria por defecto para documentos");

                    b.Property<int?>("DescuentoId")
                        .HasColumnType("int")
                        .HasColumnName("DescuentoID");

                    b.Property<int?>("DireccionFraId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionFraID");

                    b.Property<decimal>("DtoComercial")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Efectos")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("ExentoIva")
                        .HasColumnType("bit")
                        .HasColumnName("ExentoIVA");

                    b.Property<bool>("Facturae")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaclaseId")
                        .HasColumnType("int")
                        .HasColumnName("IVAClaseID")
                        .HasComment("No deja introducir un Update en Cascada");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<bool>("M347Excluir")
                        .HasColumnType("bit")
                        .HasColumnName("M347_Excluir");

                    b.Property<int?>("MedioPagoId")
                        .HasColumnType("int")
                        .HasColumnName("MedioPagoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<string>("NotasInt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("NotasIntAviso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("NotasInt_Aviso")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PaginaWeb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RappelId")
                        .HasColumnType("int")
                        .HasColumnName("RappelID");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<string>("TaiCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("TAI_Code");

                    b.Property<string>("TaiEmailAviso")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TAI_EmailAviso");

                    b.Property<bool>("TaiServices")
                        .HasColumnType("bit")
                        .HasColumnName("TAI_Services");

                    b.Property<string>("TaiTelefono1Aviso")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("TAI_Telefono1Aviso");

                    b.Property<string>("TaiTelefono2Aviso")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("TAI_Telefono2Aviso")
                        .HasComment("Este normalmente será el móvil para SMS");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<int?>("TipoTransporteId")
                        .HasColumnType("int")
                        .HasColumnName("TipoTransporteID");

                    b.HasKey("Idpersona");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IvaclaseId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioPagoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TipoId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Proveedores_CDBO")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("Proveedores", t =>
                        {
                            t.HasTrigger("Proveedores_Delete_CDBO");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO")
                        .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla");

                    b.HasKey("Idcdbo");

                    b.ToTable("Proveedores_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cargo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Departamento")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Telefono1")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("Telefono2")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("ProveedoresContactos");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresCuentasBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Iban")
                        .HasColumnType("bit")
                        .HasColumnName("IBAN");

                    b.Property<string>("Ibancodigo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("IBANCodigo");

                    b.Property<string>("Ibancuenta")
                        .HasMaxLength(34)
                        .IsUnicode(false)
                        .HasColumnType("varchar(34)")
                        .HasColumnName("IBANCuenta");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumCta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Swift1")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("SWIFT1");

                    b.Property<string>("Swift2")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWIFT2");

                    b.Property<string>("Swift3")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWIFT3");

                    b.Property<string>("Swift4")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("SWIFT4");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("ProveedoresCuentasBancarias");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDescuento", b =>
                {
                    b.Property<int>("IdpersonaFamilia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPersonaFamilia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpersonaFamilia"));

                    b.Property<bool>("ApplySubFamilias")
                        .HasColumnType("bit")
                        .HasColumnName("Apply_SubFamilias");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("IdpersonaFamilia");

                    b.HasIndex("FamiliaId");

                    b.HasIndex(new[] { "PersonaId", "FamiliaId" }, "IX_ProveedoresDescuentos")
                        .IsUnique();

                    b.ToTable("ProveedoresDescuentos");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDescuentosRoot", b =>
                {
                    b.Property<int>("IdpersonaPt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPersona_PT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpersonaPt"));

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ProductoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoTipoID");

                    b.HasKey("IdpersonaPt");

                    b.HasIndex("PersonaId");

                    b.HasIndex(new[] { "ProductoTipoId", "PersonaId" }, "IX_ProveedoresDescuentos_Root");

                    b.ToTable("ProveedoresDescuentos_Root", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDiasPago", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("DiaInicio")
                        .HasColumnType("int");

                    b.Property<int>("DiaFin")
                        .HasColumnType("int");

                    b.HasKey("PersonaId", "DiaInicio");

                    b.ToTable("ProveedoresDiasPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDireccione", b =>
                {
                    b.Property<int>("IdpersonaDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPersonaDireccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpersonaDireccion"));

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int")
                        .HasColumnName("LocalidadID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinciaID");

                    b.Property<int>("TipoDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDireccionID");

                    b.HasKey("IdpersonaDireccion");

                    b.HasIndex(new[] { "IdpersonaDireccion", "PersonaId" }, "IX_ProveedoresDirecciones")
                        .IsUnique();

                    b.HasIndex(new[] { "LocalidadId" }, "IX_ProveedoresDirecciones_LocalidadID");

                    b.HasIndex(new[] { "PaisId" }, "IX_ProveedoresDirecciones_PaisID");

                    b.HasIndex(new[] { "PersonaId" }, "IX_ProveedoresDirecciones_PersonaID");

                    b.HasIndex(new[] { "ProvinciaId" }, "IX_ProveedoresDirecciones_ProvinciaID");

                    b.ToTable("ProveedoresDirecciones");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresGrupo", b =>
                {
                    b.Property<int>("Idgrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGrupo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idgrupo"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idgrupo");

                    b.ToTable("ProveedoresGrupos");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresMarca", b =>
                {
                    b.Property<int>("MarcaId")
                        .HasColumnType("int")
                        .HasColumnName("MarcaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.ToTable("ProveedoresMarcas");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresPeriodosExentosPago", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PersonaId", "FechaInicio");

                    b.ToTable("ProveedoresPeriodosExentosPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresProveedoresGrupo", b =>
                {
                    b.Property<int>("GrupoId")
                        .HasColumnType("int")
                        .HasColumnName("GrupoID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasIndex("GrupoId");

                    b.HasIndex(new[] { "PersonaId", "GrupoId" }, "PK_Proveedores_ProveedoresGrupos")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "PersonaId", "GrupoId" }, "PK_Proveedores_ProveedoresGrupos"));

                    b.ToTable("Proveedores_ProveedoresGrupos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresTarifasProducto", b =>
                {
                    b.Property<int>("PtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PTP_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PtpId"));

                    b.Property<decimal>("PtpPrecioCompra")
                        .HasColumnType("money")
                        .HasColumnName("PTP_PrecioCompra");

                    b.Property<int>("PtpRefPo")
                        .HasColumnType("int")
                        .HasColumnName("PTP_refPO");

                    b.Property<int>("PtpRefPr")
                        .HasColumnType("int")
                        .HasColumnName("PTP_refPR");

                    b.HasKey("PtpId");

                    b.ToTable("ProveedoresTarifasProducto", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresTelefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Telefono")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("ProveedoresTelefonos");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtipo");

                    b.ToTable("ProveedoresTipos");
                });

            modelBuilder.Entity("login4.Models.EF.Provincia", b =>
                {
                    b.Property<int>("Idprovincia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProvincia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idprovincia"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("PaisID");

                    b.HasKey("Idprovincia");

                    b.HasIndex("PaisId");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("login4.Models.EF.Proyecto", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpleadoResponsableId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoResponsableID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SearchNameKeys")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoId");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_Proyectos_PersonaID_EjercicioID");

                    b.ToTable("Proyectos", t =>
                        {
                            t.HasTrigger("tr_Proyectos_Codigo_Insert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ProyectosDatosDinamico", b =>
                {
                    b.Property<int>("IddatoDinamicoRecordEntidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDatoDinamicoRecordEntidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddatoDinamicoRecordEntidad"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DatoDinamicoGsEntidadDefId")
                        .HasColumnType("int")
                        .HasColumnName("DatoDinamicoGS_EntidadDefID");

                    b.Property<string>("Valor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("IddatoDinamicoRecordEntidad");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("DatoDinamicoGsEntidadDefId");

                    b.ToTable("Proyectos_DatosDinamicos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ProyectosEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool>("AllowModify")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idestado");

                    b.ToTable("ProyectosEstados");
                });

            modelBuilder.Entity("login4.Models.EF.Prueba", b =>
                {
                    b.Property<int>("Idpruba")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPruba");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpruba"));

                    b.Property<DateTime?>("TiempoDt")
                        .HasColumnType("datetime")
                        .HasColumnName("TiempoDT");

                    b.Property<double?>("TiempoF")
                        .HasColumnType("float");

                    b.ToTable("Prueba", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Puesto", b =>
                {
                    b.Property<int>("Idpuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPuesto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpuesto"));

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Formacion")
                        .HasColumnType("text");

                    b.Property<string>("Funciones")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Perfil")
                        .HasColumnType("text");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.HasKey("Idpuesto");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("SeccionId");

                    b.ToTable("Puestos");
                });

            modelBuilder.Entity("login4.Models.EF.PyG", b =>
                {
                    b.Property<int>("IdpyG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPyG");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpyG"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PyGid")
                        .HasColumnType("int")
                        .HasColumnName("PyGID");

                    b.HasKey("IdpyG")
                        .HasName("PK_PyG_IDPyG");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdpyG"), false);

                    b.HasIndex(new[] { "PyGid" }, "IX_pyg_PyGID");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "PyGid" }, "IX_pyg_PyGID"));

                    b.ToTable("PyG", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PyGCuenta", b =>
                {
                    b.Property<int>("IdpyGCuentas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPyG_Cuentas");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdpyGCuentas"));

                    b.Property<string>("Cuenta")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int?>("PyGid")
                        .HasColumnType("int")
                        .HasColumnName("PyGID");

                    b.Property<string>("Signo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdpyGCuentas")
                        .HasName("PK_PyG_cuentas_IDPyG_Cuentas");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdpyGCuentas"), false);

                    b.HasIndex("PyGid");

                    b.ToTable("PyG_Cuentas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PyGa", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("Equivale")
                        .HasColumnType("int");

                    b.Property<string>("Formato")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<double?>("TotalA")
                        .HasColumnType("float")
                        .HasColumnName("Total_A");

                    b.HasKey("Clave");

                    b.ToTable("PyGA", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.PyGaCuenta", b =>
                {
                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Cuenta")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Signo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("Clave", "Cuenta");

                    b.ToTable("PyGA_Cuentas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Rappel", b =>
                {
                    b.Property<int>("Idrappel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRappel");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrappel"));

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal?>("Facturacion")
                        .HasColumnType("money");

                    b.Property<int?>("MesesDto")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idrappel");

                    b.ToTable("Rappels");
                });

            modelBuilder.Entity("login4.Models.EF.RegularizacionesAlmacen", b =>
                {
                    b.Property<Guid>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<string>("CodigoPropio")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("FamiliaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<string>("NombreLote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("PrecioCompraMedio")
                        .HasColumnType("float");

                    b.Property<double?>("PrecioCompraMedioNuevo")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<double>("Stock")
                        .HasColumnType("float");

                    b.Property<double?>("StockNuevo")
                        .HasColumnType("float");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("UidId", "LoteId", "UbicacionId");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("LoteId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UnidadMedidaId");

                    b.ToTable("RegularizacionesAlmacen", null, t =>
                        {
                            t.HasTrigger("RA_T_UpdateMedidaID");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.RemesasCompra", b =>
                {
                    b.Property<int>("Idremesa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRemesa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idremesa"));

                    b.Property<int>("Anno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(datepart(year,getdate()))");

                    b.Property<string>("Comentario")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("FechaCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(convert(datetime,convert(varchar(12),getdate(),103)))");

                    b.Property<DateTime?>("FechaFirma")
                        .HasColumnType("datetime");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Idremesa");

                    b.HasIndex("CuentaId");

                    b.HasIndex("EjercicioId");

                    b.ToTable("RemesasCompra", null, t =>
                        {
                            t.HasTrigger("MaxNumeroAnnoRemesaCompra");

                            t.HasTrigger("OnDeleteRemesaCompra");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.RemesasVentum", b =>
                {
                    b.Property<int>("Idremesa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRemesa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idremesa"));

                    b.Property<int>("Anno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(datepart(year,getdate()))");

                    b.Property<string>("Comentario")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaID");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<DateTime>("FechaCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(convert(datetime,convert(varchar(12),getdate(),103)))");

                    b.Property<DateTime?>("FechaFirma")
                        .HasColumnType("datetime");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Idremesa")
                        .HasName("PK_Remesas");

                    b.HasIndex("CuentaId");

                    b.HasIndex("EjercicioId");

                    b.ToTable("RemesasVenta", t =>
                        {
                            t.HasTrigger("MaxNumeroAnnoRemesaVenta");

                            t.HasTrigger("OnDeleteRemesaVenta");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.RepHorasExtra", b =>
                {
                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int>("OfAsuntosPropios")
                        .HasColumnType("int")
                        .HasColumnName("OF_AsuntosPropios");

                    b.Property<int>("OfBajas")
                        .HasColumnType("int")
                        .HasColumnName("OF_Bajas");

                    b.Property<int>("OfBajasLaborales")
                        .HasColumnType("int")
                        .HasColumnName("OF_BajasLaborales");

                    b.Property<int>("OfVacaciones")
                        .HasColumnType("int")
                        .HasColumnName("OF_Vacaciones");

                    b.ToTable("Rep_HorasExtras", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Report", b =>
                {
                    b.Property<int>("Idreport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReport");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idreport"));

                    b.Property<int?>("CriteriaFormId")
                        .HasColumnType("int")
                        .HasColumnName("Criteria_FormID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("ExportNameFromReportName")
                        .HasColumnType("bit")
                        .HasComment("Indica si el nombre de archivo para exportar se toma del campo Nombre, en caso contrario se toma de la Entidad");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ReportConstructorId")
                        .HasColumnType("int")
                        .HasColumnName("ReportConstructorID");

                    b.Property<int?>("ReportFamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("ReportFamiliaID");

                    b.Property<int>("ReportTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ReportTipoID");

                    b.Property<bool>("ShowPrintedCheckForm")
                        .HasColumnType("bit")
                        .HasComment("Indica si se tiene que mostrar o no el formulario con el Check Impreso para dar el report por Impreso o no");

                    b.HasKey("Idreport");

                    b.HasIndex("ReportConstructorId");

                    b.HasIndex("ReportFamiliaId");

                    b.HasIndex("ReportTipoId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsConstructor", b =>
                {
                    b.Property<int>("IdreportConstructor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportConstructor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportConstructor"));

                    b.Property<string>("Constructor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("constructor");

                    b.HasKey("IdreportConstructor");

                    b.ToTable("ReportsConstructor", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ReportsCriteria", b =>
                {
                    b.Property<int>("IdreportCriteria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportCriteria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportCriteria"));

                    b.Property<string>("CriteriaComponentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CriteriaComponentPropertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CriteriaOwnerFormName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DataPipelineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("Mandatory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ReportComponentFormName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ReportComponentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReportLauncherId")
                        .HasColumnType("int")
                        .HasColumnName("ReportLauncherID");

                    b.HasKey("IdreportCriteria");

                    b.HasIndex("ReportLauncherId");

                    b.ToTable("ReportsCriterias");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsFamilia", b =>
                {
                    b.Property<int>("IdreportFamilia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportFamilia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportFamilia"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ReportFamiliaId")
                        .HasColumnType("int")
                        .HasColumnName("ReportFamiliaID");

                    b.HasKey("IdreportFamilia");

                    b.ToTable("ReportsFamilias", t =>
                        {
                            t.HasTrigger("EliminacionFamiliasReports");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ReportsLauncher", b =>
                {
                    b.Property<int>("IdreportLauncher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportLauncher");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportLauncher"));

                    b.Property<string>("ComponentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OwnerFormName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ReportComponentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.Property<int?>("ReportLauncherId")
                        .HasColumnType("int")
                        .HasColumnName("ReportLauncherID");

                    b.HasKey("IdreportLauncher");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportsLaunchers");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsTipo", b =>
                {
                    b.Property<int>("IdreportTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportTipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdreportTipo");

                    b.ToTable("ReportsTipos");
                });

            modelBuilder.Entity("login4.Models.EF.ReservasStock", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int>("CabeceraOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOrigenID");

                    b.Property<int>("DgorigenId")
                        .HasColumnType("int")
                        .HasColumnName("DGOrigenID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("Idcabecera");

                    b.ToTable("ReservasStock", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ReservasStockDetalle", b =>
                {
                    b.Property<int>("Iddetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddetalle"));

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID");

                    b.Property<int>("AlmacenReservaId")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenReservaID");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FechaFinReserva")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicioReserva")
                        .HasColumnType("datetime");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("bit");

                    b.Property<int>("LineaOrigenId")
                        .HasColumnType("int")
                        .HasColumnName("LineaOrigenID");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<double>("PrecioCoste")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID");

                    b.Property<int>("UbicacionReservaId")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionReservaID");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Iddetalle");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("AlmacenReservaId");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UbicacionId", "AlmacenId");

                    b.HasIndex("UbicacionReservaId", "AlmacenReservaId");

                    b.ToTable("ReservasStockDetalle", null, t =>
                        {
                            t.HasTrigger("tr_ReservasStockDetalle_DGDU_del");

                            t.HasTrigger("tr_ReservasStockDetalle_DGDU_ins");

                            t.HasTrigger("tr_ReservasStockDetalle_DGDU_upd");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Resultado", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte[]>("Lvalue")
                        .HasColumnType("image")
                        .HasColumnName("lvalue");

                    b.Property<int?>("Objectid")
                        .HasColumnType("int")
                        .HasColumnName("objectid");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("property");

                    b.Property<string>("Uvalue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("uvalue");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.ToTable("Resultados");
                });

            modelBuilder.Entity("login4.Models.EF.RpReportsCliente", b =>
                {
                    b.Property<int>("IdreportPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportPersona");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportPersona"));

                    b.Property<int>("Ncopias")
                        .HasColumnType("int")
                        .HasColumnName("NCopias");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.HasKey("IdreportPersona");

                    b.ToTable("RP_ReportsCliente", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RpReportsDefault", b =>
                {
                    b.Property<int>("Ncopias")
                        .HasColumnType("int")
                        .HasColumnName("NCopias");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.ToTable("RP_ReportsDefault", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RpReportsDg", b =>
                {
                    b.Property<int>("IdreportDg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportDG");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportDg"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int>("DocumentoGestionId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoGestionID");

                    b.Property<int>("Ncopias")
                        .HasColumnType("int")
                        .HasColumnName("NCopias");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.HasKey("IdreportDg");

                    b.ToTable("RP_ReportsDG", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RpReportsProveedor", b =>
                {
                    b.Property<int>("IdreportPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReportPersona");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdreportPersona"));

                    b.Property<int>("Ncopias")
                        .HasColumnType("int")
                        .HasColumnName("NCopias");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.HasKey("IdreportPersona");

                    b.ToTable("RP_ReportsProveedor", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacion", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("CotizacionPerCent")
                        .HasColumnType("int");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Fliquidacion")
                        .HasColumnType("datetime")
                        .HasColumnName("FLiquidacion");

                    b.Property<decimal>("ImporteNominaKilometros")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteNominaNumHorasExtra")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteNominaTotalActividad")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteNominaTotalDietas")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteNominaTotalHorasExtra")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteNominaTotalKilometros")
                        .HasColumnType("money");

                    b.Property<int>("LaborablesMes")
                        .HasColumnType("int");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<double>("NumAccidente")
                        .HasColumnType("float");

                    b.Property<double>("NumCompensacionFestivo")
                        .HasColumnType("float");

                    b.Property<double>("NumDietas")
                        .HasColumnType("float");

                    b.Property<double>("NumEnfermedad")
                        .HasColumnType("float");

                    b.Property<double>("NumFestivoTrabajado")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasA")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasExtra")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasExtraFestivo")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasNormal")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasReten")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasTotal")
                        .HasColumnType("float");

                    b.Property<double>("NumKilometros")
                        .HasColumnType("float");

                    b.Property<double>("NumLaborablesTrabajados")
                        .HasColumnType("float");

                    b.Property<double>("NumPermiso")
                        .HasColumnType("float");

                    b.Property<double>("NumServicioReten")
                        .HasColumnType("float");

                    b.Property<double>("NumVacaciones")
                        .HasColumnType("float");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<decimal>("Otros")
                        .HasColumnType("money");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<decimal>("PrecioDieta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("PrecioHoraExtra")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioHoraExtraFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioKilometro")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaCompensacionFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaHoraReten")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaLaborable")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaMensual")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimaServicioReten")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalDevengado")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalDietas")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalHorasA")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalHorasExtra")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalHorasExtraFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalHorasReten")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalKilometros")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPrimaCompensacionFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPrimaFestivo")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPrimaLaborable")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPrimaMensual")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalServicioReten")
                        .HasColumnType("money");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PersonaId");

                    b.ToTable("RRHH_PrimasLiquidacion", null, t =>
                        {
                            t.HasTrigger("tr_RRHH_PrimasLiquidacion_Insert");

                            t.HasTrigger("tr_RRHH_PrimasLiquidacion_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacionDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<double>("Accidente")
                        .HasColumnType("float");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("CompensacionFestivo")
                        .HasColumnType("float");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<double>("Enfermedad")
                        .HasColumnType("float");

                    b.Property<DateTime>("Falta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<double>("Festivo")
                        .HasColumnType("float");

                    b.Property<DateTime>("FultimaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FUltimaModificacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("NumDieta")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasA")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasExtra")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasExtraFestivo")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasNormal")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasReten")
                        .HasColumnType("float");

                    b.Property<double>("NumHorasTotal")
                        .HasColumnType("float");

                    b.Property<double>("NumKilometros")
                        .HasColumnType("float");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<double>("Permiso")
                        .HasColumnType("float");

                    b.Property<double>("ServicioReten")
                        .HasColumnType("float");

                    b.Property<int>("TipoLineaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int")
                        .HasColumnName("TurnoID");

                    b.Property<double>("Vacaciones")
                        .HasColumnType("float");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("TurnoId");

                    b.ToTable("RRHH_PrimasLiquidacionDetalle", null, t =>
                        {
                            t.HasTrigger("tr_RRHH_PrimasLiquidacionDetalle_Insert");

                            t.HasTrigger("tr_RRHH_PrimasLiquidacionDetalle_Updatet");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacionEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado")
                        .HasName("PK_RRHH_LiquidacionesPrimasEstados");

                    b.ToTable("RRHH_PrimasLiquidacionEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RrhhSetup", b =>
                {
                    b.Property<int>("Idsetup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSetup");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsetup"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("CategoriaID");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<decimal>("Valor")
                        .HasColumnType("money");

                    b.HasKey("Idsetup");

                    b.HasIndex("CategoriaId");

                    b.ToTable("RRHH_Setup", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RrhhSetupCategoria", b =>
                {
                    b.Property<int>("Idcategoria")
                        .HasColumnType("int")
                        .HasColumnName("IDCategoria");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idcategoria");

                    b.ToTable("RRHH_SetupCategorias", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.RutasProduccion", b =>
                {
                    b.Property<int>("Idruta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRuta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idruta"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<double>("TotalPrecioCoste")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoPreparacion")
                        .HasColumnType("float");

                    b.Property<double>("TotalTiempoUnitario")
                        .HasColumnType("float");

                    b.HasKey("Idruta");

                    b.ToTable("RutasProduccion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Sctab", b =>
                {
                    b.Property<string>("Cod")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("COD");

                    b.Property<string>("Codbanco")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("CODBANCO");

                    b.Property<string>("Codcuenta")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CODCUENTA");

                    b.Property<string>("Coddc")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("CODDC");

                    b.Property<string>("Codoficina")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("CODOFICINA");

                    b.Property<string>("Cpord")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("CPORD");

                    b.Property<string>("Niford")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NIFORD");

                    b.Property<string>("Nord")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("NORD");

                    b.Property<string>("Pzord")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)")
                        .HasColumnName("PZORD");

                    b.ToTable("SCTAB", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Seccione", b =>
                {
                    b.Property<int>("Idseccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSeccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idseccion"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("DepartamentoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int")
                        .HasColumnName("SeccionID");

                    b.HasKey("Idseccion");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("SeccionId");

                    b.HasIndex(new[] { "Idseccion", "DepartamentoId" }, "IX_Secciones_Departamento")
                        .IsUnique();

                    b.ToTable("Secciones");
                });

            modelBuilder.Entity("login4.Models.EF.Series", b =>
                {
                    b.Property<int>("Idserie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSerie");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idserie"));

                    b.Property<bool>("Abono")
                        .HasColumnType("bit")
                        .HasComment("vale 1 si la serie es de abono");

                    b.Property<bool>("Autofactura")
                        .HasColumnType("bit");

                    b.Property<bool>("Isp")
                        .HasColumnType("bit")
                        .HasColumnName("ISP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SiiFeOperacionDescripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SII_FE_OperacionDescripcion");

                    b.Property<string>("SiiFrOperacionDescripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SII_FR_OperacionDescripcion");

                    b.HasKey("Idserie");

                    b.ToTable("Series", t =>
                        {
                            t.HasTrigger("Check_Abono_Unique");

                            t.HasTrigger("Check_Autofactura_Unique");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.SrvContrato", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<double?>("Duracion")
                        .HasColumnType("float");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<bool?>("FacturacionPorPlanificacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("FfinContrato")
                        .HasColumnType("datetime")
                        .HasColumnName("FFinContrato");

                    b.Property<DateTime?>("FinicioContrato")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicioContrato");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<DateTime?>("Frenovacion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRenovacion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Renovable")
                        .HasColumnType("bit");

                    b.Property<bool>("Renovado")
                        .HasColumnType("bit");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_SRV_Contratos")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("SRV_Contratos", null, t =>
                        {
                            t.HasTrigger("Act_Num_SRV_Contratos");

                            t.HasTrigger("SRV_Contratos_Delete_CDBO");

                            t.HasTrigger("tr_SRV_Contratos_MaxAnno");

                            t.HasTrigger("tr_SRV_Contratos_PasarACliente");

                            t.HasTrigger("tr_SRV_Contratos_UpdateFromDescuento");

                            t.HasTrigger("tr_SRV_Contratos_UpdateStateAnuladoInDetails");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("SRV_Contratos_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<bool>("AdmiteRevision")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DescuentoGeneral")
                        .HasColumnType("money");

                    b.Property<int?>("DireccionInstalacionId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionInstalacionID");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("Garantia")
                        .HasColumnType("bit");

                    b.Property<double?>("GarantiaTiempo")
                        .HasColumnType("float");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Renovable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.Property<string>("Zonas")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("DireccionInstalacionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_SRV_ContratosDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_SRV_ContratosDetalle_CabeceraID");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_SRV_ContratosDetalle_LineaID_NumLinea");

                    b.ToTable("SRV_ContratosDetalle", null, t =>
                        {
                            t.HasTrigger("SRV_ContratosDetalleAfterDelete");

                            t.HasTrigger("SRV_ContratosDetalle_Delete_CDBO");

                            t.HasTrigger("SRV_ContratosDetalle_UpdateCoste");

                            t.HasTrigger("tr_SRV_ContratosDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_SRV_ContratosDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_SRV_ContratosDetalle_UpdateCantidadServidaRelatedDocs");

                            t.HasTrigger("tr_SRV_ContratosDetalle_UpdatePortes");

                            t.HasTrigger("tr_SRV_ContratosDetalle_UpdateState");

                            t.HasTrigger("tr_SRV_ContratosDetalle_UpdateStateDetalle");

                            t.HasTrigger("tr_SRV_ContratosDetalle_Update_NumLinea");

                            t.HasTrigger("tr_SRV_Contratos_UpdateTotalesCabecera");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo")
                        .HasName("SRV_PK_ContratosDetalle_CDBO");

                    b.ToTable("SRV_ContratosDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("SRV_ContratosEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosPlanificacion", b =>
                {
                    b.Property<int>("Idplanificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPlanificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idplanificacion"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<int?>("CabeceraOfidRelated")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraOFID_Related");

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("FechaFija")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Fprevista")
                        .HasColumnType("datetime")
                        .HasColumnName("FPrevista");

                    b.Property<int>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("Revision")
                        .HasColumnType("int");

                    b.HasKey("Idplanificacion");

                    b.HasIndex("CabeceraId");

                    b.ToTable("SRV_ContratosPlanificacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("SRV_PresupuestosVenta_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<bool>("AdmiteRevision")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadAlquiler")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPendiente")
                        .HasColumnType("float");

                    b.Property<double>("CantidadServida")
                        .HasColumnType("float");

                    b.Property<double>("CantidadUnitaria")
                        .HasColumnType("float");

                    b.Property<double>("CantidadX")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X");

                    b.Property<double?>("CantidadXInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_X_Inicial");

                    b.Property<double>("CantidadY")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y");

                    b.Property<double?>("CantidadYInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Y_Inicial");

                    b.Property<double>("CantidadZ")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z");

                    b.Property<double?>("CantidadZInicial")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_Z_Inicial");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ConceptoRetencionId")
                        .HasColumnType("int")
                        .HasColumnName("ConceptoRetencionID");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<double>("CosteSinDto")
                        .HasColumnType("float");

                    b.Property<double>("CosteUnitario")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<decimal>("DescuentoGeneral")
                        .HasColumnType("money");

                    b.Property<int?>("DireccionInstalacionId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionInstalacionID");

                    b.Property<decimal>("DtoCoste")
                        .HasColumnType("money");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<bool>("Garantia")
                        .HasColumnType("bit");

                    b.Property<double?>("GarantiaTiempo")
                        .HasColumnType("float");

                    b.Property<bool>("GestCorte")
                        .HasColumnType("bit")
                        .HasColumnName("Gest_Corte");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvaTipoId")
                        .HasColumnType("int")
                        .HasColumnName("IvaTipoID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("LoteID");

                    b.Property<decimal>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MargenClaveId")
                        .HasColumnType("int")
                        .HasColumnName("MargenClaveID");

                    b.Property<int>("MargenTipoId")
                        .HasColumnType("int")
                        .HasColumnName("MargenTipoID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<double?>("NumeroCX")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_X");

                    b.Property<double?>("NumeroCY")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Y");

                    b.Property<double?>("NumeroCZ")
                        .HasColumnType("float")
                        .HasColumnName("Numero_C_Z");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("PrecioVentaProducto")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<bool>("RecargoEquivalencia")
                        .HasColumnType("bit");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Renovable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Retencion")
                        .HasColumnType("money");

                    b.Property<decimal>("TiempoAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBeneficio")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.Property<int?>("UnidadMedidaIdCorteX")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_X");

                    b.Property<int?>("UnidadMedidaIdCorteY")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Y");

                    b.Property<int?>("UnidadMedidaIdCorteZ")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID_Corte_Z");

                    b.Property<double>("UnidadesCorte")
                        .HasColumnType("float");

                    b.Property<string>("Zonas")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Idlinea");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ConceptoRetencionId");

                    b.HasIndex("DireccionInstalacionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvaClaseId");

                    b.HasIndex("IvaTipoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MargenClaveId");

                    b.HasIndex("MargenTipoId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoLineaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex("UnidadMedidaIdCorteX");

                    b.HasIndex("UnidadMedidaIdCorteY");

                    b.HasIndex("UnidadMedidaIdCorteZ");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_SRV_PresupuestosVentaDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "CabeceraId" }, "IX_SRV_PresupuestosVentaDetalle_CabeceraID");

                    b.HasIndex(new[] { "LineaId", "NumLinea" }, "IX_SRV_PresupuestosVentaDetalle_LineaID_NumLinea");

                    b.ToTable("SRV_PresupuestosVentaDetalle", null, t =>
                        {
                            t.HasTrigger("SRV_PresupuestosVentaDetalleAfterDelete");

                            t.HasTrigger("SRV_PresupuestosVentaDetalle_Delete_CDBO");

                            t.HasTrigger("UpdatePortes_SRV_PresupuestosVenta");

                            t.HasTrigger("Update_SRV_PresupuestosVentaTotalesCabecera");

                            t.HasTrigger("tr_SRV_PresupuestosVentaDetalle_Delete_NumLinea");

                            t.HasTrigger("tr_SRV_PresupuestosVentaDetalle_Insert_NumLinea");

                            t.HasTrigger("tr_SRV_PresupuestosVentaDetalle_Update_NumLinea");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo")
                        .HasName("SRV_PK_PresupuestosVentaDetalle_CDBO");

                    b.ToTable("SRV_PresupuestosVentaDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("SRV_PresupuestosVentaEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentum", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<int?>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CalculoPortesTipo")
                        .HasColumnType("int");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<int?>("CentroCosteId")
                        .HasColumnType("int")
                        .HasColumnName("CentroCosteID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ComercialId")
                        .HasColumnType("int")
                        .HasColumnName("ComercialID");

                    b.Property<int?>("ComisionId")
                        .HasColumnType("int")
                        .HasColumnName("ComisionID");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int")
                        .HasColumnName("ContactoID");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<double?>("Duracion")
                        .HasColumnType("float");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<bool?>("FacturacionPorPlanificacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Frecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("FRecepcion");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Renovable")
                        .HasColumnType("bit");

                    b.Property<bool?>("RevisionPrecios")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("TarifaAgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaAgenciaID");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.Property<string>("Version")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Volumen")
                        .HasColumnType("float");

                    b.HasKey("Idcabecera");

                    b.HasIndex("CentroCosteId");

                    b.HasIndex("ComercialId");

                    b.HasIndex("ComisionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("MedioId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaAgenciaId", "AgenciaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_SRV_PresupuestosVenta")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("SRV_PresupuestosVenta", null, t =>
                        {
                            t.HasTrigger("Act_Num_SRV_PresupuestosVenta");

                            t.HasTrigger("SRV_MaxPresupuestoVentaAnno");

                            t.HasTrigger("SRV_PresupuestosVenta_Delete_CDBO");

                            t.HasTrigger("SRV_UpdatePresupuestoVentaFromDescuento");

                            t.HasTrigger("SRV_UpdateStatePresupuestosVentaDetalleFromHeader");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Subctum", b =>
                {
                    b.Property<double?>("Acudb")
                        .HasColumnType("float")
                        .HasColumnName("ACUDB");

                    b.Property<double?>("Acuhb")
                        .HasColumnType("float")
                        .HasColumnName("ACUHB");

                    b.Property<bool>("Ajustame")
                        .HasColumnType("bit")
                        .HasColumnName("AJUSTAME");

                    b.Property<string>("Cod")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("COD");

                    b.Property<string>("Coddivisa")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("CODDIVISA");

                    b.Property<string>("Codpostal")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("CODPOSTAL");

                    b.Property<bool>("Divisa")
                        .HasColumnType("bit")
                        .HasColumnName("DIVISA");

                    b.Property<bool>("Documento")
                        .HasColumnType("bit")
                        .HasColumnName("DOCUMENTO");

                    b.Property<string>("Domicilio")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnName("DOMICILIO");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Fax01")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("FAX01");

                    b.Property<double?>("Ndb")
                        .HasColumnType("float")
                        .HasColumnName("NDB");

                    b.Property<double?>("Ndb01")
                        .HasColumnType("float")
                        .HasColumnName("NDB01");

                    b.Property<double?>("Ndb01eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB01EU");

                    b.Property<double?>("Ndb02")
                        .HasColumnType("float")
                        .HasColumnName("NDB02");

                    b.Property<double?>("Ndb02eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB02EU");

                    b.Property<double?>("Ndb03")
                        .HasColumnType("float")
                        .HasColumnName("NDB03");

                    b.Property<double?>("Ndb03eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB03EU");

                    b.Property<double?>("Ndb04")
                        .HasColumnType("float")
                        .HasColumnName("NDB04");

                    b.Property<double?>("Ndb04eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB04EU");

                    b.Property<double?>("Ndb05")
                        .HasColumnType("float")
                        .HasColumnName("NDB05");

                    b.Property<double?>("Ndb05eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB05EU");

                    b.Property<double?>("Ndb06")
                        .HasColumnType("float")
                        .HasColumnName("NDB06");

                    b.Property<double?>("Ndb06eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB06EU");

                    b.Property<double?>("Ndb07")
                        .HasColumnType("float")
                        .HasColumnName("NDB07");

                    b.Property<double?>("Ndb07eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB07EU");

                    b.Property<double?>("Ndb08")
                        .HasColumnType("float")
                        .HasColumnName("NDB08");

                    b.Property<double?>("Ndb08eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB08EU");

                    b.Property<double?>("Ndb09")
                        .HasColumnType("float")
                        .HasColumnName("NDB09");

                    b.Property<double?>("Ndb09eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB09EU");

                    b.Property<double?>("Ndb10")
                        .HasColumnType("float")
                        .HasColumnName("NDB10");

                    b.Property<double?>("Ndb10eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB10EU");

                    b.Property<double?>("Ndb11")
                        .HasColumnType("float")
                        .HasColumnName("NDB11");

                    b.Property<double?>("Ndb11eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB11EU");

                    b.Property<double?>("Ndb12")
                        .HasColumnType("float")
                        .HasColumnName("NDB12");

                    b.Property<double?>("Ndb12eu")
                        .HasColumnType("float")
                        .HasColumnName("NDB12EU");

                    b.Property<double?>("Ndbeu")
                        .HasColumnType("float")
                        .HasColumnName("NDBEU");

                    b.Property<double?>("Nhb")
                        .HasColumnType("float")
                        .HasColumnName("NHB");

                    b.Property<double?>("Nhb01")
                        .HasColumnType("float")
                        .HasColumnName("NHB01");

                    b.Property<double?>("Nhb01eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB01EU");

                    b.Property<double?>("Nhb02")
                        .HasColumnType("float")
                        .HasColumnName("NHB02");

                    b.Property<double?>("Nhb02eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB02EU");

                    b.Property<double?>("Nhb03")
                        .HasColumnType("float")
                        .HasColumnName("NHB03");

                    b.Property<double?>("Nhb03eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB03EU");

                    b.Property<double?>("Nhb04")
                        .HasColumnType("float")
                        .HasColumnName("NHB04");

                    b.Property<double?>("Nhb04eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB04EU");

                    b.Property<double?>("Nhb05")
                        .HasColumnType("float")
                        .HasColumnName("NHB05");

                    b.Property<double?>("Nhb05eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB05EU");

                    b.Property<double?>("Nhb06")
                        .HasColumnType("float")
                        .HasColumnName("NHB06");

                    b.Property<double?>("Nhb06eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB06EU");

                    b.Property<double?>("Nhb07")
                        .HasColumnType("float")
                        .HasColumnName("NHB07");

                    b.Property<double?>("Nhb07eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB07EU");

                    b.Property<double?>("Nhb08")
                        .HasColumnType("float")
                        .HasColumnName("NHB08");

                    b.Property<double?>("Nhb08eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB08EU");

                    b.Property<double?>("Nhb09")
                        .HasColumnType("float")
                        .HasColumnName("NHB09");

                    b.Property<double?>("Nhb09eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB09EU");

                    b.Property<double?>("Nhb10")
                        .HasColumnType("float")
                        .HasColumnName("NHB10");

                    b.Property<double?>("Nhb10eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB10EU");

                    b.Property<double?>("Nhb11")
                        .HasColumnType("float")
                        .HasColumnName("NHB11");

                    b.Property<double?>("Nhb11eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB11EU");

                    b.Property<double?>("Nhb12")
                        .HasColumnType("float")
                        .HasColumnName("NHB12");

                    b.Property<double?>("Nhb12eu")
                        .HasColumnType("float")
                        .HasColumnName("NHB12EU");

                    b.Property<double?>("Nhbeu")
                        .HasColumnType("float")
                        .HasColumnName("NHBEU");

                    b.Property<string>("Nif")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("NIF");

                    b.Property<string>("Poblacion")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("POBLACION");

                    b.Property<string>("Provincia")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROVINCIA");

                    b.Property<double?>("Recequiv")
                        .HasColumnType("float")
                        .HasColumnName("RECEQUIV");

                    b.Property<double?>("Sdb01")
                        .HasColumnType("float")
                        .HasColumnName("SDB01");

                    b.Property<double?>("Sdb01eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB01EU");

                    b.Property<double?>("Sdb02")
                        .HasColumnType("float")
                        .HasColumnName("SDB02");

                    b.Property<double?>("Sdb02eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB02EU");

                    b.Property<double?>("Sdb03")
                        .HasColumnType("float")
                        .HasColumnName("SDB03");

                    b.Property<double?>("Sdb03eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB03EU");

                    b.Property<double?>("Sdb04")
                        .HasColumnType("float")
                        .HasColumnName("SDB04");

                    b.Property<double?>("Sdb04eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB04EU");

                    b.Property<double?>("Sdb05")
                        .HasColumnType("float")
                        .HasColumnName("SDB05");

                    b.Property<double?>("Sdb05eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB05EU");

                    b.Property<double?>("Sdb06")
                        .HasColumnType("float")
                        .HasColumnName("SDB06");

                    b.Property<double?>("Sdb06eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB06EU");

                    b.Property<double?>("Sdb07")
                        .HasColumnType("float")
                        .HasColumnName("SDB07");

                    b.Property<double?>("Sdb07eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB07EU");

                    b.Property<double?>("Sdb08")
                        .HasColumnType("float")
                        .HasColumnName("SDB08");

                    b.Property<double?>("Sdb08eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB08EU");

                    b.Property<double?>("Sdb09")
                        .HasColumnType("float")
                        .HasColumnName("SDB09");

                    b.Property<double?>("Sdb09eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB09EU");

                    b.Property<double?>("Sdb10")
                        .HasColumnType("float")
                        .HasColumnName("SDB10");

                    b.Property<double?>("Sdb10eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB10EU");

                    b.Property<double?>("Sdb11")
                        .HasColumnType("float")
                        .HasColumnName("SDB11");

                    b.Property<double?>("Sdb11eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB11EU");

                    b.Property<double?>("Sdb12")
                        .HasColumnType("float")
                        .HasColumnName("SDB12");

                    b.Property<double?>("Sdb12eu")
                        .HasColumnType("float")
                        .HasColumnName("SDB12EU");

                    b.Property<double?>("Sdbme")
                        .HasColumnType("float")
                        .HasColumnName("SDBME");

                    b.Property<double?>("Shb01")
                        .HasColumnType("float")
                        .HasColumnName("SHB01");

                    b.Property<double?>("Shb01eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB01EU");

                    b.Property<double?>("Shb02")
                        .HasColumnType("float")
                        .HasColumnName("SHB02");

                    b.Property<double?>("Shb02eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB02EU");

                    b.Property<double?>("Shb03")
                        .HasColumnType("float")
                        .HasColumnName("SHB03");

                    b.Property<double?>("Shb03eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB03EU");

                    b.Property<double?>("Shb04")
                        .HasColumnType("float")
                        .HasColumnName("SHB04");

                    b.Property<double?>("Shb04eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB04EU");

                    b.Property<double?>("Shb05")
                        .HasColumnType("float")
                        .HasColumnName("SHB05");

                    b.Property<double?>("Shb05eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB05EU");

                    b.Property<double?>("Shb06")
                        .HasColumnType("float")
                        .HasColumnName("SHB06");

                    b.Property<double?>("Shb06eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB06EU");

                    b.Property<double?>("Shb07")
                        .HasColumnType("float")
                        .HasColumnName("SHB07");

                    b.Property<double?>("Shb07eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB07EU");

                    b.Property<double?>("Shb08")
                        .HasColumnType("float")
                        .HasColumnName("SHB08");

                    b.Property<double?>("Shb08eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB08EU");

                    b.Property<double?>("Shb09")
                        .HasColumnType("float")
                        .HasColumnName("SHB09");

                    b.Property<double?>("Shb09eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB09EU");

                    b.Property<double?>("Shb10")
                        .HasColumnType("float")
                        .HasColumnName("SHB10");

                    b.Property<double?>("Shb10eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB10EU");

                    b.Property<double?>("Shb11")
                        .HasColumnType("float")
                        .HasColumnName("SHB11");

                    b.Property<double?>("Shb11eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB11EU");

                    b.Property<double?>("Shb12")
                        .HasColumnType("float")
                        .HasColumnName("SHB12");

                    b.Property<double?>("Shb12eu")
                        .HasColumnType("float")
                        .HasColumnName("SHB12EU");

                    b.Property<double?>("Shbme")
                        .HasColumnType("float")
                        .HasColumnName("SHBME");

                    b.Property<string>("Subequiv")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("SUBEQUIV");

                    b.Property<double?>("Sumadb")
                        .HasColumnType("float")
                        .HasColumnName("SUMADB");

                    b.Property<double?>("Sumadbeu")
                        .HasColumnType("float")
                        .HasColumnName("SUMADBEU");

                    b.Property<double?>("Sumahb")
                        .HasColumnType("float")
                        .HasColumnName("SUMAHB");

                    b.Property<double?>("Sumahbeu")
                        .HasColumnType("float")
                        .HasColumnName("SUMAHBEU");

                    b.Property<string>("Telef01")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("TELEF01");

                    b.Property<string>("Tipoiva")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("TIPOIVA");

                    b.Property<string>("Titulo")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("TITULO");

                    b.Property<string>("Titulol")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TITULOL");

                    b.Property<double?>("Tpc")
                        .HasColumnType("float")
                        .HasColumnName("TPC");

                    b.ToTable("Subcta");
                });

            modelBuilder.Entity("login4.Models.EF.SyncConnection", b =>
                {
                    b.Property<int>("Idconnection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDConnection");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idconnection"));

                    b.Property<string>("Datasource")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("Idguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDGUID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Provider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Server")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Idconnection");

                    b.HasIndex("TipoId");

                    b.ToTable("sync_Connections", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SyncOperation", b =>
                {
                    b.Property<int>("Idoperation")
                        .HasColumnType("int")
                        .HasColumnName("IDOperation");

                    b.Property<bool>("SynchronizedVisibility")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Idoperation", "SynchronizedVisibility");

                    b.ToTable("sync_Operations", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SyncSynchronization", b =>
                {
                    b.Property<int>("Idsynchronization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSynchronization");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsynchronization"));

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int")
                        .HasColumnName("ConnectionID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Idsynchronization");

                    b.HasIndex("ConnectionId");

                    b.ToTable("sync_Synchronizations", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SyncSynchronizedRecord", b =>
                {
                    b.Property<int>("IdsynchronizedRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSynchronizedRecord");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdsynchronizedRecord"));

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int")
                        .HasColumnName("ConnectionID");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int")
                        .HasColumnName("EntidadID");

                    b.Property<int>("EntidadKeyValue")
                        .HasColumnType("int")
                        .HasColumnName("Entidad_KeyValue");

                    b.Property<DateTime>("Fsynch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FSynch")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdremoteKeyValue")
                        .HasColumnType("int")
                        .HasColumnName("IDRemote_KeyValue");

                    b.HasKey("IdsynchronizedRecord");

                    b.HasIndex("EntidadId");

                    b.HasIndex(new[] { "ConnectionId", "EntidadId", "EntidadKeyValue" }, "UIX_sync_SynchronizedRecords_ConnectionID_EntidadID_Entidad_KeyValue")
                        .IsUnique();

                    b.ToTable("sync_SynchronizedRecords", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.SyncTipo", b =>
                {
                    b.Property<int>("Idtipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTipo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SyncCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("sync_Code");

                    b.HasKey("Idtipo");

                    b.ToTable("sync_Tipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Tarea", b =>
                {
                    b.Property<int>("Idtarea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtarea"));

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmpleadoAsignadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoAsignadoID");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID")
                        .HasComment("Empleado que da de alta la tarea");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID")
                        .HasComment("Empresa a la que pertenece el EmpleadoID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaAviso")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Idguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDGUID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Notas")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OfdetalleId")
                        .HasColumnType("int")
                        .HasColumnName("OFDetalleID");

                    b.Property<int?>("Ofid")
                        .HasColumnType("int")
                        .HasColumnName("OFID");

                    b.Property<int?>("OftipoId")
                        .HasColumnType("int")
                        .HasColumnName("OFTipoID");

                    b.Property<int>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID")
                        .HasComment("Llamada, email, reunión cliente, interno");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("int")
                        .HasColumnName("ProyectoID");

                    b.Property<int?>("TareaId")
                        .HasColumnType("int")
                        .HasColumnName("TareaID");

                    b.Property<int>("TipoClaseId")
                        .HasColumnType("int")
                        .HasColumnName("TipoClaseID")
                        .HasComment("FK contra la tabla TSK_TareasClases, define las clases para cada tipo de Tarea (Mant. Soft., Básica, Personal, etc.)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasComment("Error, Mejora, Mejora interna, etc.");

                    b.HasKey("Idtarea");

                    b.HasIndex("EmpleadoAsignadoId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("OrigenId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("TipoClaseId");

                    b.HasIndex("TipoId");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("login4.Models.EF.Tarifa", b =>
                {
                    b.Property<int>("Idtarifa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarifa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtarifa"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Ffin")
                        .HasColumnType("datetime")
                        .HasColumnName("FFin");

                    b.Property<DateTime?>("Finicio")
                        .HasColumnType("datetime")
                        .HasColumnName("FInicio");

                    b.Property<bool>("General")
                        .HasColumnType("bit")
                        .HasComment("Determina si la Tarifa se aplica a aquellos clientes que no tienen Tarifa especifica");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idtarifa");

                    b.ToTable("Tarifas");
                });

            modelBuilder.Entity("login4.Models.EF.TarifasDetalle", b =>
                {
                    b.Property<int>("IdtarifaDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarifaDetalle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtarifaDetalle"));

                    b.Property<int>("CalculoTipo")
                        .HasColumnType("int")
                        .HasComment("1 > Fijo, 2 > Margen");

                    b.Property<double>("CantidadDesde")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<DateTime?>("FechaUltimaActualizacion")
                        .HasColumnType("datetime");

                    b.Property<double>("Margen")
                        .HasColumnType("float")
                        .HasComment("% o importe seg·n Margen_Operacion");

                    b.Property<bool>("MargenCosteAdicional")
                        .HasColumnType("bit");

                    b.Property<double?>("MargenCosteAdicionalMargen")
                        .HasColumnType("float")
                        .HasColumnName("MargenCosteAdicional_Margen");

                    b.Property<int?>("MargenCosteAdicionalOperacion")
                        .HasColumnType("int")
                        .HasColumnName("MargenCosteAdicional_Operacion");

                    b.Property<int?>("MargenOperacion")
                        .HasColumnType("int")
                        .HasColumnName("Margen_Operacion")
                        .HasComment("%, +");

                    b.Property<int?>("MargenOrigen")
                        .HasColumnType("int")
                        .HasColumnName("Margen_Origen")
                        .HasComment("Coste ·ltima Entrada, Coste Medio, Precio Venta");

                    b.Property<double>("PrecioVenta")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<double>("Pvp")
                        .HasColumnType("float")
                        .HasColumnName("PVP");

                    b.Property<int>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.HasKey("IdtarifaDetalle");

                    b.HasIndex(new[] { "ProductoId", "CantidadDesde", "CalculoTipo", "MargenOrigen", "MargenOperacion" }, "IX_TarifasDetalle");

                    b.HasIndex(new[] { "TarifaId", "ProductoId", "CantidadDesde" }, "IX_TarifasDetalle_Producto_Tarifa_Cantidad")
                        .IsUnique();

                    b.ToTable("TarifasDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TarifasTipo", b =>
                {
                    b.Property<int>("IdtarifaTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarifaTipo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtarifaTipo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdtarifaTipo");

                    b.ToTable("TarifasTipo", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Temporada", b =>
                {
                    b.Property<int>("Idtemporada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTemporada");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtemporada"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtemporada");

                    b.ToTable("Temporadas");
                });

            modelBuilder.Entity("login4.Models.EF.TesoreriaApunte", b =>
                {
                    b.Property<int>("Idapunte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDApunte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idapunte"));

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CuentaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaEmpresaID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Fcargo")
                        .HasColumnType("datetime")
                        .HasColumnName("FCargo");

                    b.Property<DateTime>("Foperacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FOperacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessID");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("TipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("VencimientoId")
                        .HasColumnType("int")
                        .HasColumnName("VencimientoID");

                    b.HasKey("Idapunte");

                    b.HasIndex("TipoId");

                    b.HasIndex(new[] { "CuentaEmpresaId", "Foperacion", "Tipo" }, "IX_TesoreriaApunte_CuentaEmpresaID_FOpe_Tipo");

                    b.ToTable("TesoreriaApunte", null, t =>
                        {
                            t.HasTrigger("Tesoreria_Actualizar_SaldosFecha");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.TesoreriaApunteTipo", b =>
                {
                    b.Property<int>("IdtipoApunte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoApunte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoApunte"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TableNameRelated")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TableNameRelatedDestinatario")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TableNameRelated_Destinatario");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("IdtipoApunte");

                    b.ToTable("TesoreriaApunteTipo", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TesoreriaSaldosFecha", b =>
                {
                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("CuentaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaEmpresaID");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("money");

                    b.HasKey("Fecha", "CuentaEmpresaId");

                    b.HasIndex("CuentaEmpresaId");

                    b.ToTable("TesoreriaSaldosFecha", null, t =>
                        {
                            t.HasTrigger("tr_TesoreriaSaldosFecha_Actualizar_TodasFechas");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.TipoFacturacion", b =>
                {
                    b.Property<int>("IdtipoFacturacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoFacturacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoFacturacion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdtipoFacturacion");

                    b.ToTable("TipoFacturacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TiposDireccion", b =>
                {
                    b.Property<int>("IdtipoDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoDireccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoDireccion"));

                    b.Property<bool>("Externa")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdtipoDireccion");

                    b.ToTable("TiposDireccion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TiposLinea", b =>
                {
                    b.Property<int>("IdtipoLinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoLinea"));

                    b.Property<bool>("AllowInLineEdit")
                        .HasColumnType("bit");

                    b.Property<bool?>("AplicateDtoCabecera")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<double>("CantidadDef")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad_def");

                    b.Property<bool>("CreateNewTranslateDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroupHeader")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroupHeaderYdetalle")
                        .HasColumnType("bit")
                        .HasColumnName("IsGroupHeaderYDetalle");

                    b.Property<bool>("LineaCabecera")
                        .HasColumnType("bit");

                    b.Property<bool?>("LineaCompuesto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0),0))")
                        .HasComment("GroupHeader+GestionProdYPrec");

                    b.Property<bool>("LineaCompuestoCoste")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("SetEstadoCabecera")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TipoEdicion")
                        .HasColumnType("int");

                    b.HasKey("IdtipoLinea");

                    b.ToTable("TiposLinea", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TiposPorte", b =>
                {
                    b.Property<int>("IdtipoPorte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoPorte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtipoPorte"));

                    b.Property<int>("AtributoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("PorteDebido")
                        .HasColumnType("bit");

                    b.HasKey("IdtipoPorte");

                    b.ToTable("TiposPortes");
                });

            modelBuilder.Entity("login4.Models.EF.Tpv", b =>
                {
                    b.Property<int>("Idtpv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPV");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtpv"));

                    b.Property<bool>("AllowMultiplesInstances")
                        .HasColumnType("bit");

                    b.Property<int?>("AlmacenIdDef")
                        .HasColumnType("int")
                        .HasColumnName("AlmacenID_def");

                    b.Property<bool?>("Asignada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("CajonConnected")
                        .HasColumnType("bit");

                    b.Property<string>("CajonOpenString")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Cajon_OpenString");

                    b.Property<string>("CertKeyPath")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<byte[]>("CertPass")
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<string>("CertPath")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("CodigoPuertoCajon")
                        .HasColumnType("int")
                        .HasColumnName("Codigo_Puerto_Cajon");

                    b.Property<int?>("CodigoPuertoImpresora")
                        .HasColumnType("int")
                        .HasColumnName("Codigo_Puerto_Impresora");

                    b.Property<int?>("CodigoPuertoVisor")
                        .HasColumnType("int")
                        .HasColumnName("Codigo_Puerto_Visor");

                    b.Property<bool?>("Descatalogada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("LongMaxVisor")
                        .HasColumnType("int")
                        .HasColumnName("LongMax_Visor");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<bool?>("PadConnected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PuertoCajon")
                        .HasColumnType("int")
                        .HasColumnName("Puerto_Cajon");

                    b.Property<int?>("PuertoImpresora")
                        .HasColumnType("int")
                        .HasColumnName("Puerto_Impresora");

                    b.Property<int?>("PuertoVisor")
                        .HasColumnType("int")
                        .HasColumnName("Puerto_Visor");

                    b.Property<string>("SharedPrinterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SignBottom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("SignEmbed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SignLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SignRight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SignTop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("UbicacionIdDef")
                        .HasColumnType("int")
                        .HasColumnName("UbicacionID_def");

                    b.Property<bool?>("VisorConnected")
                        .HasColumnType("bit");

                    b.HasKey("Idtpv");

                    b.HasIndex("UbicacionIdDef", "AlmacenIdDef");

                    b.ToTable("TPV", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvcabeceraTicket", b =>
                {
                    b.Property<int>("IdtpvcabeceraTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPVCabeceraTicket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtpvcabeceraTicket"));

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("TPVCabeceraTicket", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Tpvcambio", b =>
                {
                    b.Property<int>("Idtpvcambio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPVCambio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtpvcambio"));

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int>("Tpvid")
                        .HasColumnType("int")
                        .HasColumnName("TPVID");

                    b.HasKey("Idtpvcambio");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("Tpvid");

                    b.ToTable("TPVCambios", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Tpvdescuento", b =>
                {
                    b.Property<int>("Idtpvdescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPVDescuento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtpvdescuento"));

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtpvdescuento");

                    b.ToTable("TPVDescuentos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvformasPago", b =>
                {
                    b.Property<int>("IdtpvformaPago")
                        .HasColumnType("int")
                        .HasColumnName("IDTPVFormaPago");

                    b.Property<string>("CuentaContableTickets")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdtpvformaPago")
                        .HasName("PK_IDTPVFormaPago");

                    b.ToTable("TPVFormasPago", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Tpvimg", b =>
                {
                    b.Property<int>("Idimg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idimg");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idimg"));

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("image")
                        .HasColumnName("imagen");

                    b.Property<string>("Txt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("txt");

                    b.HasKey("Idimg");

                    b.ToTable("TPVimg", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvmensajesVisor", b =>
                {
                    b.Property<int>("Idmensaje")
                        .HasColumnType("int")
                        .HasColumnName("IDMensaje");

                    b.Property<int>("NumLinea")
                        .HasColumnType("int");

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idmensaje", "NumLinea");

                    b.ToTable("TPVMensajesVisor", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvmovimientosCaja", b =>
                {
                    b.Property<int>("IdtpvmovimientoCaja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPVMovimientoCaja");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtpvmovimientoCaja"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("CantidadEntra")
                        .HasColumnType("money");

                    b.Property<decimal?>("CantidadSale")
                        .HasColumnType("money");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<bool>("EntregaAcuenta")
                        .HasColumnType("bit")
                        .HasColumnName("EntregaACuenta");

                    b.Property<DateTime?>("FechaHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TipoMovimiento")
                        .HasColumnType("int");

                    b.Property<int?>("TpvformaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("TPVFormaPagoID");

                    b.Property<int>("Tpvid")
                        .HasColumnType("int")
                        .HasColumnName("TPVid");

                    b.HasKey("IdtpvmovimientoCaja");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("Tpvid");

                    b.ToTable("TPVMovimientosCaja", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvpagosPorCaja", b =>
                {
                    b.Property<int>("IdtpvpagoPorCaja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPVPagoPorCaja");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtpvpagoPorCaja"));

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int>("Tpvid")
                        .HasColumnType("int")
                        .HasColumnName("TPVID");

                    b.HasKey("IdtpvpagoPorCaja");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("Tpvid");

                    b.ToTable("TPVPagosPorCaja", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvpieTicket", b =>
                {
                    b.Property<int>("IdnotaTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNotaTicket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdnotaTicket"));

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdnotaTicket");

                    b.ToTable("TPVPieTicket", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Tpvpromocione", b =>
                {
                    b.Property<int>("Idtpvpromocion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTPVPromocion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtpvpromocion"));

                    b.Property<decimal>("Dinero")
                        .HasColumnType("money");

                    b.Property<string>("Promocion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Puntos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idtpvpromocion");

                    b.ToTable("TPVPromociones", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Tpvticket", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<bool?>("Abierto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<bool?>("Arreglo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("BaseImponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("Contabilizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("DescripcionOperacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("Descuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<bool?>("Entrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("Entregado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime?>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<DateTime?>("Foperacion")
                        .HasColumnType("datetime")
                        .HasColumnName("FOperacion");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<DateTime?>("Hora")
                        .HasColumnType("datetime");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<decimal>("MargenBeneficio")
                        .HasColumnType("money");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("PortesTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<bool>("SiiExportado")
                        .HasColumnType("bit")
                        .HasColumnName("SII_Exportado");

                    b.Property<int?>("TarifaId")
                        .HasColumnType("int")
                        .HasColumnName("TarifaID");

                    b.Property<int?>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("TotalCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("TotalFinanciacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("TotalPortes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("TotalRetencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("Tpvid")
                        .HasColumnType("int")
                        .HasColumnName("TPVID");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvagrupoId");

                    b.HasIndex("PersonaDireccionEntregaId");

                    b.HasIndex("PersonaDireccionFacturaId");

                    b.HasIndex("SerieId");

                    b.HasIndex("TarifaId");

                    b.HasIndex("Tpvid");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_TPVTickets")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "PersonaId", "EjercicioId" }, "IX_TPVTickets_PersonaID_EjercicioID");

                    b.ToTable("TPVTickets", null, t =>
                        {
                            t.HasTrigger("MaxNumeroTicket");

                            t.HasTrigger("TPVTickets_Delete_CDBO");

                            t.HasTrigger("TPVTickets_LineaCabecera");

                            t.HasTrigger("T_TPVTickets_CRM");

                            t.HasTrigger("UpdateStateTPVTickets");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("TPVTickets_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double?>("CantidadPendiente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("(0)");

                    b.Property<double?>("CantidadServida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("CodigoPropioProducto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Coste")
                        .HasColumnType("float");

                    b.Property<string>("CtaConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("money");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID")
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<int?>("IvaClaseId")
                        .HasColumnType("int")
                        .HasColumnName("IvaClaseID");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<int?>("IvatipoId")
                        .HasColumnType("int")
                        .HasColumnName("IVATipoID");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int>("LoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoteID")
                        .HasDefaultValueSql("(1)");

                    b.Property<decimal?>("Margen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<string>("NumeroLote")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int?>("PromocionId")
                        .HasColumnType("int")
                        .HasColumnName("PromocionID");

                    b.Property<int?>("Puntos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(0)");

                    b.Property<double>("Pvp")
                        .HasColumnType("float")
                        .HasColumnName("PVP");

                    b.Property<bool?>("RecargoEquivalencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("RefPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Retencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalCoste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("(0)");

                    b.Property<Guid?>("UidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uidID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IvatipoId");

                    b.HasIndex("LoteId");

                    b.HasIndex("UnidadMedidaId", "MedidaId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_TPVTicketsDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.HasIndex(new[] { "ProductoId" }, "IX_TPVTicketsDetalle_ProductoID");

                    b.ToTable("TPVTicketsDetalle", null, t =>
                        {
                            t.HasTrigger("TPVTicketsDetalle_Delete_CDBO");

                            t.HasTrigger("UpdateDGDUbicacionesFromTPVTicketsDetalle");

                            t.HasTrigger("UpdateLineaDescuentoFromDetalles");

                            t.HasTrigger("UpdateTicketsDetalleTotalesCabecera");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("TPVTicketsDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idestado"));

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("TPVTicketsEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Transaction", b =>
                {
                    b.Property<int>("Idtransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTransaction");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtransaction"));

                    b.Property<string>("TransactionValue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Idtransaction");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("login4.Models.EF.TskTarea", b =>
                {
                    b.Property<int>("Idtarea")
                        .HasColumnType("int")
                        .HasColumnName("IDTarea");

                    b.Property<string>("AppointmentItemEntryId")
                        .HasMaxLength(140)
                        .IsUnicode(false)
                        .HasColumnType("varchar(140)")
                        .HasColumnName("AppointmentItem_EntryID");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID")
                        .HasComment("Empleado que da de alta la tarea");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID")
                        .HasComment("Empresa a la que pertenece el EmpleadoID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<int>("EventType")
                        .HasColumnType("int")
                        .HasComment("cxScheduler");

                    b.Property<DateTime?>("FechaFinReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFinTeorica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioReal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicioTeorica")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Idguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDGUID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("LabelColor")
                        .HasColumnType("int")
                        .HasComment("cxScheduler");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("cxScheduler");

                    b.Property<string>("Notas")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Options")
                        .HasColumnType("int")
                        .HasComment("cxScheduler");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReminderMinutesBeforeStart")
                        .HasColumnType("int");

                    b.Property<string>("ReminderResourcesData")
                        .HasColumnType("text");

                    b.Property<int?>("TareaId")
                        .HasColumnType("int")
                        .HasColumnName("TareaID");

                    b.Property<int?>("TaskComplete")
                        .HasColumnType("int");

                    b.Property<int?>("TaskIndex")
                        .HasColumnType("int");

                    b.Property<string>("TaskLinks")
                        .HasColumnType("text");

                    b.Property<int?>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasComment("FK contra la tabla TareasTipos, define las clases para cada tipo de Tarea (Mant. Soft., Bßsica, Personal, etc.)");

                    b.HasKey("Idtarea");

                    b.HasIndex("EstadoId");

                    b.ToTable("TSK_Tareas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasClase", b =>
                {
                    b.Property<int>("IdtareaClase")
                        .HasColumnType("int")
                        .HasColumnName("IDTareaClase");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdtareaClase");

                    b.ToTable("TSK_TareasClases", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ImageIndex")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("Traspaso")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Idestado");

                    b.ToTable("TSK_TareasEstados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasMantenimientoTipo", b =>
                {
                    b.Property<int>("IdtareaMantenimientoTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDTareaMantenimientoTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdtareaMantenimientoTipo");

                    b.ToTable("TSK_TareasMantenimientoTipos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasOrigene", b =>
                {
                    b.Property<int>("IdtareaOrigen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTareaOrigen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdtareaOrigen"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdtareaOrigen");

                    b.ToTable("TSK_TareasOrigenes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasPrioridade", b =>
                {
                    b.Property<int>("Idprioridad")
                        .HasColumnType("int")
                        .HasColumnName("IDPrioridad");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("ImageIndex")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Idprioridad");

                    b.ToTable("TSK_TareasPrioridades", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasTipoMantenimiento", b =>
                {
                    b.Property<int>("TareaId")
                        .HasColumnType("int")
                        .HasColumnName("TareaID")
                        .HasComment("FK a la PK de TSK_Tareas");

                    b.Property<int?>("Ofid")
                        .HasColumnType("int")
                        .HasColumnName("OFID");

                    b.Property<int?>("OftipoId")
                        .HasColumnType("int")
                        .HasColumnName("OFTipoID");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID")
                        .HasComment("Llamada, email, reuni¾n cliente, interno");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .HasComment("Error, Mejora, Mejora interna, etc.");

                    b.HasKey("TareaId");

                    b.ToTable("TSK_TareasTipo_Mantenimiento", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Turno", b =>
                {
                    b.Property<int>("Idturno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTurno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idturno"));

                    b.Property<bool>("Especial")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("HoraFin")
                        .HasColumnType("float");

                    b.Property<double>("HoraFin2")
                        .HasColumnType("float");

                    b.Property<double>("HoraInicio")
                        .HasColumnType("float");

                    b.Property<double>("HoraInicio2")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("TotalHoras")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("([HoraFin] - [HoraInicio] + [HoraFin2] - [HoraInicio2])", false);

                    b.HasKey("Idturno");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesMedidum", b =>
                {
                    b.Property<int>("IdunidadMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDUnidadMedida");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdunidadMedida"));

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<double>("Escala")
                        .HasColumnType("float");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdunidadMedida")
                        .HasName("PK_Unidades");

                    b.HasIndex("MedidaId");

                    b.HasIndex(new[] { "IdunidadMedida", "MedidaId" }, "IX_UnidadesMedida_MedidaID_IDUnidadMedida")
                        .IsUnique();

                    b.ToTable("UnidadesMedida");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesProducto", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<decimal>("UnidadAgrupacion")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("ProductoId", "MedidaId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("UnidadMedidaId");

                    b.HasIndex(new[] { "ProductoId", "MedidaId", "UnidadMedidaId" }, "IX_UnidadesProducto_ProductoID_MedidaID_UnidadMedidaID")
                        .IsUnique();

                    b.ToTable("UnidadesProducto", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesProductoBase", b =>
                {
                    b.Property<int>("ProductoBaseId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoBaseID");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<decimal>("UnidadAgrupacion")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.HasKey("ProductoBaseId", "MedidaId");

                    b.HasIndex("MedidaId");

                    b.HasIndex("UnidadMedidaId");

                    b.ToTable("UnidadesProductoBase", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VAlbaranVentaCabecera", b =>
                {
                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.ToTable((string)null);

                    b.ToView("V_AlbaranVentaCabecera", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VAlbaranVentaDetalleApartado", b =>
                {
                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.ToTable((string)null);

                    b.ToView("V_AlbaranVentaDetalleApartados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VAlbaranVentum", b =>
                {
                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("Cliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroAlbaran")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_AlbaranVenta", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VAlbaranesCompra", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Falta")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FAlta");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<decimal?>("ImporteDescuento")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteIva")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("ImporteIVA");

                    b.Property<decimal?>("Iva")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("IVA");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NumeroAlbaran")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalAlbaran")
                        .HasColumnType("decimal(38, 7)");

                    b.ToTable((string)null);

                    b.ToView("V_AlbaranesCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VAlbaranesVentaDetalle", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseImponibleApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseImponibleReal")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadReal")
                        .HasColumnType("money");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ConceptoMaestro")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioReal")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int?>("Unidades")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("V_AlbaranesVentaDetalles", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VCdboClientesExportOutlook", b =>
                {
                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.Property<int?>("Aficiones")
                        .HasColumnType("int");

                    b.Property<int?>("Anniversary")
                        .HasColumnType("int");

                    b.Property<int?>("ApartadopostaldeladirecciNdeltrabajo")
                        .HasColumnType("int")
                        .HasColumnName("Apartadopostaldeladirecci¾ndeltrabajo");

                    b.Property<int?>("ApartadopostaldeladirecciNpersonal")
                        .HasColumnType("int")
                        .HasColumnName("Apartadopostaldeladirecci¾npersonal");

                    b.Property<string>("Apellidos")
                        .HasMaxLength(71)
                        .IsUnicode(false)
                        .HasColumnType("varchar(71)");

                    b.Property<int?>("AssistantsName")
                        .HasColumnType("int");

                    b.Property<int?>("AssistantsPhone")
                        .HasColumnType("int");

                    b.Property<int?>("Birthday")
                        .HasColumnType("int");

                    b.Property<string>("BusinessFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BusinessPhone2")
                        .HasColumnType("int");

                    b.Property<string>("CDigopostaldeltrabajo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("C¾digopostaldeltrabajo");

                    b.Property<string>("Calledeltrabajo")
                        .HasMaxLength(152)
                        .IsUnicode(false)
                        .HasColumnType("varchar(152)");

                    b.Property<int?>("Calledeltrabajo2")
                        .HasColumnType("int");

                    b.Property<int?>("Calledeltrabajo3")
                        .HasColumnType("int");

                    b.Property<int?>("CarPhone")
                        .HasColumnType("int");

                    b.Property<string>("CategorÝas")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ciudaddetrabajo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Confidencialidad")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DevoluciNdellamada")
                        .HasColumnType("int")
                        .HasColumnName("Devoluci¾ndellamada");

                    b.Property<int?>("DirecciNdecorreoelectrNico2")
                        .HasColumnType("int")
                        .HasColumnName("Direcci¾ndecorreoelectr¾nico2");

                    b.Property<int?>("DirecciNdelcorreoelectrNico3")
                        .HasColumnType("int")
                        .HasColumnName("Direcci¾ndelcorreoelectr¾nico3");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("FacturaciN")
                        .HasColumnType("int")
                        .HasColumnName("Facturaci¾n");

                    b.Property<int?>("GovernmentIdnumber")
                        .HasColumnType("int")
                        .HasColumnName("GovernmentIDNumber");

                    b.Property<int?>("Gúnero")
                        .HasColumnType("int")
                        .HasColumnName("GÚnero");

                    b.Property<int?>("Hijos")
                        .HasColumnType("int");

                    b.Property<int?>("HomeCity")
                        .HasColumnType("int");

                    b.Property<int?>("HomeFax")
                        .HasColumnType("int");

                    b.Property<int?>("HomePhone2")
                        .HasColumnType("int");

                    b.Property<int?>("HomePostalCode")
                        .HasColumnType("int");

                    b.Property<int?>("HomeState")
                        .HasColumnType("int");

                    b.Property<int?>("HomeStreet")
                        .HasColumnType("int");

                    b.Property<int?>("HomeStreet2")
                        .HasColumnType("int");

                    b.Property<int?>("HomeStreet3")
                        .HasColumnType("int");

                    b.Property<int?>("Initials")
                        .HasColumnType("int");

                    b.Property<int?>("InternetFreeBusy")
                        .HasColumnType("int");

                    b.Property<int?>("Isdn")
                        .HasColumnType("int")
                        .HasColumnName("ISDN");

                    b.Property<int?>("Keywords")
                        .HasColumnType("int");

                    b.Property<int?>("Kilometraje")
                        .HasColumnType("int");

                    b.Property<int?>("Language1")
                        .HasColumnType("int");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<int?>("NMerodecentralitadelaorganizaciN")
                        .HasColumnType("int")
                        .HasColumnName("N·merodecentralitadelaorganizaci¾n");

                    b.Property<int?>("NMerodeteletipo")
                        .HasColumnType("int")
                        .HasColumnName("N·merodeteletipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(151)
                        .IsUnicode(false)
                        .HasColumnType("varchar(151)");

                    b.Property<int?>("Nombredeldirector")
                        .HasColumnType("int");

                    b.Property<int?>("NombredepantalladecorreoelectrNico")
                        .HasColumnType("int")
                        .HasColumnName("Nombredepantalladecorreoelectr¾nico");

                    b.Property<int?>("NombredepantalladecorreoelectrNico2")
                        .HasColumnType("int")
                        .HasColumnName("Nombredepantalladecorreoelectr¾nico2");

                    b.Property<int?>("NombredepantalladecorreoelectrNico3")
                        .HasColumnType("int")
                        .HasColumnName("Nombredepantalladecorreoelectr¾nico3");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("OfficeLocation")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizaciN")
                        .HasColumnType("int")
                        .HasColumnName("Organizaci¾n");

                    b.Property<int?>("OrganizationalIdnumber")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationalIDNumber");

                    b.Property<int?>("Otracalle")
                        .HasColumnType("int");

                    b.Property<int?>("Otracalle2")
                        .HasColumnType("int");

                    b.Property<int?>("Otracalle3")
                        .HasColumnType("int");

                    b.Property<int?>("Otraciudad")
                        .HasColumnType("int");

                    b.Property<int?>("Otraprovinciaoestado")
                        .HasColumnType("int");

                    b.Property<int?>("Otroapartadopostal")
                        .HasColumnType("int");

                    b.Property<int?>("OtrocDigopostal")
                        .HasColumnType("int")
                        .HasColumnName("Otroc¾digopostal");

                    b.Property<int?>("Otrofax")
                        .HasColumnType("int");

                    b.Property<int?>("OtropaÝsoregiN")
                        .HasColumnType("int")
                        .HasColumnName("OtropaÝsoregi¾n");

                    b.Property<string>("OtrotelÚfono")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<int?>("Pager")
                        .HasColumnType("int");

                    b.Property<int?>("Particular")
                        .HasColumnType("int");

                    b.Property<int?>("PaÝsoregiNdeldomicilio")
                        .HasColumnType("int")
                        .HasColumnName("PaÝsoregi¾ndeldomicilio");

                    b.Property<int?>("PaÝsoregiNdeltrabajo")
                        .HasColumnType("int")
                        .HasColumnName("PaÝsoregi¾ndeltrabajo");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<bool?>("Private")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfesiN")
                        .HasColumnType("int")
                        .HasColumnName("Profesi¾n");

                    b.Property<string>("Provinciaoestadodetrabajo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Puesto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PßginaWeb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RadiotelÚfono")
                        .HasColumnType("int");

                    b.Property<int?>("Remitidopor")
                        .HasColumnType("int");

                    b.Property<int?>("SegundoNombre")
                        .HasColumnType("int");

                    b.Property<int?>("Servidordedirectorio")
                        .HasColumnType("int");

                    b.Property<int?>("Spouse")
                        .HasColumnType("int");

                    b.Property<int?>("Suffix")
                        .HasColumnType("int");

                    b.Property<string>("TelÚfonodeltrabajo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TelÚfonoprincipal")
                        .HasColumnType("int");

                    b.Property<int?>("TipodecorreoelectrNico2")
                        .HasColumnType("int")
                        .HasColumnName("Tipodecorreoelectr¾nico2");

                    b.Property<int?>("TipodecorreoelectrNico3")
                        .HasColumnType("int")
                        .HasColumnName("Tipodecorreoelectr¾nico3");

                    b.Property<int?>("Title")
                        .HasColumnType("int");

                    b.Property<int?>("Túlex")
                        .HasColumnType("int")
                        .HasColumnName("TÚlex");

                    b.Property<int?>("Usuario1")
                        .HasColumnType("int");

                    b.Property<int?>("Usuario2")
                        .HasColumnType("int");

                    b.Property<int?>("Usuario3")
                        .HasColumnType("int");

                    b.Property<int?>("Usuario4")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("V_CDBO_ClientesExportOutlook", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VClientesDato", b =>
                {
                    b.Property<string>("ClienteCp")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ClienteCP");

                    b.Property<string>("ClienteDireccion")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("ClienteLocalidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClienteProvincia")
                        .IsRequired()
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<int>("Idpersona")
                        .HasColumnType("int")
                        .HasColumnName("IDPersona");

                    b.ToTable((string)null);

                    b.ToView("V_ClientesDatos", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VDetalle", b =>
                {
                    b.Property<int?>("NumLinea")
                        .HasColumnType("int");

                    b.Property<int>("Teorico")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("V_Detalles", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFabricacionesPendiente", b =>
                {
                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaPrevista")
                        .HasColumnType("datetime");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("Idpersona")
                        .HasColumnType("int")
                        .HasColumnName("IDPersona");

                    b.Property<decimal?>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal?>("MargenReal")
                        .HasColumnType("money");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroPedido")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Origen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID");

                    b.Property<int>("PedidoEstadoId")
                        .HasColumnType("int")
                        .HasColumnName("PedidoEstadoID");

                    b.Property<int?>("PedidoVentaId")
                        .HasColumnType("int")
                        .HasColumnName("PedidoVentaID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCosteReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVenta")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_FabricacionesPendientes", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturaAlbaranDetalle", b =>
                {
                    b.Property<int>("BaseImponible")
                        .HasColumnType("int");

                    b.Property<string>("NumeroAlbaran")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("V_FacturaAlbaranDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasCompra", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Falta")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FAlta");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<decimal?>("ImporteDescuento")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteIva")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("ImporteIVA");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NumeroFactura")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFactura")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasEmitidasContabilidad", b =>
                {
                    b.Property<bool>("Abono")
                        .HasColumnType("bit");

                    b.Property<string>("Cliente")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdfacturaSalida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFacturaSalida");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroFactura")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<decimal>("TotalFactura")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasEmitidasContabilidad", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasRecibidasCotabilidad", b =>
                {
                    b.Property<bool>("Abono")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdfacturaEntrada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFacturaEntrada");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroFactura")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasRecibidasCotabilidad", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasVentaCabecera", b =>
                {
                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasVentaCabecera", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasVentaDetalle", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseImponibleApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseImponibleReal")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadReal")
                        .HasColumnType("money");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ConceptoMaestro")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioReal")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int?>("Unidades")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasVentaDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasVentaDetalleApartado", b =>
                {
                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasVentaDetalleApartados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VFacturasVentum", b =>
                {
                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("CCCAdeudo")
                        .IsFixedLength();

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("Cliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("Contabilizada")
                        .HasColumnType("bit");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<bool>("Entrega")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<string>("FormaPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<decimal?>("ImporteDescuento")
                        .HasColumnType("money");

                    b.Property<bool>("Impresa")
                        .HasColumnType("bit");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroFactura")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionEntregaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionEntregaID");

                    b.Property<int?>("PersonaDireccionFacturaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionFacturaID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int>("PortesTipoId")
                        .HasColumnType("int")
                        .HasColumnName("PortesTipoID");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFactura")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalFinanciacion")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPortes")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalRetencion")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_FacturasVenta", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VIdiva", b =>
                {
                    b.Property<int>("IdivaClase")
                        .HasColumnType("int")
                        .HasColumnName("IDIvaClase");

                    b.Property<int>("IdivaTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDIvaTipo");

                    b.ToTable((string)null);

                    b.ToView("V_IDIVA", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VInicializacionStock", b =>
                {
                    b.Property<string>("Familia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idfamilia")
                        .HasColumnType("int")
                        .HasColumnName("IDFamilia");

                    b.Property<int>("Idproducto")
                        .HasColumnType("int")
                        .HasColumnName("IDProducto");

                    b.Property<int>("IdproductoTipo")
                        .HasColumnType("int")
                        .HasColumnName("IDProductoTipo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreSpa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Nombre_spa");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("money");

                    b.Property<decimal>("StockActual")
                        .HasColumnType("money");

                    b.Property<decimal>("StockInicial")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_InicializacionStock", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VIva", b =>
                {
                    b.Property<decimal?>("General")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("IdivaClase")
                        .HasColumnType("int")
                        .HasColumnName("IDIvaClase");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.Property<decimal?>("Recargo")
                        .HasColumnType("decimal(18, 4)");

                    b.ToTable((string)null);

                    b.ToView("V_Iva", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VIvafactura", b =>
                {
                    b.Property<string>("CtaIvasoportado")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CtaIVASoportado");

                    b.Property<decimal?>("General")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("IdivaClase")
                        .HasColumnType("int")
                        .HasColumnName("IDIvaClase");

                    b.Property<string>("Nombre")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("V_IVAFactura", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VListadoBalanceOficial1", b =>
                {
                    b.Property<string>("Ap")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AP");

                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CodigoNombre")
                        .HasMaxLength(67)
                        .IsUnicode(false)
                        .HasColumnType("varchar(67)");

                    b.Property<string>("Formato")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Nivel1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("V_ListadoBalanceOficial1", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VListadoBalanceOficial2", b =>
                {
                    b.Property<string>("Ap")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AP");

                    b.Property<string>("Bo2ap")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BO2AP");

                    b.Property<string>("Bo2n1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BO2N1");

                    b.Property<string>("Bo2n2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BO2N2");

                    b.Property<string>("Bo2n3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BO2N3");

                    b.Property<string>("Bo2nombre")
                        .HasMaxLength(61)
                        .IsUnicode(false)
                        .HasColumnType("varchar(61)")
                        .HasColumnName("BO2Nombre");

                    b.Property<string>("Boa1ap1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BOA1AP1");

                    b.Property<string>("Boa1n1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BOA1N1");

                    b.Property<string>("Boa1n2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BOA1N2");

                    b.Property<string>("Boa1n3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BOA1N3");

                    b.Property<string>("Nivel1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nivel3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(61)
                        .IsUnicode(false)
                        .HasColumnType("varchar(61)");

                    b.Property<string>("NombreNivel1")
                        .HasMaxLength(61)
                        .IsUnicode(false)
                        .HasColumnType("varchar(61)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("V_ListadoBalanceOficial2", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VOrdenFabricacion", b =>
                {
                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaPrevista")
                        .HasColumnType("datetime");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("Idpersona")
                        .HasColumnType("int")
                        .HasColumnName("IDPersona");

                    b.Property<decimal?>("Margen")
                        .HasColumnType("money");

                    b.Property<decimal?>("MargenReal")
                        .HasColumnType("money");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroPedido")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Origen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID");

                    b.Property<int?>("PedidoVentaId")
                        .HasColumnType("int")
                        .HasColumnName("PedidoVentaID");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PrioridadId")
                        .HasColumnType("int")
                        .HasColumnName("PrioridadID");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCosteReal")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalVenta")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_OrdenFabricacion", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPartesOf", b =>
                {
                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<int?>("CentroTipoId")
                        .HasColumnType("int")
                        .HasColumnName("CentroTipoID");

                    b.Property<string>("Codigo")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("FechaImputacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaParte")
                        .HasColumnType("datetime");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int>("Idparte")
                        .HasColumnType("int")
                        .HasColumnName("IDParte");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NumeroPedido")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PartesFechaFinPartesFe")
                        .HasColumnType("datetime")
                        .HasColumnName("partes_FechaFin_partes_Fe");

                    b.Property<string>("Recurso")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.ToTable((string)null);

                    b.ToView("V_PartesOF", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPartesOfmat", b =>
                {
                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentoID");

                    b.Property<string>("Expr1")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<DateTime?>("FechaImputacion")
                        .HasColumnType("datetime");

                    b.Property<int>("Idparte")
                        .HasColumnType("int")
                        .HasColumnName("IDParte");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NombreSpa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Nombre_spa");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("V_PartesOFMat", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPedidoVentum", b =>
                {
                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("Cliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroPedido")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int?>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_PedidoVenta", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPedidosCompra", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Falta")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<decimal?>("ImporteDescuento")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteIva")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("ImporteIVA");

                    b.Property<decimal?>("Iva")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("IVA");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NumeroPedido")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalPedido")
                        .HasColumnType("decimal(38, 7)");

                    b.ToTable((string)null);

                    b.ToView("V_PedidosCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPresupuestoVentum", b =>
                {
                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("Cliente")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fentrega")
                        .HasColumnType("datetime")
                        .HasColumnName("FEntrega");

                    b.Property<string>("FormaPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<int?>("IvagrupoId")
                        .HasColumnType("int")
                        .HasColumnName("IVAGrupoID");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroPresupuesto")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonaDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaDireccionID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("SerieID");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCoste")
                        .HasColumnType("money");

                    b.Property<string>("Validez")
                        .HasMaxLength(38)
                        .IsUnicode(false)
                        .HasColumnType("varchar(38)");

                    b.ToTable((string)null);

                    b.ToView("V_PresupuestoVenta", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPresupuestosCompra", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<string>("CifNif")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CIF_NIF");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("money");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Falta")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FAlta");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idcabecera")
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    b.Property<decimal?>("ImporteDescuento")
                        .HasColumnType("money");

                    b.Property<decimal?>("ImporteIva")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("ImporteIVA");

                    b.Property<decimal?>("Iva")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("IVA");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreDireccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NumeroPresupuesto")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("ReferenciaPersona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalPresupuesto")
                        .HasColumnType("decimal(38, 7)");

                    b.ToTable((string)null);

                    b.ToView("V_PresupuestosCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPresupuestosVentaCabecera", b =>
                {
                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.ToTable((string)null);

                    b.ToView("V_PresupuestosVentaCabecera", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPresupuestosVentaDetalle", b =>
                {
                    b.Property<decimal?>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseImponibleApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseImponibleReal")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadReal")
                        .HasColumnType("money");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ConceptoMaestro")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<int?>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioApartado")
                        .HasColumnType("money");

                    b.Property<decimal>("PrecioReal")
                        .HasColumnType("money");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<int?>("Unidades")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("V_PresupuestosVentaDetalle", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPresupuestosVentaDetalleApartado", b =>
                {
                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("money");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    b.Property<int?>("LineaId")
                        .HasColumnType("int")
                        .HasColumnName("LineaID");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int?>("UnidadMedidaId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadMedidaID");

                    b.ToTable((string)null);

                    b.ToView("V_PresupuestosVentaDetalleApartados", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPrimeraDireccionCliente", b =>
                {
                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.ToTable((string)null);

                    b.ToView("V_PrimeraDireccionCliente", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VPrimeraDireccionProveedor", b =>
                {
                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.ToTable((string)null);

                    b.ToView("V_PrimeraDireccionProveedor", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VRemesasCompra", b =>
                {
                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("CCCAdeudo")
                        .IsFixedLength();

                    b.Property<bool>("Devuelto")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCargo")
                        .HasColumnType("datetime");

                    b.Property<int>("Idremesa")
                        .HasColumnType("int")
                        .HasColumnName("IDRemesa");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroFactura")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NumeroRemesa")
                        .HasMaxLength(61)
                        .IsUnicode(false)
                        .HasColumnType("varchar(61)");

                    b.Property<string>("NumeroVencimiento")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.Property<string>("PersonaNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .HasColumnName("personaNombre")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("V_RemesasCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VRemesasVenta", b =>
                {
                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("CCCAdeudo")
                        .IsFixedLength();

                    b.Property<bool>("Devuelto")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCargo")
                        .HasColumnType("datetime");

                    b.Property<int>("Idremesa")
                        .HasColumnType("int")
                        .HasColumnName("IDRemesa");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroFactura")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("NumeroRemesa")
                        .HasMaxLength(61)
                        .IsUnicode(false)
                        .HasColumnType("varchar(61)");

                    b.Property<string>("NumeroVencimiento")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.Property<string>("PersonaNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("V_RemesasVentas", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VSumaIva", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal>("General")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Iva")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("IVA");

                    b.ToTable((string)null);

                    b.ToView("V_SumaIVA", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VSumaIvafacturaCompra", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Iva")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("IVA");

                    b.ToTable((string)null);

                    b.ToView("V_SumaIVAFacturaCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VSumaIvapedidoCompra", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Iva")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("IVA");

                    b.ToTable((string)null);

                    b.ToView("V_SumaIVAPedidoCompra", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VTotalFacturaCompraPie", b =>
                {
                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("SumaBaseImponible")
                        .HasColumnType("money");

                    b.Property<decimal?>("SumaIvapie")
                        .HasColumnType("money")
                        .HasColumnName("SumaIVAPie");

                    b.Property<decimal?>("SumaTotal")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("V_TotalFacturaCompraPie", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VTotalesUnidadMedidaOf", b =>
                {
                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.Property<decimal?>("Totales")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable((string)null);

                    b.ToView("V_TotalesUnidadMedidaOF", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.VTotalesUnidadMedidum", b =>
                {
                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<decimal?>("Expr1")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<int>("MedidaId")
                        .HasColumnType("int")
                        .HasColumnName("MedidaID");

                    b.Property<int>("TipoLineaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLineaID");

                    b.ToTable((string)null);

                    b.ToView("V_TotalesUnidadMedida", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.Vale", b =>
                {
                    b.Property<int>("Idcabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcabecera"));

                    b.Property<string>("Anno")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("Codigo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("EjercicioId")
                        .HasColumnType("int")
                        .HasColumnName("EjercicioID");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("EmpleadoID");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaID");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<DateTime>("Falta")
                        .HasColumnType("datetime")
                        .HasColumnName("FAlta");

                    b.Property<DateTime?>("Fcaducidad")
                        .HasColumnType("datetime")
                        .HasColumnName("FCaducidad");

                    b.Property<DateTime?>("Fconsumo")
                        .HasColumnType("datetime")
                        .HasColumnName("FConsumo");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<decimal>("ImporteConsumido")
                        .HasColumnType("money");

                    b.Property<decimal>("ImporteTotal")
                        .HasColumnType("money");

                    b.Property<int?>("LiquidacionId")
                        .HasColumnType("int")
                        .HasColumnName("LiquidacionID");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Obsequio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OrigenId")
                        .HasColumnType("int")
                        .HasColumnName("OrigenID");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<int?>("ProductoObsequioId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoObsequioID");

                    b.Property<int?>("TicketDetalleId")
                        .HasColumnType("int")
                        .HasColumnName("TicketDetalleID");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.HasKey("Idcabecera");

                    b.HasIndex("EjercicioId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("LiquidacionId");

                    b.HasIndex("OrigenId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ProductoObsequioId");

                    b.HasIndex("TicketId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_Vales")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("Vales", t =>
                        {
                            t.HasTrigger("MaxValeAnno");

                            t.HasTrigger("Vales_Delete_CDBO");

                            t.HasTrigger("Vales_UpdateEstado");

                            t.HasTrigger("Vales_UpdateLiquidacionFromEstado");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ValesCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("Vales_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ValesDetalle", b =>
                {
                    b.Property<int>("Idlinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDLinea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idlinea"));

                    b.Property<int>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("CabeceraID");

                    b.Property<long?>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.Property<decimal>("ImporteConsumido")
                        .HasColumnType("money");

                    b.Property<string>("Obsequio")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.HasKey("Idlinea");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("TicketId");

                    b.HasIndex(new[] { "Idcdbo" }, "IX_ValesDetalle")
                        .IsUnique()
                        .HasFilter("[IDCDBO] IS NOT NULL");

                    b.ToTable("ValesDetalle", null, t =>
                        {
                            t.HasTrigger("UpdateValesTotalesCabecera");

                            t.HasTrigger("ValesDetalle_Delete_CDBO");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.ValesDetalleCdbo", b =>
                {
                    b.Property<long>("Idcdbo")
                        .HasColumnType("bigint")
                        .HasColumnName("IDCDBO");

                    b.HasKey("Idcdbo");

                    b.ToTable("ValesDetalle_CDBO", (string)null);
                });

            modelBuilder.Entity("login4.Models.EF.ValesEstado", b =>
                {
                    b.Property<int>("Idestado")
                        .HasColumnType("int")
                        .HasColumnName("IDEstado");

                    b.Property<bool?>("AllowModify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool>("CantidadPendiente")
                        .HasColumnType("bit");

                    b.Property<string>("FontColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Traspaso")
                        .HasColumnType("bit");

                    b.HasKey("Idestado");

                    b.ToTable("ValesEstados");
                });

            modelBuilder.Entity("login4.Models.EF.ValesOrigene", b =>
                {
                    b.Property<int>("Idorigen")
                        .HasColumnType("int")
                        .HasColumnName("IDOrigen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Idorigen");

                    b.ToTable("ValesOrigenes");
                });

            modelBuilder.Entity("login4.Models.EF.ValoresLote", b =>
                {
                    b.Property<int>("VlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VL_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VlId"));

                    b.Property<string>("VlNombreEnd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VL_Nombre_end");

                    b.Property<string>("VlNombreSpa")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VL_Nombre_spa");

                    b.HasKey("VlId");

                    b.ToTable("ValoresLotes");
                });

            modelBuilder.Entity("login4.Models.EF.ValoresProducto", b =>
                {
                    b.Property<int>("IdvalorProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDValorProducto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdvalorProducto"));

                    b.Property<int>("AtributoProductoId")
                        .HasColumnType("int")
                        .HasColumnName("AtributoProductoID");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ValorProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ValorProductoID");

                    b.HasKey("IdvalorProducto")
                        .HasName("PK_Valores");

                    b.HasIndex("ValorProductoId");

                    b.HasIndex(new[] { "Nombre" }, "IX_ValoresProductos");

                    b.HasIndex(new[] { "AtributoProductoId", "Indice" }, "IX_ValoresProductos_Indice");

                    b.ToTable("ValoresProductos", t =>
                        {
                            t.HasTrigger("tr_ValoresProductos_Delete_Indice");

                            t.HasTrigger("tr_ValoresProductos_Insert_Indice");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Vencimiento", b =>
                {
                    b.Property<int>("Idvencimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDVencimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idvencimiento"));

                    b.Property<int>("Dias")
                        .HasColumnType("int");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("money");

                    b.HasKey("Idvencimiento");

                    b.HasIndex("FormaPagoId");

                    b.ToTable("Vencimientos");
                });

            modelBuilder.Entity("login4.Models.EF.VencimientosCompra", b =>
                {
                    b.Property<int>("Idvencimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDVencimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idvencimiento"));

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Contabilizado")
                        .HasColumnType("bit");

                    b.Property<int?>("CuentaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaEmpresaID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Devuelto")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentoRecibido")
                        .HasColumnType("bit");

                    b.Property<string>("Efectos")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Emitido")
                        .HasColumnType("bit");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaID");

                    b.Property<DateTime>("FechaCargo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Iban")
                        .HasColumnType("bit")
                        .HasColumnName("IBAN");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NumeroVencimiento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasDefaultValueSql("('#')")
                        .IsFixedLength();

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("PersonaNif")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("PersonaNIF")
                        .IsFixedLength();

                    b.Property<string>("PersonaNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<int?>("RemesaId")
                        .HasColumnType("int")
                        .HasColumnName("RemesaID");

                    b.HasKey("Idvencimiento");

                    b.HasIndex("CuentaEmpresaId");

                    b.HasIndex("MedioId");

                    b.HasIndex("RemesaId");

                    b.HasIndex(new[] { "FacturaId" }, "IX_VencimientosCompra_FacturaID");

                    b.ToTable("VencimientosCompra", null, t =>
                        {
                            t.HasTrigger("GenerarNumeroVencimientoCompra");

                            t.HasTrigger("InsertCodContaYEfectosAPagar");

                            t.HasTrigger("UpdateStateFacturasCompraFromVencimientos");

                            t.HasTrigger("VC_TesoreriaControl");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.VencimientosVentum", b =>
                {
                    b.Property<int>("Idvencimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDVencimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idvencimiento"));

                    b.Property<string>("Cccadeudo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCCAdeudo");

                    b.Property<string>("CodigoConta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Contabilizado")
                        .HasColumnType("bit");

                    b.Property<int?>("CuentaEmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("CuentaEmpresaID");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Devuelto")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentoRecibido")
                        .HasColumnType("bit");

                    b.Property<string>("Efectos")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Emitido")
                        .HasColumnType("bit");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaID");

                    b.Property<DateTime>("FechaCargo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Iban")
                        .HasColumnType("bit")
                        .HasColumnName("IBAN");

                    b.Property<decimal>("Importe")
                        .HasColumnType("money");

                    b.Property<int>("MedioId")
                        .HasColumnType("int")
                        .HasColumnName("MedioID");

                    b.Property<string>("NumeroVencimiento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasDefaultValueSql("('#')")
                        .IsFixedLength();

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.Property<string>("PersonaNif")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("PersonaNIF")
                        .IsFixedLength();

                    b.Property<string>("PersonaNombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .IsFixedLength();

                    b.Property<int?>("RemesaId")
                        .HasColumnType("int")
                        .HasColumnName("RemesaID");

                    b.Property<bool?>("VencimientoDescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)")
                        .HasComment("Para saber y se ha generado el asiento de vuelta del vencimiento");

                    b.HasKey("Idvencimiento");

                    b.HasIndex("CuentaEmpresaId");

                    b.HasIndex("MedioId");

                    b.HasIndex("RemesaId");

                    b.HasIndex(new[] { "FacturaId" }, "IX_VencimientosVenta_FacturaID");

                    b.ToTable("VencimientosVenta", t =>
                        {
                            t.HasTrigger("GeneraNumeroVencimientoVenta");

                            t.HasTrigger("InsertCodContaYEfectosACobrar");

                            t.HasTrigger("UpdateStateFacturasVentaFromVencimientos");

                            t.HasTrigger("VV_TR_InsteadOfDelete_AVAnticipos");

                            t.HasTrigger("VV_TesoreriaControl");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("login4.Models.EF.Wizard", b =>
                {
                    b.Property<int>("Idwizard")
                        .HasColumnType("int")
                        .HasColumnName("IDWizard");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Idwizard", "Step");

                    b.ToTable("Wizards");
                });

            modelBuilder.Entity("login4.Models.EF.Zona", b =>
                {
                    b.Property<int>("Idzona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDZona");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idzona"));

                    b.Property<int>("AgenciaId")
                        .HasColumnType("int")
                        .HasColumnName("AgenciaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idzona");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("CdbpEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", null)
                        .WithMany()
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CDBP_Entidades_GS_Entidades");

                    b.HasOne("login4.Models.EF.CdbpProcess", null)
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CDBP_Entidades_CDBP_Processes");
                });

            modelBuilder.Entity("CentrosEmpleado", b =>
                {
                    b.HasOne("login4.Models.EF.CentrosTrabajo", null)
                        .WithMany()
                        .HasForeignKey("CentroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CentrosEmpleados_CentrosTrabajo");

                    b.HasOne("login4.Models.EF.Empleado", null)
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_CentrosEmpleados_Empleados");
                });

            modelBuilder.Entity("CentrosMaquina", b =>
                {
                    b.HasOne("login4.Models.EF.CentrosTrabajo", null)
                        .WithMany()
                        .HasForeignKey("CentroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CentrosMaquinas_CentrosTrabajo");

                    b.HasOne("login4.Models.EF.Maquina", null)
                        .WithMany()
                        .HasForeignKey("MaquinaId")
                        .IsRequired()
                        .HasConstraintName("FK_CentrosMaquinas_Maquinas");
                });

            modelBuilder.Entity("ClientesUserRole", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("login4.Models.EF.ClientesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComercialesCliente", b =>
                {
                    b.HasOne("login4.Models.EF.Comerciale", null)
                        .WithMany()
                        .HasForeignKey("ComercialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ComercialesClientes_Comerciales");

                    b.HasOne("login4.Models.EF.Cliente", null)
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ComercialesClientes_Clientes");
                });

            modelBuilder.Entity("DocumentosGestionTiposLineaProductosTipo", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosTipo", null)
                        .WithMany()
                        .HasForeignKey("ProductoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLineaProductosTipos_ProductosTipos");

                    b.HasOne("login4.Models.EF.DocumentosGestionTiposLinea", null)
                        .WithMany()
                        .HasForeignKey("DocumentoGestionId", "TipoLineaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLineaProductosTipos_DocumentosGestionTiposLinea");
                });

            modelBuilder.Entity("EmpleadosPuesto", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", null)
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_EmpleadosPuestos_Empleados");

                    b.HasOne("login4.Models.EF.Puesto", null)
                        .WithMany()
                        .HasForeignKey("PuestoId")
                        .IsRequired()
                        .HasConstraintName("FK_EmpleadosPuestos_Puestos");
                });

            modelBuilder.Entity("IsoActividadesMaquina", b =>
                {
                    b.HasOne("login4.Models.EF.IsoActividade", null)
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ActividadesMaquinas_ISO_Actividades");

                    b.HasOne("login4.Models.EF.Maquina", null)
                        .WithMany()
                        .HasForeignKey("MaquinaId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ActividadesMaquinas_Maquinas");
                });

            modelBuilder.Entity("IsoCursosAsistente", b =>
                {
                    b.HasOne("login4.Models.EF.IsoCurso", null)
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_CursosAsistentes_ISO_Cursos");

                    b.HasOne("login4.Models.EF.Empleado", null)
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_CursosAsistentes_Empleados");
                });

            modelBuilder.Entity("IsoProductosRequisito", b =>
                {
                    b.HasOne("login4.Models.EF.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ProductosRequisitos_Productos");

                    b.HasOne("login4.Models.EF.IsoRequisito", null)
                        .WithMany()
                        .HasForeignKey("RequisitoId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ProductosRequisitos_ISO_Requisitos");
                });

            modelBuilder.Entity("IsoProveedoresCriterio", b =>
                {
                    b.HasOne("login4.Models.EF.IsoCriteriosSeleccion", null)
                        .WithMany()
                        .HasForeignKey("CriterioId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ProveedoresCriterios_ISO_CriteriosSeleccion");

                    b.HasOne("login4.Models.EF.Proveedore", null)
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ProveedoresCriterios_Proveedores");
                });

            modelBuilder.Entity("IsoPuestosDocumento", b =>
                {
                    b.HasOne("login4.Models.EF.IsoDocumento", null)
                        .WithMany()
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_PuestosDocumentos_ISO_Documentos");

                    b.HasOne("login4.Models.EF.Puesto", null)
                        .WithMany()
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_PuestosDocumentos_Puestos");
                });

            modelBuilder.Entity("IsoPuestosRequisito", b =>
                {
                    b.HasOne("login4.Models.EF.Puesto", null)
                        .WithMany()
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_PuestosRequisitos_Puestos");

                    b.HasOne("login4.Models.EF.IsoRequisito", null)
                        .WithMany()
                        .HasForeignKey("RequisitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_PuestosRequisitos_ISO_Requisitos");
                });

            modelBuilder.Entity("IsoRevisionesAsistente", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", null)
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_RevisionesAsistentes_Empleados");

                    b.HasOne("login4.Models.EF.IsoRevisione", null)
                        .WithMany()
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_RevisionesAsistentes_ISO_Revisiones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartesTiposOftipo", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesFabricacionTipo", null)
                        .WithMany()
                        .HasForeignKey("OftipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PartesTiposOFTipos_OrdenesFabricacionTipos");

                    b.HasOne("login4.Models.EF.PartesTipo", null)
                        .WithMany()
                        .HasForeignKey("ParteTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PartesTiposOFTipos_PartesTipos");
                });

            modelBuilder.Entity("RpEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", null)
                        .WithMany()
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RP_Entidades_GS_Entidades");

                    b.HasOne("login4.Models.EF.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RP_Entidades_Reports");
                });

            modelBuilder.Entity("SyncConnectionsFamilia", b =>
                {
                    b.HasOne("login4.Models.EF.SyncConnection", null)
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sync_Connections_Familias_sync_Connections");

                    b.HasOne("login4.Models.EF.Familia", null)
                        .WithMany()
                        .HasForeignKey("FamiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sync_Connections_Familias_Familias");
                });

            modelBuilder.Entity("SyncEntidadesTipo", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", null)
                        .WithMany()
                        .HasForeignKey("EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_sync_Entidades_Tipos_GS_Entidades");

                    b.HasOne("login4.Models.EF.SyncTipo", null)
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_sync_Entidades_Tipos_sync_Tipos");
                });

            modelBuilder.Entity("ZonasProvincia", b =>
                {
                    b.HasOne("login4.Models.EF.Provincia", null)
                        .WithMany()
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ZonasProvincias_Provincias");

                    b.HasOne("login4.Models.EF.Zona", null)
                        .WithMany()
                        .HasForeignKey("ZonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ZonasProvincias_Zonas");
                });

            modelBuilder.Entity("login4.Models.EF.AeEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithOne("AeEntidade")
                        .HasForeignKey("login4.Models.EF.AeEntidade", "EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_AE_Entidades_GS_Entidades");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.AeatM303", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("AeatM303s")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_AEAT_M303_Ejercicios");

                    b.Navigation("Ejercicio");
                });

            modelBuilder.Entity("login4.Models.EF.AeatM340Detalle", b =>
                {
                    b.HasOne("login4.Models.EF.AeatM340", "Modelo")
                        .WithMany("AeatM340Detalles")
                        .HasForeignKey("ModeloId")
                        .IsRequired()
                        .HasConstraintName("FK_AEAT_M340_Detalle_AEAT_M340");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("login4.Models.EF.Agencia", b =>
                {
                    b.HasOne("login4.Models.EF.Entidade", "CodigoEntidadNavigation")
                        .WithMany("Agencia")
                        .HasForeignKey("CodigoEntidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Agencias_Entidades");

                    b.Navigation("CodigoEntidadNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.AgenciasTransporteTarifa", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Agencia")
                        .WithMany("AgenciasTransporteTarifas")
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AgenciasTransporteTarifas_Proveedores");

                    b.Navigation("Agencia");
                });

            modelBuilder.Entity("login4.Models.EF.AgenciasTransporteTarifasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("AgenciasTransporteTarifasDetalles")
                        .HasForeignKey("UnidadMedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_AgenciasTransporteTarifas_UnidadesMedida");

                    b.HasOne("login4.Models.EF.Zona", "Zona")
                        .WithMany("AgenciasTransporteTarifasDetalles")
                        .HasForeignKey("ZonaId")
                        .IsRequired()
                        .HasConstraintName("FK_AgenciasTransporteTarifas_Zonas");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("AgenciasTransporteTarifasDetalles")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_AgenciasTransporteTarifasDetalle_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("UnidadMedida");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompra", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_AlbaranesCompra_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ProveedoresContacto", "Contacto")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_AlbaranesCompra_ProveedoresContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_AlbaranesCompra_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_AlbaranesCompra_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_AlbaranesCompra_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.AlbaranesCompraEstado", "Estado")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompra_AlbaranesCompraEstados");

                    b.HasOne("login4.Models.EF.AlbaranesCompraCdbo", "IdcdboNavigation")
                        .WithOne("AlbaranesCompra")
                        .HasForeignKey("login4.Models.EF.AlbaranesCompra", "Idcdbo")
                        .HasConstraintName("FK_AlbaranesCompra_AlbaranesCompra_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_AlbaranesCompra_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_AlbaranesCompra_MediosPago");

                    b.HasOne("login4.Models.EF.ProveedoresDireccione", "PersonaDireccionFactura")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_AlbaranesCompra_ProveedoresDirecciones");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompra_Proveedores");

                    b.HasOne("login4.Models.EF.PortesTipo", "PortesTipo")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("PortesTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompra_PortesTipos");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_AlbaranesCompra_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("AlbaranesCompras")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompra_Series");

                    b.Navigation("CentroCoste");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("PortesTipo");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.AlbaranesCompra", "Cabecera")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompraDetalle_AlbaranesCompra");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.AlbaranesCompraEstado", "Estado")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompraDetalle_AlbaranesCompraEstados");

                    b.HasOne("login4.Models.EF.AlbaranesCompraDetalleCdbo", "IdcdboNavigation")
                        .WithOne("AlbaranesCompraDetalle")
                        .HasForeignKey("login4.Models.EF.AlbaranesCompraDetalle", "Idcdbo")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_AlbaranesCompraDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompraDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompraDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("AlbaranesCompraDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesCompraDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("AlbaranesCompraDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("AlbaranesCompraDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("AlbaranesCompraDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("AlbaranesCompraDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaAnticipo", b =>
                {
                    b.HasOne("login4.Models.EF.FacturasVentum", "CabeceraDestino")
                        .WithMany("AlbaranesVentaAnticipos")
                        .HasForeignKey("CabeceraDestinoId")
                        .HasConstraintName("FK_AlbaranesVentaAnticipos_FacturasVenta");

                    b.HasOne("login4.Models.EF.AlbaranesVentum", "CabeceraOrigen")
                        .WithMany("AlbaranesVentaAnticipos")
                        .HasForeignKey("CabeceraOrigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaAnticipos_AlbaranesVenta");

                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "CuentaEmpresa")
                        .WithMany("AlbaranesVentaAnticipos")
                        .HasForeignKey("CuentaEmpresaId")
                        .HasConstraintName("FK_AlbaranesVentaAnticipos_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("AlbaranesVentaAnticipos")
                        .HasForeignKey("MedioId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaAnticipos_MediosPago");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("AlbaranesVentaAnticipos")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaAnticipos_Clientes");

                    b.HasOne("login4.Models.EF.VencimientosVentum", "VencimientoDestino")
                        .WithMany("AlbaranesVentaAnticipos")
                        .HasForeignKey("VencimientoDestinoId")
                        .HasConstraintName("FK_AlbaranesVentaAnticipos_VencimientosVenta");

                    b.Navigation("CabeceraDestino");

                    b.Navigation("CabeceraOrigen");

                    b.Navigation("CuentaEmpresa");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("VencimientoDestino");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.AlbaranesVentum", "Cabecera")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVenta");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.AlbaranesVentaEstado", "Estado")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVentaEstados");

                    b.HasOne("login4.Models.EF.AlbaranesVentaDetalleCdbo", "IdcdboNavigation")
                        .WithOne("AlbaranesVentaDetalle")
                        .HasForeignKey("login4.Models.EF.AlbaranesVentaDetalle", "Idcdbo")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVentaDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.AlbaranesVentaDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVentaDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaDetalle_Productos");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_Proveedores");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("AlbaranesVentaDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVentaDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("AlbaranesVentaDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("AlbaranesVentaDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("AlbaranesVentaDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("AlbaranesVentaDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentum", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_AlbaranesVenta_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_AlbaranesVenta_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_AlbaranesVenta_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_AlbaranesVenta_ClientesContactos");

                    b.HasOne("login4.Models.EF.DireccionesEntidadesOrigen", "DirRecogidaEntidadOrigen")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("DirRecogidaEntidadOrigenId")
                        .HasConstraintName("FK_AlbaranesVenta_Direcciones_EntidadesOrigen");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_AlbaranesVenta_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("AlbaranesVentumEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_AlbaranesVenta_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("AlbaranesVentumEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_AlbaranesVenta_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_AlbaranesVenta_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.AlbaranesVentaEstado", "Estado")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVenta_AlbaranesVentaEstados");

                    b.HasOne("login4.Models.EF.AlbaranesVentaCdbo", "IdcdboNavigation")
                        .WithOne("AlbaranesVentum")
                        .HasForeignKey("login4.Models.EF.AlbaranesVentum", "Idcdbo")
                        .HasConstraintName("FK_AlbaranesVenta_AlbaranesVenta_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_AlbaranesVenta_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_AlbaranesVenta_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_AlbaranesVenta_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVenta_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_AlbaranesVenta_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbaranesVenta_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("AlbaranesVenta")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_AlbaranesVenta_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("DirRecogidaEntidadOrigen");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.Almacene", b =>
                {
                    b.HasOne("login4.Models.EF.CentrosTrabajo", "Centro")
                        .WithMany("Almacenes")
                        .HasForeignKey("CentroId")
                        .HasConstraintName("FK_Almacenes_CentrosTrabajo");

                    b.Navigation("Centro");
                });

            modelBuilder.Entity("login4.Models.EF.AlmacenesUbicacione", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("AlmacenesUbicaciones")
                        .HasForeignKey("AlmacenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AlmacenesUbicaciones_Almacenes");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("InverseUbicacion")
                        .HasForeignKey("UbicacionId")
                        .HasConstraintName("FK_AlmacenesUbicaciones_AlmacenesUbicaciones");

                    b.Navigation("Almacen");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquilere", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_ALQ_Alquileres_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_ALQ_Alquileres_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_ALQ_Alquileres_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_ALQ_Alquileres_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_ALQ_Alquileres_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ALQ_Alquileres_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_ALQ_Alquileres_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.AlqAlquileresEstado", "Estado")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_Alquileres_ALQ_AlquileresEstados");

                    b.HasOne("login4.Models.EF.AlqAlquileresCdbo", "IdcdboNavigation")
                        .WithOne("AlqAlquilere")
                        .HasForeignKey("login4.Models.EF.AlqAlquilere", "Idcdbo")
                        .HasConstraintName("FK_ALQ_Alquileres_ALQ_Alquileres_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_ALQ_Alquileres_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_ALQ_Alquileres_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_ALQ_Alquileres_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_Alquileres_Clientes");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_Alquileres_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("AlqAlquileres")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_ALQ_Alquileres_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDescuentosGenerale", b =>
                {
                    b.HasOne("login4.Models.EF.AlqAlquilere", "Cabecera")
                        .WithMany("AlqAlquileresDescuentosGenerales")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDescuentosGenerales_ALQ_Alquileres");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("AlqAlquileresDescuentosGenerales")
                        .HasForeignKey("ProductoTipoId")
                        .HasConstraintName("FK_ALQ_AlquileresDescuentosGenerales_ProductosTipos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("AlqAlquileresDescuentosGenerales")
                        .HasForeignKey("TipoLineaId")
                        .HasConstraintName("FK_ALQ_AlquileresDescuentosGenerales_TiposLinea");

                    b.Navigation("Cabecera");

                    b.Navigation("ProductoTipo");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.AlqAlquilere", "Cabecera")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_Alquileres");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_Empleados");

                    b.HasOne("login4.Models.EF.AlqAlquileresEstado", "Estado")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_AlquileresEstados");

                    b.HasOne("login4.Models.EF.AlqAlquileresDetalleCdbo", "IdcdboNavigation")
                        .WithOne("AlqAlquileresDetalle")
                        .HasForeignKey("login4.Models.EF.AlqAlquileresDetalle", "Idcdbo")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_AlquileresDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.AlqAlquileresDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_AlquileresDetalle");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("AlqAlquileresDetalles")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_ALQ_AlquileresDetalle_UnidadesMedida");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Empleado");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetallePicking", b =>
                {
                    b.HasOne("login4.Models.EF.AlqAlquilere", "Cabecera")
                        .WithMany("AlqAlquileresDetallePickings")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresDetallePicking_ALQ_Alquileres");

                    b.HasOne("login4.Models.EF.AlqAlquileresPicking", "PickingEntrada")
                        .WithMany("AlqAlquileresDetallePickingPickingEntrada")
                        .HasForeignKey("PickingEntradaId")
                        .HasConstraintName("FK_ALQ_AlquileresDetallePicking_PickingEntradaID_ALQ_AlquileresPicking");

                    b.HasOne("login4.Models.EF.AlqAlquileresPicking", "PickingSalida")
                        .WithMany("AlqAlquileresDetallePickingPickingSalida")
                        .HasForeignKey("PickingSalidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ALQ_AlquileresDetallePicking_PickingSalidaID_ALQ_AlquileresPicking");

                    b.Navigation("Cabecera");

                    b.Navigation("PickingEntrada");

                    b.Navigation("PickingSalida");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresPicking", b =>
                {
                    b.HasOne("login4.Models.EF.AlqAlquilere", "Cabecera")
                        .WithMany("AlqAlquileresPickings")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresPicking_ALQ_Alquileres");

                    b.HasOne("login4.Models.EF.AlqAlquileresPickingTipo", "Tipo")
                        .WithMany("AlqAlquileresPickings")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_AlquileresPicking_ALQ_AlquileresPickingTipos");

                    b.Navigation("Cabecera");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuesto", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_ALQ_Presupuestos_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_ALQ_Presupuestos_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_ALQ_Presupuestos_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_ALQ_Presupuestos_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_ALQ_Presupuestos_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ALQ_Presupuestos_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_ALQ_Presupuestos_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.AlqPresupuestosEstado", "Estado")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_Presupuestos_ALQ_PresupuestosEstados");

                    b.HasOne("login4.Models.EF.AlqPresupuestosCdbo", "IdcdboNavigation")
                        .WithOne("AlqPresupuesto")
                        .HasForeignKey("login4.Models.EF.AlqPresupuesto", "Idcdbo")
                        .HasConstraintName("FK_ALQ_Presupuestos_ALQ_Presupuestos_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_ALQ_Presupuestos_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_ALQ_Presupuestos_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_ALQ_Presupuestos_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_Presupuestos_Clientes");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_Presupuestos_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("AlqPresupuestos")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_ALQ_Presupuestos_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDescuentosGenerale", b =>
                {
                    b.HasOne("login4.Models.EF.AlqPresupuesto", "Cabecera")
                        .WithMany("AlqPresupuestosDescuentosGenerales")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_PresupuestosDescuentosGenerales_ALQ_Presupuestos");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("AlqPresupuestosDescuentosGenerales")
                        .HasForeignKey("ProductoTipoId")
                        .HasConstraintName("FK_ALQ_PresupuestosDescuentosGenerales_ProductosTipos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("AlqPresupuestosDescuentosGenerales")
                        .HasForeignKey("TipoLineaId")
                        .HasConstraintName("FK_ALQ_PresupuestosDescuentosGenerales_TiposLinea");

                    b.Navigation("Cabecera");

                    b.Navigation("ProductoTipo");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.AlqPresupuesto", "Cabecera")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_Presupuestos");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_Empleados");

                    b.HasOne("login4.Models.EF.AlqPresupuestosEstado", "Estado")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosEstados");

                    b.HasOne("login4.Models.EF.AlqPresupuestosDetalleCdbo", "IdcdboNavigation")
                        .WithOne("AlqPresupuestosDetalle")
                        .HasForeignKey("login4.Models.EF.AlqPresupuestosDetalle", "Idcdbo")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.AlqPresupuestosDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosDetalle");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("AlqPresupuestosDetalles")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_ALQ_PresupuestosDetalle_UnidadesMedida");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Empleado");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.AsientosDiario", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("AsientosDiarios")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_Asientos_Diario_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Asiento", "ClaveNavigation")
                        .WithMany("AsientosDiarios")
                        .HasForeignKey("Clave")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Asientos_Diario_Asientos");

                    b.Navigation("CentroCoste");

                    b.Navigation("ClaveNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosCatalogo", b =>
                {
                    b.HasOne("login4.Models.EF.AtributosProducto", "AtributoProducto")
                        .WithMany("AtributosCatalogos")
                        .HasForeignKey("AtributoProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AtributosCatalogo_AtributosProductos");

                    b.HasOne("login4.Models.EF.CatalogosAtributo", "CatalogoAtributo")
                        .WithMany("AtributosCatalogos")
                        .HasForeignKey("CatalogoAtributoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AtributosCatalogo_CatalogosAtributos");

                    b.Navigation("AtributoProducto");

                    b.Navigation("CatalogoAtributo");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosProducto", b =>
                {
                    b.HasOne("login4.Models.EF.AtributosProducto", "AtributoProducto")
                        .WithMany("InverseAtributoProducto")
                        .HasForeignKey("AtributoProductoId")
                        .HasConstraintName("FK_AtributosProductos_AtributosProductos");

                    b.HasOne("login4.Models.EF.AtributosTipo", "Tipo")
                        .WithMany("AtributosProductos")
                        .HasForeignKey("TipoId")
                        .HasConstraintName("FK_AtributosProductos_AtributosTipos");

                    b.Navigation("AtributoProducto");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosValoresFotosLog", b =>
                {
                    b.HasOne("login4.Models.EF.ValoresProducto", "ValorAtributo")
                        .WithMany("AtributosValoresFotosLogs")
                        .HasForeignKey("ValorAtributoId")
                        .IsRequired()
                        .HasConstraintName("FK_AtributosValoresFotosLog_ValoresProductos");

                    b.Navigation("ValorAtributo");
                });

            modelBuilder.Entity("login4.Models.EF.Autofactura", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Autofacturas")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_Autofacturas_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Autofacturas")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_Autofacturas_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("Autofacturas")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Autofacturas_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.AutofacturasEstado", "Estado")
                        .WithMany("Autofacturas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Autofacturas_AutofacturasEstados");

                    b.HasOne("login4.Models.EF.FacturasCompra", "FacturaCompra")
                        .WithMany("Autofacturas")
                        .HasForeignKey("FacturaCompraId")
                        .IsRequired()
                        .HasConstraintName("FK_Autofacturas_FacturasCompra");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("Autofacturas")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_Autofacturas_Series");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("FacturaCompra");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizable", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("AlmacenId")
                        .HasConstraintName("FK_BienesAmortizables_Almacenes");

                    b.HasOne("login4.Models.EF.BienesAmortizablesCategoria", "Categoria")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesCategorias");

                    b.HasOne("login4.Models.EF.BienesAmortizablesBajaCausa", "CausaBaja")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("CausaBajaId")
                        .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesBajaCausas");

                    b.HasOne("login4.Models.EF.BienesAmortizablesEstado", "Estado")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesEstados");

                    b.HasOne("login4.Models.EF.FacturasCompraDetalle", "FacturaCompraDetalle")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("FacturaCompraDetalleId")
                        .HasConstraintName("FK_BienesAmortizables_FacturasCompraDetalle");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_BienesAmortizables_Lotes");

                    b.HasOne("login4.Models.EF.BienesAmortizablesNaturaleza", "Naturaleza")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("NaturalezaId")
                        .IsRequired()
                        .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesNaturalezas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_BienesAmortizables_Productos");

                    b.HasOne("login4.Models.EF.Empleado", "Responsable")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("ResponsableId")
                        .HasConstraintName("FK_BienesAmortizables_Empleados");

                    b.HasOne("login4.Models.EF.BienesAmortizablesTipo", "Tipo")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesTipos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("BienesAmortizables")
                        .HasForeignKey("UbicacionId")
                        .HasConstraintName("FK_BienesAmortizables_AlmacenesUbicaciones");

                    b.Navigation("Almacen");

                    b.Navigation("Categoria");

                    b.Navigation("CausaBaja");

                    b.Navigation("Estado");

                    b.Navigation("FacturaCompraDetalle");

                    b.Navigation("Lote");

                    b.Navigation("Naturaleza");

                    b.Navigation("Producto");

                    b.Navigation("Responsable");

                    b.Navigation("Tipo");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("BienesAmortizablesDetalles")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_BienesAmortizablesDetalle_Ejercicios");

                    b.Navigation("Ejercicio");
                });

            modelBuilder.Entity("login4.Models.EF.Bo", b =>
                {
                    b.HasOne("login4.Models.EF.Bo", "BoNavigation")
                        .WithMany("InverseBoNavigation")
                        .HasForeignKey("Boid")
                        .HasConstraintName("FK_BO_BO_nueva");

                    b.Navigation("BoNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.BoCuenta", b =>
                {
                    b.HasOne("login4.Models.EF.Bo", "Bo")
                        .WithMany("BoCuenta")
                        .HasForeignKey("Boid")
                        .HasConstraintName("FK_BO_Cuentas_BO_nueva");

                    b.Navigation("Bo");
                });

            modelBuilder.Entity("login4.Models.EF.CalendarioDiasEmpleado", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("CalendarioDiasEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CalendarioDiasEmpleado_Empleados");

                    b.HasOne("login4.Models.EF.Turno", "Turno")
                        .WithMany("CalendarioDiasEmpleados")
                        .HasForeignKey("TurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_CalendarioDiasEmpleado_Turnos");

                    b.HasOne("login4.Models.EF.CalendariosDia", "CalendariosDia")
                        .WithMany("CalendarioDiasEmpleados")
                        .HasForeignKey("CalendarioId", "EjercicioId", "Fecha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CalendarioDiasEmpleado_CalendariosDias");

                    b.Navigation("CalendariosDia");

                    b.Navigation("Empleado");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosDia", b =>
                {
                    b.HasOne("login4.Models.EF.Turno", "Turno")
                        .WithMany("CalendariosDia")
                        .HasForeignKey("TurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_CalendariosDias_Turnos");

                    b.HasOne("login4.Models.EF.CalendariosEjercicio", "CalendariosEjercicio")
                        .WithMany("CalendariosDia")
                        .HasForeignKey("CalendarioId", "EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CalendariosDias_CalendariosEjercicios");

                    b.Navigation("CalendariosEjercicio");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosEjercicio", b =>
                {
                    b.HasOne("login4.Models.EF.Calendario", "Calendario")
                        .WithMany("CalendariosEjercicios")
                        .HasForeignKey("CalendarioId")
                        .IsRequired()
                        .HasConstraintName("FK_CalendariosEjercicios_Calendarios");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("CalendariosEjercicios")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_CalendariosEjercicios_Ejercicios");

                    b.Navigation("Calendario");

                    b.Navigation("Ejercicio");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosPlanSemanalDef", b =>
                {
                    b.HasOne("login4.Models.EF.Turno", "DomingoTurno")
                        .WithMany("CalendariosPlanSemanalDefDomingoTurnos")
                        .HasForeignKey("DomingoTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos6");

                    b.HasOne("login4.Models.EF.Turno", "JuevesTurno")
                        .WithMany("CalendariosPlanSemanalDefJuevesTurnos")
                        .HasForeignKey("JuevesTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos3");

                    b.HasOne("login4.Models.EF.Turno", "LunesTurno")
                        .WithMany("CalendariosPlanSemanalDefLunesTurnos")
                        .HasForeignKey("LunesTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos");

                    b.HasOne("login4.Models.EF.Turno", "MartesTurno")
                        .WithMany("CalendariosPlanSemanalDefMartesTurnos")
                        .HasForeignKey("MartesTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos1");

                    b.HasOne("login4.Models.EF.Turno", "MiercolesTurno")
                        .WithMany("CalendariosPlanSemanalDefMiercolesTurnos")
                        .HasForeignKey("MiercolesTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos2");

                    b.HasOne("login4.Models.EF.Turno", "SabadoTurno")
                        .WithMany("CalendariosPlanSemanalDefSabadoTurnos")
                        .HasForeignKey("SabadoTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos5");

                    b.HasOne("login4.Models.EF.Turno", "ViernesTurno")
                        .WithMany("CalendariosPlanSemanalDefViernesTurnos")
                        .HasForeignKey("ViernesTurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos4");

                    b.HasOne("login4.Models.EF.CalendariosEjercicio", "CalendariosEjercicio")
                        .WithOne("CalendariosPlanSemanalDef")
                        .HasForeignKey("login4.Models.EF.CalendariosPlanSemanalDef", "CalendarioId", "EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Calendarios_PlanSemanal_Def_CalendariosEjercicios");

                    b.Navigation("CalendariosEjercicio");

                    b.Navigation("DomingoTurno");

                    b.Navigation("JuevesTurno");

                    b.Navigation("LunesTurno");

                    b.Navigation("MartesTurno");

                    b.Navigation("MiercolesTurno");

                    b.Navigation("SabadoTurno");

                    b.Navigation("ViernesTurno");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosTurnosDef", b =>
                {
                    b.HasOne("login4.Models.EF.CalendariosEjercicio", "CalendariosEjercicio")
                        .WithMany("CalendariosTurnosDefs")
                        .HasForeignKey("CalendarioId", "EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Calendarios_Turnos_Def_CalendariosEjercicios");

                    b.Navigation("CalendariosEjercicio");
                });

            modelBuilder.Entity("login4.Models.EF.CantidadesPrecargaComisione", b =>
                {
                    b.HasOne("login4.Models.EF.ComisionesOperacione", "Operacion")
                        .WithMany()
                        .HasForeignKey("OperacionId")
                        .IsRequired()
                        .HasConstraintName("FK_CantidadesPrecargaComisiones_ComisionesOperaciones");

                    b.Navigation("Operacion");
                });

            modelBuilder.Entity("login4.Models.EF.CdboParametrosAnalitico", b =>
                {
                    b.HasOne("login4.Models.EF.GsUsrType", "UsrType")
                        .WithMany("CdboParametrosAnaliticos")
                        .HasForeignKey("UsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CDBO_ParametrosAnaliticos_GS_UsrTypes");

                    b.Navigation("UsrType");
                });

            modelBuilder.Entity("login4.Models.EF.CdbpStep", b =>
                {
                    b.HasOne("login4.Models.EF.CdbpProcess", "Process")
                        .WithMany("CdbpSteps")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CDBP_Steps_CDBP_Processes");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("login4.Models.EF.CentrosTrabajo", b =>
                {
                    b.HasOne("login4.Models.EF.Cualificacione", "Cualificacion")
                        .WithMany("CentrosTrabajos")
                        .HasForeignKey("CualificacionId")
                        .IsRequired()
                        .HasConstraintName("FK_CentrosTrabajo_Cualificaciones");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("CentrosTrabajos")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_CentrosTrabajo_Proveedores");

                    b.Navigation("Cualificacion");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("login4.Models.EF.Certificacione", b =>
                {
                    b.HasOne("login4.Models.EF.AlbaranesVentaDetalle", "AvdliquidacionNavigation")
                        .WithMany("Certificaciones")
                        .HasForeignKey("Avdliquidacion")
                        .HasConstraintName("FK_Certificaciones_AlbaranesVentaDetalle");

                    b.HasOne("login4.Models.EF.FacturasVentaDetalle", "FacturaDetalleDestino")
                        .WithMany("Certificaciones")
                        .HasForeignKey("FacturaDetalleDestinoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Certificaciones_FacturasVentaDetalle");

                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("Certificaciones")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_Certificaciones_FormasPago");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("Certificaciones")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_Certificaciones_MediosPago");

                    b.Navigation("AvdliquidacionNavigation");

                    b.Navigation("FacturaDetalleDestino");

                    b.Navigation("FormaPago");

                    b.Navigation("Medio");
                });

            modelBuilder.Entity("login4.Models.EF.Cliente", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("Clientes")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_Clientes_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("Clientes")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_Clientes_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "DireccionEntrega")
                        .WithMany("Clientes")
                        .HasForeignKey("DireccionEntregaId")
                        .HasConstraintName("FK_Clientes_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.FeFormato", "FeFormato")
                        .WithMany("Clientes")
                        .HasForeignKey("FeFormatoId")
                        .HasConstraintName("FK_Clientes_FE_Formatos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("Clientes")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_Clientes_IVAGrupos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("Clientes")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_Clientes_Series");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("DireccionEntrega");

                    b.Navigation("FeFormato");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesCentrosAdministrativo", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesCentrosAdministrativos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesCentrosAdministrativos_Clientes");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesContacto", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesContactosTipo", "ContactoTipo")
                        .WithMany("ClientesContactos")
                        .HasForeignKey("ContactoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientesContactos_ClientesContactosTipos");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccion")
                        .WithMany("ClientesContactoPersonaDireccions")
                        .HasForeignKey("PersonaDireccionId")
                        .HasConstraintName("FK_ClientesContactos_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesContactos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesContactos_Clientes");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "ClientesDireccione")
                        .WithMany("ClientesContactoClientesDirecciones")
                        .HasForeignKey("PersonaDireccionId", "PersonaId")
                        .HasPrincipalKey("IdpersonaDireccion", "PersonaId")
                        .HasConstraintName("FK_ClientesContactos_ClientesDirecciones2");

                    b.Navigation("ClientesDireccione");

                    b.Navigation("ContactoTipo");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccion");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesCuentasBancaria", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesCuentasBancaria")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesCuentasBancarias_Clientes");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("ClientesDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_Clientes_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesDatosDinamicos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Clientes_DatosDinamicos_Clientes");

                    b.Navigation("DatoDinamicoGsEntidadDef");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDescuento", b =>
                {
                    b.HasOne("login4.Models.EF.Familia", "Familia")
                        .WithMany("ClientesDescuentos")
                        .HasForeignKey("FamiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDescuentos_Familias");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesDescuentos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDescuentos_Clientes");

                    b.Navigation("Familia");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDescuentosRoot", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesDescuentosRoots")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDescuentos_Root_Clientes");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("ClientesDescuentosRoots")
                        .HasForeignKey("ProductoTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDescuentos_Root_ProductosTipos");

                    b.Navigation("Persona");

                    b.Navigation("ProductoTipo");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDiasPago", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesDiasPagos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDiasPago_Clientes");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDireccione", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesDireccionesCdbo", "IdcdboNavigation")
                        .WithMany("ClientesDirecciones")
                        .HasForeignKey("Idcdbo")
                        .HasConstraintName("FK_ClientesDirecciones_ClientesDirecciones_CDBO");

                    b.HasOne("login4.Models.EF.Localidade", "Localidad")
                        .WithMany("ClientesDirecciones")
                        .HasForeignKey("LocalidadId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDirecciones_Localidades");

                    b.HasOne("login4.Models.EF.Paise", "Pais")
                        .WithMany("ClientesDirecciones")
                        .HasForeignKey("PaisId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDirecciones_Paises");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesDirecciones")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDirecciones_Clientes");

                    b.HasOne("login4.Models.EF.Provincia", "Provincia")
                        .WithMany("ClientesDirecciones")
                        .HasForeignKey("ProvinciaId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientesDirecciones_Provincias");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Localidad");

                    b.Navigation("Pais");

                    b.Navigation("Persona");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesMandato", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesCuentasBancaria", "CuentaBancaria")
                        .WithMany("ClientesMandatos")
                        .HasForeignKey("CuentaBancariaId")
                        .HasConstraintName("FK_ClientesMandatos_ClientesCuentasBancarias");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesMandatos")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientesMandatos_Clientes");

                    b.Navigation("CuentaBancaria");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesPeriodosExentosPago", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesPeriodosExentosPagos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesPeriodosExentosPago_Clientes");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesTelefono", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccion")
                        .WithMany("ClientesTelefonos")
                        .HasForeignKey("PersonaDireccionId")
                        .HasConstraintName("FK_ClientesTelefonos_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("ClientesTelefonos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientesTelefonos_Clientes");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccion");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUserClaim", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesUser", "User")
                        .WithMany("ClientesUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUserLogin", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesUser", "User")
                        .WithMany("ClientesUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUsertoken", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesUser", "User")
                        .WithMany("ClientesUsertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("login4.Models.EF.Clientesroleclaim", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesRole", "Role")
                        .WithMany("Clientesroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("login4.Models.EF.Comarca", b =>
                {
                    b.HasOne("login4.Models.EF.Paise", "Pais")
                        .WithMany("Comarcas")
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK_Comarcas_Paises");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("login4.Models.EF.Comerciale", b =>
                {
                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("InverseComercial")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_Comerciales_Comerciales");

                    b.HasOne("login4.Models.EF.ComercialesTipo", "ComercialTipo")
                        .WithMany("Comerciales")
                        .HasForeignKey("ComercialTipoId")
                        .HasConstraintName("FK_Comerciales_ComercialesTipos");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("ComercialeComisions")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_Comerciales_Comisiones");

                    b.HasOne("login4.Models.EF.Comisione", "ComisionResponsable")
                        .WithMany("ComercialeComisionResponsables")
                        .HasForeignKey("ComisionResponsableId")
                        .HasConstraintName("FK_Comerciales_Comisiones1");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Comerciales")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_Comerciales_Empleados");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("Comerciales")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_Comerciales_Proveedores");

                    b.Navigation("Comercial");

                    b.Navigation("ComercialTipo");

                    b.Navigation("Comision");

                    b.Navigation("ComisionResponsable");

                    b.Navigation("Empleado");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("login4.Models.EF.ComisionesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Comisione", "ComisionNavigation")
                        .WithMany("ComisionesDetalles")
                        .HasForeignKey("ComisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ComisionesDetalle_Comisiones");

                    b.HasOne("login4.Models.EF.ComisionesOperacione", "Operacion")
                        .WithMany("ComisionesDetalles")
                        .HasForeignKey("OperacionId")
                        .HasConstraintName("FK_ComisionesDetalle_ComisionesOperaciones");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ComisionesDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ComisionesDetalle_Productos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ComisionesDetalles")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_ComisionesDetalle_UnidadesMedida");

                    b.Navigation("ComisionNavigation");

                    b.Navigation("Operacion");

                    b.Navigation("Producto");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.ConceptosRetencion", b =>
                {
                    b.HasOne("login4.Models.EF.Pgc", "CtaComprasNavigation")
                        .WithMany("ConceptosRetencionCtaComprasNavigations")
                        .HasForeignKey("CtaCompras")
                        .HasConstraintName("FK_ConceptosRetencion_PGC");

                    b.HasOne("login4.Models.EF.Pgc", "CtaVentasNavigation")
                        .WithMany("ConceptosRetencionCtaVentasNavigations")
                        .HasForeignKey("CtaVentas")
                        .HasConstraintName("FK_ConceptosRetencion_PGC1");

                    b.Navigation("CtaComprasNavigation");

                    b.Navigation("CtaVentasNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.ConfiguracionBloque", b =>
                {
                    b.HasOne("login4.Models.EF.Modelo", "Modelo")
                        .WithMany("ConfiguracionBloques")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConfiguracionBloques_Modelos");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("login4.Models.EF.ConfiguracionEmpresaCtum", b =>
                {
                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("ConfiguracionEmpresaCta")
                        .HasForeignKey("EmpresaId")
                        .IsRequired()
                        .HasConstraintName("FK_ConfiguracionEmpresa_CTA_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "M303Ccbdevolucion")
                        .WithMany("ConfiguracionEmpresaCtumM303Ccbdevolucions")
                        .HasForeignKey("M303CcbdevolucionId")
                        .HasConstraintName("FK_ConfiguracionEmpresa_CTA_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "M303Ccbingreso")
                        .WithMany("ConfiguracionEmpresaCtumM303Ccbingresos")
                        .HasForeignKey("M303CcbingresoId")
                        .HasConstraintName("FK_ConfiguracionEmpresa_CTA_EmpresasCuentasBancarias1");

                    b.HasOne("login4.Models.EF.CtaAeatTerritorio", "Territorio")
                        .WithMany("ConfiguracionEmpresaCta")
                        .HasForeignKey("TerritorioId")
                        .HasConstraintName("FK_ConfiguracionEmpresa_CTA_CTA_AEAT_Territorios");

                    b.Navigation("Empresa");

                    b.Navigation("M303Ccbdevolucion");

                    b.Navigation("M303Ccbingreso");

                    b.Navigation("Territorio");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccione", b =>
                {
                    b.HasOne("login4.Models.EF.CrmAccione", "CabeceraOrigen")
                        .WithMany("InverseCabeceraOrigen")
                        .HasForeignKey("CabeceraOrigenId")
                        .HasConstraintName("FK_CRM_Acciones_CRM_Acciones");

                    b.HasOne("login4.Models.EF.CrmAccione", "CabeceraRecurrence")
                        .WithMany("InverseCabeceraRecurrence")
                        .HasForeignKey("CabeceraRecurrenceId")
                        .HasConstraintName("FK_CRM_Acciones_Recurrencia");

                    b.HasOne("login4.Models.EF.Empleado", "ComercialEmpleado")
                        .WithMany("CrmAccioneComercialEmpleados")
                        .HasForeignKey("ComercialEmpleadoId")
                        .HasConstraintName("FK_CRM_Acciones_EmpleadosComerciales");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("ComercialId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_Comerciales");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("CrmAccioneEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("EmpresaId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.CrmAccionesEstado", "EstadoAccion")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("EstadoAccionId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_CRM_AccionesEstados");

                    b.HasOne("login4.Models.EF.CrmAccionesCdbo", "IdcdboNavigation")
                        .WithOne("CrmAccione")
                        .HasForeignKey("login4.Models.EF.CrmAccione", "Idcdbo")
                        .HasConstraintName("FK_CRM_Acciones_CRM_Acciones_CDBO");

                    b.HasOne("login4.Models.EF.CrmAccionesIniciativa", "Iniciativa")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("IniciativaId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_CRM_AccionesIniciativas");

                    b.HasOne("login4.Models.EF.CrmAccionesMedio", "Medio")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("MedioId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_CRM_AccionesMedios");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Acciones_Clientes");

                    b.HasOne("login4.Models.EF.CrmAccionesResultado", "Resultado")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("ResultadoId")
                        .HasConstraintName("FK_CRM_Acciones_CRM_AccionesResultados");

                    b.HasOne("login4.Models.EF.CrmAccionesTipo", "TipoAccion")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("TipoAccionId")
                        .HasConstraintName("FK_CRM_Acciones_CRM_AccionesTipos");

                    b.HasOne("login4.Models.EF.ClientesContacto", "ClientesContacto")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("PersonaContactoId", "PersonaId")
                        .HasPrincipalKey("Id", "PersonaId")
                        .HasConstraintName("FK_CRM_Acciones_ClientesContactos");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "ClientesDireccione")
                        .WithMany("CrmAcciones")
                        .HasForeignKey("PersonaDireccionId", "PersonaId")
                        .HasPrincipalKey("IdpersonaDireccion", "PersonaId")
                        .HasConstraintName("FK_CRM_Acciones_ClientesDirecciones");

                    b.Navigation("CabeceraOrigen");

                    b.Navigation("CabeceraRecurrence");

                    b.Navigation("ClientesContacto");

                    b.Navigation("ClientesDireccione");

                    b.Navigation("Comercial");

                    b.Navigation("ComercialEmpleado");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("EstadoAccion");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Iniciativa");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("Resultado");

                    b.Navigation("TipoAccion");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesTipo", b =>
                {
                    b.HasOne("login4.Models.EF.CrmAccionesTiposGenerico", "TipoGenerico")
                        .WithMany("CrmAccionesTipos")
                        .HasForeignKey("TipoGenericoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_AccionesTipos_CRM_AccionesTiposGenericos");

                    b.Navigation("TipoGenerico");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanya", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("CrmCampanyas")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_CRM_Campanyas_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("CrmCampanyas")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_CRM_Campanyas_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("CrmCampanyas")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_CRM_Campanyas_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.CrmCampanyasEstado", "Estado")
                        .WithMany("CrmCampanyas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Campanyas_CRM_CampanyasEstados");

                    b.HasOne("login4.Models.EF.CrmCampanyasCdbo", "IdcdboNavigation")
                        .WithOne("CrmCampanya")
                        .HasForeignKey("login4.Models.EF.CrmCampanya", "Idcdbo")
                        .HasConstraintName("FK_CRM_Campanyas_CRM_Campanyas_CDBO");

                    b.HasOne("login4.Models.EF.CrmCampanyasTipo", "Tipo")
                        .WithMany("CrmCampanyas")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Campanyas_CRM_CampanyasTipos");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasCriterio", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCampanya", "Cabecera")
                        .WithMany("CrmCampanyasCriterios")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasCriterios_CRM_Campanyas");

                    b.HasOne("login4.Models.EF.CrmCamposCriterio", "CampoCriterio")
                        .WithMany("CrmCampanyasCriterios")
                        .HasForeignKey("CampoCriterioId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasCriterios_CRM_CamposCriterios");

                    b.Navigation("Cabecera");

                    b.Navigation("CampoCriterio");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDestinatario", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCampanya", "Cabecera")
                        .WithMany("CrmCampanyasDestinatarios")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasDestinatarios_CRM_Campanyas");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("CrmCampanyasDestinatarios")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_CRM_CampanyasDestinatarios_ClientesContactos");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("CrmCampanyasDestinatarios")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasDestinatarios_Clientes");

                    b.Navigation("Cabecera");

                    b.Navigation("Contacto");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCampanya", "Cabecera")
                        .WithMany("CrmCampanyasDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasDetalle_CRM_Campanyas");

                    b.HasOne("login4.Models.EF.CrmCampanyasDocumento", "Documento")
                        .WithMany("CrmCampanyasDetalles")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_CRM_CampanyasDetalle_CRM_CampanyasDocumentos");

                    b.HasOne("login4.Models.EF.CrmCampanyasDetalleCdbo", "IdcdboNavigation")
                        .WithOne("CrmCampanyasDetalle")
                        .HasForeignKey("login4.Models.EF.CrmCampanyasDetalle", "Idcdbo")
                        .HasConstraintName("FK_CRM_CampanyasDetalle_CRM_CampanyasDetalle_CDBO");

                    b.Navigation("Cabecera");

                    b.Navigation("Documento");

                    b.Navigation("IdcdboNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDocumento", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCampanya", "Cabecera")
                        .WithMany("CrmCampanyasDocumentos")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasDocumentos_CRM_Campanyas");

                    b.HasOne("login4.Models.EF.GdFormatosArchivo", "Formato")
                        .WithMany("CrmCampanyasDocumentos")
                        .HasForeignKey("FormatoId")
                        .HasConstraintName("FK_CRM_CampanyasDocumentos_GD_FormatosArchivos");

                    b.HasOne("login4.Models.EF.CrmDocumentosTipo", "Tipo")
                        .WithMany("CrmCampanyasDocumentos")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasDocumentos_CRM_DocumentosTipos");

                    b.Navigation("Cabecera");

                    b.Navigation("Formato");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasSeguimiento", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCampanya", "Cabecera")
                        .WithMany("CrmCampanyasSeguimientos")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CampanyasSeguimientos_CRM_Campanyas");

                    b.HasOne("login4.Models.EF.CrmCampanyasDestinatario", "Destinatario")
                        .WithMany("CrmCampanyasSeguimientos")
                        .HasForeignKey("DestinatarioId")
                        .HasConstraintName("FK_CRM_CampanyasSeguimientos_CRM_CampanyasDestinatarios");

                    b.Navigation("Cabecera");

                    b.Navigation("Destinatario");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCamposCriterio", b =>
                {
                    b.HasOne("login4.Models.EF.CrmSegmento", "Segmento")
                        .WithMany("CrmCamposCriterios")
                        .HasForeignKey("SegmentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CRM_CamposCriterios_CRM_Segmentos");

                    b.Navigation("Segmento");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCanjesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCanje", "Canje")
                        .WithMany("CrmCanjesDetalles")
                        .HasForeignKey("CanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_CanjesDetalle_CRM_Canjes");

                    b.Navigation("Canje");
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPunto", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithOne("CrmClientesPunto")
                        .HasForeignKey("login4.Models.EF.CrmClientesPunto", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesPuntos_Clientes");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPuntosCabecera", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("CrmClientesPuntosCabeceras")
                        .HasForeignKey("DocumentoGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesPuntosCabeceras_DocumentosGestion");

                    b.HasOne("login4.Models.EF.CrmLiquidacione", "Liquidacion")
                        .WithMany("CrmClientesPuntosCabeceras")
                        .HasForeignKey("LiquidacionId")
                        .HasConstraintName("FK_CRM_ClientesPuntosCabeceras_CRM_Liquidaciones");

                    b.HasOne("login4.Models.EF.CrmClientesPunto", "Persona")
                        .WithMany("CrmClientesPuntosCabeceras")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesPuntosCabeceras_CRM_ClientesPuntos");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("Liquidacion");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPuntosDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.CrmClientesPuntosCabecera", "Cabecera")
                        .WithMany("CrmClientesPuntosDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesPuntosDetalle_CRM_ClientesPuntosCabeceras");

                    b.HasOne("login4.Models.EF.CrmPuntosTabla", "PuntosTabla")
                        .WithMany("CrmClientesPuntosDetalles")
                        .HasForeignKey("PuntosTablaId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesPuntosDetalle_CRM_PuntosTabla");

                    b.HasOne("login4.Models.EF.CrmPuntosTablaDetalle", "CrmPuntosTablaDetalle")
                        .WithMany("CrmClientesPuntosDetalles")
                        .HasForeignKey("PuntosTablaDetalleId", "PuntosTablaId", "ProductoId")
                        .HasPrincipalKey("IdpuntosTablaDetalle", "PuntosTablaId", "ProductoId")
                        .HasConstraintName("FK_CRM_ClientesPuntosDetalle_CRM_PuntosTablaDetalle2");

                    b.Navigation("Cabecera");

                    b.Navigation("CrmPuntosTablaDetalle");

                    b.Navigation("PuntosTabla");
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesSegmento", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("CrmClientesSegmentos")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_CRM_ClientesSegmentos_ClientesContactos");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("CrmClientesSegmentos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesSegmentos_Clientes");

                    b.HasOne("login4.Models.EF.CrmSegmento", "Segmento")
                        .WithMany("CrmClientesSegmentos")
                        .HasForeignKey("SegmentoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_ClientesSegmentos_CRM_Segmentos");

                    b.Navigation("Contacto");

                    b.Navigation("Persona");

                    b.Navigation("Segmento");
                });

            modelBuilder.Entity("login4.Models.EF.CrmLiquidacione", b =>
                {
                    b.HasOne("login4.Models.EF.CrmCanje", "Canje")
                        .WithMany("CrmLiquidaciones")
                        .HasForeignKey("CanjeId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Liquidaciones_CRM_Canjes");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("CrmLiquidaciones")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Liquidaciones_Clientes");

                    b.Navigation("Canje");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.CrmOportunidade", b =>
                {
                    b.HasOne("login4.Models.EF.CrmOportunidadesEstado", "Estado")
                        .WithMany("CrmOportunidades")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Oportunidades_CRM_OportunidadesEstados");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("CrmOportunidades")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_CRM_Oportunidades_Clientes");

                    b.HasOne("login4.Models.EF.CrmOportunidadesPrioridade", "Prioridad")
                        .WithMany("CrmOportunidades")
                        .HasForeignKey("PrioridadId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Oportunidades_CRM_OportunidadesPrioridades");

                    b.Navigation("Estado");

                    b.Navigation("Persona");

                    b.Navigation("Prioridad");
                });

            modelBuilder.Entity("login4.Models.EF.CrmPuntosTablaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("CrmPuntosTablaDetalles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_PuntosTablaDetalle_Productos");

                    b.HasOne("login4.Models.EF.CrmPuntosTabla", "PuntosTabla")
                        .WithMany("CrmPuntosTablaDetalles")
                        .HasForeignKey("PuntosTablaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_PuntosTablaDetalle_CRM_PuntosTabla");

                    b.Navigation("Producto");

                    b.Navigation("PuntosTabla");
                });

            modelBuilder.Entity("login4.Models.EF.CrmSegmento", b =>
                {
                    b.HasOne("login4.Models.EF.GsUsrType", "UsrType")
                        .WithMany("CrmSegmentos")
                        .HasForeignKey("UsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CRM_Segmentos_GS_UsrTypes");

                    b.Navigation("UsrType");
                });

            modelBuilder.Entity("login4.Models.EF.CrmTarjetasFidelizacion", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("CrmTarjetasFidelizacions")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRM_TarjetasFidelizacion_Clientes");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.CtaAsientosOrigene", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("CtaAsientosOrigenes")
                        .HasForeignKey("DocumentoGestionId")
                        .HasConstraintName("FK_CTA_AsientosOrigenes_DocumentosGestion");

                    b.Navigation("DocumentoGestion");
                });

            modelBuilder.Entity("login4.Models.EF.CtaCentroCoste", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("InverseCentroCoste")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_CTA_CentroCoste_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("CtaCentroCostes")
                        .HasForeignKey("DepartamentoId")
                        .IsRequired()
                        .HasConstraintName("FK_CTA_CentroCoste_Departamentos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccione")
                        .WithMany("CtaCentroCostes")
                        .HasForeignKey("SeccionId", "DepartamentoId")
                        .HasPrincipalKey("Idseccion", "DepartamentoId")
                        .HasConstraintName("FK_CTA_CentroCoste_Secciones");

                    b.Navigation("CentroCoste");

                    b.Navigation("Departamento");

                    b.Navigation("Seccione");
                });

            modelBuilder.Entity("login4.Models.EF.CtaCuentasIntercambio", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("CtaCuentasIntercambios")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_CTA_Cuentas_Intercambio_Empleados");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("login4.Models.EF.Cualificacione", b =>
                {
                    b.HasOne("login4.Models.EF.CualificacionesAtributo", "Atributo")
                        .WithMany("Cualificaciones")
                        .HasForeignKey("AtributoId")
                        .IsRequired()
                        .HasConstraintName("FK_Cualificaciones_CualificacionesAtributos");

                    b.HasOne("login4.Models.EF.ValoresProducto", "Valor")
                        .WithMany("Cualificaciones")
                        .HasForeignKey("ValorId")
                        .IsRequired()
                        .HasConstraintName("FK_Cualificaciones_ValoresProductos");

                    b.Navigation("Atributo");

                    b.Navigation("Valor");
                });

            modelBuilder.Entity("login4.Models.EF.CualificacionesAtributo", b =>
                {
                    b.HasOne("login4.Models.EF.AtributosProducto", "Atributo")
                        .WithOne("CualificacionesAtributo")
                        .HasForeignKey("login4.Models.EF.CualificacionesAtributo", "AtributoId")
                        .IsRequired()
                        .HasConstraintName("FK_CualificacionesAtributos_AtributosProductos");

                    b.Navigation("Atributo");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.GsUsrType", "UsrType")
                        .WithMany("DatosDinamicos")
                        .HasForeignKey("UsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DatosDinamicos_GS_UsrTypes");

                    b.Navigation("UsrType");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamicosGsEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithOne("DatosDinamicosGsEntidade")
                        .HasForeignKey("login4.Models.EF.DatosDinamicosGsEntidade", "EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_DatosDinamicos_GS_Entidades_GS_Entidades");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamicosGsEntidadesDef", b =>
                {
                    b.HasOne("login4.Models.EF.DatosDinamico", "DatoDinamico")
                        .WithMany("DatosDinamicosGsEntidadesDefs")
                        .HasForeignKey("DatoDinamicoId")
                        .IsRequired()
                        .HasConstraintName("FK_DatosDinamicos_GS_EntidadesDef_DatosDinamicos");

                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidade", "Entidad")
                        .WithMany("DatosDinamicosGsEntidadesDefs")
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DatosDinamicos_GS_EntidadesDef_DatosDinamicos_GS_Entidades");

                    b.Navigation("DatoDinamico");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.DevolucionesVentum", "Cabecera")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVenta");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.DevolucionesVentaEstado", "Estado")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVentaEstados");

                    b.HasOne("login4.Models.EF.DevolucionesVentaDetalleCdbo", "IdcdboNavigation")
                        .WithOne("DevolucionesVentaDetalle")
                        .HasForeignKey("login4.Models.EF.DevolucionesVentaDetalle", "Idcdbo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVentaDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.DevolucionesVentaDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVentaDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVentaDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVentaDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("DevolucionesVentaDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVentaDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("DevolucionesVentaDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("DevolucionesVentaDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("DevolucionesVentaDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("DevolucionesVentaDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentum", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_DevolucionesVenta_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_DevolucionesVenta_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_DevolucionesVenta_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_DevolucionesVenta_ClientesContactos");

                    b.HasOne("login4.Models.EF.DireccionesEntidadesOrigen", "DirRecogidaEntidadOrigen")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("DirRecogidaEntidadOrigenId")
                        .HasConstraintName("FK_DevolucionesVenta_Direcciones_EntidadesOrigen");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_DevolucionesVenta_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("DevolucionesVentumEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_DevolucionesVenta_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("DevolucionesVentumEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_DevolucionesVenta_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_DevolucionesVenta_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.DevolucionesVentaEstado", "Estado")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVenta_DevolucionesVentaEstados");

                    b.HasOne("login4.Models.EF.DevolucionesVentaCdbo", "IdcdboNavigation")
                        .WithOne("DevolucionesVentum")
                        .HasForeignKey("login4.Models.EF.DevolucionesVentum", "Idcdbo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_DevolucionesVenta_DevolucionesVenta_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_DevolucionesVenta_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_DevolucionesVenta_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_DevolucionesVenta_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVenta_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_DevolucionesVenta_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_DevolucionesVenta_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("DevolucionesVenta")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_DevolucionesVenta_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("DirRecogidaEntidadOrigen");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.DgDgdireccione", b =>
                {
                    b.HasOne("login4.Models.EF.DgDireccione", "Dgdireccion")
                        .WithMany()
                        .HasForeignKey("DgdireccionId")
                        .IsRequired()
                        .HasConstraintName("FK_DG_DGDirecciones_DG_Direcciones");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany()
                        .HasForeignKey("DocumentoGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_DG_DGDirecciones_DocumentosGestion");

                    b.Navigation("Dgdireccion");

                    b.Navigation("DocumentoGestion");
                });

            modelBuilder.Entity("login4.Models.EF.DgdUbicacione", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_Almacenes");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("DocumentoGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_DocumentosGestion");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_Lotes");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("UbicacionId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("DgdUbicaciones")
                        .HasForeignKey("UnidadMedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_DGD_Ubicaciones_UnidadesMedida");

                    b.Navigation("Almacen");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("Lote");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Ubicacion");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.Diario", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("Diarios")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_Diario_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Pgc", "CuentaNavigation")
                        .WithMany("Diarios")
                        .HasForeignKey("Cuenta")
                        .IsRequired()
                        .HasConstraintName("FK_Diario_PGC");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Diarios")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_Diario_Ejercicios");

                    b.HasOne("login4.Models.EF.CtaAsientosOrigene", "Origen")
                        .WithMany("Diarios")
                        .HasForeignKey("OrigenId")
                        .HasConstraintName("FK_Diario_CTA_AsientosOrigenes");

                    b.Navigation("CentroCoste");

                    b.Navigation("CuentaNavigation");

                    b.Navigation("Ejercicio");

                    b.Navigation("Origen");
                });

            modelBuilder.Entity("login4.Models.EF.DireccionesEntidadesOrigen", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithMany("DireccionesEntidadesOrigens")
                        .HasForeignKey("EntidadId")
                        .HasConstraintName("FK_Direcciones_EntidadesOrigen_GS_Entidades");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSet", b =>
                {
                    b.HasOne("login4.Models.EF.GsGridDefinition", "GridDefinition")
                        .WithMany("DmnDataSets")
                        .HasForeignKey("GridDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_GS_GridDefinitions");

                    b.HasOne("login4.Models.EF.DmnQueryForm", "QueryForm")
                        .WithMany("DmnDataSets")
                        .HasForeignKey("QueryFormId")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_DMN_QueryForm");

                    b.Navigation("GridDefinition");

                    b.Navigation("QueryForm");
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSetParameter", b =>
                {
                    b.HasOne("login4.Models.EF.DmnDataSet", "DataSet")
                        .WithMany("DmnDataSetParameters")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_Parameter_DMN_DataSet");

                    b.HasOne("login4.Models.EF.GsUsrOperator", "Operator")
                        .WithMany("DmnDataSetParameters")
                        .HasForeignKey("OperatorId")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_Parameter_GS_UsrOperators");

                    b.HasOne("login4.Models.EF.GsUsrType", "UsrType")
                        .WithMany("DmnDataSetParameters")
                        .HasForeignKey("UsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_Parameter_GS_UsrTypes");

                    b.Navigation("DataSet");

                    b.Navigation("Operator");

                    b.Navigation("UsrType");
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSetRel", b =>
                {
                    b.HasOne("login4.Models.EF.DmnDataSet", "IddataSet1Navigation")
                        .WithMany()
                        .HasForeignKey("IddataSet1")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_rel_DMN_DataSet1");

                    b.HasOne("login4.Models.EF.DmnDataSet", "IddataSet2Navigation")
                        .WithMany()
                        .HasForeignKey("IddataSet2")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_DataSet_rel_DMN_DataSet2");

                    b.Navigation("IddataSet1Navigation");

                    b.Navigation("IddataSet2Navigation");
                });

            modelBuilder.Entity("login4.Models.EF.DmnQueryForm", b =>
                {
                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("DmnQueryForms")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_DMN_QueryForm_Formularios");

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestion", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestionDestinatario", "DocumentoGestionDestinatario")
                        .WithMany("DocumentosGestions")
                        .HasForeignKey("DocumentoGestionDestinatarioId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestion_DocumentosGestionDestinatarios");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("InverseDocumentoGestion")
                        .HasForeignKey("DocumentoGestionId")
                        .HasConstraintName("FK_DocumentosGestion_DocumentosGestion");

                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithMany("DocumentosGestions")
                        .HasForeignKey("EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestion_GS_Entidades");

                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("DocumentosGestions")
                        .HasForeignKey("FormularioId")
                        .HasConstraintName("FK_DocumentosGestion_Formularios");

                    b.HasOne("login4.Models.EF.ModulosGestion", "ModuloGestion")
                        .WithMany("DocumentosGestions")
                        .HasForeignKey("ModuloGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestion_ModulosGestion");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("DocumentoGestionDestinatario");

                    b.Navigation("Entidad");

                    b.Navigation("Formulario");

                    b.Navigation("ModuloGestion");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionAsiento", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DocumentosGestionAsientos")
                        .HasForeignKey("DocumentoGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionAsientos_DocumentosGestion");

                    b.Navigation("DocumentoGestion");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionDetalleObservacione", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DocumentosGestionDetalleObservaciones")
                        .HasForeignKey("DocumentoGestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleObservaciones_DocumentosGestion");

                    b.Navigation("DocumentoGestion");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionDetalleUbicacione", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Almacenes");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("DocumentoGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_DocumentosGestion");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Lotes");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("UbicacionId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("DocumentosGestionDetalleUbicaciones")
                        .HasForeignKey("UnidadMedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_UnidadesMedida");

                    b.Navigation("Almacen");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("Lote");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Ubicacion");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionMargenesClafe", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DocumentosGestionMargenesClaves")
                        .HasForeignKey("DocumentoGestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionMargenesClaves_DocumentosGestion");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("DocumentosGestionMargenesClaves")
                        .HasForeignKey("MargenClaveId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionMargenesClaves_MargenesClaves");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("MargenClave");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionRegistroAlmacen", b =>
                {
                    b.HasOne("login4.Models.EF.MovimientosAlmacen", "CabeceraDestino")
                        .WithMany("DocumentosGestionRegistroAlmacens")
                        .HasForeignKey("CabeceraDestinoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_MovimientosAlmacen");

                    b.HasOne("login4.Models.EF.MovimientosAlmacenDetalle", "DetalleDestino")
                        .WithMany("DocumentosGestionRegistroAlmacens")
                        .HasForeignKey("DetalleDestinoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_MovimientosAlmacenDetalle");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestionDestino")
                        .WithMany("DocumentosGestionRegistroAlmacenDocumentoGestionDestinos")
                        .HasForeignKey("DocumentoGestionDestinoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_DocumentosGestion");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestionOrigen")
                        .WithMany("DocumentosGestionRegistroAlmacenDocumentoGestionOrigens")
                        .HasForeignKey("DocumentoGestionOrigenId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_DocumentosGestion1");

                    b.Navigation("CabeceraDestino");

                    b.Navigation("DetalleDestino");

                    b.Navigation("DocumentoGestionDestino");

                    b.Navigation("DocumentoGestionOrigen");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTiposLinea", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DocumentosGestionTiposLineas")
                        .HasForeignKey("DocumentoGestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLinea_DocumentosGestion");

                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("DocumentosGestionTiposLineas")
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLinea_Formularios");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("DocumentosGestionTiposLineas")
                        .HasForeignKey("TipoLineaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLinea_TiposLinea");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("Formulario");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTiposLineaTiposLinea", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestion")
                        .WithMany("DocumentosGestionTiposLineaTiposLineas")
                        .HasForeignKey("DocumentoGestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_DocumentosGestion");

                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("DocumentosGestionTiposLineaTiposLineas")
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_Formularios");

                    b.HasOne("login4.Models.EF.TiposLinea", "ParentTipoLinea")
                        .WithMany("DocumentosGestionTiposLineaTiposLineaParentTipoLineas")
                        .HasForeignKey("ParentTipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_TiposLinea1");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("DocumentosGestionTiposLineaTiposLineaTipoLineas")
                        .HasForeignKey("TipoLineaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_TiposLinea");

                    b.Navigation("DocumentoGestion");

                    b.Navigation("Formulario");

                    b.Navigation("ParentTipoLinea");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTraspaso", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestionDestino")
                        .WithMany("DocumentosGestionTraspasoDocumentoGestionDestinos")
                        .HasForeignKey("DocumentoGestionDestinoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTraspasos_DocumentosGestion1");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestionOrigen")
                        .WithMany("DocumentosGestionTraspasoDocumentoGestionOrigens")
                        .HasForeignKey("DocumentoGestionOrigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTraspasos_DocumentosGestion");

                    b.Navigation("DocumentoGestionDestino");

                    b.Navigation("DocumentoGestionOrigen");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionTraspasosSetup", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestionDestino")
                        .WithMany("DocumentosGestionTraspasosSetupDocumentoGestionDestinos")
                        .HasForeignKey("DocumentoGestionDestinoId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTraspasosSetup_DocumentosGestion1");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoGestionOrigen")
                        .WithMany("DocumentosGestionTraspasosSetupDocumentoGestionOrigens")
                        .HasForeignKey("DocumentoGestionOrigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentosGestionTraspasosSetup_DocumentosGestion");

                    b.Navigation("DocumentoGestionDestino");

                    b.Navigation("DocumentoGestionOrigen");
                });

            modelBuilder.Entity("login4.Models.EF.Empleado", b =>
                {
                    b.HasOne("login4.Models.EF.Calendario", "Calendario")
                        .WithMany("Empleados")
                        .HasForeignKey("CalendarioId")
                        .HasConstraintName("FK_Empleados_Calendarios");

                    b.HasOne("login4.Models.EF.Cualificacione", "Cualificacion")
                        .WithMany("Empleados")
                        .HasForeignKey("CualificacionId")
                        .HasConstraintName("FK_Empleados_Cualificaciones");

                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("Empleados")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_Empleados_Departamentos");

                    b.HasOne("login4.Models.EF.EmpleadosContratosTipo", "EmpleadoContratoTipo")
                        .WithMany("Empleados")
                        .HasForeignKey("EmpleadoContratoTipoId")
                        .HasConstraintName("FK_Empleados_EmpleadosContratosTipos");

                    b.HasOne("login4.Models.EF.EmpleadosDepartamento", "EmpleadoDepartamento")
                        .WithMany("Empleados")
                        .HasForeignKey("EmpleadoDepartamentoId")
                        .HasConstraintName("FK_Empleados_EmpleadosDepartamentos");

                    b.HasOne("login4.Models.EF.EmpleadosEstadosCivile", "EmpleadoEstadoCivil")
                        .WithMany("Empleados")
                        .HasForeignKey("EmpleadoEstadoCivilId")
                        .HasConstraintName("FK_Empleados_EmpleadosEstadosCiviles");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("Empleados")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_Empleados_Secciones");

                    b.HasOne("login4.Models.EF.CarneConducirTipo", "TipoCarneConducir")
                        .WithMany("Empleados")
                        .HasForeignKey("TipoCarneConducirId")
                        .HasConstraintName("FK_Empleados_CarneConducirTipos");

                    b.Navigation("Calendario");

                    b.Navigation("Cualificacion");

                    b.Navigation("Departamento");

                    b.Navigation("EmpleadoContratoTipo");

                    b.Navigation("EmpleadoDepartamento");

                    b.Navigation("EmpleadoEstadoCivil");

                    b.Navigation("Seccion");

                    b.Navigation("TipoCarneConducir");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosDireccione", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("EmpleadosDirecciones")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpleadosDirecciones_Empleados");

                    b.HasOne("login4.Models.EF.Localidade", "Localidad")
                        .WithMany("EmpleadosDirecciones")
                        .HasForeignKey("LocalidadId")
                        .IsRequired()
                        .HasConstraintName("FK_EmpleadosDirecciones_Localidades");

                    b.HasOne("login4.Models.EF.Paise", "Pais")
                        .WithMany("EmpleadosDirecciones")
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK_EmpleadosDirecciones_Paises");

                    b.HasOne("login4.Models.EF.Provincia", "Provincia")
                        .WithMany("EmpleadosDirecciones")
                        .HasForeignKey("ProvinciaId")
                        .IsRequired()
                        .HasConstraintName("FK_EmpleadosDirecciones_Provincias");

                    b.Navigation("Empleado");

                    b.Navigation("Localidad");

                    b.Navigation("Pais");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosTelefono", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("EmpleadosTelefonos")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpleadosTelefonos_Empleados");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasCuentasBancaria", b =>
                {
                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Titular")
                        .WithMany("EmpresasCuentasBancaria")
                        .HasForeignKey("TitularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpresasCuentasBancarias_ConfiguracionEmpresa");

                    b.Navigation("Titular");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasDiasPago", b =>
                {
                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("EmpresasDiasPagos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpresasDiasPago_ConfiguracionEmpresa");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasEmailCuenta", b =>
                {
                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("EmpresasEmailCuenta")
                        .HasForeignKey("EmpresaId")
                        .IsRequired()
                        .HasConstraintName("FK_EmpresasEmailCuentas_EmpresasEmailCuentas");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasPeriodosExentosPago", b =>
                {
                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("EmpresasPeriodosExentosPagos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpresasPeriodosExentosPago_ConfiguracionEmpresa");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("login4.Models.EF.Expedicione", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Expediciones")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_Expediciones_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("ExpedicioneEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_Expediciones_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("ExpedicioneEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("Expediciones")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Expediciones_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.ExpedicionesCdbo", "IdcdboNavigation")
                        .WithOne("Expedicione")
                        .HasForeignKey("login4.Models.EF.Expedicione", "Idcdbo")
                        .HasConstraintName("FK_Expediciones_Expediciones_CDBO");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("Expediciones")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_Expediciones_Proveedores");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("Expediciones")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_Expediciones_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "TarifaAgencia")
                        .WithMany("Expediciones")
                        .HasForeignKey("TarifaAgenciaId")
                        .HasConstraintName("FK_Expediciones_AgenciasTransporteTarifas");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Persona");

                    b.Navigation("Serie");

                    b.Navigation("TarifaAgencia");
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Expedicione", "Cabecera")
                        .WithMany("ExpedicionesDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ExpedicionesDetalle_Expediciones");

                    b.HasOne("login4.Models.EF.DocumentosGestion", "Dgorigen")
                        .WithMany("ExpedicionesDetalles")
                        .HasForeignKey("DgorigenId")
                        .HasConstraintName("FK_ExpedicionesDetalle_DocumentosGestion");

                    b.HasOne("login4.Models.EF.DireccionesEntidadesOrigen", "DirEntregaEntidadOrigen")
                        .WithMany("ExpedicionesDetalleDirEntregaEntidadOrigens")
                        .HasForeignKey("DirEntregaEntidadOrigenId")
                        .HasConstraintName("FK_ExpedicionesDetalle_Direcciones_EntidadesOrigenEntrega");

                    b.HasOne("login4.Models.EF.DireccionesEntidadesOrigen", "DirSalidaEntidadOrigen")
                        .WithMany("ExpedicionesDetalleDirSalidaEntidadOrigens")
                        .HasForeignKey("DirSalidaEntidadOrigenId")
                        .HasConstraintName("FK_ExpedicionesDetalle_Direcciones_EntidadesOrigen");

                    b.HasOne("login4.Models.EF.ExpedicionesEstado", "Estado")
                        .WithMany("ExpedicionesDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpedicionesDetalle_ExpedicionesEstados");

                    b.HasOne("login4.Models.EF.ExpedicionesDetalleCdbo", "IdcdboNavigation")
                        .WithOne("ExpedicionesDetalle")
                        .HasForeignKey("login4.Models.EF.ExpedicionesDetalle", "Idcdbo")
                        .HasConstraintName("FK_ExpedicionesDetalle_ExpedicionesDetalle_CDBO");

                    b.HasOne("login4.Models.EF.ExpedicionesDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_ExpedicionesDetalle_ExpedicionesDetalle");

                    b.HasOne("login4.Models.EF.ExpPaquetesFormato", "PaqueteFormato")
                        .WithMany("ExpedicionesDetalles")
                        .HasForeignKey("PaqueteFormatoId")
                        .HasConstraintName("FK_ExpedicionesDetalle_EXP_PaquetesFormatos");

                    b.HasOne("login4.Models.EF.PortesTipo", "PortesTipo")
                        .WithMany("ExpedicionesDetalles")
                        .HasForeignKey("PortesTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpedicionesDetalle_PortesTipos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("ExpedicionesDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpedicionesDetalle_TiposLinea");

                    b.Navigation("Cabecera");

                    b.Navigation("Dgorigen");

                    b.Navigation("DirEntregaEntidadOrigen");

                    b.Navigation("DirSalidaEntidadOrigen");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Linea");

                    b.Navigation("PaqueteFormato");

                    b.Navigation("PortesTipo");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.FacturacionPlanificacion", b =>
                {
                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("FacturacionPlanificacions")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_FacturacionPlanificacion_FormasPago");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("FacturacionPlanificacions")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_FacturacionPlanificacion_MediosPago");

                    b.Navigation("FormaPago");

                    b.Navigation("Medio");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompra", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_FacturasCompra_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ProveedoresContacto", "Contacto")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_FacturasCompra_ProveedoresContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_FacturasCompra_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_FacturasCompra_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_FacturasCompra_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.FacturasCompraEstado", "Estado")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompra_FacturasCompraEstados");

                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_FacturasCompra_FormasPago");

                    b.HasOne("login4.Models.EF.FacturasCompraCdbo", "IdcdboNavigation")
                        .WithOne("FacturasCompra")
                        .HasForeignKey("login4.Models.EF.FacturasCompra", "Idcdbo")
                        .HasConstraintName("FK_FacturasCompra_FacturasCompra_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_FacturasCompra_IVAGrupos");

                    b.HasOne("login4.Models.EF.ProveedoresDireccione", "PersonaDireccionFactura")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_FacturasCompra_ProveedoresDirecciones");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompra_Proveedores");

                    b.HasOne("login4.Models.EF.PortesTipo", "PortesTipo")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("PortesTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompra_PortesTipos");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_FacturasCompra_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("FacturasCompras")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompra_Series");

                    b.Navigation("CentroCoste");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("FormaPago");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("PortesTipo");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.FacturasCompra", "Cabecera")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraDetalle_FacturasCompra");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_FacturasCompraDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_FacturasCompraDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.FacturasCompraEstado", "Estado")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraDetalle_FacturasCompraEstados");

                    b.HasOne("login4.Models.EF.FacturasCompraDetalleCdbo", "IdcdboNavigation")
                        .WithOne("FacturasCompraDetalle")
                        .HasForeignKey("login4.Models.EF.FacturasCompraDetalle", "Idcdbo")
                        .HasConstraintName("FK_FacturasCompraDetalle_FacturasCompraDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_FacturasCompraDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_FacturasCompraDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_FacturasCompraDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_FacturasCompraDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("FacturasCompraDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("FacturasCompraDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("FacturasCompraDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("FacturasCompraDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("FacturasCompraDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraPie", b =>
                {
                    b.HasOne("login4.Models.EF.FacturasCompra", "Cabecera")
                        .WithMany("FacturasCompraPies")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraPie_FacturasCompra");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("FacturasCompraPies")
                        .HasForeignKey("IvaclaseId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraPie_IvaClases");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("FacturasCompraPies")
                        .HasForeignKey("IvagrupoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasCompraPie_IVAGrupos");

                    b.HasOne("login4.Models.EF.IvaTipo", "Ivatipo")
                        .WithMany("FacturasCompraPies")
                        .HasForeignKey("IvatipoId")
                        .HasConstraintName("FK_FacturasCompraPie_IvaTipos");

                    b.Navigation("Cabecera");

                    b.Navigation("Ivaclase");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Ivatipo");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.FacturasVentum", "Cabecera")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVentaDetalle_FacturasVenta");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_FacturasVentaDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_FacturasVentaDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.FacturasVentaEstado", "Estado")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVentaDetalle_FacturasVentaEstados");

                    b.HasOne("login4.Models.EF.FacturasVentaDetalleCdbo", "IdcdboNavigation")
                        .WithOne("FacturasVentaDetalle")
                        .HasForeignKey("login4.Models.EF.FacturasVentaDetalle", "Idcdbo")
                        .HasConstraintName("FK_FacturasVentaDetalle_FacturasVentaDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_FacturasVentaDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_FacturasVentaDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_FacturasVentaDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.FacturasVentaDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_FacturasVentaDetalle_FacturasVentaDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_FacturasVentaDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVentaDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_FacturasVentaDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVentaDetalle_Productos");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_FacturasVentaDetalle_Proveedores");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("FacturasVentaDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVentaDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("FacturasVentaDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("FacturasVentaDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("FacturasVentaDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("FacturasVentaDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentum", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_FacturasVenta_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_FacturasVenta_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_FacturasVenta_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_FacturasVenta_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_FacturasVenta_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_FacturasVenta_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_FacturasVenta_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.FacturasVentaEstado", "Estado")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVenta_FacturasVentaEstados");

                    b.HasOne("login4.Models.EF.FacturasVentum", "FacturaRectificada")
                        .WithMany("InverseFacturaRectificada")
                        .HasForeignKey("FacturaRectificadaId")
                        .HasConstraintName("FK_FacturasVenta_FacturasVenta");

                    b.HasOne("login4.Models.EF.FeFormato", "FeFormato")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("FeFormatoId")
                        .HasConstraintName("FK_FacturasVenta_FE_Formatos");

                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_FacturasVenta_FormasPago");

                    b.HasOne("login4.Models.EF.FacturasVentaCdbo", "IdcdboNavigation")
                        .WithOne("FacturasVentum")
                        .HasForeignKey("login4.Models.EF.FacturasVentum", "Idcdbo")
                        .HasConstraintName("FK_FacturasVenta_FacturasVenta_CDBO");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_FacturasVenta_MediosPago");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVenta_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_FacturasVenta_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_FacturasVenta_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("FacturasVenta")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_FacturasVenta_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("FacturaRectificada");

                    b.Navigation("FeFormato");

                    b.Navigation("FormaPago");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.Familia", b =>
                {
                    b.HasOne("login4.Models.EF.CatalogosAtributo", "CatalogoAtributo")
                        .WithMany("Familia")
                        .HasForeignKey("CatalogoAtributoId")
                        .HasConstraintName("FK_Familias_CatalogosAtributos");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("Familia")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_Familias_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Familia", "FamiliaNavigation")
                        .WithMany("InverseFamiliaNavigation")
                        .HasForeignKey("FamiliaId")
                        .HasConstraintName("FK_Familias_Familias");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("Familia")
                        .HasForeignKey("ProductoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Familias_ProductosTipos");

                    b.Navigation("CatalogoAtributo");

                    b.Navigation("CentroCoste");

                    b.Navigation("FamiliaNavigation");

                    b.Navigation("ProductoTipo");
                });

            modelBuilder.Entity("login4.Models.EF.FamiliasDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("FamiliasDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_Familias_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.HasOne("login4.Models.EF.Familia", "Familia")
                        .WithMany("FamiliasDatosDinamicos")
                        .HasForeignKey("FamiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Familias_DatosDinamicos_Familias");

                    b.Navigation("DatoDinamicoGsEntidadDef");

                    b.Navigation("Familia");
                });

            modelBuilder.Entity("login4.Models.EF.Fase", b =>
                {
                    b.HasOne("login4.Models.EF.Fase", "FaseNavigation")
                        .WithMany("InverseFaseNavigation")
                        .HasForeignKey("FaseId")
                        .HasConstraintName("FK_Fases_Fases");

                    b.HasOne("login4.Models.EF.Operacione", "Operacion")
                        .WithMany("Fases")
                        .HasForeignKey("OperacionId")
                        .IsRequired()
                        .HasConstraintName("FK_Fases_Operaciones");

                    b.HasOne("login4.Models.EF.RutasProduccion", "Ruta")
                        .WithMany("Fases")
                        .HasForeignKey("RutaId")
                        .IsRequired()
                        .HasConstraintName("FK_Fases_RutasProduccion");

                    b.Navigation("FaseNavigation");

                    b.Navigation("Operacion");

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("login4.Models.EF.FasesCentro", b =>
                {
                    b.HasOne("login4.Models.EF.CentrosTrabajo", "Centro")
                        .WithMany("FasesCentros")
                        .HasForeignKey("CentroId")
                        .IsRequired()
                        .HasConstraintName("FK_FasesCentros_CentrosTrabajo");

                    b.HasOne("login4.Models.EF.Fase", "Fase")
                        .WithMany("FasesCentros")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FasesCentros_Fases");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("FasesCentros")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_FasesCentros_Productos");

                    b.Navigation("Centro");

                    b.Navigation("Fase");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.Fichaje", b =>
                {
                    b.HasOne("login4.Models.EF.Fichaje", "Cabecera")
                        .WithMany("InverseCabecera")
                        .HasForeignKey("CabeceraId")
                        .HasConstraintName("FK_Fichajes_Fichajes");

                    b.HasOne("login4.Models.EF.FichajesEstado", "Estado")
                        .WithMany("Fichajes")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_FichajesEstados");

                    b.HasOne("login4.Models.EF.Empleado", "Persona")
                        .WithMany("FichajesNavigation")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_Empleados");

                    b.HasOne("login4.Models.EF.Turno", "Turno")
                        .WithMany("Fichajes")
                        .HasForeignKey("TurnoId")
                        .HasConstraintName("FK_Fichajes_Turnos");

                    b.Navigation("Cabecera");

                    b.Navigation("Estado");

                    b.Navigation("Persona");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Fichaje", "Cabecera")
                        .WithMany("FichajesDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FichajesDetalle_Fichajes");

                    b.HasOne("login4.Models.EF.FichajesDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_FichajesDetalle_FichajesDetalle");

                    b.HasOne("login4.Models.EF.FichajesTipo", "Tipo")
                        .WithMany("FichajesDetalles")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_FichajesDetalle_FichajesTipos");

                    b.Navigation("Cabecera");

                    b.Navigation("Linea");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesOrdenesOperacionesListum", b =>
                {
                    b.HasOne("login4.Models.EF.Operacione", "Operacion")
                        .WithMany("FichajesOrdenesOperacionesLista")
                        .HasForeignKey("OperacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_Ordenes_Operaciones_Lista_Operaciones");

                    b.Navigation("Operacion");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesParte", b =>
                {
                    b.HasOne("login4.Models.EF.FichajesParte", "Cabecera")
                        .WithMany("InverseCabecera")
                        .HasForeignKey("CabeceraId")
                        .HasConstraintName("FK_Fichajes_Partes_Fichajes_Partes");

                    b.HasOne("login4.Models.EF.FichajesPartesEstado", "Estado")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_Partes_Fichajes_PartesEstados");

                    b.HasOne("login4.Models.EF.FichajesDetalle", "FichajeDetalle")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("FichajeDetalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_Partes_FichajesDetalle");

                    b.HasOne("login4.Models.EF.Maquina", "Maquina")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("MaquinaId")
                        .HasConstraintName("FK_Fichajes_Partes_Maquinas");

                    b.HasOne("login4.Models.EF.OrdenesFabricacion", "Of")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("OfId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Fichajes_Partes_OrdenesFabricacion");

                    b.HasOne("login4.Models.EF.Operacione", "Operacion")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("OperacionId")
                        .HasConstraintName("FK_Fichajes_Partes_Operaciones");

                    b.HasOne("login4.Models.EF.OrdenesSeriada", "Os")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("OsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Fichajes_Partes_OrdenesSeriadas");

                    b.HasOne("login4.Models.EF.Parte", "Parte")
                        .WithMany("FichajesPartes")
                        .HasForeignKey("ParteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Fichajes_Partes_Partes");

                    b.Navigation("Cabecera");

                    b.Navigation("Estado");

                    b.Navigation("FichajeDetalle");

                    b.Navigation("Maquina");

                    b.Navigation("Of");

                    b.Navigation("Operacion");

                    b.Navigation("Os");

                    b.Navigation("Parte");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesSteep", b =>
                {
                    b.HasOne("login4.Models.EF.FichajesSteep", "NextSteep")
                        .WithOne("InverseNextSteep")
                        .HasForeignKey("login4.Models.EF.FichajesSteep", "NextSteepId")
                        .HasConstraintName("FK_Fichajes_Steeps_Fichajes_Steeps");

                    b.Navigation("NextSteep");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesTareasStandBy", b =>
                {
                    b.HasOne("login4.Models.EF.FichajesParte", "FichajeParte")
                        .WithOne("FichajesTareasStandBy")
                        .HasForeignKey("login4.Models.EF.FichajesTareasStandBy", "FichajeParteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_Tareas_StandBy_Fichajes_Partes");

                    b.HasOne("login4.Models.EF.Empleado", "Persona")
                        .WithMany("FichajesTareasStandBies")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_Fichajes_Tareas_StandBy_Empleados");

                    b.Navigation("FichajeParte");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.FormasPagoApi", b =>
                {
                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("FormasPagoApis")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK__FormasPag__Forma__1B0C352A");

                    b.Navigation("FormaPago");
                });

            modelBuilder.Entity("login4.Models.EF.Formulario", b =>
                {
                    b.HasOne("login4.Models.EF.FormulariosCategoria", "Categoria")
                        .WithMany("Formularios")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_Formularios_FormulariosCategorias");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("login4.Models.EF.FormulariosCategoria", b =>
                {
                    b.HasOne("login4.Models.EF.FormulariosCategoria", "Categoria")
                        .WithMany("InverseCategoria")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_FormulariosCategorias_FormulariosCategorias");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("login4.Models.EF.GastosFacturacion", b =>
                {
                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("GastosFacturacions")
                        .HasForeignKey("IvaclaseId")
                        .IsRequired()
                        .HasConstraintName("FK_GastosFacturacion_IvaClases");

                    b.Navigation("Ivaclase");
                });

            modelBuilder.Entity("login4.Models.EF.GdDocumento", b =>
                {
                    b.HasOne("login4.Models.EF.GdDocumento", "Documento")
                        .WithMany("InverseDocumento")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_GD_Documentos_GD_Documentos");

                    b.HasOne("login4.Models.EF.GdFormatosArchivo", "Formato")
                        .WithMany("GdDocumentos")
                        .HasForeignKey("FormatoId")
                        .IsRequired()
                        .HasConstraintName("FK_GD_Documentos_GD_TipoArchivos");

                    b.HasOne("login4.Models.EF.GdTipo", "Tipo")
                        .WithMany("GdDocumentos")
                        .HasForeignKey("TipoId")
                        .HasConstraintName("FK_GD_Documentos_GD_Tipos");

                    b.Navigation("Documento");

                    b.Navigation("Formato");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.GdDocumentosEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.GdDocumento", "Documento")
                        .WithMany("GdDocumentosEntidades")
                        .HasForeignKey("DocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_GD_DocumentosEntidades_GD_Documentos");

                    b.HasOne("login4.Models.EF.GdEntidade", "Entidad")
                        .WithMany("GdDocumentosEntidades")
                        .HasForeignKey("EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_GD_DocumentosEntidades_GD_Entidades");

                    b.Navigation("Documento");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.GdEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("GdEntidades")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_GD_Entidades_Formularios");

                    b.HasOne("login4.Models.EF.GsEntidade", "IdentidadNavigation")
                        .WithOne("GdEntidade")
                        .HasForeignKey("login4.Models.EF.GdEntidade", "Identidad")
                        .IsRequired()
                        .HasConstraintName("FK_GD_Entidades_GS_Entidades");

                    b.Navigation("Formulario");

                    b.Navigation("IdentidadNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.GdFormatosArchivo", b =>
                {
                    b.HasOne("login4.Models.EF.GdAplicacione", "Aplicacion")
                        .WithMany("GdFormatosArchivos")
                        .HasForeignKey("AplicacionId")
                        .HasConstraintName("FK_GD_TipoArchivos_GD_Aplicaciones");

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("login4.Models.EF.GsEntidade", b =>
                {
                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("GsEntidades")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_Entidades_Formularios");

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("login4.Models.EF.GsGridColumn", b =>
                {
                    b.HasOne("login4.Models.EF.GsGridDefinition", "GridDefinition")
                        .WithMany("GsGridColumns")
                        .HasForeignKey("GridDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GS_GridColumns_GS_GridDefinitions");

                    b.Navigation("GridDefinition");
                });

            modelBuilder.Entity("login4.Models.EF.GsGridDefinition", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithMany("GsGridDefinitions")
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GS_GridDefinitions_GS_Entidades");

                    b.HasOne("login4.Models.EF.GsGridDefinition", "GridDefinition")
                        .WithMany("InverseGridDefinition")
                        .HasForeignKey("GridDefinitionId")
                        .HasConstraintName("FK_GS_GridDefinitions_GS_GridDefinitions");

                    b.Navigation("Entidad");

                    b.Navigation("GridDefinition");
                });

            modelBuilder.Entity("login4.Models.EF.GsGridsView", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithMany("GsGridsViews")
                        .HasForeignKey("EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_GridsViews_GS_Entidades");

                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("GsGridsViews")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_GridsViews_Formularios");

                    b.Navigation("Entidad");

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("login4.Models.EF.GsRecordsKey", b =>
                {
                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithMany("GsRecordsKeys")
                        .HasForeignKey("EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_RecordsKeys_GS_Entidades");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrComboList", b =>
                {
                    b.HasOne("login4.Models.EF.GsUsrType", "ItemsUsrType")
                        .WithMany("GsUsrComboListItemsUsrTypes")
                        .HasForeignKey("ItemsUsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_UsrComboListsItem_GS_UsrTypes");

                    b.HasOne("login4.Models.EF.GsUsrType", "UsrType")
                        .WithMany("GsUsrComboListUsrTypes")
                        .HasForeignKey("UsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_UsrComboLists_GS_UsrTypes");

                    b.Navigation("ItemsUsrType");

                    b.Navigation("UsrType");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrComboListsItem", b =>
                {
                    b.HasOne("login4.Models.EF.GsUsrComboList", "ComboList")
                        .WithMany("GsUsrComboListsItems")
                        .HasForeignKey("ComboListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GS_UsrComboListsItems_GS_UsrComboLists");

                    b.Navigation("ComboList");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrGridsViewsCustomization", b =>
                {
                    b.HasOne("login4.Models.EF.GsGridsView", "GridView")
                        .WithMany("GsUsrGridsViewsCustomizations")
                        .HasForeignKey("GridViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GS_UsrGridsViewsCustomizations_GS_GridsViews");

                    b.HasOne("login4.Models.EF.Empleado", "Persona")
                        .WithMany("GsUsrGridsViewsCustomizations")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_GS_UsrGridsViewsCustomizations_Empleados");

                    b.Navigation("GridView");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrType", b =>
                {
                    b.HasOne("login4.Models.EF.GsEditMasksType", "EditMaskType")
                        .WithMany("GsUsrTypes")
                        .HasForeignKey("EditMaskTypeId")
                        .HasConstraintName("FK_GS_UsrTypes_GS_EditMasksTypes");

                    b.HasOne("login4.Models.EF.GsInternalType", "InternalType")
                        .WithMany("GsUsrTypes")
                        .HasForeignKey("InternalTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GS_UsrTypes_GS_InternalTypes");

                    b.Navigation("EditMaskType");

                    b.Navigation("InternalType");
                });

            modelBuilder.Entity("login4.Models.EF.IsoActividade", b =>
                {
                    b.HasOne("login4.Models.EF.IsoActividade", "Actividad")
                        .WithMany("InverseActividad")
                        .HasForeignKey("ActividadId")
                        .HasConstraintName("FK_ISO_Actividades_ISO_Actividades");

                    b.HasOne("login4.Models.EF.IsoProceso", "Proceso")
                        .WithMany("IsoActividades")
                        .HasForeignKey("ProcesoId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Actividades_ISO_Procesos");

                    b.Navigation("Actividad");

                    b.Navigation("Proceso");
                });

            modelBuilder.Entity("login4.Models.EF.IsoActividadesPersonal", b =>
                {
                    b.HasOne("login4.Models.EF.IsoActividade", "Actividad")
                        .WithMany("IsoActividadesPersonals")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_ActividadesPersonal_ISO_Actividades");

                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("IsoActividadesPersonals")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_ISO_ActividadesPersonal_Departamentos");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoActividadesPersonals")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_ActividadesPersonal_Empleados");

                    b.HasOne("login4.Models.EF.Puesto", "Puesto")
                        .WithMany("IsoActividadesPersonals")
                        .HasForeignKey("PuestoId")
                        .HasConstraintName("FK_ISO_ActividadesPersonal_Puestos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("IsoActividadesPersonals")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_ISO_ActividadesPersonal_Secciones");

                    b.Navigation("Actividad");

                    b.Navigation("Departamento");

                    b.Navigation("Empleado");

                    b.Navigation("Puesto");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("login4.Models.EF.IsoComunicacione", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestionDestinatario", "TipoDestDemanda")
                        .WithMany("IsoComunicacioneTipoDestDemanda")
                        .HasForeignKey("TipoDestDemandaId")
                        .HasConstraintName("FK_ISO_Comunicaciones_DocumentosGestionDestinatarios");

                    b.HasOne("login4.Models.EF.DocumentosGestionDestinatario", "TipoDestRespuesta")
                        .WithMany("IsoComunicacioneTipoDestRespuesta")
                        .HasForeignKey("TipoDestRespuestaId")
                        .HasConstraintName("FK_ISO_Comunicaciones_DocumentosGestionDestinatarios1");

                    b.Navigation("TipoDestDemanda");

                    b.Navigation("TipoDestRespuesta");
                });

            modelBuilder.Entity("login4.Models.EF.IsoCriteriosEficacium", b =>
                {
                    b.HasOne("login4.Models.EF.IsoFrecuencia", "Frecuencia")
                        .WithMany("IsoCriteriosEficacia")
                        .HasForeignKey("FrecuenciaId")
                        .HasConstraintName("FK_ISO_CriteriosEficacia_ISO_Frecuencias");

                    b.HasOne("login4.Models.EF.IsoPlanesFormacion", "PlanFormacion")
                        .WithMany("IsoCriteriosEficacia")
                        .HasForeignKey("PlanFormacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_CriteriosEficacia_ISO_PlanesFormacion");

                    b.Navigation("Frecuencia");

                    b.Navigation("PlanFormacion");
                });

            modelBuilder.Entity("login4.Models.EF.IsoCurso", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("IsoCursos")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_ISO_Cursos_Departamentos");

                    b.HasOne("login4.Models.EF.IsoPlanesFormacion", "PlanFormacion")
                        .WithMany("IsoCursos")
                        .HasForeignKey("PlanFormacionId")
                        .HasConstraintName("FK_ISO_Cursos_ISO_PlanesFormacion");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("IsoCursos")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_ISO_Cursos_Secciones");

                    b.Navigation("Departamento");

                    b.Navigation("PlanFormacion");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("login4.Models.EF.IsoDocumento", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoDocumentos")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_Documentos_Empleados");

                    b.HasOne("login4.Models.EF.IsoTiposRegistro", "TipoRegistro")
                        .WithMany("IsoDocumentos")
                        .HasForeignKey("TipoRegistroId")
                        .HasConstraintName("FK_ISO_Documentos_ISO_TiposRegistros");

                    b.Navigation("Empleado");

                    b.Navigation("TipoRegistro");
                });

            modelBuilder.Entity("login4.Models.EF.IsoEncuesta", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Encuestador")
                        .WithMany("IsoEncuesta")
                        .HasForeignKey("EncuestadorId")
                        .HasConstraintName("FK_ISO_Encuestas_Empleados");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("IsoEncuesta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Encuestas_Clientes");

                    b.Navigation("Encuestador");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.IsoEncuestasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.IsoEncuesta", "Encuesta")
                        .WithMany("IsoEncuestasDetalles")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_EncuestasDetalle_ISO_Encuestas");

                    b.HasOne("login4.Models.EF.IsoPregunta", "Pregunta")
                        .WithMany("IsoEncuestasDetalles")
                        .HasForeignKey("PreguntaId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_EncuestasDetalle_ISO_Preguntas");

                    b.HasOne("login4.Models.EF.IsoRespuesta", "Respuesta")
                        .WithMany("IsoEncuestasDetalles")
                        .HasForeignKey("RespuestaId")
                        .HasConstraintName("FK_ISO_EncuestasDetalle_ISO_Respuestas");

                    b.Navigation("Encuesta");

                    b.Navigation("Pregunta");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidencia", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("IsoIncidencia")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_ISO_Incidencias_Departamentos");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoIncidencia")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_Incidencias_Empleados");

                    b.HasOne("login4.Models.EF.IsoIncidenciasEstado", "Estado")
                        .WithMany("IsoIncidencia")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Incidencias_ISO_IncidenciasEstados");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("IsoIncidencia")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_ISO_Incidencias_Secciones");

                    b.HasOne("login4.Models.EF.DocumentosGestionDestinatario", "TipoDestinatario")
                        .WithMany("IsoIncidencia")
                        .HasForeignKey("TipoDestinatarioId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Incidencias_DocumentosGestionDestinatarios");

                    b.HasOne("login4.Models.EF.IsoTiposIncidencia", "TipoIncidencia")
                        .WithMany("IsoIncidencia")
                        .HasForeignKey("TipoIncidenciaId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Incidencias_ISO_TiposIncidencias");

                    b.Navigation("Departamento");

                    b.Navigation("Empleado");

                    b.Navigation("Estado");

                    b.Navigation("Seccion");

                    b.Navigation("TipoDestinatario");

                    b.Navigation("TipoIncidencia");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidenciasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.IsoIncidencia", "Cabecera")
                        .WithMany("IsoIncidenciasDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_IncidenciasDetalle_ISO_Incidencias");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoIncidenciasDetalles")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_IncidenciasDetalle_Empleados");

                    b.HasOne("login4.Models.EF.IsoTiposAccione", "TipoAccion")
                        .WithMany("IsoIncidenciasDetalles")
                        .HasForeignKey("TipoAccionId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_IncidenciasDetalle_ISO_TiposAcciones");

                    b.Navigation("Cabecera");

                    b.Navigation("Empleado");

                    b.Navigation("TipoAccion");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIndicadore", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("IsoIndicadores")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_ISO_Indicadores_Departamentos");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoIndicadores")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_Indicadores_Empleados");

                    b.HasOne("login4.Models.EF.IsoFrecuencia", "Frecuencia")
                        .WithMany("IsoIndicadores")
                        .HasForeignKey("FrecuenciaId")
                        .HasConstraintName("FK_ISO_Indicadores_ISO_Frecuencias");

                    b.HasOne("login4.Models.EF.IsoProceso", "Proceso")
                        .WithMany("IsoIndicadores")
                        .HasForeignKey("ProcesoId")
                        .HasConstraintName("FK_ISO_Indicadores_ISO_Procesos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("IsoIndicadores")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_ISO_Indicadores_Secciones");

                    b.HasOne("login4.Models.EF.IsoTendencia", "Tendencia")
                        .WithMany("IsoIndicadores")
                        .HasForeignKey("TendenciaId")
                        .HasConstraintName("FK_ISO_Indicadores_ISO_Tendencias");

                    b.Navigation("Departamento");

                    b.Navigation("Empleado");

                    b.Navigation("Frecuencia");

                    b.Navigation("Proceso");

                    b.Navigation("Seccion");

                    b.Navigation("Tendencia");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIndicadoresDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.IsoIndicadore", "Indicador")
                        .WithMany("IsoIndicadoresDetalles")
                        .HasForeignKey("IndicadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_IndicadoresDetalle_ISO_Indicadores");

                    b.Navigation("Indicador");
                });

            modelBuilder.Entity("login4.Models.EF.IsoMantenimiento", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoMantenimientos")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_Mantenimientos_Empleados");

                    b.HasOne("login4.Models.EF.IsoFrecuencia", "Frecuencia")
                        .WithMany("IsoMantenimientos")
                        .HasForeignKey("FrecuenciaId")
                        .HasConstraintName("FK_ISO_Mantenimientos_ISO_Frecuencias");

                    b.HasOne("login4.Models.EF.Maquina", "Maquina")
                        .WithMany("IsoMantenimientos")
                        .HasForeignKey("MaquinaId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Mantenimientos_Maquinas");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("IsoMantenimientos")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_ISO_Mantenimientos_Proveedores");

                    b.HasOne("login4.Models.EF.IsoTiposMantenimiento", "Tipo")
                        .WithMany("IsoMantenimientos")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Mantenimientos_ISO_TiposMantenimientos");

                    b.Navigation("Empleado");

                    b.Navigation("Frecuencia");

                    b.Navigation("Maquina");

                    b.Navigation("Proveedor");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.IsoMantenimientosDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.IsoMantenimiento", "Cabecera")
                        .WithMany("IsoMantenimientosDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_MantenimientosDetalle_ISO_Mantenimientos");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("IsoMantenimientosDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_MantenimientosDetalle_Productos");

                    b.Navigation("Cabecera");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.IsoPedidosCompra", b =>
                {
                    b.HasOne("login4.Models.EF.PedidosCompra", "Cabecera")
                        .WithOne("IsoPedidosCompra")
                        .HasForeignKey("login4.Models.EF.IsoPedidosCompra", "CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_PedidosCompra_PedidosCompra");

                    b.HasOne("login4.Models.EF.IsoCalificacionesCompra", "Calificacion")
                        .WithMany("IsoPedidosCompras")
                        .HasForeignKey("CalificacionId")
                        .HasConstraintName("FK_ISO_PedidosCompra_ISO_CalificacionesCompra");

                    b.Navigation("Cabecera");

                    b.Navigation("Calificacion");
                });

            modelBuilder.Entity("login4.Models.EF.IsoPedidosCompraDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.IsoCalificacionesCompra", "Calificacion")
                        .WithMany("IsoPedidosCompraDetalles")
                        .HasForeignKey("CalificacionId")
                        .HasConstraintName("FK_ISO_PedidosCompraDetalle_ISO_CalificacionesCompra");

                    b.HasOne("login4.Models.EF.PedidosCompraDetalle", "Linea")
                        .WithOne("IsoPedidosCompraDetalle")
                        .HasForeignKey("login4.Models.EF.IsoPedidosCompraDetalle", "LineaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_PedidosCompraDetalle_PedidosCompraDetalle");

                    b.Navigation("Calificacion");

                    b.Navigation("Linea");
                });

            modelBuilder.Entity("login4.Models.EF.IsoProducto", b =>
                {
                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithOne("IsoProducto")
                        .HasForeignKey("login4.Models.EF.IsoProducto", "ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Productos_Productos");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.IsoProveedore", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoProveedores")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_Proveedores_Empleados");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithOne("IsoProveedore")
                        .HasForeignKey("login4.Models.EF.IsoProveedore", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Proveedores_Proveedores");

                    b.Navigation("Empleado");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRegistro", b =>
                {
                    b.HasOne("login4.Models.EF.IsoDocumento", "Documento")
                        .WithMany("IsoRegistros")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_ISO_Registros_ISO_Documentos");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("IsoRegistros")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_Registros_Empleados");

                    b.HasOne("login4.Models.EF.IsoTiposRegistro", "TipoRegistro")
                        .WithMany("IsoRegistros")
                        .HasForeignKey("TipoRegistroId")
                        .HasConstraintName("FK_ISO_Registros_ISO_TiposRegistros");

                    b.Navigation("Documento");

                    b.Navigation("Empleado");

                    b.Navigation("TipoRegistro");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRequisito", b =>
                {
                    b.HasOne("login4.Models.EF.IsoDocumento", "Documento")
                        .WithMany("IsoRequisitos")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_ISO_Requisitos_ISO_Documentos");

                    b.HasOne("login4.Models.EF.ModulosGestion", "ModuloGestion")
                        .WithMany("IsoRequisitos")
                        .HasForeignKey("ModuloGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Requisitos_ModulosGestion");

                    b.HasOne("login4.Models.EF.IsoTiposNorma", "TipoNorma")
                        .WithMany("IsoRequisitos")
                        .HasForeignKey("TipoNormaId")
                        .HasConstraintName("FK_ISO_Requisitos_ISO_TiposNormas");

                    b.Navigation("Documento");

                    b.Navigation("ModuloGestion");

                    b.Navigation("TipoNorma");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRespuesta", b =>
                {
                    b.HasOne("login4.Models.EF.IsoPregunta", "Pregunta")
                        .WithMany("IsoRespuesta")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_Respuestas_ISO_Preguntas");

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRevisione", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("IsoRevisiones")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_ISO_Revisiones_Departamentos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("IsoRevisiones")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_ISO_Revisiones_Secciones");

                    b.Navigation("Departamento");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRevisionesAcuerdo", b =>
                {
                    b.HasOne("login4.Models.EF.IsoRevisione", "Revision")
                        .WithMany("IsoRevisionesAcuerdos")
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ISO_RevisionesAcuerdos_ISO_Revisiones");

                    b.Navigation("Revision");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposIncidencia", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestionDestinatario", "TipoDestinatario")
                        .WithMany("IsoTiposIncidencia")
                        .HasForeignKey("TipoDestinatarioId")
                        .HasConstraintName("FK_ISO_TiposIncidencias_DocumentosGestionDestinatarios");

                    b.Navigation("TipoDestinatario");
                });

            modelBuilder.Entity("login4.Models.EF.IsoVencimiento", b =>
                {
                    b.HasOne("login4.Models.EF.IsoFrecuencia", "Frecuencia")
                        .WithMany("IsoVencimientos")
                        .HasForeignKey("FrecuenciaId")
                        .HasConstraintName("FK_ISO_Vencimientos_ISO_Frecuencias");

                    b.HasOne("login4.Models.EF.DocumentosGestionDestinatario", "TipoDestinatario")
                        .WithMany("IsoVencimientos")
                        .HasForeignKey("TipoDestinatarioId")
                        .HasConstraintName("FK_ISO_Vencimientos_DocumentosGestionDestinatarios");

                    b.HasOne("login4.Models.EF.IsoTiposVencimiento", "TipoVencimiento")
                        .WithMany("IsoVencimientos")
                        .HasForeignKey("TipoVencimientoId")
                        .HasConstraintName("FK_ISO_Vencimientos_ISO_TiposVencimientos");

                    b.Navigation("Frecuencia");

                    b.Navigation("TipoDestinatario");

                    b.Navigation("TipoVencimiento");
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroRepercutido", b =>
                {
                    b.HasOne("login4.Models.EF.Pgc", "CtaContaNavigation")
                        .WithMany("IvaLibroRepercutidos")
                        .HasForeignKey("CtaConta")
                        .HasConstraintName("FK_IVA_LibroRepercutido_PGC");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("IvaLibroRepercutidos")
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_IVA_LibroRepercutido_Ejercicios");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("IvaLibroRepercutidos")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_IVA_LibroRepercutido_IVAGrupos");

                    b.HasOne("login4.Models.EF.IvaLibroTipoClave", "TipoClave")
                        .WithMany("IvaLibroRepercutidos")
                        .HasForeignKey("TipoClaveId")
                        .HasConstraintName("FK_IVA_LibroRepercutido_IVA_Libro_TipoClave");

                    b.Navigation("CtaContaNavigation");

                    b.Navigation("Ejercicio");

                    b.Navigation("Ivagrupo");

                    b.Navigation("TipoClave");
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroSoportado", b =>
                {
                    b.HasOne("login4.Models.EF.Pgc", "CtaContaNavigation")
                        .WithMany("IvaLibroSoportados")
                        .HasForeignKey("CtaConta")
                        .HasConstraintName("FK_IVA_LibroSoportado_PGC");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("IvaLibroSoportados")
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_IVA_LibroSoportado_Ejercicios");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("IvaLibroSoportados")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_IVA_LibroSoportado_IVAGrupos");

                    b.HasOne("login4.Models.EF.IvaLibroTipoClave", "TipoClave")
                        .WithMany("IvaLibroSoportados")
                        .HasForeignKey("TipoClaveId")
                        .HasConstraintName("FK_IVA_LibroSoportado_IVA_Libro_TipoClave");

                    b.Navigation("CtaContaNavigation");

                    b.Navigation("Ejercicio");

                    b.Navigation("Ivagrupo");

                    b.Navigation("TipoClave");
                });

            modelBuilder.Entity("login4.Models.EF.IvaTipo", b =>
                {
                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("IvaTipos")
                        .HasForeignKey("IvaClaseId")
                        .IsRequired()
                        .HasConstraintName("FK_IvaTipos_IvaClases");

                    b.Navigation("IvaClase");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletine", b =>
                {
                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("LabBoletines")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_LAB_Boletines_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("LabBoletines")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_LAB_Boletines_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("LabBoletineEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_LAB_Boletines_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("LabBoletines")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_LAB_Boletines_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.LabBoletinesEstado", "Estado")
                        .WithMany("LabBoletines")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_Boletines_LAB_BoletinesEstados");

                    b.HasOne("login4.Models.EF.LabBoletinesCdbo", "IdcdboNavigation")
                        .WithOne("LabBoletine")
                        .HasForeignKey("login4.Models.EF.LabBoletine", "Idcdbo")
                        .HasConstraintName("FK_LAB_Boletines_LAB_Boletines_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("LabBoletines")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_LAB_Boletines_IVAGrupos");

                    b.HasOne("login4.Models.EF.LabPrioridade", "Prioridad")
                        .WithMany("LabBoletines")
                        .HasForeignKey("PrioridadId")
                        .HasConstraintName("FK_LAB_Boletines_LAB_Prioridades");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("LabBoletines")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_LAB_Boletines_Proyectos");

                    b.HasOne("login4.Models.EF.Empleado", "ResponsableRecepcion")
                        .WithMany("LabBoletineResponsableRecepcions")
                        .HasForeignKey("ResponsableRecepcionId")
                        .HasConstraintName("FK_LAB_Boletines_Empleados1");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("LabBoletines")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_Boletines_Series");

                    b.HasOne("login4.Models.EF.Tarifa", "Tarifa")
                        .WithMany("LabBoletines")
                        .HasForeignKey("TarifaId")
                        .HasConstraintName("FK_LAB_Boletines_Tarifas");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Prioridad");

                    b.Navigation("Proyecto");

                    b.Navigation("ResponsableRecepcion");

                    b.Navigation("Serie");

                    b.Navigation("Tarifa");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.LabAnalisisTipo", "AnalisisTipo")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("AnalisisTipoId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_AnalisisTipos");

                    b.HasOne("login4.Models.EF.LabBoletine", "Cabecera")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_Boletines");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.LabBoletinesEstado", "Estado")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_BoletinesEstados");

                    b.HasOne("login4.Models.EF.LabBoletinesDetalleCdbo", "IdcdboNavigation")
                        .WithOne("LabBoletinesDetalle")
                        .HasForeignKey("login4.Models.EF.LabBoletinesDetalle", "Idcdbo")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_BoletinesDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("IvaclaseId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.LabBoletinesDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_BoletinesDetalle");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "ProductoCompuesto")
                        .WithMany("LabBoletinesDetalleProductoCompuestos")
                        .HasForeignKey("ProductoCompuestoId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_Productos1");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("LabBoletinesDetalleProductos")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesDetalle_Productos");

                    b.HasOne("login4.Models.EF.Empleado", "ResponsableRecepcion")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("ResponsableRecepcionId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_Empleados");

                    b.HasOne("login4.Models.EF.Tarifa", "Tarifa")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("TarifaId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_Tarifas");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("LabBoletinesDetalles")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_LAB_BoletinesDetalle_UnidadesMedida");

                    b.Navigation("AnalisisTipo");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivaclase");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("ProductoCompuesto");

                    b.Navigation("ResponsableRecepcion");

                    b.Navigation("Tarifa");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalleDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.LabBoletinesDetalle", "Linea")
                        .WithMany("LabBoletinesDetalleDatosDinamicos")
                        .HasForeignKey("LineaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesDetalle_DatosDinamicos_LAB_BoletinesDetalle");

                    b.Navigation("Linea");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesPool", b =>
                {
                    b.HasOne("login4.Models.EF.LabBoletine", "Cabecera")
                        .WithMany("LabBoletinesPools")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesPool_LAB_Boletines");

                    b.HasOne("login4.Models.EF.LabBoletinesEstado", "Estado")
                        .WithMany("LabBoletinesPools")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesPool_LAB_BoletinesEstados");

                    b.Navigation("Cabecera");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesPoolDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.LabBoletine", "Cabecera")
                        .WithMany("LabBoletinesPoolDetalles")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesPoolDetalle_LAB_Boletines");

                    b.HasOne("login4.Models.EF.LabBoletinesDetalle", "Detalle")
                        .WithMany("LabBoletinesPoolDetalles")
                        .HasForeignKey("DetalleId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesPoolDetalle_LAB_BoletinesDetalle");

                    b.HasOne("login4.Models.EF.LabBoletinesPool", "Pool")
                        .WithMany("LabBoletinesPoolDetalles")
                        .HasForeignKey("PoolId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_BoletinesPoolDetalle_LAB_BoletinesPool");

                    b.Navigation("Cabecera");

                    b.Navigation("Detalle");

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("login4.Models.EF.LabDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.GsUsrType", "UsrType")
                        .WithMany("LabDatosDinamicos")
                        .HasForeignKey("UsrTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_DatosDinamicos_GS_UsrTypes");

                    b.Navigation("UsrType");
                });

            modelBuilder.Entity("login4.Models.EF.LabDatosDinamicosLineasDef", b =>
                {
                    b.HasOne("login4.Models.EF.LabDatosDinamico", "DatoDinamico")
                        .WithMany("LabDatosDinamicosLineasDefs")
                        .HasForeignKey("DatoDinamicoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_DatosDinamicos_LineasDef_LAB_DatosDinamicos");

                    b.HasOne("login4.Models.EF.TiposLinea", "LabTipoLinea")
                        .WithMany("LabDatosDinamicosLineasDefs")
                        .HasForeignKey("LabTipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_DatosDinamicos_LineasDef_TiposLinea");

                    b.Navigation("DatoDinamico");

                    b.Navigation("LabTipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.LabMatrix", b =>
                {
                    b.HasOne("login4.Models.EF.LabMatrix", "Matriz")
                        .WithMany("InverseMatriz")
                        .HasForeignKey("MatrizId")
                        .HasConstraintName("FK_LAB_Matrices_LAB_Matrices");

                    b.Navigation("Matriz");
                });

            modelBuilder.Entity("login4.Models.EF.LabNormativasParametro", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosCompuestosCdbo", "IdcdboNavigation")
                        .WithMany("LabNormativasParametros")
                        .HasForeignKey("Idcdbo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LAB_NormativasParametros_ProductosCompuestos_CDBO");

                    b.Navigation("IdcdboNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.LabOa", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("LabOas")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAs_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("LabOaEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_LAB_OAs_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("LabOas")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_LAB_OAs_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.LabOasEstado", "Estado")
                        .WithMany("LabOas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAs_LAB_OAsEstados");

                    b.HasOne("login4.Models.EF.LabOasCdbo", "IdcdboNavigation")
                        .WithOne("LabOa")
                        .HasForeignKey("login4.Models.EF.LabOa", "Idcdbo")
                        .HasConstraintName("FK_LAB_OAs_LAB_OAs_CDBO");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("LabOas")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAs_Clientes");

                    b.HasOne("login4.Models.EF.LabPrioridade", "Prioridad")
                        .WithMany("LabOas")
                        .HasForeignKey("PrioridadId")
                        .HasConstraintName("FK_LAB_OAs_LAB_Prioridades");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("LabOas")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_LAB_OAs_Productos");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("LabOas")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_LAB_OAs_Proyectos");

                    b.HasOne("login4.Models.EF.Empleado", "Responsable")
                        .WithMany("LabOaResponsables")
                        .HasForeignKey("ResponsableId")
                        .HasConstraintName("FK_LAB_OAs_Empleados1");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("LabOas")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_LAB_OAs_Series");

                    b.HasOne("login4.Models.EF.Tarifa", "Tarifa")
                        .WithMany("LabOas")
                        .HasForeignKey("TarifaId")
                        .HasConstraintName("FK_LAB_OAs_Tarifas");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Persona");

                    b.Navigation("Prioridad");

                    b.Navigation("Producto");

                    b.Navigation("Proyecto");

                    b.Navigation("Responsable");

                    b.Navigation("Serie");

                    b.Navigation("Tarifa");
                });

            modelBuilder.Entity("login4.Models.EF.LabOasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.LabOa", "Cabecera")
                        .WithMany("LabOasDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAsDetalle_LAB_OAs");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("LabOasDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_LAB_OAsDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("LabOasDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_LAB_OAsDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.LabOasDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_LAB_OAsDetalle_LAB_OAsDetalle");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("LabOasDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAsDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.LabProcedimientosEnsayo", "ProcedimientoEnsayoNavigation")
                        .WithMany("LabOasDetalles")
                        .HasForeignKey("ProcedimientoEnsayoId")
                        .HasConstraintName("FK_LAB_OAsDetalle_LAB_ProcedimientosEnsayo");

                    b.HasOne("login4.Models.EF.Producto", "ProductoCompuesto")
                        .WithMany("LabOasDetalles")
                        .HasForeignKey("ProductoCompuestoId")
                        .HasConstraintName("FK_LAB_OAsDetalle_Productos");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("IvaTipo");

                    b.Navigation("Linea");

                    b.Navigation("MargenTipo");

                    b.Navigation("ProcedimientoEnsayoNavigation");

                    b.Navigation("ProductoCompuesto");
                });

            modelBuilder.Entity("login4.Models.EF.LabOasLectura", b =>
                {
                    b.HasOne("login4.Models.EF.LabOasLecturasEstado", "Estado")
                        .WithMany("LabOasLecturas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAsLecturas_LAB_OAsLecturasEstados");

                    b.HasOne("login4.Models.EF.LabOasDetalle", "Linea")
                        .WithMany("LabOasLecturas")
                        .HasForeignKey("LineaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LAB_OAsLecturas_LAB_OAsDetalle");

                    b.HasOne("login4.Models.EF.Empleado", "Responsable")
                        .WithMany("LabOasLecturas")
                        .HasForeignKey("ResponsableId")
                        .HasConstraintName("FK_LAB_OAsLecturas_Empleados");

                    b.Navigation("Estado");

                    b.Navigation("Linea");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercial", b =>
                {
                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("ComercialId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercial_Comerciales");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercial_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoDestinatario")
                        .WithMany("LiquidacionesComercialEmpleadoDestinatarios")
                        .HasForeignKey("EmpleadoDestinatarioId")
                        .HasConstraintName("FK_LiquidacionesComercial_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("LiquidacionesComercialEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_LiquidacionesComercial_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_LiquidacionesComercial_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.LiquidacionesComercialEstado", "Estado")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercial_LiquidacionesComercialEstados");

                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_LiquidacionesComercial_FormasPago");

                    b.HasOne("login4.Models.EF.LiquidacionesComercialCdbo", "IdcdboNavigation")
                        .WithOne("LiquidacionesComercial")
                        .HasForeignKey("login4.Models.EF.LiquidacionesComercial", "Idcdbo")
                        .HasConstraintName("FK_LiquidacionesComercial_LiquidacionesComercial_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_LiquidacionesComercial_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_LiquidacionesComercial_MediosPago");

                    b.HasOne("login4.Models.EF.Proveedore", "ProveedorDestinatario")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("ProveedorDestinatarioId")
                        .HasConstraintName("FK_LiquidacionesComercial_Proveedores");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("LiquidacionesComercials")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercial_Series");

                    b.Navigation("Comercial");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoDestinatario");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("FormaPago");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("ProveedorDestinatario");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.LiquidacionesComercial", "Cabecera")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercial");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_Comisiones");

                    b.HasOne("login4.Models.EF.LiquidacionesComercialEstado", "Estado")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercialEstados");

                    b.HasOne("login4.Models.EF.LiquidacionesComercialDetalleCdbo", "IdcdboNavigation")
                        .WithOne("LiquidacionesComercialDetalle")
                        .HasForeignKey("login4.Models.EF.LiquidacionesComercialDetalle", "Idcdbo")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercialDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("IvaclaseId")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.LiquidacionesComercialDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercialDetalle");

                    b.HasOne("login4.Models.EF.ComisionesOperacione", "Operacion")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("OperacionId")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_ComisionesOperaciones");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("LiquidacionesComercialDetalles")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_LiquidacionesComercialDetalle_UnidadesMedida");

                    b.Navigation("Cabecera");

                    b.Navigation("Comision");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivaclase");

                    b.Navigation("Linea");

                    b.Navigation("Operacion");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.Localidade", b =>
                {
                    b.HasOne("login4.Models.EF.Comarca", "Comarca")
                        .WithMany("Localidades")
                        .HasForeignKey("ComarcaId")
                        .HasConstraintName("FK_Localidades_Comarcas");

                    b.HasOne("login4.Models.EF.Provincia", "Provincia")
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Localidades_Provincias");

                    b.Navigation("Comarca");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("login4.Models.EF.Lote", b =>
                {
                    b.HasOne("login4.Models.EF.Cliente", "Cliente")
                        .WithMany("Lotes")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_Lotes_Clientes");

                    b.HasOne("login4.Models.EF.LotesEstado", "Estado")
                        .WithMany("Lotes")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Lotes_LotesEstados");

                    b.HasOne("login4.Models.EF.LotesCdbo", "IdcdboNavigation")
                        .WithMany("Lotes")
                        .HasForeignKey("Idcdbo")
                        .HasConstraintName("FK_Lotes_Lotes_CDBO");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("Lotes")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Lotes_Productos");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("Lotes")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_Lotes_Proveedores");

                    b.Navigation("Cliente");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("login4.Models.EF.LotesTraza", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesSeriadasDetalle", "LineaOsiddestinoNavigation")
                        .WithMany("LotesTrazaLineaOsiddestinoNavigations")
                        .HasForeignKey("LineaOsiddestino")
                        .HasConstraintName("FK_LotesTraza_OrdenesSeriadasDetalle1");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasDetalle", "LineaOsidorigenNavigation")
                        .WithMany("LotesTrazaLineaOsidorigenNavigations")
                        .HasForeignKey("LineaOsidorigen")
                        .HasConstraintName("FK_LotesTraza_OrdenesSeriadasDetalle");

                    b.HasOne("login4.Models.EF.Lote", "LoteIddestinoNavigation")
                        .WithMany("LotesTrazaLoteIddestinoNavigations")
                        .HasForeignKey("LoteIddestino")
                        .IsRequired()
                        .HasConstraintName("FK_LotesTraza_Lotes1");

                    b.HasOne("login4.Models.EF.Lote", "LoteIdorigenNavigation")
                        .WithMany("LotesTrazaLoteIdorigenNavigations")
                        .HasForeignKey("LoteIdorigen")
                        .IsRequired()
                        .HasConstraintName("FK_LotesTraza_Lotes");

                    b.Navigation("LineaOsiddestinoNavigation");

                    b.Navigation("LineaOsidorigenNavigation");

                    b.Navigation("LoteIddestinoNavigation");

                    b.Navigation("LoteIdorigenNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.Maquina", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("Maquinas")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_Maquinas_Departamentos");

                    b.HasOne("login4.Models.EF.MaquinasEstado", "Estado")
                        .WithMany("Maquinas")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("FK_Maquinas_MaquinasEstados");

                    b.HasOne("login4.Models.EF.MaquinasGrupo", "Grupo")
                        .WithMany("Maquinas")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("FK_Maquinas_MaquinasGrupos");

                    b.HasOne("login4.Models.EF.Puesto", "Puesto")
                        .WithMany("Maquinas")
                        .HasForeignKey("PuestoId")
                        .HasConstraintName("FK_Maquinas_Puestos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("Maquinas")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_Maquinas_Secciones");

                    b.Navigation("Departamento");

                    b.Navigation("Estado");

                    b.Navigation("Grupo");

                    b.Navigation("Puesto");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("login4.Models.EF.MediosPago", b =>
                {
                    b.HasOne("login4.Models.EF.MediosPagoCargoCuentum", "CargoCuenta")
                        .WithMany("MediosPagos")
                        .HasForeignKey("CargoCuentaId")
                        .IsRequired()
                        .HasConstraintName("FK_MediosPago_MediosPago_CargoCuenta");

                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "CuentaEmpresa")
                        .WithMany("MediosPagos")
                        .HasForeignKey("CuentaEmpresaId")
                        .HasConstraintName("FK_MediosPago_EmpresasCuentasBancarias");

                    b.Navigation("CargoCuenta");

                    b.Navigation("CuentaEmpresa");
                });

            modelBuilder.Entity("login4.Models.EF.ModulosGestion", b =>
                {
                    b.HasOne("login4.Models.EF.ModulosGestion", "ModuloGestion")
                        .WithMany("InverseModuloGestion")
                        .HasForeignKey("ModuloGestionId")
                        .HasConstraintName("FK_ModulosGestion_ModulosGestion");

                    b.Navigation("ModuloGestion");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacen", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosAlmacenTipo", "DocumentoAlmacenTipo")
                        .WithMany("MovimientosAlmacens")
                        .HasForeignKey("DocumentoAlmacenTipoId")
                        .HasConstraintName("FK_MovimientosAlmacen_DocumentosAlmacenTipos");

                    b.Navigation("DocumentoAlmacenTipo");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_Almacenes");

                    b.HasOne("login4.Models.EF.MovimientosAlmacen", "Cabecera")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_MovimientosAlmacen");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_Lotes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_Productos");

                    b.HasOne("login4.Models.EF.MovimientosAlmacenTipo", "Tipo")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_MovimientosAlmacenTipos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("UbicacionId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("UnidadMedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesProducto", "UnidadesProducto")
                        .WithMany("MovimientosAlmacenDetalles")
                        .HasForeignKey("ProductoId", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenDetalle_UnidadesProducto");

                    b.Navigation("Almacen");

                    b.Navigation("Cabecera");

                    b.Navigation("Lote");

                    b.Navigation("Producto");

                    b.Navigation("Tipo");

                    b.Navigation("Ubicacion");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadesProducto");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenSaldo", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("MovimientosAlmacenSaldos")
                        .HasForeignKey("AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenSaldos_Almacenes");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("MovimientosAlmacenSaldos")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenSaldos_Lotes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("MovimientosAlmacenSaldos")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenSaldos_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("MovimientosAlmacenSaldos")
                        .HasForeignKey("UbicacionId")
                        .IsRequired()
                        .HasConstraintName("FK_MovimientosAlmacenSaldos_AlmacenesUbicaciones");

                    b.Navigation("Almacen");

                    b.Navigation("Lote");

                    b.Navigation("Producto");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("login4.Models.EF.Ope", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("Opes")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_OPEs_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.CentrosTrabajo", "Centro")
                        .WithMany("Opes")
                        .HasForeignKey("CentroId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEs_CentrosTrabajo");

                    b.HasOne("login4.Models.EF.ProveedoresContacto", "Contacto")
                        .WithMany("Opes")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_OPEs_ProveedoresContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Opes")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEs_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Opes")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_OPEs_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("Opes")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_OPEs_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.OpesEstado", "Estado")
                        .WithMany("Opes")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEs_OPEsEstados");

                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("Opes")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_OPEs_FormasPago");

                    b.HasOne("login4.Models.EF.OpesCdbo", "IdcdboNavigation")
                        .WithOne("Ope")
                        .HasForeignKey("login4.Models.EF.Ope", "Idcdbo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OPEs_OPEs_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("Opes")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_OPEs_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("Opes")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_OPEs_MediosPago");

                    b.HasOne("login4.Models.EF.ProveedoresDireccione", "PersonaDireccionEntrega")
                        .WithMany("OpePersonaDireccionEntregas")
                        .HasForeignKey("PersonaDireccionEntregaId")
                        .HasConstraintName("FK_OPEs_ProveedoresDirecciones1");

                    b.HasOne("login4.Models.EF.ProveedoresDireccione", "PersonaDireccionFactura")
                        .WithMany("OpePersonaDireccionFacturas")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_OPEs_ProveedoresDirecciones");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("Opes")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEs_Proveedores");

                    b.HasOne("login4.Models.EF.PortesTipo", "PortesTipo")
                        .WithMany("Opes")
                        .HasForeignKey("PortesTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEs_PortesTipos");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("Opes")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_OPEs_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("Opes")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEs_Series");

                    b.Navigation("Centro");

                    b.Navigation("CentroCoste");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("FormaPago");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionEntrega");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("PortesTipo");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.Operacione", b =>
                {
                    b.HasOne("login4.Models.EF.OperacionesAtributo", "Atributo")
                        .WithMany("Operaciones")
                        .HasForeignKey("AtributoId")
                        .IsRequired()
                        .HasConstraintName("FK_Operaciones_OperacionesAtributos");

                    b.HasOne("login4.Models.EF.ValoresProducto", "Valor")
                        .WithMany("Operaciones")
                        .HasForeignKey("ValorId")
                        .IsRequired()
                        .HasConstraintName("FK_Operaciones_ValoresProductos");

                    b.Navigation("Atributo");

                    b.Navigation("Valor");
                });

            modelBuilder.Entity("login4.Models.EF.OperacionesAtributo", b =>
                {
                    b.HasOne("login4.Models.EF.AtributosProducto", "Atributo")
                        .WithOne("OperacionesAtributo")
                        .HasForeignKey("login4.Models.EF.OperacionesAtributo", "AtributoId")
                        .IsRequired()
                        .HasConstraintName("FK_OperacionesAtributos_AtributosProductos");

                    b.Navigation("Atributo");
                });

            modelBuilder.Entity("login4.Models.EF.OpesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Ope", "Cabecera")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OPEsDetalle_OPEs");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_OPEsDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_OPEsDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.OpesEstado", "Estado")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsDetalle_OPEsEstados");

                    b.HasOne("login4.Models.EF.OpesDetalleCdbo", "IdcdboNavigation")
                        .WithOne("OpesDetalle")
                        .HasForeignKey("login4.Models.EF.OpesDetalle", "Idcdbo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OPEsDetalle_OPEsDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_OPEsDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("IvaclaseId")
                        .HasConstraintName("FK_OPEsDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_OPEsDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.OpesDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_OPEsDetalle_OPEsDetalle");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_OPEsDetalle_Lotes");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("OpesDetalleMedida")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_OPEsDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Medida", "MedidaPf")
                        .WithMany("OpesDetalleMedidaPfs")
                        .HasForeignKey("MedidaPfid")
                        .HasConstraintName("FK_OPEsDetalle_Medidas1");

                    b.HasOne("login4.Models.EF.OrdenesFabricacion", "Of")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("OfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OPEsDetalle_OrdenesFabricacion");

                    b.HasOne("login4.Models.EF.OrdenesSeriada", "Os")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("OsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OPEsDetalle_OrdenesSeriadas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("OpesDetalleProductos")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsDetalle_Productos");

                    b.HasOne("login4.Models.EF.Producto", "ProductoPf")
                        .WithMany("OpesDetalleProductoPfs")
                        .HasForeignKey("ProductoPfid")
                        .HasConstraintName("FK_OPEsDetalle_Productos1");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("OpesDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("OpesDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_OPEsDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("OpesDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_OPEsDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("OpesDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_OPEsDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("OpesDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_OPEsDetalle_UnidadesMedida_Z");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaPf")
                        .WithMany("OpesDetalleUnidadMedidaPfs")
                        .HasForeignKey("UnidadMedidaPfid")
                        .HasConstraintName("FK_OPEsDetalle_UnidadesMedida1");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivaclase");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("Lote");

                    b.Navigation("Medida");

                    b.Navigation("MedidaPf");

                    b.Navigation("Of");

                    b.Navigation("Os");

                    b.Navigation("Producto");

                    b.Navigation("ProductoPf");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");

                    b.Navigation("UnidadMedidaPf");
                });

            modelBuilder.Entity("login4.Models.EF.OpesEnvioMaterial", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "AlmacenDestino")
                        .WithMany()
                        .HasForeignKey("AlmacenDestinoId")
                        .HasConstraintName("FK_OPEsEnvioMaterial_Almacenes1");

                    b.HasOne("login4.Models.EF.Almacene", "AlmacenOrigen")
                        .WithMany()
                        .HasForeignKey("AlmacenOrigenId")
                        .HasConstraintName("FK_OPEsEnvioMaterial_Almacenes");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsEnvioMaterial_Lotes");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany()
                        .HasForeignKey("MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsEnvioMaterial_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsEnvioMaterial_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "UbicacionDestino")
                        .WithMany()
                        .HasForeignKey("UbicacionDestinoId")
                        .HasConstraintName("FK_OPEsEnvioMaterial_AlmacenesUbicaciones1");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "UbicacionOrigen")
                        .WithMany()
                        .HasForeignKey("UbicacionOrigenId")
                        .HasConstraintName("FK_OPEsEnvioMaterial_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_OPEsEnvioMaterial_UnidadesMedida");

                    b.Navigation("AlmacenDestino");

                    b.Navigation("AlmacenOrigen");

                    b.Navigation("Lote");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("UbicacionDestino");

                    b.Navigation("UbicacionOrigen");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacion", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_OrdenesFabricacion_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("OrdenesFabricacionEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_OrdenesFabricacion_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("OrdenesFabricacionEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_OrdenesFabricacion_EmpleadosResponsable");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_OrdenesFabricacion_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionEstado", "Estado")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionEstados");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_OrdenesFabricacion_IVAGrupos");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionOrigene", "Origen")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("OrigenId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionOrigenes");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_OrdenesFabricacion_Clientes");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionPrioridade", "Prioridad")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("PrioridadId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionPrioridades");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_OrdenesFabricacion_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_OrdenesFabricacion_Series");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionTipo", "Tipo")
                        .WithMany("OrdenesFabricacions")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionTipos");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Origen");

                    b.Navigation("Persona");

                    b.Navigation("Prioridad");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesFabricacion", "Cabecera")
                        .WithMany("OrdenesFabricacionDatosDinamicos")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacion_DatosDinamicos_OrdenesFabricacion");

                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("OrdenesFabricacionDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacion_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.Navigation("Cabecera");

                    b.Navigation("DatoDinamicoGsEntidadDef");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesFabricacion", "Cabecera")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_OrdenesFabricacion");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionEstado", "Estado")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_OrdenesFabricacionEstados");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipoIdrealNavigation")
                        .WithMany("OrdenesFabricacionDetalleMargenTipoIdrealNavigations")
                        .HasForeignKey("MargenTipoIdreal")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_MargenesTipos1");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipoIdteoricoNavigation")
                        .WithMany("OrdenesFabricacionDetalleMargenTipoIdteoricoNavigations")
                        .HasForeignKey("MargenTipoIdteorico")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("OrdenesFabricacionDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_Productos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("OrdenesFabricacionDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("OrdenesFabricacionDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("OrdenesFabricacionDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("OrdenesFabricacionDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("Estado");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("MargenTipoIdrealNavigation");

                    b.Navigation("MargenTipoIdteoricoNavigation");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDetalleEmpleado", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesFabricacion", "Cabecera")
                        .WithMany("OrdenesFabricacionDetalleEmpleados")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_OrdenesFabricacion");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("OrdenesFabricacionDetalleEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_Empleados");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionDetalle", "Linea")
                        .WithMany("OrdenesFabricacionDetalleEmpleados")
                        .HasForeignKey("LineaId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_OrdenesFabricacionDetalle");

                    b.HasOne("login4.Models.EF.Puesto", "Puesto")
                        .WithMany("OrdenesFabricacionDetalleEmpleados")
                        .HasForeignKey("PuestoId")
                        .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_Puestos");

                    b.Navigation("Cabecera");

                    b.Navigation("Empleado");

                    b.Navigation("Linea");

                    b.Navigation("Puesto");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriada", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosConjunto", "Conjunto")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("ConjuntoId")
                        .HasConstraintName("FK_OrdenesSeriadas_ProductosConjuntos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_OrdenesSeriadas_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("OrdenesSeriadaEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_OrdenesSeriadas_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("OrdenesSeriadaEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_OrdenesSeriadas_EmpleadosResponsable");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_OrdenesSeriadas_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasEstado", "Estado")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadas_OrdenesSeriadasEstados");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_OrdenesSeriadas_IVAGrupos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_OrdenesSeriadas_Medidas");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionOrigene", "Origen")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("OrigenId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadas_OrdenesFabricacionOrigenes");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_OrdenesSeriadas_Clientes");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionPrioridade", "Prioridad")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("PrioridadId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadas_OrdenesFabricacionPrioridades");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_OrdenesSeriadas_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_OrdenesSeriadas_Series");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionTipo", "Tipo")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadas_OrdenesFabricacionTipos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("OrdenesSeriada")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_OrdenesSeriadas_UnidadesMedida");

                    b.Navigation("Conjunto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medida");

                    b.Navigation("Origen");

                    b.Navigation("Persona");

                    b.Navigation("Prioridad");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");

                    b.Navigation("Tipo");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesSeriada", "Cabecera")
                        .WithMany("OrdenesSeriadasDatosDinamicos")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadas_DatosDinamicos_OrdenesSeriadas");

                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("OrdenesSeriadasDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadas_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.Navigation("Cabecera");

                    b.Navigation("DatoDinamicoGsEntidadDef");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.OrdenesSeriada", "Cabecera")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_OrdenesSeriadas");

                    b.HasOne("login4.Models.EF.CentrosTrabajo", "Centro")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("CentroId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_CentrosTrabajo");

                    b.HasOne("login4.Models.EF.Cualificacione", "Cualificacion")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("CualificacionId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_Cualificaciones");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasEstado", "Estado")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_OrdenesSeriadasEstados");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_OrdenesSeriadasDetalle");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_Lotes");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipoIdrealNavigation")
                        .WithMany("OrdenesSeriadasDetalleMargenTipoIdrealNavigations")
                        .HasForeignKey("MargenTipoIdreal")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_MargenesTipos1");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipoIdteoricoNavigation")
                        .WithMany("OrdenesSeriadasDetalleMargenTipoIdteoricoNavigations")
                        .HasForeignKey("MargenTipoIdteorico")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("OrdenesSeriadasDetalleMedida")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Medida", "MedidaPf")
                        .WithMany("OrdenesSeriadasDetalleMedidaPfs")
                        .HasForeignKey("MedidaPfid")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_Medidas1");

                    b.HasOne("login4.Models.EF.Operacione", "Operacion")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("OperacionId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_Operaciones");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("OrdenesSeriadasDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_Productos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("OrdenesSeriadasDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaPf")
                        .WithMany("OrdenesSeriadasDetalleUnidadMedidaPfs")
                        .HasForeignKey("UnidadMedidaPfid")
                        .HasConstraintName("FK_OrdenesSeriadasDetalle_UnidadesMedida1");

                    b.Navigation("Cabecera");

                    b.Navigation("Centro");

                    b.Navigation("Cualificacion");

                    b.Navigation("Estado");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("Lote");

                    b.Navigation("MargenTipoIdrealNavigation");

                    b.Navigation("MargenTipoIdteoricoNavigation");

                    b.Navigation("Medida");

                    b.Navigation("MedidaPf");

                    b.Navigation("Operacion");

                    b.Navigation("Producto");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaPf");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasExplosione", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("OrdenesSeriadasExplosiones")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_OrdenesSeriadasExplosiones_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("OrdenesSeriadasExplosiones")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_OrdenesSeriadasExplosiones_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("OrdenesSeriadasExplosiones")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_OrdenesSeriadasExplosiones_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasExplosione", "Explosion")
                        .WithMany("InverseExplosion")
                        .HasForeignKey("ExplosionId")
                        .HasConstraintName("FK_OrdenesSeriadasExplosiones_OrdenesSeriadasExplosiones");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasExplosione", "ExplosionSession")
                        .WithMany("InverseExplosionSession")
                        .HasForeignKey("ExplosionSessionId")
                        .HasConstraintName("FK_OrdenesSeriadasExplosiones_OrdenesSeriadasExplosiones1");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("OrdenesSeriadasExplosiones")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_OrdenesSeriadasExplosiones_Series");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Explosion");

                    b.Navigation("ExplosionSession");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.Parte", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("Partes")
                        .HasForeignKey("AlmacenId")
                        .HasConstraintName("FK_Partes_Almacenes");

                    b.HasOne("login4.Models.EF.CentrosTrabajo", "Centro")
                        .WithMany("Partes")
                        .HasForeignKey("CentroId")
                        .HasConstraintName("FK_Partes_CentrosTrabajo");

                    b.HasOne("login4.Models.EF.CentrosTipo", "CentroTipo")
                        .WithMany("Partes")
                        .HasForeignKey("CentroTipoId")
                        .HasConstraintName("FK_Partes_CentrosTipos");

                    b.HasOne("login4.Models.EF.Cualificacione", "Cualificacion")
                        .WithMany("Partes")
                        .HasForeignKey("CualificacionId")
                        .HasConstraintName("FK_Partes_Cualificaciones");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Partes")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_Partes_Empleados");

                    b.HasOne("login4.Models.EF.PartesCdbo", "IdcdboNavigation")
                        .WithOne("Parte")
                        .HasForeignKey("login4.Models.EF.Parte", "Idcdbo")
                        .HasConstraintName("FK_Partes_Partes_CDBO");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("Partes")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_Partes_Lotes");

                    b.HasOne("login4.Models.EF.Maquina", "Maquina")
                        .WithMany("Partes")
                        .HasForeignKey("MaquinaId")
                        .HasConstraintName("FK_Partes_Maquinas");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionDetalle", "OfDetalle")
                        .WithMany("Partes")
                        .HasForeignKey("OfDetalleId")
                        .HasConstraintName("FK_Partes_OrdenesFabricacionDetalle");

                    b.HasOne("login4.Models.EF.OrdenesFabricacionTipo", "OfTipo")
                        .WithMany("Partes")
                        .HasForeignKey("OfTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Partes_OrdenesFabricacionTipos");

                    b.HasOne("login4.Models.EF.Operacione", "Operacion")
                        .WithMany("Partes")
                        .HasForeignKey("OperacionId")
                        .HasConstraintName("FK_Partes_Operaciones");

                    b.HasOne("login4.Models.EF.OrdenesSeriadasDetalle", "OsDetalle")
                        .WithMany("Partes")
                        .HasForeignKey("OsDetalleId")
                        .HasConstraintName("FK_Partes_OrdenesSeriadasDetalle");

                    b.HasOne("login4.Models.EF.PartesTipo", "ParteTipo")
                        .WithMany("Partes")
                        .HasForeignKey("ParteTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Partes_PartesTipos");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("Partes")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_Partes_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("Partes")
                        .HasForeignKey("UbicacionId")
                        .HasConstraintName("FK_Partes_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("ParteUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_Partes_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("ParteUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_Partes_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("ParteUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_Partes_UnidadesMedida_Z");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ParteUnidadesMedida")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_Partes_UnidadesMedida1");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidumNavigation")
                        .WithMany("ParteUnidadesMedidumNavigations")
                        .HasForeignKey("UnidadMedidaPfid", "MedidaPfid")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_Partes_UnidadesMedida");

                    b.Navigation("Almacen");

                    b.Navigation("Centro");

                    b.Navigation("CentroTipo");

                    b.Navigation("Cualificacion");

                    b.Navigation("Empleado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Lote");

                    b.Navigation("Maquina");

                    b.Navigation("OfDetalle");

                    b.Navigation("OfTipo");

                    b.Navigation("Operacion");

                    b.Navigation("OsDetalle");

                    b.Navigation("ParteTipo");

                    b.Navigation("Producto");

                    b.Navigation("Ubicacion");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");

                    b.Navigation("UnidadesMedidum");

                    b.Navigation("UnidadesMedidumNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.PartesFormulario", b =>
                {
                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("PartesFormularios")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_PartesFormularios_Formularios");

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("login4.Models.EF.PartesTipo", b =>
                {
                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("PartesTipos")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_PartesTipos_Formularios");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PartesTipos")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_PartesTipos_TiposLinea");

                    b.Navigation("Formulario");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompra", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PedidosCompra_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ProveedoresContacto", "Contacto")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_PedidosCompra_ProveedoresContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_PedidosCompra_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_PedidosCompra_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_PedidosCompra_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.PedidosCompraEstado", "Estado")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompra_PedidosCompraEstados");

                    b.HasOne("login4.Models.EF.PedidosCompraCdbo", "IdcdboNavigation")
                        .WithOne("PedidosCompra")
                        .HasForeignKey("login4.Models.EF.PedidosCompra", "Idcdbo")
                        .HasConstraintName("FK_PedidosCompra_PedidosCompra_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PedidosCompra_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_PedidosCompra_MediosPago");

                    b.HasOne("login4.Models.EF.ProveedoresDireccione", "PersonaDireccionFactura")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_PedidosCompra_ProveedoresDirecciones");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompra_Proveedores");

                    b.HasOne("login4.Models.EF.PortesTipo", "PortesTipo")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("PortesTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompra_PortesTipos");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_PedidosCompra_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompra_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("PedidosCompras")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_PedidosCompra_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("PortesTipo");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.PedidosCompra", "Cabecera")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompraDetalle_PedidosCompra");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PedidosCompraDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_PedidosCompraDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.PedidosCompraEstado", "Estado")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompraDetalle_PedidosCompraEstados");

                    b.HasOne("login4.Models.EF.PedidosCompraDetalleCdbo", "IdcdboNavigation")
                        .WithOne("PedidosCompraDetalle")
                        .HasForeignKey("login4.Models.EF.PedidosCompraDetalle", "Idcdbo")
                        .HasConstraintName("FK_PedidosCompraDetalle_PedidosCompraDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_PedidosCompraDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_PedidosCompraDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PedidosCompraDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompraDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_PedidosCompraDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompraDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PedidosCompraDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosCompraDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("PedidosCompraDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("PedidosCompraDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("PedidosCompraDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("PedidosCompraDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.PedidosVentum", "Cabecera")
                        .WithMany("PedidosVentaDatosDinamicos")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVenta_DatosDinamicos_PedidosVenta");

                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("PedidosVentaDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVenta_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.Navigation("Cabecera");

                    b.Navigation("DatoDinamicoGsEntidadDef");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDescuentosGenerale", b =>
                {
                    b.HasOne("login4.Models.EF.PedidosVentum", "Cabecera")
                        .WithMany("PedidosVentaDescuentosGenerales")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVentaDescuentosGenerales_PedidosVenta");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("PedidosVentaDescuentosGenerales")
                        .HasForeignKey("ProductoTipoId")
                        .HasConstraintName("FK_PedidosVentaDescuentosGenerales_ProductosTipos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PedidosVentaDescuentosGenerales")
                        .HasForeignKey("TipoLineaId")
                        .HasConstraintName("FK_PedidosVentaDescuentosGenerales_TiposLinea");

                    b.Navigation("Cabecera");

                    b.Navigation("ProductoTipo");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.PedidosVentum", "Cabecera")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVentaDetalle_PedidosVenta");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PedidosVentaDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_PedidosVentaDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.PedidosVentaEstado", "Estado")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVentaDetalle_PedidosVentaEstados");

                    b.HasOne("login4.Models.EF.PedidosVentaDetalleCdbo", "IdcdboNavigation")
                        .WithOne("PedidosVentaDetalle")
                        .HasForeignKey("login4.Models.EF.PedidosVentaDetalle", "Idcdbo")
                        .HasConstraintName("FK_PedidosVentaDetalle_PedidosVentaDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_PedidosVentaDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_PedidosVentaDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PedidosVentaDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.PedidosVentaDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_PedidosVentaDetalle_PedidosVentaDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_PedidosVentaDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVentaDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_PedidosVentaDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVentaDetalle_Productos");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_PedidosVentaDetalle_Proveedores");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PedidosVentaDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVentaDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("PedidosVentaDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("PedidosVentaDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("PedidosVentaDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("PedidosVentaDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentum", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PedidosVenta_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_PedidosVenta_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_PedidosVenta_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_PedidosVenta_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_PedidosVenta_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("PedidosVentumEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_PedidosVenta_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("PedidosVentumEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_PedidosVenta_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_PedidosVenta_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.PedidosVentaEstado", "Estado")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVenta_PedidosVentaEstados");

                    b.HasOne("login4.Models.EF.PedidosVentaCdbo", "IdcdboNavigation")
                        .WithOne("PedidosVentum")
                        .HasForeignKey("login4.Models.EF.PedidosVentum", "Idcdbo")
                        .HasConstraintName("FK_PedidosVenta_PedidosVenta_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PedidosVenta_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_PedidosVenta_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_PedidosVenta_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVenta_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_PedidosVenta_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_PedidosVenta_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("PedidosVenta")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_PedidosVenta_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.Periodo", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Periodos")
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Periodos_Ejercicios");

                    b.HasOne("login4.Models.EF.PeriodosTipo", "PeriodoTipo")
                        .WithMany("Periodos")
                        .HasForeignKey("PeriodoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Periodos_PeriodosTipos");

                    b.Navigation("Ejercicio");

                    b.Navigation("PeriodoTipo");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosAccione", b =>
                {
                    b.HasOne("login4.Models.EF.Formulario", "ClassFormIdp1Navigation")
                        .WithMany("PermisosAccioneClassFormIdp1Navigations")
                        .HasForeignKey("ClassFormIdp1")
                        .HasConstraintName("FK_PermisosAcciones_ClassFormIDP1_Formularios");

                    b.HasOne("login4.Models.EF.Formulario", "ClassFormIdp2Navigation")
                        .WithMany("PermisosAccioneClassFormIdp2Navigations")
                        .HasForeignKey("ClassFormIdp2")
                        .HasConstraintName("FK_PermisosAcciones_ClassFormIDP2_Formularios");

                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("PermisosAccioneFormularios")
                        .HasForeignKey("FormularioId")
                        .IsRequired()
                        .HasConstraintName("FK_PermisosAcciones_Formularios");

                    b.HasOne("login4.Models.EF.PermisosCategoria", "PermisoCategoria")
                        .WithMany("PermisosAcciones")
                        .HasForeignKey("PermisoCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermisosAcciones_PermisosCategorias");

                    b.Navigation("ClassFormIdp1Navigation");

                    b.Navigation("ClassFormIdp2Navigation");

                    b.Navigation("Formulario");

                    b.Navigation("PermisoCategoria");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosCategoria", b =>
                {
                    b.HasOne("login4.Models.EF.ModulosGestion", "ModuloGestion")
                        .WithMany("PermisosCategoria")
                        .HasForeignKey("ModuloGestionId")
                        .HasConstraintName("FK_PermisosCategorias_ModulosGestion");

                    b.Navigation("ModuloGestion");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosEmpleado", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("PermisosEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermisosEmpleados_Empleados");

                    b.HasOne("login4.Models.EF.PermisosAccione", "PermisoAccion")
                        .WithMany("PermisosEmpleados")
                        .HasForeignKey("PermisoAccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermisosEmpleados_PermisosAcciones");

                    b.Navigation("Empleado");

                    b.Navigation("PermisoAccion");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompra", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PresupuestosCompra_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ProveedoresContacto", "Contacto")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_PresupuestosCompra_ProveedoresContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_PresupuestosCompra_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_PresupuestosCompra_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_PresupuestosCompra_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.PresupuestosCompraEstado", "Estado")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompra_PresupuestosCompraEstados");

                    b.HasOne("login4.Models.EF.PresupuestosCompraCdbo", "IdcdboNavigation")
                        .WithOne("PresupuestosCompra")
                        .HasForeignKey("login4.Models.EF.PresupuestosCompra", "Idcdbo")
                        .HasConstraintName("FK_PresupuestosCompra_PresupuestosCompra_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PresupuestosCompra_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_PresupuestosCompra_MediosPago");

                    b.HasOne("login4.Models.EF.ProveedoresDireccione", "PersonaDireccionFactura")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_PresupuestosCompra_ProveedoresDirecciones");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompra_Proveedores");

                    b.HasOne("login4.Models.EF.PortesTipo", "PortesTipo")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("PortesTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompra_PortesTipos");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_PresupuestosCompra_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("PresupuestosCompras")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompra_Series");

                    b.Navigation("CentroCoste");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("PortesTipo");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.PresupuestosCompra", "Cabecera")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompraDetalle_PresupuestosCompra");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.PresupuestosCompraEstado", "Estado")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompraDetalle_PresupuestosCompraEstados");

                    b.HasOne("login4.Models.EF.PresupuestosCompraDetalleCdbo", "IdcdboNavigation")
                        .WithOne("PresupuestosCompraDetalle")
                        .HasForeignKey("login4.Models.EF.PresupuestosCompraDetalle", "Idcdbo")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_PresupuestosCompraDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompraDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompraDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PresupuestosCompraDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosCompraDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("PresupuestosCompraDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("PresupuestosCompraDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("PresupuestosCompraDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("PresupuestosCompraDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDescuentosGenerale", b =>
                {
                    b.HasOne("login4.Models.EF.PresupuestosVentum", "Cabecera")
                        .WithMany("PresupuestosVentaDescuentosGenerales")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaDescuentosGenerales_PresupuestosVenta");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("PresupuestosVentaDescuentosGenerales")
                        .HasForeignKey("ProductoTipoId")
                        .HasConstraintName("FK_PresupuestosVentaDescuentosGenerales_ProductosTipos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PresupuestosVentaDescuentosGenerales")
                        .HasForeignKey("TipoLineaId")
                        .HasConstraintName("FK_PresupuestosVentaDescuentosGenerales_TiposLinea");

                    b.Navigation("Cabecera");

                    b.Navigation("ProductoTipo");

                    b.Navigation("TipoLinea");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.PresupuestosVentum", "Cabecera")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVenta");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.PresupuestosVentaEstado", "Estado")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVentaEstados");

                    b.HasOne("login4.Models.EF.PresupuestosVentaDetalleCdbo", "IdcdboNavigation")
                        .WithOne("PresupuestosVentaDetalle")
                        .HasForeignKey("login4.Models.EF.PresupuestosVentaDetalle", "Idcdbo")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVentaDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.PresupuestosVentaDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVentaDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaDetalle_Productos");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_Proveedores");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("PresupuestosVentaDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("PresupuestosVentaDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("PresupuestosVentaDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("PresupuestosVentaDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("PresupuestosVentaDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDetalleCdbo", b =>
                {
                    b.HasOne("login4.Models.EF.LabProcedimientosEnsayo", "ProcedimientoEnsayoNavigation")
                        .WithMany("PresupuestosVentaDetalleCdbos")
                        .HasForeignKey("ProcedimientoEnsayoId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_CDBO_LAB_ProcedimientosEnsayo");

                    b.HasOne("login4.Models.EF.Producto", "ProductoCompuesto")
                        .WithMany("PresupuestosVentaDetalleCdbos")
                        .HasForeignKey("ProductoCompuestoId")
                        .HasConstraintName("FK_PresupuestosVentaDetalle_CDBO_Productos");

                    b.Navigation("ProcedimientoEnsayoNavigation");

                    b.Navigation("ProductoCompuesto");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaProductosActualizable", b =>
                {
                    b.HasOne("login4.Models.EF.PresupuestosVentum", "Cabecera")
                        .WithMany("PresupuestosVentaProductosActualizables")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaProductosActualizables_PresupuestosVenta");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("PresupuestosVentaProductosActualizables")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVentaProductosActualizables_Productos");

                    b.Navigation("Cabecera");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentum", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_PresupuestosVenta_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_PresupuestosVenta_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_PresupuestosVenta_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_PresupuestosVenta_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_PresupuestosVenta_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("PresupuestosVentumEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_PresupuestosVenta_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("PresupuestosVentumEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_PresupuestosVenta_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_PresupuestosVenta_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.PresupuestosVentaEstado", "Estado")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVenta_PresupuestosVentaEstados");

                    b.HasOne("login4.Models.EF.PresupuestosVentaCdbo", "IdcdboNavigation")
                        .WithOne("PresupuestosVentum")
                        .HasForeignKey("login4.Models.EF.PresupuestosVentum", "Idcdbo")
                        .HasConstraintName("FK_PresupuestosVenta_PresupuestosVenta_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_PresupuestosVenta_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_PresupuestosVenta_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_PresupuestosVenta_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVenta_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_PresupuestosVenta_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_PresupuestosVenta_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("PresupuestosVenta")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_PresupuestosVenta_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.Producto", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("Productos")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_Productos_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("Productos")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_Productos_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("Productos")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK__Productos__Emple__2184288F");

                    b.HasOne("login4.Models.EF.Familia", "Familia")
                        .WithMany("Productos")
                        .HasForeignKey("FamiliaId")
                        .HasConstraintName("FK_Productos_Familias");

                    b.HasOne("login4.Models.EF.ProductosCdbo", "IdcdboNavigation")
                        .WithOne("Producto")
                        .HasForeignKey("login4.Models.EF.Producto", "Idcdbo")
                        .HasConstraintName("FK_Productos_Productos_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("Productos")
                        .HasForeignKey("IvaclaseId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_IvaClases");

                    b.HasOne("login4.Models.EF.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaId")
                        .HasConstraintName("FK_Productos_Marcas");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenCompra")
                        .WithMany("ProductoMargenCompras")
                        .HasForeignKey("MargenCompraId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_MargenesTipos1");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("ProductoMargenTipos")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "MedidaIdCorteNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("MedidaIdCorte")
                        .HasConstraintName("FK_Productos_Medidas_Corte");

                    b.HasOne("login4.Models.EF.ProductosBase", "ProductoBase")
                        .WithMany("Productos")
                        .HasForeignKey("ProductoBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Productos_ProductosBase");

                    b.HasOne("login4.Models.EF.ProductosEstado", "ProductoEstado")
                        .WithMany("Productos")
                        .HasForeignKey("ProductoEstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_ProductosEstado");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("Productos")
                        .HasForeignKey("ProductoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_ProductosTipos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("ProductoUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_Productos_UnidadesMedida_Corte_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("ProductoUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_Productos_UnidadesMedida_Corte_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("ProductoUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_Productos_UnidadesMedida_Corte_Z");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ProductoUnidadesMedida")
                        .HasForeignKey("UnidadMedidaIdCorte", "MedidaIdCorte")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_Productos_UnidadesMedida_Corte");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Familia");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivaclase");

                    b.Navigation("Marca");

                    b.Navigation("MargenCompra");

                    b.Navigation("MargenTipo");

                    b.Navigation("MedidaIdCorteNavigation");

                    b.Navigation("ProductoBase");

                    b.Navigation("ProductoEstado");

                    b.Navigation("ProductoTipo");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosAlmacen", b =>
                {
                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("ProductosAlmacens")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosAlmacenes_Lotes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ProductosAlmacens")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosAlmacenes_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "AlmacenesUbicacione")
                        .WithMany("ProductosAlmacens")
                        .HasForeignKey("UbicacionId", "AlmacenId")
                        .HasPrincipalKey("Idubicacion", "AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosAlmacenes_AlmacenesUbicaciones");

                    b.Navigation("AlmacenesUbicacione");

                    b.Navigation("Lote");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosAtribsValore", b =>
                {
                    b.HasOne("login4.Models.EF.AtributosProducto", "AtributoProducto")
                        .WithMany("ProductosAtribsValores")
                        .HasForeignKey("AtributoProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_Atribs_Valores_AtributosProductos");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ProductosAtribsValores")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Productos_Atribs_Valores_Productos");

                    b.HasOne("login4.Models.EF.ValoresProducto", "ValorProducto")
                        .WithMany("ProductosAtribsValores")
                        .HasForeignKey("ValorProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_Atribs_Valores_ValoresProductos");

                    b.Navigation("AtributoProducto");

                    b.Navigation("Producto");

                    b.Navigation("ValorProducto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBase", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("ProductosBases")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_ProductosBase_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Familia", "Familia")
                        .WithMany("ProductosBases")
                        .HasForeignKey("FamiliaId")
                        .HasConstraintName("FK_ProductosBase_Familias");

                    b.HasOne("login4.Models.EF.ProductosBaseCdbo", "IdcdboNavigation")
                        .WithMany("ProductosBases")
                        .HasForeignKey("Idcdbo")
                        .HasConstraintName("FK_ProductosBase_ProductosBase_CDBO");

                    b.HasOne("login4.Models.EF.Marca", "Marca")
                        .WithMany("ProductosBases")
                        .HasForeignKey("MarcaId")
                        .HasConstraintName("FK_ProductosBase_Marcas");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("ProductosBases")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosBase_MargenesTipos");

                    b.HasOne("login4.Models.EF.ProductosEstado", "ProductoEstado")
                        .WithMany("ProductosBases")
                        .HasForeignKey("ProductoEstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosBase_ProductosEstado");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("ProductosBases")
                        .HasForeignKey("ProductoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosBase_ProductosTipos");

                    b.Navigation("CentroCoste");

                    b.Navigation("Familia");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Marca");

                    b.Navigation("MargenTipo");

                    b.Navigation("ProductoEstado");

                    b.Navigation("ProductoTipo");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBaseUnidadesModulo", b =>
                {
                    b.HasOne("login4.Models.EF.ModulosGestion", "ModuloGestion")
                        .WithMany("ProductosBaseUnidadesModulos")
                        .HasForeignKey("ModuloGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosBaseUnidadesModulos_ModulosGestion");

                    b.HasOne("login4.Models.EF.UnidadesProductoBase", "UnidadesProductoBase")
                        .WithMany("ProductosBaseUnidadesModulos")
                        .HasForeignKey("ProductoBaseId", "MedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosBaseUnidadesModulos_UnidadesProductoBase");

                    b.Navigation("ModuloGestion");

                    b.Navigation("UnidadesProductoBase");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCdbo", b =>
                {
                    b.HasOne("login4.Models.EF.LabMatrix", "Matriz")
                        .WithMany("ProductosCdbos")
                        .HasForeignKey("MatrizId")
                        .HasConstraintName("FK_Productos_CDBO_LAB_Matrices");

                    b.HasOne("login4.Models.EF.LabProcedimientosEnsayo", "ProcedimientoEnsayoNavigation")
                        .WithMany("ProductosCdbos")
                        .HasForeignKey("ProcedimientoEnsayoId")
                        .HasConstraintName("FK_Productos_CDBO_LAB_ProcedimientosEnsayo");

                    b.Navigation("Matriz");

                    b.Navigation("ProcedimientoEnsayoNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCliente", b =>
                {
                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ProductosClientes")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosClientes_Productos");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCodigosBarra", b =>
                {
                    b.HasOne("login4.Models.EF.UnidadesProducto", "UnidadesProducto")
                        .WithMany("ProductosCodigosBarras")
                        .HasForeignKey("ProductoId", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCodigosBarras_UnidadesProducto");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ProductosCodigosBarras")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCodigosBarras_UnidadesMedida");

                    b.Navigation("UnidadesMedidum");

                    b.Navigation("UnidadesProducto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuesto", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosCompuestosCdbo", "IdcdboNavigation")
                        .WithOne("ProductosCompuesto")
                        .HasForeignKey("login4.Models.EF.ProductosCompuesto", "Idcdbo")
                        .HasConstraintName("FK_ProductosCompuestos_ProductosCompuestos_CDBO");

                    b.HasOne("login4.Models.EF.Producto", "ProductoCompuesto")
                        .WithMany("ProductosCompuestoProductoCompuestos")
                        .HasForeignKey("ProductoCompuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCompuestos_Productos");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ProductosCompuestoProductos")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_ProductosCompuestos_Productos1");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ProductosCompuestos")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCompuestos_UnidadesMedida");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Producto");

                    b.Navigation("ProductoCompuesto");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosCdbo", b =>
                {
                    b.HasOne("login4.Models.EF.LabProcedimientosEnsayo", "ProcedimientoEnsayoNavigation")
                        .WithMany("ProductosCompuestosCdbos")
                        .HasForeignKey("ProcedimientoEnsayoId")
                        .HasConstraintName("FK_ProductosCompuestos_CDBO_LAB_ProcedimientosEnsayo");

                    b.Navigation("ProcedimientoEnsayoNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosPlantillasComponente", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosCompuestosPlantilla", "ProductoCompuestoPlantilla")
                        .WithMany("ProductosCompuestosPlantillasComponentes")
                        .HasForeignKey("ProductoCompuestoPlantillaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCompuestosPlantillasComponentes_ProductosCompuestosPlantillas");

                    b.HasOne("login4.Models.EF.UnidadesProducto", "UnidadesProducto")
                        .WithMany("ProductosCompuestosPlantillasComponentes")
                        .HasForeignKey("ProductoId", "MedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCompuestosPlantillasComponentes_UnidadesProducto");

                    b.Navigation("ProductoCompuestoPlantilla");

                    b.Navigation("UnidadesProducto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosPlantillasLog", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosCompuestosPlantilla", "ProductoCompuestoPlantilla")
                        .WithMany("ProductosCompuestosPlantillasLogs")
                        .HasForeignKey("ProductoCompuestoPlantillaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCompuestosPlantillas_Log_ProductosCompuestosPlantillas");

                    b.HasOne("login4.Models.EF.Producto", "ProductoGenerator")
                        .WithMany("ProductosCompuestosPlantillasLogs")
                        .HasForeignKey("ProductoGeneratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosCompuestosPlantillas_Log_Productos");

                    b.Navigation("ProductoCompuestoPlantilla");

                    b.Navigation("ProductoGenerator");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjunto", b =>
                {
                    b.HasOne("login4.Models.EF.PartesFormulario", "ParteFormulario")
                        .WithMany("ProductosConjuntos")
                        .HasForeignKey("ParteFormularioId")
                        .HasConstraintName("FK_ProductosConjuntos_PartesFormularios");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("ProductosConjuntos")
                        .HasForeignKey("UnidadMedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntos_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesProducto", "UnidadesProducto")
                        .WithMany("ProductosConjuntos")
                        .HasForeignKey("ProductoId", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntos_UnidadesProducto");

                    b.Navigation("ParteFormulario");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadesProducto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjuntosComponente", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosConjunto", "Conjunto")
                        .WithMany("ProductosConjuntosComponentes")
                        .HasForeignKey("ConjuntoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntosComponentes_ProductosConjuntos");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("ProductosConjuntosComponentes")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_ProductosConjuntosComponentes_Lotes");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("ProductosConjuntosComponentes")
                        .HasForeignKey("ProductoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntosComponentes_ProductosTipos");

                    b.HasOne("login4.Models.EF.UnidadesProducto", "UnidadesProducto")
                        .WithMany("ProductosConjuntosComponentes")
                        .HasForeignKey("ProductoId", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntosComponentes_UnidadesProducto");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ProductosConjuntosComponentes")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntosComponentes_UnidadesMedida");

                    b.Navigation("Conjunto");

                    b.Navigation("Lote");

                    b.Navigation("ProductoTipo");

                    b.Navigation("UnidadesMedidum");

                    b.Navigation("UnidadesProducto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjuntosDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.ProductosConjunto", "Conjunto")
                        .WithMany("ProductosConjuntosDatosDinamicos")
                        .HasForeignKey("ConjuntoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntos_DatosDinamicos_ProductosConjuntos");

                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("ProductosConjuntosDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosConjuntos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.Navigation("Conjunto");

                    b.Navigation("DatoDinamicoGsEntidadDef");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("ProductosDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ProductosDatosDinamicos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Productos_DatosDinamicos_Productos");

                    b.Navigation("DatoDinamicoGsEntidadDef");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosSugerido", b =>
                {
                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ProductosSugeridoProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosSugeridos_Productos");

                    b.HasOne("login4.Models.EF.Producto", "ProductoSugerido")
                        .WithMany("ProductosSugeridoProductoSugeridos")
                        .HasForeignKey("ProductoSugeridoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosSugeridos_Productos1");

                    b.Navigation("Producto");

                    b.Navigation("ProductoSugerido");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosTipo", b =>
                {
                    b.HasOne("login4.Models.EF.MargenesTipo", "DefaultMargenCompra")
                        .WithMany("ProductosTipoDefaultMargenCompras")
                        .HasForeignKey("DefaultMargenCompraId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosTipos_MargenesTipos1");

                    b.HasOne("login4.Models.EF.Formulario", "Formulario")
                        .WithMany("ProductosTipos")
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProductosTipos_Formularios");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("ProductosTipos")
                        .HasForeignKey("IvaclaseId")
                        .HasConstraintName("FK_ProductosTipos_IvaClases");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("ProductosTipoMargenTipos")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosTipos_MargenesTipos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "AlmacenesUbicacione")
                        .WithMany("ProductosTipos")
                        .HasForeignKey("UbicacionIdDef", "AlmacenIdDef")
                        .HasPrincipalKey("Idubicacion", "AlmacenId")
                        .HasConstraintName("FK_ProductosTipos_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("ProductosTipos")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_ProductosTipos_UnidadesMedida");

                    b.Navigation("AlmacenesUbicacione");

                    b.Navigation("DefaultMargenCompra");

                    b.Navigation("Formulario");

                    b.Navigation("Ivaclase");

                    b.Navigation("MargenTipo");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosUnidadesModulo", b =>
                {
                    b.HasOne("login4.Models.EF.ModulosGestion", "ModuloGestion")
                        .WithMany("ProductosUnidadesModulos")
                        .HasForeignKey("ModuloGestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductosUnidadesModulos_ModulosGestion");

                    b.HasOne("login4.Models.EF.UnidadesProducto", "UnidadesProducto")
                        .WithMany("ProductosUnidadesModulos")
                        .HasForeignKey("ProductoId", "MedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductosUnidadesModulos_UnidadesProducto");

                    b.Navigation("ModuloGestion");

                    b.Navigation("UnidadesProducto");
                });

            modelBuilder.Entity("login4.Models.EF.PropuestasCompra", b =>
                {
                    b.HasOne("login4.Models.EF.DocumentosGestion", "DocumentoOrigen")
                        .WithMany("PropuestasCompras")
                        .HasForeignKey("DocumentoOrigenId")
                        .IsRequired()
                        .HasConstraintName("FK_PropuestasCompra_DocumentosGestion");

                    b.Navigation("DocumentoOrigen");
                });

            modelBuilder.Entity("login4.Models.EF.PropuestasCompraDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.PropuestasCompra", "Cabecera")
                        .WithMany("PropuestasCompraDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropuestasCompraDetalle_PropuestasCompra");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("PropuestasCompraDetalles")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_PropuestasCompraDetalle_Lotes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("PropuestasCompraDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_PropuestasCompraDetalle_Productos");

                    b.HasOne("login4.Models.EF.Proveedore", "Proveedor")
                        .WithMany("PropuestasCompraDetalles")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_PropuestasCompraDetalle_Proveedores");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("PropuestasCompraDetalles")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_PropuestasCompraDetalle_UnidadesMedida");

                    b.Navigation("Cabecera");

                    b.Navigation("Lote");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.Proveedore", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("Proveedores")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_Proveedores_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("Proveedores")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_Proveedores_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("Proveedores")
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("FK_Proveedores_FormasPago");

                    b.HasOne("login4.Models.EF.ProveedoresCdbo", "IdcdboNavigation")
                        .WithOne("Proveedore")
                        .HasForeignKey("login4.Models.EF.Proveedore", "Idcdbo")
                        .HasConstraintName("FK_Proveedores_Proveedores_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "Ivaclase")
                        .WithMany("Proveedores")
                        .HasForeignKey("IvaclaseId")
                        .HasConstraintName("FK_Proveedores_IvaClases");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("Proveedores")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_Proveedores_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "MedioPago")
                        .WithMany("Proveedores")
                        .HasForeignKey("MedioPagoId")
                        .HasConstraintName("FK_Proveedores_MediosPago");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("Proveedores")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_Proveedores_Series");

                    b.HasOne("login4.Models.EF.ProveedoresTipo", "Tipo")
                        .WithMany("Proveedores")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fk_Prov_Tipo");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("FormaPago");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivaclase");

                    b.Navigation("Ivagrupo");

                    b.Navigation("MedioPago");

                    b.Navigation("Serie");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresContacto", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresContactos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresContactos_Proveedores");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresCuentasBancaria", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresCuentasBancaria")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresCuentasBancarias_Proveedores");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDescuento", b =>
                {
                    b.HasOne("login4.Models.EF.Familia", "Familia")
                        .WithMany("ProveedoresDescuentos")
                        .HasForeignKey("FamiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresDescuentos_Familias");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresDescuentos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresDescuentos_Proveedores");

                    b.Navigation("Familia");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDescuentosRoot", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresDescuentosRoots")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresDescuentos_Root_Proveedores");

                    b.HasOne("login4.Models.EF.ProductosTipo", "ProductoTipo")
                        .WithMany("ProveedoresDescuentosRoots")
                        .HasForeignKey("ProductoTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresDescuentos_Root_ProductosTipos");

                    b.Navigation("Persona");

                    b.Navigation("ProductoTipo");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDiasPago", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresDiasPagos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresDiasPago_Proveedores");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDireccione", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresDirecciones")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresDirecciones_Proveedores");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresPeriodosExentosPago", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresPeriodosExentosPagos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresPeriodosExentosPago_Proveedores");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresProveedoresGrupo", b =>
                {
                    b.HasOne("login4.Models.EF.ProveedoresGrupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .IsRequired()
                        .HasConstraintName("FK_Proveedores_ProveedoresGrupos_ProveedoresGrupos");

                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Proveedores_ProveedoresGrupos_Proveedores");

                    b.Navigation("Grupo");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresTelefono", b =>
                {
                    b.HasOne("login4.Models.EF.Proveedore", "Persona")
                        .WithMany("ProveedoresTelefonos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProveedoresTelefonos_Proveedores");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.Provincia", b =>
                {
                    b.HasOne("login4.Models.EF.Paise", "Pais")
                        .WithMany("Provincia")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Provincias_Paises");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("login4.Models.EF.Proyecto", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Proyectos")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_Proyectos_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("ProyectoEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_Proyectos_Empleados");

                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoResponsable")
                        .WithMany("ProyectoEmpleadoResponsables")
                        .HasForeignKey("EmpleadoResponsableId")
                        .HasConstraintName("FK_FacturasVenta_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("Proyectos")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Proyectos_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.ProyectosEstado", "Estado")
                        .WithMany("Proyectos")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Proyectos_ProyectosEstados");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("Proyectos")
                        .HasForeignKey("LoteId")
                        .HasConstraintName("FK_Proyectos_Lotes");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("Proyectos")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_Proyectos_Clientes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("Proyectos")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_Proyectos_Productos");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoResponsable");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("Lote");

                    b.Navigation("Persona");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.ProyectosDatosDinamico", b =>
                {
                    b.HasOne("login4.Models.EF.Proyecto", "Cabecera")
                        .WithMany("ProyectosDatosDinamicos")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Proyectos_DatosDinamicos_PedidosVenta");

                    b.HasOne("login4.Models.EF.DatosDinamicosGsEntidadesDef", "DatoDinamicoGsEntidadDef")
                        .WithMany("ProyectosDatosDinamicos")
                        .HasForeignKey("DatoDinamicoGsEntidadDefId")
                        .IsRequired()
                        .HasConstraintName("FK_Proyectos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

                    b.Navigation("Cabecera");

                    b.Navigation("DatoDinamicoGsEntidadDef");
                });

            modelBuilder.Entity("login4.Models.EF.Puesto", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("Puestos")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_Puestos_Departamentos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("Puestos")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_Puestos_Secciones");

                    b.Navigation("Departamento");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("login4.Models.EF.PyG", b =>
                {
                    b.HasOne("login4.Models.EF.PyG", "PyGNavigation")
                        .WithMany("InversePyGNavigation")
                        .HasForeignKey("PyGid")
                        .HasConstraintName("FK_PyG_PyG");

                    b.Navigation("PyGNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.PyGCuenta", b =>
                {
                    b.HasOne("login4.Models.EF.PyG", "PyG")
                        .WithMany("PyGCuenta")
                        .HasForeignKey("PyGid")
                        .HasConstraintName("FK_PyG_Cuentas_PyG");

                    b.Navigation("PyG");
                });

            modelBuilder.Entity("login4.Models.EF.RegularizacionesAlmacen", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("RegularizacionesAlmacens")
                        .HasForeignKey("AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_RegularizacionesAlmacen_Almacenes");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("RegularizacionesAlmacens")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_RegularizacionesAlmacen_Lotes");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("RegularizacionesAlmacens")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_RegularizacionesAlmacen_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("RegularizacionesAlmacens")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_RegularizacionesAlmacen_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "Ubicacion")
                        .WithMany("RegularizacionesAlmacens")
                        .HasForeignKey("UbicacionId")
                        .IsRequired()
                        .HasConstraintName("FK_RegularizacionesAlmacen_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("RegularizacionesAlmacens")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_RegularizacionesAlmacen_UnidadesMedida");

                    b.Navigation("Almacen");

                    b.Navigation("Lote");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("Ubicacion");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.RemesasCompra", b =>
                {
                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "Cuenta")
                        .WithMany("RemesasCompras")
                        .HasForeignKey("CuentaId")
                        .IsRequired()
                        .HasConstraintName("FK_RemesasCompra_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("RemesasCompras")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_RemesasCompra_Ejercicios");

                    b.Navigation("Cuenta");

                    b.Navigation("Ejercicio");
                });

            modelBuilder.Entity("login4.Models.EF.RemesasVentum", b =>
                {
                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "Cuenta")
                        .WithMany("RemesasVenta")
                        .HasForeignKey("CuentaId")
                        .IsRequired()
                        .HasConstraintName("FK_Remesas_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("RemesasVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_RemesasVenta_Ejercicios");

                    b.Navigation("Cuenta");

                    b.Navigation("Ejercicio");
                });

            modelBuilder.Entity("login4.Models.EF.Report", b =>
                {
                    b.HasOne("login4.Models.EF.ReportsConstructor", "ReportConstructor")
                        .WithMany("Reports")
                        .HasForeignKey("ReportConstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_ReportsConstructor");

                    b.HasOne("login4.Models.EF.ReportsFamilia", "ReportFamilia")
                        .WithMany("Reports")
                        .HasForeignKey("ReportFamiliaId")
                        .HasConstraintName("FK_Reports_ReportsFamilias");

                    b.HasOne("login4.Models.EF.ReportsTipo", "ReportTipo")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_ReportsTipos");

                    b.Navigation("ReportConstructor");

                    b.Navigation("ReportFamilia");

                    b.Navigation("ReportTipo");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsCriteria", b =>
                {
                    b.HasOne("login4.Models.EF.ReportsLauncher", "ReportLauncher")
                        .WithMany("ReportsCriteria")
                        .HasForeignKey("ReportLauncherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportsCriterias_ReportsLaunchers");

                    b.Navigation("ReportLauncher");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsLauncher", b =>
                {
                    b.HasOne("login4.Models.EF.Report", "Report")
                        .WithMany("ReportsLaunchers")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ReportsLaunchers_Reports");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("login4.Models.EF.ReservasStockDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Almacene", "Almacen")
                        .WithMany("ReservasStockDetalleAlmacens")
                        .HasForeignKey("AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_Almacenes");

                    b.HasOne("login4.Models.EF.Almacene", "AlmacenReserva")
                        .WithMany("ReservasStockDetalleAlmacenReservas")
                        .HasForeignKey("AlmacenReservaId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_AlmacenesRsrv");

                    b.HasOne("login4.Models.EF.ReservasStock", "Cabecera")
                        .WithMany("ReservasStockDetalles")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_ReservasStock");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("ReservasStockDetalles")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_Lotes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("ReservasStockDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_Productos");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "AlmacenesUbicacione")
                        .WithMany("ReservasStockDetalleAlmacenesUbicaciones")
                        .HasForeignKey("UbicacionId", "AlmacenId")
                        .HasPrincipalKey("Idubicacion", "AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_AlmacenesUbicaciones");

                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "AlmacenesUbicacioneNavigation")
                        .WithMany("ReservasStockDetalleAlmacenesUbicacioneNavigations")
                        .HasForeignKey("UbicacionReservaId", "AlmacenReservaId")
                        .HasPrincipalKey("Idubicacion", "AlmacenId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservasStockDetalle_AlmacenesUbicacionesRsrv");

                    b.Navigation("Almacen");

                    b.Navigation("AlmacenReserva");

                    b.Navigation("AlmacenesUbicacione");

                    b.Navigation("AlmacenesUbicacioneNavigation");

                    b.Navigation("Cabecera");

                    b.Navigation("Lote");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacion", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("RrhhPrimasLiquidacions")
                        .HasForeignKey("EjercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_PrimasLiquidacion_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("RrhhPrimasLiquidacionEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_RRHH_PrimasLiquidacion_Empleados1");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("RrhhPrimasLiquidacions")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_RRHH_PrimasLiquidacion_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.RrhhPrimasLiquidacionEstado", "Estado")
                        .WithMany("RrhhPrimasLiquidacions")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_PrimasLiquidacion_RRHH_PrimasLiquidacionEstados");

                    b.HasOne("login4.Models.EF.Empleado", "Persona")
                        .WithMany("RrhhPrimasLiquidacionPersonas")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_PrimasLiquidacion_Empleados");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacionDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.RrhhPrimasLiquidacion", "Cabecera")
                        .WithMany("RrhhPrimasLiquidacionDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_RRHH_PrimasLiquidacion");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("RrhhPrimasLiquidacionDetalles")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_Empleados");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("RrhhPrimasLiquidacionDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.Turno", "Turno")
                        .WithMany("RrhhPrimasLiquidacionDetalles")
                        .HasForeignKey("TurnoId")
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_Turnos");

                    b.Navigation("Cabecera");

                    b.Navigation("Empleado");

                    b.Navigation("TipoLinea");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("login4.Models.EF.RrhhSetup", b =>
                {
                    b.HasOne("login4.Models.EF.RrhhSetupCategoria", "Categoria")
                        .WithMany("RrhhSetups")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_RRHH_Setup_RRHH_SetupCategorias");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("login4.Models.EF.Seccione", b =>
                {
                    b.HasOne("login4.Models.EF.Departamento", "Departamento")
                        .WithMany("Secciones")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Secciones_Departamentos");

                    b.HasOne("login4.Models.EF.Seccione", "Seccion")
                        .WithMany("InverseSeccion")
                        .HasForeignKey("SeccionId")
                        .HasConstraintName("FK_Secciones_Secciones");

                    b.Navigation("Departamento");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContrato", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("SrvContratos")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_SRV_Contratos_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("SrvContratos")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_SRV_Contratos_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("SrvContratos")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_SRV_Contratos_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("SrvContratos")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_SRV_Contratos_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("SrvContratos")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_SRV_Contratos_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("SrvContratos")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_SRV_Contratos_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("SrvContratos")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_SRV_Contratos_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.SrvContratosEstado", "Estado")
                        .WithMany("SrvContratos")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_Contratos_ContratosEstados");

                    b.HasOne("login4.Models.EF.SrvContratosCdbo", "IdcdboNavigation")
                        .WithOne("SrvContrato")
                        .HasForeignKey("login4.Models.EF.SrvContrato", "Idcdbo")
                        .HasConstraintName("FK_SRV_Contratos_Contratos_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("SrvContratos")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_SRV_Contratos_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("SrvContratos")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_SRV_Contratos_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("SrvContratos")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_SRV_Contratos_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("SrvContratos")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_Contratos_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("SrvContratos")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_SRV_Contratos_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("SrvContratos")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_Contratos_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("SrvContratos")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_SRV_Contratos_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.SrvContrato", "Cabecera")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SRV_ContratosDetalle_Contratos");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "DireccionInstalacion")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("DireccionInstalacionId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.SrvContratosEstado", "Estado")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_ContratosDetalle_SRV_ContratosEstados");

                    b.HasOne("login4.Models.EF.SrvContratosDetalleCdbo", "IdcdboNavigation")
                        .WithOne("SrvContratosDetalle")
                        .HasForeignKey("login4.Models.EF.SrvContratosDetalle", "Idcdbo")
                        .HasConstraintName("FK_SRV_ContratosDetalle_ContratosDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.SrvContratosDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_ContratosDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_ContratosDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_ContratosDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("SrvContratosDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_ContratosDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("SrvContratosDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("SrvContratosDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("SrvContratosDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("SrvContratosDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("DireccionInstalacion");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosPlanificacion", b =>
                {
                    b.HasOne("login4.Models.EF.SrvContrato", "Cabecera")
                        .WithMany("SrvContratosPlanificacions")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_ContratosPlanificacion_SRV_Contratos");

                    b.Navigation("Cabecera");
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.SrvPresupuestosVentum", "Cabecera")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_PresupuestosVenta");

                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.ConceptosRetencion", "ConceptoRetencion")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("ConceptoRetencionId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_ConceptosRetencion");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "DireccionInstalacion")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("DireccionInstalacionId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.SrvPresupuestosVentaEstado", "Estado")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_SRV_PresupuestosVentaEstados");

                    b.HasOne("login4.Models.EF.IvaClase", "IvaClase")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("IvaClaseId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_IvaClases");

                    b.HasOne("login4.Models.EF.IvaTipo", "IvaTipo")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("IvaTipoId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_IVAGrupos");

                    b.HasOne("login4.Models.EF.SrvPresupuestosVentaDetalle", "Linea")
                        .WithMany("InverseLinea")
                        .HasForeignKey("LineaId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_PresupuestosVentaDetalle");

                    b.HasOne("login4.Models.EF.MargenesClafe", "MargenClave")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("MargenClaveId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_MargenesClaves");

                    b.HasOne("login4.Models.EF.MargenesTipo", "MargenTipo")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("MargenTipoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_MargenesTipos");

                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("MedidaId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_Productos");

                    b.HasOne("login4.Models.EF.TiposLinea", "TipoLinea")
                        .WithMany("SrvPresupuestosVentaDetalles")
                        .HasForeignKey("TipoLineaId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_TiposLinea");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("SrvPresupuestosVentaDetalleUnidadMedida")
                        .HasForeignKey("UnidadMedidaId")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteXNavigation")
                        .WithMany("SrvPresupuestosVentaDetalleUnidadMedidaIdCorteXNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteX")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_X");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteYNavigation")
                        .WithMany("SrvPresupuestosVentaDetalleUnidadMedidaIdCorteYNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteY")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_Y");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedidaIdCorteZNavigation")
                        .WithMany("SrvPresupuestosVentaDetalleUnidadMedidaIdCorteZNavigations")
                        .HasForeignKey("UnidadMedidaIdCorteZ")
                        .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_Z");

                    b.Navigation("Cabecera");

                    b.Navigation("CentroCoste");

                    b.Navigation("ConceptoRetencion");

                    b.Navigation("DireccionInstalacion");

                    b.Navigation("Estado");

                    b.Navigation("IvaClase");

                    b.Navigation("IvaTipo");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Linea");

                    b.Navigation("MargenClave");

                    b.Navigation("MargenTipo");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("TipoLinea");

                    b.Navigation("UnidadMedida");

                    b.Navigation("UnidadMedidaIdCorteXNavigation");

                    b.Navigation("UnidadMedidaIdCorteYNavigation");

                    b.Navigation("UnidadMedidaIdCorteZNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentum", b =>
                {
                    b.HasOne("login4.Models.EF.CtaCentroCoste", "CentroCoste")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("CentroCosteId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_CTA_CentroCoste");

                    b.HasOne("login4.Models.EF.Comerciale", "Comercial")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Comerciales");

                    b.HasOne("login4.Models.EF.Comisione", "Comision")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("ComisionId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Comisiones");

                    b.HasOne("login4.Models.EF.ClientesContacto", "Contacto")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("ContactoId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_ClientesContactos");

                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.SrvPresupuestosVentaEstado", "Estado")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVenta_PresupuestosVentaEstados");

                    b.HasOne("login4.Models.EF.SrvPresupuestosVentaCdbo", "IdcdboNavigation")
                        .WithOne("SrvPresupuestosVentum")
                        .HasForeignKey("login4.Models.EF.SrvPresupuestosVentum", "Idcdbo")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_PresupuestosVenta_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_IVAGrupos");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("MedioId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_MediosPago");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Clientes");

                    b.HasOne("login4.Models.EF.Proyecto", "Proyecto")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("ProyectoId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Proyectos");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("SerieId")
                        .IsRequired()
                        .HasConstraintName("FK_SRV_PresupuestosVenta_Series");

                    b.HasOne("login4.Models.EF.AgenciasTransporteTarifa", "AgenciasTransporteTarifa")
                        .WithMany("SrvPresupuestosVenta")
                        .HasForeignKey("TarifaAgenciaId", "AgenciaId")
                        .HasPrincipalKey("IdtarifaAgencia", "AgenciaId")
                        .HasConstraintName("FK_SRV_PresupuestosVenta_AgenciasTransporteTarifas");

                    b.Navigation("AgenciasTransporteTarifa");

                    b.Navigation("CentroCoste");

                    b.Navigation("Comercial");

                    b.Navigation("Comision");

                    b.Navigation("Contacto");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Medio");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Proyecto");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("login4.Models.EF.SyncConnection", b =>
                {
                    b.HasOne("login4.Models.EF.SyncTipo", "Tipo")
                        .WithMany("SyncConnections")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_sync_Connections_sync_Tipos");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("login4.Models.EF.SyncSynchronization", b =>
                {
                    b.HasOne("login4.Models.EF.SyncConnection", "Connection")
                        .WithMany("SyncSynchronizations")
                        .HasForeignKey("ConnectionId")
                        .IsRequired()
                        .HasConstraintName("FK_sync_Synchronizations_sync_Connections");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("login4.Models.EF.SyncSynchronizedRecord", b =>
                {
                    b.HasOne("login4.Models.EF.SyncConnection", "Connection")
                        .WithMany("SyncSynchronizedRecords")
                        .HasForeignKey("ConnectionId")
                        .IsRequired()
                        .HasConstraintName("FK_sync_SynchronizedRecords_sync_Connections");

                    b.HasOne("login4.Models.EF.GsEntidade", "Entidad")
                        .WithMany("SyncSynchronizedRecords")
                        .HasForeignKey("EntidadId")
                        .IsRequired()
                        .HasConstraintName("FK_sync_SynchronizedRecords_GS_Entidades");

                    b.Navigation("Connection");

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("login4.Models.EF.Tarea", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "EmpleadoAsignado")
                        .WithMany("TareaEmpleadoAsignados")
                        .HasForeignKey("EmpleadoAsignadoId")
                        .HasConstraintName("FK_Tareas_Empleados_Assigned");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("TareaEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Tareas_Empleados_Owner");

                    b.HasOne("login4.Models.EF.TskTareasEstado", "Estado")
                        .WithMany("Tareas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Tareas_TSK_TareasEstados");

                    b.HasOne("login4.Models.EF.TskTareasOrigene", "Origen")
                        .WithMany("Tareas")
                        .HasForeignKey("OrigenId")
                        .IsRequired()
                        .HasConstraintName("FK_Tareas_TSK_TareasOrigenes");

                    b.HasOne("login4.Models.EF.TskTareasPrioridade", "Prioridad")
                        .WithMany("Tareas")
                        .HasForeignKey("PrioridadId")
                        .IsRequired()
                        .HasConstraintName("FK_Tareas_TSK_TareasPrioridades");

                    b.HasOne("login4.Models.EF.TskTareasClase", "TipoClase")
                        .WithMany("Tareas")
                        .HasForeignKey("TipoClaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tareas_TSK_TareasClases");

                    b.HasOne("login4.Models.EF.TskTareasMantenimientoTipo", "Tipo")
                        .WithMany("Tareas")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_Tareas_TSK_TareasMantenimientoTipos");

                    b.Navigation("Empleado");

                    b.Navigation("EmpleadoAsignado");

                    b.Navigation("Estado");

                    b.Navigation("Origen");

                    b.Navigation("Prioridad");

                    b.Navigation("Tipo");

                    b.Navigation("TipoClase");
                });

            modelBuilder.Entity("login4.Models.EF.TarifasDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("TarifasDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_TarifasDetalle_Productos");

                    b.HasOne("login4.Models.EF.Tarifa", "Tarifa")
                        .WithMany("TarifasDetalles")
                        .HasForeignKey("TarifaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TarifasDetalle_Tarifas");

                    b.Navigation("Producto");

                    b.Navigation("Tarifa");
                });

            modelBuilder.Entity("login4.Models.EF.TesoreriaApunte", b =>
                {
                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "CuentaEmpresa")
                        .WithMany("TesoreriaApuntes")
                        .HasForeignKey("CuentaEmpresaId")
                        .IsRequired()
                        .HasConstraintName("FK_TesoreriaApunte_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.TesoreriaApunteTipo", "TipoNavigation")
                        .WithMany("TesoreriaApuntes")
                        .HasForeignKey("TipoId")
                        .IsRequired()
                        .HasConstraintName("FK_TesoreriaApunte_TesoreriaApunteTipo");

                    b.Navigation("CuentaEmpresa");

                    b.Navigation("TipoNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.TesoreriaSaldosFecha", b =>
                {
                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "CuentaEmpresa")
                        .WithMany("TesoreriaSaldosFechas")
                        .HasForeignKey("CuentaEmpresaId")
                        .IsRequired()
                        .HasConstraintName("FK_TesoreriaSaldosFecha_EmpresasCuentasBancarias");

                    b.Navigation("CuentaEmpresa");
                });

            modelBuilder.Entity("login4.Models.EF.Tpv", b =>
                {
                    b.HasOne("login4.Models.EF.AlmacenesUbicacione", "AlmacenesUbicacione")
                        .WithMany("Tpvs")
                        .HasForeignKey("UbicacionIdDef", "AlmacenIdDef")
                        .HasPrincipalKey("Idubicacion", "AlmacenId")
                        .HasConstraintName("FK_TPV_AlmacenesUbicaciones");

                    b.Navigation("AlmacenesUbicacione");
                });

            modelBuilder.Entity("login4.Models.EF.Tpvcambio", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Tpvcambios")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_TPVCambios_Empleados");

                    b.HasOne("login4.Models.EF.Tpv", "Tpv")
                        .WithMany("Tpvcambios")
                        .HasForeignKey("Tpvid")
                        .IsRequired()
                        .HasConstraintName("FK_TPVCambios_TPV");

                    b.Navigation("Empleado");

                    b.Navigation("Tpv");
                });

            modelBuilder.Entity("login4.Models.EF.TpvmovimientosCaja", b =>
                {
                    b.HasOne("login4.Models.EF.Tpvticket", "Cabecera")
                        .WithMany("TpvmovimientosCajas")
                        .HasForeignKey("CabeceraId")
                        .IsRequired()
                        .HasConstraintName("FK_TPVMovimientosCaja_TPVTickets");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("TpvmovimientosCajas")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_TPVMovimientosCaja_Empleados");

                    b.HasOne("login4.Models.EF.Tpv", "Tpv")
                        .WithMany("TpvmovimientosCajas")
                        .HasForeignKey("Tpvid")
                        .IsRequired()
                        .HasConstraintName("FK_TPVMovimientosCaja_TPV");

                    b.Navigation("Cabecera");

                    b.Navigation("Empleado");

                    b.Navigation("Tpv");
                });

            modelBuilder.Entity("login4.Models.EF.TpvpagosPorCaja", b =>
                {
                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("TpvpagosPorCajas")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired()
                        .HasConstraintName("FK_TPVPagosPorCaja_Empleados");

                    b.HasOne("login4.Models.EF.Tpv", "Tpv")
                        .WithMany("TpvpagosPorCajas")
                        .HasForeignKey("Tpvid")
                        .IsRequired()
                        .HasConstraintName("FK_TPVPagosPorCaja_TPV");

                    b.Navigation("Empleado");

                    b.Navigation("Tpv");
                });

            modelBuilder.Entity("login4.Models.EF.Tpvticket", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_TPVTickets_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_TPVTickets_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_TPVTickets_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.TpvticketsEstado", "Estado")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("FK_TPVTickets_TPVTicketsEstados");

                    b.HasOne("login4.Models.EF.TpvticketsCdbo", "IdcdboNavigation")
                        .WithOne("Tpvticket")
                        .HasForeignKey("login4.Models.EF.Tpvticket", "Idcdbo")
                        .HasConstraintName("FK_TPVTickets_TPVTickets_CDBO");

                    b.HasOne("login4.Models.EF.Ivagrupo", "Ivagrupo")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("IvagrupoId")
                        .HasConstraintName("FK_TPVTickets_IVAGrupos");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionEntrega")
                        .WithMany("TpvticketPersonaDireccionEntregas")
                        .HasForeignKey("PersonaDireccionEntregaId")
                        .HasConstraintName("FK_TPVTickets_ClientesDirecciones1");

                    b.HasOne("login4.Models.EF.ClientesDireccione", "PersonaDireccionFactura")
                        .WithMany("TpvticketPersonaDireccionFacturas")
                        .HasForeignKey("PersonaDireccionFacturaId")
                        .HasConstraintName("FK_TPVTickets_ClientesDirecciones");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_TPVTickets_Clientes");

                    b.HasOne("login4.Models.EF.Series", "Serie")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("SerieId")
                        .HasConstraintName("FK_TPVTickets_Series");

                    b.HasOne("login4.Models.EF.Tarifa", "Tarifa")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("TarifaId")
                        .HasConstraintName("FK_TPVTickets_Tarifas");

                    b.HasOne("login4.Models.EF.Tpv", "Tpv")
                        .WithMany("Tpvtickets")
                        .HasForeignKey("Tpvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TPVTickets_TPV");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivagrupo");

                    b.Navigation("Persona");

                    b.Navigation("PersonaDireccionEntrega");

                    b.Navigation("PersonaDireccionFactura");

                    b.Navigation("Serie");

                    b.Navigation("Tarifa");

                    b.Navigation("Tpv");
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Tpvticket", "Cabecera")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TPVTicketsDetalle_TPVTickets");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_TPVTicketsDetalle_Empleados");

                    b.HasOne("login4.Models.EF.TpvticketsEstado", "Estado")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("FK_TPVTicketsDetalle_TPVTicketsEstados");

                    b.HasOne("login4.Models.EF.TpvticketsDetalleCdbo", "IdcdboNavigation")
                        .WithOne("TpvticketsDetalle")
                        .HasForeignKey("login4.Models.EF.TpvticketsDetalle", "Idcdbo")
                        .HasConstraintName("FK_TPVTicketsDetalle_TPVTicketsDetalle_CDBO");

                    b.HasOne("login4.Models.EF.IvaTipo", "Ivatipo")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("IvatipoId")
                        .HasConstraintName("FK_TPVTicketsDetalle_IvaTipos");

                    b.HasOne("login4.Models.EF.Lote", "Lote")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_TPVTicketsDetalle_Lotes");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_TPVTicketsDetalle_Productos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadesMedidum")
                        .WithMany("TpvticketsDetalles")
                        .HasForeignKey("UnidadMedidaId", "MedidaId")
                        .HasPrincipalKey("IdunidadMedida", "MedidaId")
                        .HasConstraintName("FK_TPVTicketsDetalle_UnidadesMedida");

                    b.Navigation("Cabecera");

                    b.Navigation("Empleado");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ivatipo");

                    b.Navigation("Lote");

                    b.Navigation("Producto");

                    b.Navigation("UnidadesMedidum");
                });

            modelBuilder.Entity("login4.Models.EF.TskTarea", b =>
                {
                    b.HasOne("login4.Models.EF.TskTareasEstado", "Estado")
                        .WithMany("TskTareas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_TSK_Tareas_TSK_TareasEstados");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasTipoMantenimiento", b =>
                {
                    b.HasOne("login4.Models.EF.TskTarea", "Tarea")
                        .WithOne("TskTareasTipoMantenimiento")
                        .HasForeignKey("login4.Models.EF.TskTareasTipoMantenimiento", "TareaId")
                        .IsRequired()
                        .HasConstraintName("FK_TSK_TareasTipo_Mantenimiento_TSK_Tareas");

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesMedidum", b =>
                {
                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("UnidadesMedida")
                        .HasForeignKey("MedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesMedida_Medidas");

                    b.Navigation("Medida");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesProducto", b =>
                {
                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("UnidadesProductos")
                        .HasForeignKey("MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesProducto_Medidas");

                    b.HasOne("login4.Models.EF.Producto", "Producto")
                        .WithMany("UnidadesProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesProducto_Productos");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("UnidadesProductos")
                        .HasForeignKey("UnidadMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesProducto_UnidadesMedida");

                    b.Navigation("Medida");

                    b.Navigation("Producto");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesProductoBase", b =>
                {
                    b.HasOne("login4.Models.EF.Medida", "Medida")
                        .WithMany("UnidadesProductoBases")
                        .HasForeignKey("MedidaId")
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesProductoBase_Medidas");

                    b.HasOne("login4.Models.EF.ProductosBase", "ProductoBase")
                        .WithMany("UnidadesProductoBases")
                        .HasForeignKey("ProductoBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesProductoBase_ProductosBase");

                    b.HasOne("login4.Models.EF.UnidadesMedidum", "UnidadMedida")
                        .WithMany("UnidadesProductoBases")
                        .HasForeignKey("UnidadMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnidadesProductoBase_UnidadesMedida");

                    b.Navigation("Medida");

                    b.Navigation("ProductoBase");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("login4.Models.EF.Vale", b =>
                {
                    b.HasOne("login4.Models.EF.Ejercicio", "Ejercicio")
                        .WithMany("Vales")
                        .HasForeignKey("EjercicioId")
                        .HasConstraintName("FK_Vales_Ejercicios");

                    b.HasOne("login4.Models.EF.Empleado", "Empleado")
                        .WithMany("Vales")
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_Vales_Empleados");

                    b.HasOne("login4.Models.EF.ConfiguracionEmpresa", "Empresa")
                        .WithMany("Vales")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Vales_ConfiguracionEmpresa");

                    b.HasOne("login4.Models.EF.ValesEstado", "Estado")
                        .WithMany("Vales")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK_Vales_ValesEstados");

                    b.HasOne("login4.Models.EF.ValesCdbo", "IdcdboNavigation")
                        .WithOne("Vale")
                        .HasForeignKey("login4.Models.EF.Vale", "Idcdbo")
                        .HasConstraintName("FK_Vales_Vales_CDBO");

                    b.HasOne("login4.Models.EF.CrmLiquidacione", "Liquidacion")
                        .WithMany("Vales")
                        .HasForeignKey("LiquidacionId")
                        .HasConstraintName("FK_Vales_CRM_Liquidaciones");

                    b.HasOne("login4.Models.EF.ValesOrigene", "Origen")
                        .WithMany("Vales")
                        .HasForeignKey("OrigenId")
                        .IsRequired()
                        .HasConstraintName("FK_Vales_ValesOrigenes");

                    b.HasOne("login4.Models.EF.Cliente", "Persona")
                        .WithMany("Vales")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_Vales_Clientes");

                    b.HasOne("login4.Models.EF.Producto", "ProductoObsequio")
                        .WithMany("Vales")
                        .HasForeignKey("ProductoObsequioId")
                        .HasConstraintName("FK_Vales_Productos");

                    b.HasOne("login4.Models.EF.Tpvticket", "Ticket")
                        .WithMany("Vales")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_Vales_TPVTickets");

                    b.Navigation("Ejercicio");

                    b.Navigation("Empleado");

                    b.Navigation("Empresa");

                    b.Navigation("Estado");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Liquidacion");

                    b.Navigation("Origen");

                    b.Navigation("Persona");

                    b.Navigation("ProductoObsequio");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("login4.Models.EF.ValesDetalle", b =>
                {
                    b.HasOne("login4.Models.EF.Vale", "Cabecera")
                        .WithMany("ValesDetalles")
                        .HasForeignKey("CabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ValesDetalle_Vales");

                    b.HasOne("login4.Models.EF.ValesDetalleCdbo", "IdcdboNavigation")
                        .WithOne("ValesDetalle")
                        .HasForeignKey("login4.Models.EF.ValesDetalle", "Idcdbo")
                        .HasConstraintName("FK_ValesDetalle_ValesDetalle_CDBO");

                    b.HasOne("login4.Models.EF.Tpvticket", "Ticket")
                        .WithMany("ValesDetalles")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_ValesDetalle_TPVTickets");

                    b.Navigation("Cabecera");

                    b.Navigation("IdcdboNavigation");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("login4.Models.EF.ValoresProducto", b =>
                {
                    b.HasOne("login4.Models.EF.AtributosProducto", "AtributoProducto")
                        .WithMany("ValoresProductos")
                        .HasForeignKey("AtributoProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ValoresProductos_AtributosProductos");

                    b.HasOne("login4.Models.EF.ValoresProducto", "ValorProducto")
                        .WithMany("InverseValorProducto")
                        .HasForeignKey("ValorProductoId")
                        .HasConstraintName("FK_ValoresProductos_ValoresProductos");

                    b.Navigation("AtributoProducto");

                    b.Navigation("ValorProducto");
                });

            modelBuilder.Entity("login4.Models.EF.Vencimiento", b =>
                {
                    b.HasOne("login4.Models.EF.FormasPago", "FormaPago")
                        .WithMany("Vencimientos")
                        .HasForeignKey("FormaPagoId")
                        .IsRequired()
                        .HasConstraintName("FK_Vencimientos_FormasPago");

                    b.Navigation("FormaPago");
                });

            modelBuilder.Entity("login4.Models.EF.VencimientosCompra", b =>
                {
                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "CuentaEmpresa")
                        .WithMany("VencimientosCompras")
                        .HasForeignKey("CuentaEmpresaId")
                        .HasConstraintName("FK_VencimientosCompra_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.FacturasCompra", "Factura")
                        .WithMany("VencimientosCompras")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VencimientosCompra_FacturasCompra");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("VencimientosCompras")
                        .HasForeignKey("MedioId")
                        .IsRequired()
                        .HasConstraintName("FK_VencimientosCompra_MediosPago");

                    b.HasOne("login4.Models.EF.RemesasCompra", "Remesa")
                        .WithMany("VencimientosCompras")
                        .HasForeignKey("RemesaId")
                        .HasConstraintName("FK_VencimientosCompra_RemesasCompra");

                    b.Navigation("CuentaEmpresa");

                    b.Navigation("Factura");

                    b.Navigation("Medio");

                    b.Navigation("Remesa");
                });

            modelBuilder.Entity("login4.Models.EF.VencimientosVentum", b =>
                {
                    b.HasOne("login4.Models.EF.EmpresasCuentasBancaria", "CuentaEmpresa")
                        .WithMany("VencimientosVenta")
                        .HasForeignKey("CuentaEmpresaId")
                        .HasConstraintName("FK_VencimientosVenta_EmpresasCuentasBancarias");

                    b.HasOne("login4.Models.EF.FacturasVentum", "Factura")
                        .WithMany("VencimientosVenta")
                        .HasForeignKey("FacturaId")
                        .IsRequired()
                        .HasConstraintName("FK_VencimientosVenta_FacturasVenta");

                    b.HasOne("login4.Models.EF.MediosPago", "Medio")
                        .WithMany("VencimientosVenta")
                        .HasForeignKey("MedioId")
                        .IsRequired()
                        .HasConstraintName("FK_VencimientosVenta_MediosPago");

                    b.HasOne("login4.Models.EF.RemesasVentum", "Remesa")
                        .WithMany("VencimientosVenta")
                        .HasForeignKey("RemesaId")
                        .HasConstraintName("FK_VencimientosVenta_Remesas");

                    b.Navigation("CuentaEmpresa");

                    b.Navigation("Factura");

                    b.Navigation("Medio");

                    b.Navigation("Remesa");
                });

            modelBuilder.Entity("login4.Models.EF.AeatM340", b =>
                {
                    b.Navigation("AeatM340Detalles");
                });

            modelBuilder.Entity("login4.Models.EF.AgenciasTransporteTarifa", b =>
                {
                    b.Navigation("AgenciasTransporteTarifasDetalles");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("Expediciones");

                    b.Navigation("FacturasVenta");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompra", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraCdbo", b =>
                {
                    b.Navigation("AlbaranesCompra");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraDetalleCdbo", b =>
                {
                    b.Navigation("AlbaranesCompraDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesCompraEstado", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesCompras");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaCdbo", b =>
                {
                    b.Navigation("AlbaranesVentum");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaDetalle", b =>
                {
                    b.Navigation("Certificaciones");

                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaDetalleCdbo", b =>
                {
                    b.Navigation("AlbaranesVentaDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentaEstado", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlbaranesVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.AlbaranesVentum", b =>
                {
                    b.Navigation("AlbaranesVentaAnticipos");

                    b.Navigation("AlbaranesVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Almacene", b =>
                {
                    b.Navigation("AlmacenesUbicaciones");

                    b.Navigation("BienesAmortizables");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("MovimientosAlmacenDetalles");

                    b.Navigation("MovimientosAlmacenSaldos");

                    b.Navigation("Partes");

                    b.Navigation("RegularizacionesAlmacens");

                    b.Navigation("ReservasStockDetalleAlmacenReservas");

                    b.Navigation("ReservasStockDetalleAlmacens");
                });

            modelBuilder.Entity("login4.Models.EF.AlmacenesUbicacione", b =>
                {
                    b.Navigation("BienesAmortizables");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("InverseUbicacion");

                    b.Navigation("MovimientosAlmacenDetalles");

                    b.Navigation("MovimientosAlmacenSaldos");

                    b.Navigation("Partes");

                    b.Navigation("ProductosAlmacens");

                    b.Navigation("ProductosTipos");

                    b.Navigation("RegularizacionesAlmacens");

                    b.Navigation("ReservasStockDetalleAlmacenesUbicacioneNavigations");

                    b.Navigation("ReservasStockDetalleAlmacenesUbicaciones");

                    b.Navigation("Tpvs");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquilere", b =>
                {
                    b.Navigation("AlqAlquileresDescuentosGenerales");

                    b.Navigation("AlqAlquileresDetallePickings");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqAlquileresPickings");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresCdbo", b =>
                {
                    b.Navigation("AlqAlquilere");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresDetalleCdbo", b =>
                {
                    b.Navigation("AlqAlquileresDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresEstado", b =>
                {
                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqAlquileresDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresPicking", b =>
                {
                    b.Navigation("AlqAlquileresDetallePickingPickingEntrada");

                    b.Navigation("AlqAlquileresDetallePickingPickingSalida");
                });

            modelBuilder.Entity("login4.Models.EF.AlqAlquileresPickingTipo", b =>
                {
                    b.Navigation("AlqAlquileresPickings");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuesto", b =>
                {
                    b.Navigation("AlqPresupuestosDescuentosGenerales");

                    b.Navigation("AlqPresupuestosDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosCdbo", b =>
                {
                    b.Navigation("AlqPresupuesto");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosDetalleCdbo", b =>
                {
                    b.Navigation("AlqPresupuestosDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.AlqPresupuestosEstado", b =>
                {
                    b.Navigation("AlqPresupuestos");

                    b.Navigation("AlqPresupuestosDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Asiento", b =>
                {
                    b.Navigation("AsientosDiarios");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosProducto", b =>
                {
                    b.Navigation("AtributosCatalogos");

                    b.Navigation("CualificacionesAtributo");

                    b.Navigation("InverseAtributoProducto");

                    b.Navigation("OperacionesAtributo");

                    b.Navigation("ProductosAtribsValores");

                    b.Navigation("ValoresProductos");
                });

            modelBuilder.Entity("login4.Models.EF.AtributosTipo", b =>
                {
                    b.Navigation("AtributosProductos");
                });

            modelBuilder.Entity("login4.Models.EF.AutofacturasEstado", b =>
                {
                    b.Navigation("Autofacturas");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesBajaCausa", b =>
                {
                    b.Navigation("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesCategoria", b =>
                {
                    b.Navigation("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesEstado", b =>
                {
                    b.Navigation("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesNaturaleza", b =>
                {
                    b.Navigation("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.BienesAmortizablesTipo", b =>
                {
                    b.Navigation("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.Bo", b =>
                {
                    b.Navigation("BoCuenta");

                    b.Navigation("InverseBoNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.Calendario", b =>
                {
                    b.Navigation("CalendariosEjercicios");

                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosDia", b =>
                {
                    b.Navigation("CalendarioDiasEmpleados");
                });

            modelBuilder.Entity("login4.Models.EF.CalendariosEjercicio", b =>
                {
                    b.Navigation("CalendariosDia");

                    b.Navigation("CalendariosPlanSemanalDef");

                    b.Navigation("CalendariosTurnosDefs");
                });

            modelBuilder.Entity("login4.Models.EF.CarneConducirTipo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("login4.Models.EF.CatalogosAtributo", b =>
                {
                    b.Navigation("AtributosCatalogos");

                    b.Navigation("Familia");
                });

            modelBuilder.Entity("login4.Models.EF.CdbpProcess", b =>
                {
                    b.Navigation("CdbpSteps");
                });

            modelBuilder.Entity("login4.Models.EF.CentrosTipo", b =>
                {
                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.CentrosTrabajo", b =>
                {
                    b.Navigation("Almacenes");

                    b.Navigation("FasesCentros");

                    b.Navigation("Opes");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.Cliente", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlbaranesVentaAnticipos");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("ClientesCentrosAdministrativos");

                    b.Navigation("ClientesContactos");

                    b.Navigation("ClientesCuentasBancaria");

                    b.Navigation("ClientesDatosDinamicos");

                    b.Navigation("ClientesDescuentos");

                    b.Navigation("ClientesDescuentosRoots");

                    b.Navigation("ClientesDiasPagos");

                    b.Navigation("ClientesDirecciones");

                    b.Navigation("ClientesMandatos");

                    b.Navigation("ClientesPeriodosExentosPagos");

                    b.Navigation("ClientesTelefonos");

                    b.Navigation("CrmAcciones");

                    b.Navigation("CrmCampanyasDestinatarios");

                    b.Navigation("CrmClientesPunto");

                    b.Navigation("CrmClientesSegmentos");

                    b.Navigation("CrmLiquidaciones");

                    b.Navigation("CrmOportunidades");

                    b.Navigation("CrmTarjetasFidelizacions");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("FacturasVenta");

                    b.Navigation("IsoEncuesta");

                    b.Navigation("LabOas");

                    b.Navigation("Lotes");

                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("Proyectos");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("Tpvtickets");

                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesContacto", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("CrmAcciones");

                    b.Navigation("CrmCampanyasDestinatarios");

                    b.Navigation("CrmClientesSegmentos");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("FacturasVenta");

                    b.Navigation("LabBoletines");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesContactosTipo", b =>
                {
                    b.Navigation("ClientesContactos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesCuentasBancaria", b =>
                {
                    b.Navigation("ClientesMandatos");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDireccione", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("Clientes");

                    b.Navigation("ClientesContactoClientesDirecciones");

                    b.Navigation("ClientesContactoPersonaDireccions");

                    b.Navigation("ClientesTelefonos");

                    b.Navigation("CrmAcciones");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("SrvPresupuestosVentaDetalles");

                    b.Navigation("TpvticketPersonaDireccionEntregas");

                    b.Navigation("TpvticketPersonaDireccionFacturas");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesDireccionesCdbo", b =>
                {
                    b.Navigation("ClientesDirecciones");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesRole", b =>
                {
                    b.Navigation("Clientesroleclaims");
                });

            modelBuilder.Entity("login4.Models.EF.ClientesUser", b =>
                {
                    b.Navigation("ClientesUserClaims");

                    b.Navigation("ClientesUserLogins");

                    b.Navigation("ClientesUsertokens");
                });

            modelBuilder.Entity("login4.Models.EF.Comarca", b =>
                {
                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("login4.Models.EF.Comerciale", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("CrmAcciones");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("FacturasVenta");

                    b.Navigation("InverseComercial");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.ComercialesTipo", b =>
                {
                    b.Navigation("Comerciales");
                });

            modelBuilder.Entity("login4.Models.EF.Comisione", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("ComercialeComisionResponsables");

                    b.Navigation("ComercialeComisions");

                    b.Navigation("ComisionesDetalles");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("FacturasVenta");

                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.ComisionesOperacione", b =>
                {
                    b.Navigation("ComisionesDetalles");

                    b.Navigation("LiquidacionesComercialDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.ConceptosRetencion", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("Clientes");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("OpesDetalles");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("Productos");

                    b.Navigation("Proveedores");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.ConfiguracionEmpresa", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("Autofacturas");

                    b.Navigation("ConfiguracionEmpresaCta");

                    b.Navigation("CrmAcciones");

                    b.Navigation("CrmCampanyas");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("EmpresasCuentasBancaria");

                    b.Navigation("EmpresasDiasPagos");

                    b.Navigation("EmpresasEmailCuenta");

                    b.Navigation("EmpresasPeriodosExentosPagos");

                    b.Navigation("Expediciones");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("LabBoletines");

                    b.Navigation("LabOas");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Opes");

                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasExplosiones");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("Proyectos");

                    b.Navigation("RrhhPrimasLiquidacions");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("Tpvtickets");

                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccione", b =>
                {
                    b.Navigation("InverseCabeceraOrigen");

                    b.Navigation("InverseCabeceraRecurrence");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesCdbo", b =>
                {
                    b.Navigation("CrmAccione");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesEstado", b =>
                {
                    b.Navigation("CrmAcciones");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesIniciativa", b =>
                {
                    b.Navigation("CrmAcciones");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesMedio", b =>
                {
                    b.Navigation("CrmAcciones");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesResultado", b =>
                {
                    b.Navigation("CrmAcciones");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesTipo", b =>
                {
                    b.Navigation("CrmAcciones");
                });

            modelBuilder.Entity("login4.Models.EF.CrmAccionesTiposGenerico", b =>
                {
                    b.Navigation("CrmAccionesTipos");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanya", b =>
                {
                    b.Navigation("CrmCampanyasCriterios");

                    b.Navigation("CrmCampanyasDestinatarios");

                    b.Navigation("CrmCampanyasDetalles");

                    b.Navigation("CrmCampanyasDocumentos");

                    b.Navigation("CrmCampanyasSeguimientos");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasCdbo", b =>
                {
                    b.Navigation("CrmCampanya");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDestinatario", b =>
                {
                    b.Navigation("CrmCampanyasSeguimientos");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDetalleCdbo", b =>
                {
                    b.Navigation("CrmCampanyasDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasDocumento", b =>
                {
                    b.Navigation("CrmCampanyasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasEstado", b =>
                {
                    b.Navigation("CrmCampanyas");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCampanyasTipo", b =>
                {
                    b.Navigation("CrmCampanyas");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCamposCriterio", b =>
                {
                    b.Navigation("CrmCampanyasCriterios");
                });

            modelBuilder.Entity("login4.Models.EF.CrmCanje", b =>
                {
                    b.Navigation("CrmCanjesDetalles");

                    b.Navigation("CrmLiquidaciones");
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPunto", b =>
                {
                    b.Navigation("CrmClientesPuntosCabeceras");
                });

            modelBuilder.Entity("login4.Models.EF.CrmClientesPuntosCabecera", b =>
                {
                    b.Navigation("CrmClientesPuntosDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.CrmDocumentosTipo", b =>
                {
                    b.Navigation("CrmCampanyasDocumentos");
                });

            modelBuilder.Entity("login4.Models.EF.CrmLiquidacione", b =>
                {
                    b.Navigation("CrmClientesPuntosCabeceras");

                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.CrmOportunidadesEstado", b =>
                {
                    b.Navigation("CrmOportunidades");
                });

            modelBuilder.Entity("login4.Models.EF.CrmOportunidadesPrioridade", b =>
                {
                    b.Navigation("CrmOportunidades");
                });

            modelBuilder.Entity("login4.Models.EF.CrmPuntosTabla", b =>
                {
                    b.Navigation("CrmClientesPuntosDetalles");

                    b.Navigation("CrmPuntosTablaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.CrmPuntosTablaDetalle", b =>
                {
                    b.Navigation("CrmClientesPuntosDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.CrmSegmento", b =>
                {
                    b.Navigation("CrmCamposCriterios");

                    b.Navigation("CrmClientesSegmentos");
                });

            modelBuilder.Entity("login4.Models.EF.CtaAeatTerritorio", b =>
                {
                    b.Navigation("ConfiguracionEmpresaCta");
                });

            modelBuilder.Entity("login4.Models.EF.CtaAsientosOrigene", b =>
                {
                    b.Navigation("Diarios");
                });

            modelBuilder.Entity("login4.Models.EF.CtaCentroCoste", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("AsientosDiarios");

                    b.Navigation("Clientes");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("Diarios");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("Familia");

                    b.Navigation("InverseCentroCoste");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabOasDetalles");

                    b.Navigation("Opes");

                    b.Navigation("OpesDetalles");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("Productos");

                    b.Navigation("ProductosBases");

                    b.Navigation("Proveedores");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Cualificacione", b =>
                {
                    b.Navigation("CentrosTrabajos");

                    b.Navigation("Empleados");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.CualificacionesAtributo", b =>
                {
                    b.Navigation("Cualificaciones");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamico", b =>
                {
                    b.Navigation("DatosDinamicosGsEntidadesDefs");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamicosGsEntidade", b =>
                {
                    b.Navigation("DatosDinamicosGsEntidadesDefs");
                });

            modelBuilder.Entity("login4.Models.EF.DatosDinamicosGsEntidadesDef", b =>
                {
                    b.Navigation("ClientesDatosDinamicos");

                    b.Navigation("FamiliasDatosDinamicos");

                    b.Navigation("OrdenesFabricacionDatosDinamicos");

                    b.Navigation("OrdenesSeriadasDatosDinamicos");

                    b.Navigation("PedidosVentaDatosDinamicos");

                    b.Navigation("ProductosConjuntosDatosDinamicos");

                    b.Navigation("ProductosDatosDinamicos");

                    b.Navigation("ProyectosDatosDinamicos");
                });

            modelBuilder.Entity("login4.Models.EF.Departamento", b =>
                {
                    b.Navigation("CtaCentroCostes");

                    b.Navigation("Empleados");

                    b.Navigation("IsoActividadesPersonals");

                    b.Navigation("IsoCursos");

                    b.Navigation("IsoIncidencia");

                    b.Navigation("IsoIndicadores");

                    b.Navigation("IsoRevisiones");

                    b.Navigation("Maquinas");

                    b.Navigation("Puestos");

                    b.Navigation("Secciones");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaCdbo", b =>
                {
                    b.Navigation("DevolucionesVentum");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaDetalleCdbo", b =>
                {
                    b.Navigation("DevolucionesVentaDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentaEstado", b =>
                {
                    b.Navigation("DevolucionesVenta");

                    b.Navigation("DevolucionesVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.DevolucionesVentum", b =>
                {
                    b.Navigation("DevolucionesVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.DireccionesEntidadesOrigen", b =>
                {
                    b.Navigation("AlbaranesVenta");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("ExpedicionesDetalleDirEntregaEntidadOrigens");

                    b.Navigation("ExpedicionesDetalleDirSalidaEntidadOrigens");
                });

            modelBuilder.Entity("login4.Models.EF.DmnDataSet", b =>
                {
                    b.Navigation("DmnDataSetParameters");
                });

            modelBuilder.Entity("login4.Models.EF.DmnQueryForm", b =>
                {
                    b.Navigation("DmnDataSets");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosAlmacenTipo", b =>
                {
                    b.Navigation("MovimientosAlmacens");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestion", b =>
                {
                    b.Navigation("CrmClientesPuntosCabeceras");

                    b.Navigation("CtaAsientosOrigenes");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionAsientos");

                    b.Navigation("DocumentosGestionDetalleObservaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("DocumentosGestionMargenesClaves");

                    b.Navigation("DocumentosGestionRegistroAlmacenDocumentoGestionDestinos");

                    b.Navigation("DocumentosGestionRegistroAlmacenDocumentoGestionOrigens");

                    b.Navigation("DocumentosGestionTiposLineaTiposLineas");

                    b.Navigation("DocumentosGestionTiposLineas");

                    b.Navigation("DocumentosGestionTraspasoDocumentoGestionDestinos");

                    b.Navigation("DocumentosGestionTraspasoDocumentoGestionOrigens");

                    b.Navigation("DocumentosGestionTraspasosSetupDocumentoGestionDestinos");

                    b.Navigation("DocumentosGestionTraspasosSetupDocumentoGestionOrigens");

                    b.Navigation("ExpedicionesDetalles");

                    b.Navigation("InverseDocumentoGestion");

                    b.Navigation("PropuestasCompras");
                });

            modelBuilder.Entity("login4.Models.EF.DocumentosGestionDestinatario", b =>
                {
                    b.Navigation("DocumentosGestions");

                    b.Navigation("IsoComunicacioneTipoDestDemanda");

                    b.Navigation("IsoComunicacioneTipoDestRespuesta");

                    b.Navigation("IsoIncidencia");

                    b.Navigation("IsoTiposIncidencia");

                    b.Navigation("IsoVencimientos");
                });

            modelBuilder.Entity("login4.Models.EF.Ejercicio", b =>
                {
                    b.Navigation("AeatM303s");

                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("Autofacturas");

                    b.Navigation("BienesAmortizablesDetalles");

                    b.Navigation("CalendariosEjercicios");

                    b.Navigation("CrmAcciones");

                    b.Navigation("CrmCampanyas");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("Diarios");

                    b.Navigation("Expediciones");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("IvaLibroRepercutidos");

                    b.Navigation("IvaLibroSoportados");

                    b.Navigation("LabBoletines");

                    b.Navigation("LabOas");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Opes");

                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasExplosiones");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("Periodos");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("Proyectos");

                    b.Navigation("RemesasCompras");

                    b.Navigation("RemesasVenta");

                    b.Navigation("RrhhPrimasLiquidacions");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("Tpvtickets");

                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.Empleado", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVentumEmpleadoResponsables");

                    b.Navigation("AlbaranesVentumEmpleados");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("Autofacturas");

                    b.Navigation("BienesAmortizables");

                    b.Navigation("CalendarioDiasEmpleados");

                    b.Navigation("Comerciales");

                    b.Navigation("CrmAccioneComercialEmpleados");

                    b.Navigation("CrmAccioneEmpleados");

                    b.Navigation("CrmCampanyas");

                    b.Navigation("CtaCuentasIntercambios");

                    b.Navigation("DevolucionesVentumEmpleadoResponsables");

                    b.Navigation("DevolucionesVentumEmpleados");

                    b.Navigation("EmpleadosDirecciones");

                    b.Navigation("EmpleadosTelefonos");

                    b.Navigation("ExpedicioneEmpleadoResponsables");

                    b.Navigation("ExpedicioneEmpleados");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("FichajesNavigation");

                    b.Navigation("FichajesTareasStandBies");

                    b.Navigation("GsUsrGridsViewsCustomizations");

                    b.Navigation("IsoActividadesPersonals");

                    b.Navigation("IsoDocumentos");

                    b.Navigation("IsoEncuesta");

                    b.Navigation("IsoIncidencia");

                    b.Navigation("IsoIncidenciasDetalles");

                    b.Navigation("IsoIndicadores");

                    b.Navigation("IsoMantenimientos");

                    b.Navigation("IsoProveedores");

                    b.Navigation("IsoRegistros");

                    b.Navigation("LabBoletineEmpleados");

                    b.Navigation("LabBoletineResponsableRecepcions");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabOaEmpleados");

                    b.Navigation("LabOaResponsables");

                    b.Navigation("LabOasLecturas");

                    b.Navigation("LiquidacionesComercialEmpleadoDestinatarios");

                    b.Navigation("LiquidacionesComercialEmpleados");

                    b.Navigation("Opes");

                    b.Navigation("OrdenesFabricacionDetalleEmpleados");

                    b.Navigation("OrdenesFabricacionEmpleadoResponsables");

                    b.Navigation("OrdenesFabricacionEmpleados");

                    b.Navigation("OrdenesSeriadaEmpleadoResponsables");

                    b.Navigation("OrdenesSeriadaEmpleados");

                    b.Navigation("OrdenesSeriadasExplosiones");

                    b.Navigation("Partes");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVentumEmpleadoResponsables");

                    b.Navigation("PedidosVentumEmpleados");

                    b.Navigation("PermisosEmpleados");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVentumEmpleadoResponsables");

                    b.Navigation("PresupuestosVentumEmpleados");

                    b.Navigation("Productos");

                    b.Navigation("ProyectoEmpleadoResponsables");

                    b.Navigation("ProyectoEmpleados");

                    b.Navigation("RrhhPrimasLiquidacionDetalles");

                    b.Navigation("RrhhPrimasLiquidacionEmpleados");

                    b.Navigation("RrhhPrimasLiquidacionPersonas");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("TareaEmpleadoAsignados");

                    b.Navigation("TareaEmpleados");

                    b.Navigation("Tpvcambios");

                    b.Navigation("TpvmovimientosCajas");

                    b.Navigation("TpvpagosPorCajas");

                    b.Navigation("Tpvtickets");

                    b.Navigation("TpvticketsDetalles");

                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosContratosTipo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosDepartamento", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("login4.Models.EF.EmpleadosEstadosCivile", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("login4.Models.EF.EmpresasCuentasBancaria", b =>
                {
                    b.Navigation("AlbaranesVentaAnticipos");

                    b.Navigation("ConfiguracionEmpresaCtumM303Ccbdevolucions");

                    b.Navigation("ConfiguracionEmpresaCtumM303Ccbingresos");

                    b.Navigation("MediosPagos");

                    b.Navigation("RemesasCompras");

                    b.Navigation("RemesasVenta");

                    b.Navigation("TesoreriaApuntes");

                    b.Navigation("TesoreriaSaldosFechas");

                    b.Navigation("VencimientosCompras");

                    b.Navigation("VencimientosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.Entidade", b =>
                {
                    b.Navigation("Agencia");
                });

            modelBuilder.Entity("login4.Models.EF.ExpPaquetesFormato", b =>
                {
                    b.Navigation("ExpedicionesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Expedicione", b =>
                {
                    b.Navigation("ExpedicionesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesCdbo", b =>
                {
                    b.Navigation("Expedicione");
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesDetalleCdbo", b =>
                {
                    b.Navigation("ExpedicionesDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.ExpedicionesEstado", b =>
                {
                    b.Navigation("ExpedicionesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompra", b =>
                {
                    b.Navigation("Autofacturas");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasCompraPies");

                    b.Navigation("VencimientosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraCdbo", b =>
                {
                    b.Navigation("FacturasCompra");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraDetalle", b =>
                {
                    b.Navigation("BienesAmortizables");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraDetalleCdbo", b =>
                {
                    b.Navigation("FacturasCompraDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasCompraEstado", b =>
                {
                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasCompras");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaCdbo", b =>
                {
                    b.Navigation("FacturasVentum");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaDetalle", b =>
                {
                    b.Navigation("Certificaciones");

                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaDetalleCdbo", b =>
                {
                    b.Navigation("FacturasVentaDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentaEstado", b =>
                {
                    b.Navigation("FacturasVenta");

                    b.Navigation("FacturasVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.FacturasVentum", b =>
                {
                    b.Navigation("AlbaranesVentaAnticipos");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("InverseFacturaRectificada");

                    b.Navigation("VencimientosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.Familia", b =>
                {
                    b.Navigation("ClientesDescuentos");

                    b.Navigation("FamiliasDatosDinamicos");

                    b.Navigation("InverseFamiliaNavigation");

                    b.Navigation("Productos");

                    b.Navigation("ProductosBases");

                    b.Navigation("ProveedoresDescuentos");
                });

            modelBuilder.Entity("login4.Models.EF.Fase", b =>
                {
                    b.Navigation("FasesCentros");

                    b.Navigation("InverseFaseNavigation");
                });

            modelBuilder.Entity("login4.Models.EF.FeFormato", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("FacturasVenta");
                });

            modelBuilder.Entity("login4.Models.EF.Fichaje", b =>
                {
                    b.Navigation("FichajesDetalles");

                    b.Navigation("InverseCabecera");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesDetalle", b =>
                {
                    b.Navigation("FichajesPartes");

                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesEstado", b =>
                {
                    b.Navigation("Fichajes");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesParte", b =>
                {
                    b.Navigation("FichajesTareasStandBy");

                    b.Navigation("InverseCabecera");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesPartesEstado", b =>
                {
                    b.Navigation("FichajesPartes");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesSteep", b =>
                {
                    b.Navigation("InverseNextSteep");
                });

            modelBuilder.Entity("login4.Models.EF.FichajesTipo", b =>
                {
                    b.Navigation("FichajesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.FormasPago", b =>
                {
                    b.Navigation("Certificaciones");

                    b.Navigation("FacturacionPlanificacions");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("FormasPagoApis");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Opes");

                    b.Navigation("Proveedores");

                    b.Navigation("Vencimientos");
                });

            modelBuilder.Entity("login4.Models.EF.Formulario", b =>
                {
                    b.Navigation("DmnQueryForms");

                    b.Navigation("DocumentosGestionTiposLineaTiposLineas");

                    b.Navigation("DocumentosGestionTiposLineas");

                    b.Navigation("DocumentosGestions");

                    b.Navigation("GdEntidades");

                    b.Navigation("GsEntidades");

                    b.Navigation("GsGridsViews");

                    b.Navigation("PartesFormularios");

                    b.Navigation("PartesTipos");

                    b.Navigation("PermisosAccioneClassFormIdp1Navigations");

                    b.Navigation("PermisosAccioneClassFormIdp2Navigations");

                    b.Navigation("PermisosAccioneFormularios");

                    b.Navigation("ProductosTipos");
                });

            modelBuilder.Entity("login4.Models.EF.FormulariosCategoria", b =>
                {
                    b.Navigation("Formularios");

                    b.Navigation("InverseCategoria");
                });

            modelBuilder.Entity("login4.Models.EF.GdAplicacione", b =>
                {
                    b.Navigation("GdFormatosArchivos");
                });

            modelBuilder.Entity("login4.Models.EF.GdDocumento", b =>
                {
                    b.Navigation("GdDocumentosEntidades");

                    b.Navigation("InverseDocumento");
                });

            modelBuilder.Entity("login4.Models.EF.GdEntidade", b =>
                {
                    b.Navigation("GdDocumentosEntidades");
                });

            modelBuilder.Entity("login4.Models.EF.GdFormatosArchivo", b =>
                {
                    b.Navigation("CrmCampanyasDocumentos");

                    b.Navigation("GdDocumentos");
                });

            modelBuilder.Entity("login4.Models.EF.GdTipo", b =>
                {
                    b.Navigation("GdDocumentos");
                });

            modelBuilder.Entity("login4.Models.EF.GsEditMasksType", b =>
                {
                    b.Navigation("GsUsrTypes");
                });

            modelBuilder.Entity("login4.Models.EF.GsEntidade", b =>
                {
                    b.Navigation("AeEntidade");

                    b.Navigation("DatosDinamicosGsEntidade");

                    b.Navigation("DireccionesEntidadesOrigens");

                    b.Navigation("DocumentosGestions");

                    b.Navigation("GdEntidade");

                    b.Navigation("GsGridDefinitions");

                    b.Navigation("GsGridsViews");

                    b.Navigation("GsRecordsKeys");

                    b.Navigation("SyncSynchronizedRecords");
                });

            modelBuilder.Entity("login4.Models.EF.GsGridDefinition", b =>
                {
                    b.Navigation("DmnDataSets");

                    b.Navigation("GsGridColumns");

                    b.Navigation("InverseGridDefinition");
                });

            modelBuilder.Entity("login4.Models.EF.GsGridsView", b =>
                {
                    b.Navigation("GsUsrGridsViewsCustomizations");
                });

            modelBuilder.Entity("login4.Models.EF.GsInternalType", b =>
                {
                    b.Navigation("GsUsrTypes");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrComboList", b =>
                {
                    b.Navigation("GsUsrComboListsItems");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrOperator", b =>
                {
                    b.Navigation("DmnDataSetParameters");
                });

            modelBuilder.Entity("login4.Models.EF.GsUsrType", b =>
                {
                    b.Navigation("CdboParametrosAnaliticos");

                    b.Navigation("CrmSegmentos");

                    b.Navigation("DatosDinamicos");

                    b.Navigation("DmnDataSetParameters");

                    b.Navigation("GsUsrComboListItemsUsrTypes");

                    b.Navigation("GsUsrComboListUsrTypes");

                    b.Navigation("LabDatosDinamicos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoActividade", b =>
                {
                    b.Navigation("InverseActividad");

                    b.Navigation("IsoActividadesPersonals");
                });

            modelBuilder.Entity("login4.Models.EF.IsoCalificacionesCompra", b =>
                {
                    b.Navigation("IsoPedidosCompraDetalles");

                    b.Navigation("IsoPedidosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.IsoDocumento", b =>
                {
                    b.Navigation("IsoRegistros");

                    b.Navigation("IsoRequisitos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoEncuesta", b =>
                {
                    b.Navigation("IsoEncuestasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IsoFrecuencia", b =>
                {
                    b.Navigation("IsoCriteriosEficacia");

                    b.Navigation("IsoIndicadores");

                    b.Navigation("IsoMantenimientos");

                    b.Navigation("IsoVencimientos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidencia", b =>
                {
                    b.Navigation("IsoIncidenciasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIncidenciasEstado", b =>
                {
                    b.Navigation("IsoIncidencia");
                });

            modelBuilder.Entity("login4.Models.EF.IsoIndicadore", b =>
                {
                    b.Navigation("IsoIndicadoresDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IsoMantenimiento", b =>
                {
                    b.Navigation("IsoMantenimientosDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IsoPlanesFormacion", b =>
                {
                    b.Navigation("IsoCriteriosEficacia");

                    b.Navigation("IsoCursos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoPregunta", b =>
                {
                    b.Navigation("IsoEncuestasDetalles");

                    b.Navigation("IsoRespuesta");
                });

            modelBuilder.Entity("login4.Models.EF.IsoProceso", b =>
                {
                    b.Navigation("IsoActividades");

                    b.Navigation("IsoIndicadores");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRespuesta", b =>
                {
                    b.Navigation("IsoEncuestasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IsoRevisione", b =>
                {
                    b.Navigation("IsoRevisionesAcuerdos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTendencia", b =>
                {
                    b.Navigation("IsoIndicadores");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposAccione", b =>
                {
                    b.Navigation("IsoIncidenciasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposIncidencia", b =>
                {
                    b.Navigation("IsoIncidencia");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposMantenimiento", b =>
                {
                    b.Navigation("IsoMantenimientos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposNorma", b =>
                {
                    b.Navigation("IsoRequisitos");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposRegistro", b =>
                {
                    b.Navigation("IsoDocumentos");

                    b.Navigation("IsoRegistros");
                });

            modelBuilder.Entity("login4.Models.EF.IsoTiposVencimiento", b =>
                {
                    b.Navigation("IsoVencimientos");
                });

            modelBuilder.Entity("login4.Models.EF.IvaClase", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasCompraPies");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("GastosFacturacions");

                    b.Navigation("IvaTipos");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("OpesDetalles");

                    b.Navigation("OrdenesFabricacionDetalles");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("Productos");

                    b.Navigation("ProductosTipos");

                    b.Navigation("Proveedores");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.IvaLibroTipoClave", b =>
                {
                    b.Navigation("IvaLibroRepercutidos");

                    b.Navigation("IvaLibroSoportados");
                });

            modelBuilder.Entity("login4.Models.EF.IvaTipo", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasCompraPies");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabOasDetalles");

                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("OpesDetalles");

                    b.Navigation("OrdenesFabricacionDetalles");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");

                    b.Navigation("TpvticketsDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Ivagrupo", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("Clientes");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasCompraPies");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("IvaLibroRepercutidos");

                    b.Navigation("IvaLibroSoportados");

                    b.Navigation("LabBoletines");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Opes");

                    b.Navigation("OpesDetalles");

                    b.Navigation("OrdenesFabricacionDetalles");

                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("Proveedores");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("SrvPresupuestosVentaDetalles");

                    b.Navigation("Tpvtickets");
                });

            modelBuilder.Entity("login4.Models.EF.LabAnalisisTipo", b =>
                {
                    b.Navigation("LabBoletinesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletine", b =>
                {
                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabBoletinesPoolDetalles");

                    b.Navigation("LabBoletinesPools");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesCdbo", b =>
                {
                    b.Navigation("LabBoletine");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalle", b =>
                {
                    b.Navigation("InverseLinea");

                    b.Navigation("LabBoletinesDetalleDatosDinamicos");

                    b.Navigation("LabBoletinesPoolDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesDetalleCdbo", b =>
                {
                    b.Navigation("LabBoletinesDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesEstado", b =>
                {
                    b.Navigation("LabBoletines");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabBoletinesPools");
                });

            modelBuilder.Entity("login4.Models.EF.LabBoletinesPool", b =>
                {
                    b.Navigation("LabBoletinesPoolDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.LabDatosDinamico", b =>
                {
                    b.Navigation("LabDatosDinamicosLineasDefs");
                });

            modelBuilder.Entity("login4.Models.EF.LabMatrix", b =>
                {
                    b.Navigation("InverseMatriz");

                    b.Navigation("ProductosCdbos");
                });

            modelBuilder.Entity("login4.Models.EF.LabOa", b =>
                {
                    b.Navigation("LabOasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.LabOasCdbo", b =>
                {
                    b.Navigation("LabOa");
                });

            modelBuilder.Entity("login4.Models.EF.LabOasDetalle", b =>
                {
                    b.Navigation("InverseLinea");

                    b.Navigation("LabOasLecturas");
                });

            modelBuilder.Entity("login4.Models.EF.LabOasEstado", b =>
                {
                    b.Navigation("LabOas");
                });

            modelBuilder.Entity("login4.Models.EF.LabOasLecturasEstado", b =>
                {
                    b.Navigation("LabOasLecturas");
                });

            modelBuilder.Entity("login4.Models.EF.LabPrioridade", b =>
                {
                    b.Navigation("LabBoletines");

                    b.Navigation("LabOas");
                });

            modelBuilder.Entity("login4.Models.EF.LabProcedimientosEnsayo", b =>
                {
                    b.Navigation("LabOasDetalles");

                    b.Navigation("PresupuestosVentaDetalleCdbos");

                    b.Navigation("ProductosCdbos");

                    b.Navigation("ProductosCompuestosCdbos");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercial", b =>
                {
                    b.Navigation("LiquidacionesComercialDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialCdbo", b =>
                {
                    b.Navigation("LiquidacionesComercial");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialDetalleCdbo", b =>
                {
                    b.Navigation("LiquidacionesComercialDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.LiquidacionesComercialEstado", b =>
                {
                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("LiquidacionesComercials");
                });

            modelBuilder.Entity("login4.Models.EF.Localidade", b =>
                {
                    b.Navigation("ClientesDirecciones");

                    b.Navigation("EmpleadosDirecciones");
                });

            modelBuilder.Entity("login4.Models.EF.Lote", b =>
                {
                    b.Navigation("BienesAmortizables");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("LotesTrazaLoteIddestinoNavigations");

                    b.Navigation("LotesTrazaLoteIdorigenNavigations");

                    b.Navigation("MovimientosAlmacenDetalles");

                    b.Navigation("MovimientosAlmacenSaldos");

                    b.Navigation("OpesDetalles");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("Partes");

                    b.Navigation("ProductosAlmacens");

                    b.Navigation("ProductosConjuntosComponentes");

                    b.Navigation("PropuestasCompraDetalles");

                    b.Navigation("Proyectos");

                    b.Navigation("RegularizacionesAlmacens");

                    b.Navigation("ReservasStockDetalles");

                    b.Navigation("TpvticketsDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.LotesCdbo", b =>
                {
                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("login4.Models.EF.LotesEstado", b =>
                {
                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("login4.Models.EF.Maquina", b =>
                {
                    b.Navigation("FichajesPartes");

                    b.Navigation("IsoMantenimientos");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.MaquinasEstado", b =>
                {
                    b.Navigation("Maquinas");
                });

            modelBuilder.Entity("login4.Models.EF.MaquinasGrupo", b =>
                {
                    b.Navigation("Maquinas");
                });

            modelBuilder.Entity("login4.Models.EF.Marca", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("ProductosBases");
                });

            modelBuilder.Entity("login4.Models.EF.MargenesClafe", b =>
                {
                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("DocumentosGestionMargenesClaves");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.MargenesTipo", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabOasDetalles");

                    b.Navigation("OrdenesFabricacionDetalleMargenTipoIdrealNavigations");

                    b.Navigation("OrdenesFabricacionDetalleMargenTipoIdteoricoNavigations");

                    b.Navigation("OrdenesSeriadasDetalleMargenTipoIdrealNavigations");

                    b.Navigation("OrdenesSeriadasDetalleMargenTipoIdteoricoNavigations");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("ProductoMargenCompras");

                    b.Navigation("ProductoMargenTipos");

                    b.Navigation("ProductosBases");

                    b.Navigation("ProductosTipoDefaultMargenCompras");

                    b.Navigation("ProductosTipoMargenTipos");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Medida", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("OpesDetalleMedida");

                    b.Navigation("OpesDetalleMedidaPfs");

                    b.Navigation("OrdenesFabricacionDetalles");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasDetalleMedida");

                    b.Navigation("OrdenesSeriadasDetalleMedidaPfs");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("Productos");

                    b.Navigation("RegularizacionesAlmacens");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");

                    b.Navigation("UnidadesMedida");

                    b.Navigation("UnidadesProductoBases");

                    b.Navigation("UnidadesProductos");
                });

            modelBuilder.Entity("login4.Models.EF.MediosPago", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlbaranesVentaAnticipos");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("Certificaciones");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("FacturacionPlanificacions");

                    b.Navigation("FacturasVenta");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Opes");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("Proveedores");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("VencimientosCompras");

                    b.Navigation("VencimientosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.MediosPagoCargoCuentum", b =>
                {
                    b.Navigation("MediosPagos");
                });

            modelBuilder.Entity("login4.Models.EF.Modelo", b =>
                {
                    b.Navigation("ConfiguracionBloques");
                });

            modelBuilder.Entity("login4.Models.EF.ModulosGestion", b =>
                {
                    b.Navigation("DocumentosGestions");

                    b.Navigation("InverseModuloGestion");

                    b.Navigation("IsoRequisitos");

                    b.Navigation("PermisosCategoria");

                    b.Navigation("ProductosBaseUnidadesModulos");

                    b.Navigation("ProductosUnidadesModulos");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacen", b =>
                {
                    b.Navigation("DocumentosGestionRegistroAlmacens");

                    b.Navigation("MovimientosAlmacenDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenDetalle", b =>
                {
                    b.Navigation("DocumentosGestionRegistroAlmacens");
                });

            modelBuilder.Entity("login4.Models.EF.MovimientosAlmacenTipo", b =>
                {
                    b.Navigation("MovimientosAlmacenDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Ope", b =>
                {
                    b.Navigation("OpesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Operacione", b =>
                {
                    b.Navigation("Fases");

                    b.Navigation("FichajesOrdenesOperacionesLista");

                    b.Navigation("FichajesPartes");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.OperacionesAtributo", b =>
                {
                    b.Navigation("Operaciones");
                });

            modelBuilder.Entity("login4.Models.EF.OpesCdbo", b =>
                {
                    b.Navigation("Ope");
                });

            modelBuilder.Entity("login4.Models.EF.OpesDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.OpesDetalleCdbo", b =>
                {
                    b.Navigation("OpesDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.OpesEstado", b =>
                {
                    b.Navigation("Opes");

                    b.Navigation("OpesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacion", b =>
                {
                    b.Navigation("FichajesPartes");

                    b.Navigation("OpesDetalles");

                    b.Navigation("OrdenesFabricacionDatosDinamicos");

                    b.Navigation("OrdenesFabricacionDetalleEmpleados");

                    b.Navigation("OrdenesFabricacionDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionDetalle", b =>
                {
                    b.Navigation("OrdenesFabricacionDetalleEmpleados");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionEstado", b =>
                {
                    b.Navigation("OrdenesFabricacionDetalles");

                    b.Navigation("OrdenesFabricacions");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionOrigene", b =>
                {
                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionPrioridade", b =>
                {
                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesFabricacionTipo", b =>
                {
                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriada", b =>
                {
                    b.Navigation("FichajesPartes");

                    b.Navigation("OpesDetalles");

                    b.Navigation("OrdenesSeriadasDatosDinamicos");

                    b.Navigation("OrdenesSeriadasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasDetalle", b =>
                {
                    b.Navigation("InverseLinea");

                    b.Navigation("LotesTrazaLineaOsiddestinoNavigations");

                    b.Navigation("LotesTrazaLineaOsidorigenNavigations");

                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasEstado", b =>
                {
                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.OrdenesSeriadasExplosione", b =>
                {
                    b.Navigation("InverseExplosion");

                    b.Navigation("InverseExplosionSession");
                });

            modelBuilder.Entity("login4.Models.EF.Paise", b =>
                {
                    b.Navigation("ClientesDirecciones");

                    b.Navigation("Comarcas");

                    b.Navigation("EmpleadosDirecciones");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("login4.Models.EF.Parte", b =>
                {
                    b.Navigation("FichajesPartes");
                });

            modelBuilder.Entity("login4.Models.EF.PartesCdbo", b =>
                {
                    b.Navigation("Parte");
                });

            modelBuilder.Entity("login4.Models.EF.PartesFormulario", b =>
                {
                    b.Navigation("ProductosConjuntos");
                });

            modelBuilder.Entity("login4.Models.EF.PartesTipo", b =>
                {
                    b.Navigation("Partes");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompra", b =>
                {
                    b.Navigation("IsoPedidosCompra");

                    b.Navigation("PedidosCompraDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraCdbo", b =>
                {
                    b.Navigation("PedidosCompra");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraDetalle", b =>
                {
                    b.Navigation("IsoPedidosCompraDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraDetalleCdbo", b =>
                {
                    b.Navigation("PedidosCompraDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosCompraEstado", b =>
                {
                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaCdbo", b =>
                {
                    b.Navigation("PedidosVentum");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaDetalleCdbo", b =>
                {
                    b.Navigation("PedidosVentaDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentaEstado", b =>
                {
                    b.Navigation("PedidosVenta");

                    b.Navigation("PedidosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.PedidosVentum", b =>
                {
                    b.Navigation("PedidosVentaDatosDinamicos");

                    b.Navigation("PedidosVentaDescuentosGenerales");

                    b.Navigation("PedidosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.PeriodosTipo", b =>
                {
                    b.Navigation("Periodos");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosAccione", b =>
                {
                    b.Navigation("PermisosEmpleados");
                });

            modelBuilder.Entity("login4.Models.EF.PermisosCategoria", b =>
                {
                    b.Navigation("PermisosAcciones");
                });

            modelBuilder.Entity("login4.Models.EF.Pgc", b =>
                {
                    b.Navigation("ConceptosRetencionCtaComprasNavigations");

                    b.Navigation("ConceptosRetencionCtaVentasNavigations");

                    b.Navigation("Diarios");

                    b.Navigation("IvaLibroRepercutidos");

                    b.Navigation("IvaLibroSoportados");
                });

            modelBuilder.Entity("login4.Models.EF.PortesTipo", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("ExpedicionesDetalles");

                    b.Navigation("FacturasCompras");

                    b.Navigation("Opes");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PresupuestosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompra", b =>
                {
                    b.Navigation("PresupuestosCompraDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraCdbo", b =>
                {
                    b.Navigation("PresupuestosCompra");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraDetalleCdbo", b =>
                {
                    b.Navigation("PresupuestosCompraDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosCompraEstado", b =>
                {
                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaCdbo", b =>
                {
                    b.Navigation("PresupuestosVentum");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaDetalleCdbo", b =>
                {
                    b.Navigation("PresupuestosVentaDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentaEstado", b =>
                {
                    b.Navigation("PresupuestosVenta");

                    b.Navigation("PresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.PresupuestosVentum", b =>
                {
                    b.Navigation("PresupuestosVentaDescuentosGenerales");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("PresupuestosVentaProductosActualizables");
                });

            modelBuilder.Entity("login4.Models.EF.Producto", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("BienesAmortizables");

                    b.Navigation("ComisionesDetalles");

                    b.Navigation("CrmPuntosTablaDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("FasesCentros");

                    b.Navigation("IsoMantenimientosDetalles");

                    b.Navigation("IsoProducto");

                    b.Navigation("LabBoletinesDetalleProductoCompuestos");

                    b.Navigation("LabBoletinesDetalleProductos");

                    b.Navigation("LabOas");

                    b.Navigation("LabOasDetalles");

                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("Lotes");

                    b.Navigation("MovimientosAlmacenDetalles");

                    b.Navigation("MovimientosAlmacenSaldos");

                    b.Navigation("OpesDetalleProductoPfs");

                    b.Navigation("OpesDetalleProductos");

                    b.Navigation("OrdenesFabricacionDetalles");

                    b.Navigation("OrdenesSeriadasDetalles");

                    b.Navigation("Partes");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDetalleCdbos");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("PresupuestosVentaProductosActualizables");

                    b.Navigation("ProductosAlmacens");

                    b.Navigation("ProductosAtribsValores");

                    b.Navigation("ProductosClientes");

                    b.Navigation("ProductosCompuestoProductoCompuestos");

                    b.Navigation("ProductosCompuestoProductos");

                    b.Navigation("ProductosCompuestosPlantillasLogs");

                    b.Navigation("ProductosDatosDinamicos");

                    b.Navigation("ProductosSugeridoProductoSugeridos");

                    b.Navigation("ProductosSugeridoProductos");

                    b.Navigation("PropuestasCompraDetalles");

                    b.Navigation("Proyectos");

                    b.Navigation("RegularizacionesAlmacens");

                    b.Navigation("ReservasStockDetalles");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");

                    b.Navigation("TarifasDetalles");

                    b.Navigation("TpvticketsDetalles");

                    b.Navigation("UnidadesProductos");

                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBase", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("UnidadesProductoBases");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosBaseCdbo", b =>
                {
                    b.Navigation("ProductosBases");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCdbo", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosCdbo", b =>
                {
                    b.Navigation("LabNormativasParametros");

                    b.Navigation("ProductosCompuesto");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosCompuestosPlantilla", b =>
                {
                    b.Navigation("ProductosCompuestosPlantillasComponentes");

                    b.Navigation("ProductosCompuestosPlantillasLogs");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosConjunto", b =>
                {
                    b.Navigation("OrdenesSeriada");

                    b.Navigation("ProductosConjuntosComponentes");

                    b.Navigation("ProductosConjuntosDatosDinamicos");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosEstado", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("ProductosBases");
                });

            modelBuilder.Entity("login4.Models.EF.ProductosTipo", b =>
                {
                    b.Navigation("AlqAlquileresDescuentosGenerales");

                    b.Navigation("AlqPresupuestosDescuentosGenerales");

                    b.Navigation("ClientesDescuentosRoots");

                    b.Navigation("Familia");

                    b.Navigation("PedidosVentaDescuentosGenerales");

                    b.Navigation("PresupuestosVentaDescuentosGenerales");

                    b.Navigation("Productos");

                    b.Navigation("ProductosBases");

                    b.Navigation("ProductosConjuntosComponentes");

                    b.Navigation("ProveedoresDescuentosRoots");
                });

            modelBuilder.Entity("login4.Models.EF.PropuestasCompra", b =>
                {
                    b.Navigation("PropuestasCompraDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Proveedore", b =>
                {
                    b.Navigation("AgenciasTransporteTarifas");

                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("CentrosTrabajos");

                    b.Navigation("Comerciales");

                    b.Navigation("Expediciones");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("IsoMantenimientos");

                    b.Navigation("IsoProveedore");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Lotes");

                    b.Navigation("Opes");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("PropuestasCompraDetalles");

                    b.Navigation("ProveedoresContactos");

                    b.Navigation("ProveedoresCuentasBancaria");

                    b.Navigation("ProveedoresDescuentos");

                    b.Navigation("ProveedoresDescuentosRoots");

                    b.Navigation("ProveedoresDiasPagos");

                    b.Navigation("ProveedoresDirecciones");

                    b.Navigation("ProveedoresPeriodosExentosPagos");

                    b.Navigation("ProveedoresTelefonos");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresCdbo", b =>
                {
                    b.Navigation("Proveedore");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresContacto", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("FacturasCompras");

                    b.Navigation("Opes");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PresupuestosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresDireccione", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("FacturasCompras");

                    b.Navigation("OpePersonaDireccionEntregas");

                    b.Navigation("OpePersonaDireccionFacturas");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PresupuestosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.ProveedoresTipo", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("login4.Models.EF.Provincia", b =>
                {
                    b.Navigation("ClientesDirecciones");

                    b.Navigation("EmpleadosDirecciones");

                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("login4.Models.EF.Proyecto", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("LabBoletines");

                    b.Navigation("LabOas");

                    b.Navigation("Opes");

                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("ProyectosDatosDinamicos");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.ProyectosEstado", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("login4.Models.EF.Puesto", b =>
                {
                    b.Navigation("IsoActividadesPersonals");

                    b.Navigation("Maquinas");

                    b.Navigation("OrdenesFabricacionDetalleEmpleados");
                });

            modelBuilder.Entity("login4.Models.EF.PyG", b =>
                {
                    b.Navigation("InversePyGNavigation");

                    b.Navigation("PyGCuenta");
                });

            modelBuilder.Entity("login4.Models.EF.RemesasCompra", b =>
                {
                    b.Navigation("VencimientosCompras");
                });

            modelBuilder.Entity("login4.Models.EF.RemesasVentum", b =>
                {
                    b.Navigation("VencimientosVenta");
                });

            modelBuilder.Entity("login4.Models.EF.Report", b =>
                {
                    b.Navigation("ReportsLaunchers");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsConstructor", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsFamilia", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsLauncher", b =>
                {
                    b.Navigation("ReportsCriteria");
                });

            modelBuilder.Entity("login4.Models.EF.ReportsTipo", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("login4.Models.EF.ReservasStock", b =>
                {
                    b.Navigation("ReservasStockDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacion", b =>
                {
                    b.Navigation("RrhhPrimasLiquidacionDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.RrhhPrimasLiquidacionEstado", b =>
                {
                    b.Navigation("RrhhPrimasLiquidacions");
                });

            modelBuilder.Entity("login4.Models.EF.RrhhSetupCategoria", b =>
                {
                    b.Navigation("RrhhSetups");
                });

            modelBuilder.Entity("login4.Models.EF.RutasProduccion", b =>
                {
                    b.Navigation("Fases");
                });

            modelBuilder.Entity("login4.Models.EF.Seccione", b =>
                {
                    b.Navigation("CtaCentroCostes");

                    b.Navigation("Empleados");

                    b.Navigation("InverseSeccion");

                    b.Navigation("IsoActividadesPersonals");

                    b.Navigation("IsoCursos");

                    b.Navigation("IsoIncidencia");

                    b.Navigation("IsoIndicadores");

                    b.Navigation("IsoRevisiones");

                    b.Navigation("Maquinas");

                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("login4.Models.EF.Series", b =>
                {
                    b.Navigation("AlbaranesCompras");

                    b.Navigation("AlbaranesVenta");

                    b.Navigation("AlqAlquileres");

                    b.Navigation("AlqPresupuestos");

                    b.Navigation("Autofacturas");

                    b.Navigation("Clientes");

                    b.Navigation("DevolucionesVenta");

                    b.Navigation("Expediciones");

                    b.Navigation("FacturasCompras");

                    b.Navigation("FacturasVenta");

                    b.Navigation("LabBoletines");

                    b.Navigation("LabOas");

                    b.Navigation("LiquidacionesComercials");

                    b.Navigation("Opes");

                    b.Navigation("OrdenesFabricacions");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasExplosiones");

                    b.Navigation("PedidosCompras");

                    b.Navigation("PedidosVenta");

                    b.Navigation("PresupuestosCompras");

                    b.Navigation("PresupuestosVenta");

                    b.Navigation("Proveedores");

                    b.Navigation("SrvContratos");

                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("Tpvtickets");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContrato", b =>
                {
                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvContratosPlanificacions");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosCdbo", b =>
                {
                    b.Navigation("SrvContrato");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosDetalleCdbo", b =>
                {
                    b.Navigation("SrvContratosDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.SrvContratosEstado", b =>
                {
                    b.Navigation("SrvContratos");

                    b.Navigation("SrvContratosDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaCdbo", b =>
                {
                    b.Navigation("SrvPresupuestosVentum");
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaDetalle", b =>
                {
                    b.Navigation("InverseLinea");
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentaEstado", b =>
                {
                    b.Navigation("SrvPresupuestosVenta");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.SrvPresupuestosVentum", b =>
                {
                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.SyncConnection", b =>
                {
                    b.Navigation("SyncSynchronizations");

                    b.Navigation("SyncSynchronizedRecords");
                });

            modelBuilder.Entity("login4.Models.EF.SyncTipo", b =>
                {
                    b.Navigation("SyncConnections");
                });

            modelBuilder.Entity("login4.Models.EF.Tarifa", b =>
                {
                    b.Navigation("LabBoletines");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabOas");

                    b.Navigation("TarifasDetalles");

                    b.Navigation("Tpvtickets");
                });

            modelBuilder.Entity("login4.Models.EF.TesoreriaApunteTipo", b =>
                {
                    b.Navigation("TesoreriaApuntes");
                });

            modelBuilder.Entity("login4.Models.EF.TiposLinea", b =>
                {
                    b.Navigation("AlbaranesCompraDetalles");

                    b.Navigation("AlbaranesVentaDetalles");

                    b.Navigation("AlqAlquileresDescuentosGenerales");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDescuentosGenerales");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("DevolucionesVentaDetalles");

                    b.Navigation("DocumentosGestionTiposLineaTiposLineaParentTipoLineas");

                    b.Navigation("DocumentosGestionTiposLineaTiposLineaTipoLineas");

                    b.Navigation("DocumentosGestionTiposLineas");

                    b.Navigation("ExpedicionesDetalles");

                    b.Navigation("FacturasCompraDetalles");

                    b.Navigation("FacturasVentaDetalles");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LabDatosDinamicosLineasDefs");

                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("OpesDetalles");

                    b.Navigation("PartesTipos");

                    b.Navigation("PedidosCompraDetalles");

                    b.Navigation("PedidosVentaDescuentosGenerales");

                    b.Navigation("PedidosVentaDetalles");

                    b.Navigation("PresupuestosCompraDetalles");

                    b.Navigation("PresupuestosVentaDescuentosGenerales");

                    b.Navigation("PresupuestosVentaDetalles");

                    b.Navigation("RrhhPrimasLiquidacionDetalles");

                    b.Navigation("SrvContratosDetalles");

                    b.Navigation("SrvPresupuestosVentaDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.Tpv", b =>
                {
                    b.Navigation("Tpvcambios");

                    b.Navigation("TpvmovimientosCajas");

                    b.Navigation("TpvpagosPorCajas");

                    b.Navigation("Tpvtickets");
                });

            modelBuilder.Entity("login4.Models.EF.Tpvticket", b =>
                {
                    b.Navigation("TpvmovimientosCajas");

                    b.Navigation("TpvticketsDetalles");

                    b.Navigation("Vales");

                    b.Navigation("ValesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsCdbo", b =>
                {
                    b.Navigation("Tpvticket");
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsDetalleCdbo", b =>
                {
                    b.Navigation("TpvticketsDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.TpvticketsEstado", b =>
                {
                    b.Navigation("Tpvtickets");

                    b.Navigation("TpvticketsDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.TskTarea", b =>
                {
                    b.Navigation("TskTareasTipoMantenimiento");
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasClase", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasEstado", b =>
                {
                    b.Navigation("Tareas");

                    b.Navigation("TskTareas");
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasMantenimientoTipo", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasOrigene", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("login4.Models.EF.TskTareasPrioridade", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("login4.Models.EF.Turno", b =>
                {
                    b.Navigation("CalendarioDiasEmpleados");

                    b.Navigation("CalendariosDia");

                    b.Navigation("CalendariosPlanSemanalDefDomingoTurnos");

                    b.Navigation("CalendariosPlanSemanalDefJuevesTurnos");

                    b.Navigation("CalendariosPlanSemanalDefLunesTurnos");

                    b.Navigation("CalendariosPlanSemanalDefMartesTurnos");

                    b.Navigation("CalendariosPlanSemanalDefMiercolesTurnos");

                    b.Navigation("CalendariosPlanSemanalDefSabadoTurnos");

                    b.Navigation("CalendariosPlanSemanalDefViernesTurnos");

                    b.Navigation("Fichajes");

                    b.Navigation("RrhhPrimasLiquidacionDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesMedidum", b =>
                {
                    b.Navigation("AgenciasTransporteTarifasDetalles");

                    b.Navigation("AlbaranesCompraDetalleUnidadMedida");

                    b.Navigation("AlbaranesCompraDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("AlbaranesCompraDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("AlbaranesCompraDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("AlbaranesVentaDetalleUnidadMedida");

                    b.Navigation("AlbaranesVentaDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("AlbaranesVentaDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("AlbaranesVentaDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("AlqAlquileresDetalles");

                    b.Navigation("AlqPresupuestosDetalles");

                    b.Navigation("ComisionesDetalles");

                    b.Navigation("DevolucionesVentaDetalleUnidadMedida");

                    b.Navigation("DevolucionesVentaDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("DevolucionesVentaDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("DevolucionesVentaDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("DgdUbicaciones");

                    b.Navigation("DocumentosGestionDetalleUbicaciones");

                    b.Navigation("FacturasCompraDetalleUnidadMedida");

                    b.Navigation("FacturasCompraDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("FacturasCompraDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("FacturasCompraDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("FacturasVentaDetalleUnidadMedida");

                    b.Navigation("FacturasVentaDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("FacturasVentaDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("FacturasVentaDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("LabBoletinesDetalles");

                    b.Navigation("LiquidacionesComercialDetalles");

                    b.Navigation("MovimientosAlmacenDetalles");

                    b.Navigation("OpesDetalleUnidadMedida");

                    b.Navigation("OpesDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("OpesDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("OpesDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("OpesDetalleUnidadMedidaPfs");

                    b.Navigation("OrdenesFabricacionDetalleUnidadMedida");

                    b.Navigation("OrdenesFabricacionDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("OrdenesFabricacionDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("OrdenesFabricacionDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("OrdenesSeriada");

                    b.Navigation("OrdenesSeriadasDetalleUnidadMedida");

                    b.Navigation("OrdenesSeriadasDetalleUnidadMedidaPfs");

                    b.Navigation("ParteUnidadMedidaIdCorteXNavigations");

                    b.Navigation("ParteUnidadMedidaIdCorteYNavigations");

                    b.Navigation("ParteUnidadMedidaIdCorteZNavigations");

                    b.Navigation("ParteUnidadesMedida");

                    b.Navigation("ParteUnidadesMedidumNavigations");

                    b.Navigation("PedidosCompraDetalleUnidadMedida");

                    b.Navigation("PedidosCompraDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("PedidosCompraDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("PedidosCompraDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("PedidosVentaDetalleUnidadMedida");

                    b.Navigation("PedidosVentaDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("PedidosVentaDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("PedidosVentaDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("PresupuestosCompraDetalleUnidadMedida");

                    b.Navigation("PresupuestosCompraDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("PresupuestosCompraDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("PresupuestosCompraDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("PresupuestosVentaDetalleUnidadMedida");

                    b.Navigation("PresupuestosVentaDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("PresupuestosVentaDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("PresupuestosVentaDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("ProductoUnidadMedidaIdCorteXNavigations");

                    b.Navigation("ProductoUnidadMedidaIdCorteYNavigations");

                    b.Navigation("ProductoUnidadMedidaIdCorteZNavigations");

                    b.Navigation("ProductoUnidadesMedida");

                    b.Navigation("ProductosCodigosBarras");

                    b.Navigation("ProductosCompuestos");

                    b.Navigation("ProductosConjuntos");

                    b.Navigation("ProductosConjuntosComponentes");

                    b.Navigation("ProductosTipos");

                    b.Navigation("PropuestasCompraDetalles");

                    b.Navigation("RegularizacionesAlmacens");

                    b.Navigation("SrvContratosDetalleUnidadMedida");

                    b.Navigation("SrvContratosDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("SrvContratosDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("SrvContratosDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("SrvPresupuestosVentaDetalleUnidadMedida");

                    b.Navigation("SrvPresupuestosVentaDetalleUnidadMedidaIdCorteXNavigations");

                    b.Navigation("SrvPresupuestosVentaDetalleUnidadMedidaIdCorteYNavigations");

                    b.Navigation("SrvPresupuestosVentaDetalleUnidadMedidaIdCorteZNavigations");

                    b.Navigation("TpvticketsDetalles");

                    b.Navigation("UnidadesProductoBases");

                    b.Navigation("UnidadesProductos");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesProducto", b =>
                {
                    b.Navigation("MovimientosAlmacenDetalles");

                    b.Navigation("ProductosCodigosBarras");

                    b.Navigation("ProductosCompuestosPlantillasComponentes");

                    b.Navigation("ProductosConjuntos");

                    b.Navigation("ProductosConjuntosComponentes");

                    b.Navigation("ProductosUnidadesModulos");
                });

            modelBuilder.Entity("login4.Models.EF.UnidadesProductoBase", b =>
                {
                    b.Navigation("ProductosBaseUnidadesModulos");
                });

            modelBuilder.Entity("login4.Models.EF.Vale", b =>
                {
                    b.Navigation("ValesDetalles");
                });

            modelBuilder.Entity("login4.Models.EF.ValesCdbo", b =>
                {
                    b.Navigation("Vale");
                });

            modelBuilder.Entity("login4.Models.EF.ValesDetalleCdbo", b =>
                {
                    b.Navigation("ValesDetalle");
                });

            modelBuilder.Entity("login4.Models.EF.ValesEstado", b =>
                {
                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.ValesOrigene", b =>
                {
                    b.Navigation("Vales");
                });

            modelBuilder.Entity("login4.Models.EF.ValoresProducto", b =>
                {
                    b.Navigation("AtributosValoresFotosLogs");

                    b.Navigation("Cualificaciones");

                    b.Navigation("InverseValorProducto");

                    b.Navigation("Operaciones");

                    b.Navigation("ProductosAtribsValores");
                });

            modelBuilder.Entity("login4.Models.EF.VencimientosVentum", b =>
                {
                    b.Navigation("AlbaranesVentaAnticipos");
                });

            modelBuilder.Entity("login4.Models.EF.Zona", b =>
                {
                    b.Navigation("AgenciasTransporteTarifasDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
