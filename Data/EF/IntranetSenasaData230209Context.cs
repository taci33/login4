using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using login4.Pages;
using Microsoft.Data.SqlClient;
using login4.Data.EF;

namespace login4.Models.EF;

public partial class IntranetSenasaData230209Context : IdentityDbContext
{
    public IntranetSenasaData230209Context()
    {
    }

    public IntranetSenasaData230209Context(DbContextOptions<IntranetSenasaData230209Context> options)
        : base(options)
    {
    }
    public virtual DbSet<EXT_adm_CL_email_lookup> EXT_adm_CL_email_lookups { get; set; }
    public virtual DbSet<EXT_adm_CL_Tipos_lookup> EXT_adm_CL_Tipos_lookups { get; set; }
    public virtual DbSet<ext_adm_CL_Search> ext_adm_CL_Searchs { get; set; }
    public DbSet<appusuario> appusuario { get; set; }
    public virtual DbSet<AeEntidade> AeEntidades { get; set; }

    public virtual DbSet<AeatM303> AeatM303s { get; set; }

    public virtual DbSet<AeatM303Tipo> AeatM303Tipos { get; set; }

    public virtual DbSet<AeatM340> AeatM340s { get; set; }

    public virtual DbSet<AeatM340Detalle> AeatM340Detalles { get; set; }

    public virtual DbSet<AeatM347> AeatM347s { get; set; }

    public virtual DbSet<AeatM347Detalle> AeatM347Detalles { get; set; }

    public virtual DbSet<AeatM349> AeatM349s { get; set; }

    public virtual DbSet<AeatSii> AeatSiis { get; set; }

    public virtual DbSet<AeatSiiDetalle> AeatSiiDetalles { get; set; }

    public virtual DbSet<AeatSiiSubdetalle> AeatSiiSubdetalles { get; set; }

    public virtual DbSet<Agencia> Agencias { get; set; }

    public virtual DbSet<AgenciasTransporteTarifa> AgenciasTransporteTarifas { get; set; }

    public virtual DbSet<AgenciasTransporteTarifasDetalle> AgenciasTransporteTarifasDetalles { get; set; }

    public virtual DbSet<AlbaranesCompra> AlbaranesCompras { get; set; }

    public virtual DbSet<AlbaranesCompraCdbo> AlbaranesCompraCdbos { get; set; }

    public virtual DbSet<AlbaranesCompraDetalle> AlbaranesCompraDetalles { get; set; }

    public virtual DbSet<AlbaranesCompraDetalleCdbo> AlbaranesCompraDetalleCdbos { get; set; }

    public virtual DbSet<AlbaranesCompraEstado> AlbaranesCompraEstados { get; set; }

    public virtual DbSet<AlbaranesVentaAnticipo> AlbaranesVentaAnticipos { get; set; }

    public virtual DbSet<AlbaranesVentaCdbo> AlbaranesVentaCdbos { get; set; }

    public virtual DbSet<AlbaranesVentaDetalle> AlbaranesVentaDetalles { get; set; }

    public virtual DbSet<AlbaranesVentaDetalleCdbo> AlbaranesVentaDetalleCdbos { get; set; }

    public virtual DbSet<AlbaranesVentaEstado> AlbaranesVentaEstados { get; set; }

    public virtual DbSet<AlbaranesVentum> AlbaranesVenta { get; set; }

    public virtual DbSet<Almacene> Almacenes { get; set; }

    public virtual DbSet<AlmacenesUbicacione> AlmacenesUbicaciones { get; set; }

    public virtual DbSet<AlqAlquilere> AlqAlquileres { get; set; }

    public virtual DbSet<AlqAlquileresCdbo> AlqAlquileresCdbos { get; set; }

    public virtual DbSet<AlqAlquileresDescuentosGenerale> AlqAlquileresDescuentosGenerales { get; set; }

    public virtual DbSet<AlqAlquileresDetalle> AlqAlquileresDetalles { get; set; }

    public virtual DbSet<AlqAlquileresDetalleCdbo> AlqAlquileresDetalleCdbos { get; set; }

    public virtual DbSet<AlqAlquileresDetallePicking> AlqAlquileresDetallePickings { get; set; }

    public virtual DbSet<AlqAlquileresEstado> AlqAlquileresEstados { get; set; }

    public virtual DbSet<AlqAlquileresPicking> AlqAlquileresPickings { get; set; }

    public virtual DbSet<AlqAlquileresPickingTipo> AlqAlquileresPickingTipos { get; set; }

    public virtual DbSet<AlqPresupuesto> AlqPresupuestos { get; set; }

    public virtual DbSet<AlqPresupuestosCdbo> AlqPresupuestosCdbos { get; set; }

    public virtual DbSet<AlqPresupuestosDescuentosGenerale> AlqPresupuestosDescuentosGenerales { get; set; }

    public virtual DbSet<AlqPresupuestosDetalle> AlqPresupuestosDetalles { get; set; }

    public virtual DbSet<AlqPresupuestosDetalleCdbo> AlqPresupuestosDetalleCdbos { get; set; }

    public virtual DbSet<AlqPresupuestosEstado> AlqPresupuestosEstados { get; set; }

    public virtual DbSet<Asiento> Asientos { get; set; }

    public virtual DbSet<AsientosDiario> AsientosDiarios { get; set; }

    public virtual DbSet<AtributosCampo> AtributosCampos { get; set; }

    public virtual DbSet<AtributosCatalogo> AtributosCatalogos { get; set; }

    public virtual DbSet<AtributosProducto> AtributosProductos { get; set; }

    public virtual DbSet<AtributosTipo> AtributosTipos { get; set; }

    public virtual DbSet<AtributosValoresFotosLog> AtributosValoresFotosLogs { get; set; }

    public virtual DbSet<Autofactura> Autofacturas { get; set; }

    public virtual DbSet<AutofacturasEstado> AutofacturasEstados { get; set; }

    public virtual DbSet<Auxiliar01> Auxiliar01s { get; set; }

    public virtual DbSet<BienesAmortizable> BienesAmortizables { get; set; }

    public virtual DbSet<BienesAmortizablesBajaCausa> BienesAmortizablesBajaCausas { get; set; }

    public virtual DbSet<BienesAmortizablesCategoria> BienesAmortizablesCategorias { get; set; }

    public virtual DbSet<BienesAmortizablesDetalle> BienesAmortizablesDetalles { get; set; }

    public virtual DbSet<BienesAmortizablesEstado> BienesAmortizablesEstados { get; set; }

    public virtual DbSet<BienesAmortizablesMetodo> BienesAmortizablesMetodos { get; set; }

    public virtual DbSet<BienesAmortizablesNaturaleza> BienesAmortizablesNaturalezas { get; set; }

    public virtual DbSet<BienesAmortizablesTipo> BienesAmortizablesTipos { get; set; }

    public virtual DbSet<Bo> Bos { get; set; }

    public virtual DbSet<BoCuenta> BoCuentas { get; set; }

    public virtual DbSet<BoOld> BoOlds { get; set; }

    public virtual DbSet<BoOldCuenta> BoOldCuentas { get; set; }

    public virtual DbSet<Boa> Boas { get; set; }

    public virtual DbSet<BoaCuenta> BoaCuentas { get; set; }

    public virtual DbSet<Calendario> Calendarios { get; set; }

    public virtual DbSet<CalendarioDiasEmpleado> CalendarioDiasEmpleados { get; set; }

    public virtual DbSet<CalendariosDia> CalendariosDias { get; set; }

    public virtual DbSet<CalendariosEjercicio> CalendariosEjercicios { get; set; }

    public virtual DbSet<CalendariosPlanSemanalDef> CalendariosPlanSemanalDefs { get; set; }

    public virtual DbSet<CalendariosTurnosDef> CalendariosTurnosDefs { get; set; }

    public virtual DbSet<CantidadesPrecargaComisione> CantidadesPrecargaComisiones { get; set; }

    public virtual DbSet<CarneConducirTipo> CarneConducirTipos { get; set; }

    public virtual DbSet<CatalogosAtributo> CatalogosAtributos { get; set; }

    public virtual DbSet<CdboCantidadesPrecargaTarifa> CdboCantidadesPrecargaTarifas { get; set; }

    public virtual DbSet<CdboParametrosAnalitico> CdboParametrosAnaliticos { get; set; }

    public virtual DbSet<CdboPedidosPendientesImportar> CdboPedidosPendientesImportars { get; set; }

    public virtual DbSet<CdboProductosXYField> CdboProductosXYFields { get; set; }

    public virtual DbSet<CdbpProcess> CdbpProcesses { get; set; }

    public virtual DbSet<CdbpStep> CdbpSteps { get; set; }

    public virtual DbSet<CentrosTipo> CentrosTipos { get; set; }

    public virtual DbSet<CentrosTrabajo> CentrosTrabajos { get; set; }

    public virtual DbSet<Certificacione> Certificaciones { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<ClientesCdbo> ClientesCdbos { get; set; }

    public virtual DbSet<ClientesCentrosAdministrativo> ClientesCentrosAdministrativos { get; set; }

    public virtual DbSet<ClientesContacto> ClientesContactos { get; set; }

    public virtual DbSet<ClientesContactosTipo> ClientesContactosTipos { get; set; }

    public virtual DbSet<ClientesCuentasBancaria> ClientesCuentasBancarias { get; set; }

    public virtual DbSet<ClientesDatosDinamico> ClientesDatosDinamicos { get; set; }

    public virtual DbSet<ClientesDepartamento> ClientesDepartamentos { get; set; }

    public virtual DbSet<ClientesDescuento> ClientesDescuentos { get; set; }

    public virtual DbSet<ClientesDescuentosRoot> ClientesDescuentosRoots { get; set; }

    public virtual DbSet<ClientesDiasPago> ClientesDiasPagos { get; set; }

    public virtual DbSet<ClientesDireccione> ClientesDirecciones { get; set; }

    public virtual DbSet<ClientesDireccionesCdbo> ClientesDireccionesCdbos { get; set; }

    public virtual DbSet<ClientesMandato> ClientesMandatos { get; set; }

    public virtual DbSet<ClientesPeriodosExentosPago> ClientesPeriodosExentosPagos { get; set; }

    public virtual DbSet<ClientesTelefono> ClientesTelefonos { get; set; }

    public virtual DbSet<ClientesTipo> ClientesTipos { get; set; }

    public virtual DbSet<ClientesTipoIdentificacion> ClientesTipoIdentificacions { get; set; }

    public virtual DbSet<Comarca> Comarcas { get; set; }

    public virtual DbSet<Comerciale> Comerciales { get; set; }

    public virtual DbSet<ComercialesTipo> ComercialesTipos { get; set; }

    public virtual DbSet<Comisione> Comisiones { get; set; }

    public virtual DbSet<ComisionesDetalle> ComisionesDetalles { get; set; }

    public virtual DbSet<ComisionesOperacione> ComisionesOperaciones { get; set; }

    public virtual DbSet<ConceptosContabilidad> ConceptosContabilidads { get; set; }

    public virtual DbSet<ConceptosRetencion> ConceptosRetencions { get; set; }

    public virtual DbSet<ConexionContum> ConexionConta { get; set; }

    public virtual DbSet<ConfiguracionBloque> ConfiguracionBloques { get; set; }

    public virtual DbSet<ConfiguracionEmpresa> ConfiguracionEmpresas { get; set; }

    public virtual DbSet<ConfiguracionEmpresaCtum> ConfiguracionEmpresaCta { get; set; }

    public virtual DbSet<CrmAccione> CrmAcciones { get; set; }

    public virtual DbSet<CrmAccionesCdbo> CrmAccionesCdbos { get; set; }

    public virtual DbSet<CrmAccionesEstado> CrmAccionesEstados { get; set; }

    public virtual DbSet<CrmAccionesIniciativa> CrmAccionesIniciativas { get; set; }

    public virtual DbSet<CrmAccionesMedio> CrmAccionesMedios { get; set; }

    public virtual DbSet<CrmAccionesResultado> CrmAccionesResultados { get; set; }

    public virtual DbSet<CrmAccionesTipo> CrmAccionesTipos { get; set; }

    public virtual DbSet<CrmAccionesTiposGenerico> CrmAccionesTiposGenericos { get; set; }

    public virtual DbSet<CrmCampanya> CrmCampanyas { get; set; }

    public virtual DbSet<CrmCampanyasCdbo> CrmCampanyasCdbos { get; set; }

    public virtual DbSet<CrmCampanyasCriterio> CrmCampanyasCriterios { get; set; }

    public virtual DbSet<CrmCampanyasDestinatario> CrmCampanyasDestinatarios { get; set; }

    public virtual DbSet<CrmCampanyasDetalle> CrmCampanyasDetalles { get; set; }

    public virtual DbSet<CrmCampanyasDetalleCdbo> CrmCampanyasDetalleCdbos { get; set; }

    public virtual DbSet<CrmCampanyasDocumento> CrmCampanyasDocumentos { get; set; }

    public virtual DbSet<CrmCampanyasEmisionesTipo> CrmCampanyasEmisionesTipos { get; set; }

    public virtual DbSet<CrmCampanyasEstado> CrmCampanyasEstados { get; set; }

    public virtual DbSet<CrmCampanyasSeguimiento> CrmCampanyasSeguimientos { get; set; }

    public virtual DbSet<CrmCampanyasTipo> CrmCampanyasTipos { get; set; }

    public virtual DbSet<CrmCamposCriterio> CrmCamposCriterios { get; set; }

    public virtual DbSet<CrmCanje> CrmCanjes { get; set; }

    public virtual DbSet<CrmCanjesDetalle> CrmCanjesDetalles { get; set; }

    public virtual DbSet<CrmClientesPunto> CrmClientesPuntos { get; set; }

    public virtual DbSet<CrmClientesPuntosCabecera> CrmClientesPuntosCabeceras { get; set; }

    public virtual DbSet<CrmClientesPuntosDetalle> CrmClientesPuntosDetalles { get; set; }

    public virtual DbSet<CrmClientesSegmento> CrmClientesSegmentos { get; set; }

    public virtual DbSet<CrmDocumentosTipo> CrmDocumentosTipos { get; set; }

    public virtual DbSet<CrmLiquidacione> CrmLiquidaciones { get; set; }

    public virtual DbSet<CrmOportunidade> CrmOportunidades { get; set; }

    public virtual DbSet<CrmOportunidadesEstado> CrmOportunidadesEstados { get; set; }

    public virtual DbSet<CrmOportunidadesPrioridade> CrmOportunidadesPrioridades { get; set; }

    public virtual DbSet<CrmPuntosTabla> CrmPuntosTablas { get; set; }

    public virtual DbSet<CrmPuntosTablaDetalle> CrmPuntosTablaDetalles { get; set; }

    public virtual DbSet<CrmSegmento> CrmSegmentos { get; set; }

    public virtual DbSet<CrmTarjetasFidelizacion> CrmTarjetasFidelizacions { get; set; }

    public virtual DbSet<CtaAeatTerritorio> CtaAeatTerritorios { get; set; }

    public virtual DbSet<CtaAsientosOrigene> CtaAsientosOrigenes { get; set; }

    public virtual DbSet<CtaCentroCoste> CtaCentroCostes { get; set; }

    public virtual DbSet<CtaCuentasIntercambio> CtaCuentasIntercambios { get; set; }

    public virtual DbSet<Cualificacione> Cualificaciones { get; set; }

    public virtual DbSet<CualificacionesAtributo> CualificacionesAtributos { get; set; }

    public virtual DbSet<DatosDinamico> DatosDinamicos { get; set; }

    public virtual DbSet<DatosDinamicosGsEntidade> DatosDinamicosGsEntidades { get; set; }

    public virtual DbSet<DatosDinamicosGsEntidadesDef> DatosDinamicosGsEntidadesDefs { get; set; }

    public virtual DbSet<DatosIva> DatosIvas { get; set; }

    public virtual DbSet<DatosMovimientoCaja> DatosMovimientoCajas { get; set; }

    public virtual DbSet<DatosTicket> DatosTickets { get; set; }

    public virtual DbSet<Departamento> Departamentos { get; set; }

    public virtual DbSet<Descuento> Descuentos { get; set; }

    public virtual DbSet<DevolucionesVentaCdbo> DevolucionesVentaCdbos { get; set; }

    public virtual DbSet<DevolucionesVentaDetalle> DevolucionesVentaDetalles { get; set; }

    public virtual DbSet<DevolucionesVentaDetalleCdbo> DevolucionesVentaDetalleCdbos { get; set; }

    public virtual DbSet<DevolucionesVentaEstado> DevolucionesVentaEstados { get; set; }

    public virtual DbSet<DevolucionesVentum> DevolucionesVenta { get; set; }

    public virtual DbSet<DgDgdireccione> DgDgdirecciones { get; set; }

    public virtual DbSet<DgDireccione> DgDirecciones { get; set; }

    public virtual DbSet<DgdUbicacione> DgdUbicaciones { get; set; }

    public virtual DbSet<Diario> Diarios { get; set; }

    public virtual DbSet<DiarioAux> DiarioAuxes { get; set; }

    public virtual DbSet<DiarioAux1> DiarioAuxes1 { get; set; }

    public virtual DbSet<DireccionesEntidadesOrigen> DireccionesEntidadesOrigens { get; set; }

    public virtual DbSet<DmnDataSet> DmnDataSets { get; set; }

    public virtual DbSet<DmnDataSetParameter> DmnDataSetParameters { get; set; }

    public virtual DbSet<DmnDataSetRel> DmnDataSetRels { get; set; }

    public virtual DbSet<DmnQueryForm> DmnQueryForms { get; set; }

    public virtual DbSet<DocumentosAlmacenTipo> DocumentosAlmacenTipos { get; set; }

    public virtual DbSet<DocumentosGestion> DocumentosGestions { get; set; }

    public virtual DbSet<DocumentosGestionAsiento> DocumentosGestionAsientos { get; set; }

    public virtual DbSet<DocumentosGestionDestinatario> DocumentosGestionDestinatarios { get; set; }

    public virtual DbSet<DocumentosGestionDetalleObservacione> DocumentosGestionDetalleObservaciones { get; set; }

    public virtual DbSet<DocumentosGestionDetalleUbicacione> DocumentosGestionDetalleUbicaciones { get; set; }

    public virtual DbSet<DocumentosGestionMargenesClafe> DocumentosGestionMargenesClaves { get; set; }

    public virtual DbSet<DocumentosGestionRegistroAlmacen> DocumentosGestionRegistroAlmacens { get; set; }

    public virtual DbSet<DocumentosGestionTipo1> DocumentosGestionTipo1s { get; set; }

    public virtual DbSet<DocumentosGestionTiposLinea> DocumentosGestionTiposLineas { get; set; }

    public virtual DbSet<DocumentosGestionTiposLineaTiposLinea> DocumentosGestionTiposLineaTiposLineas { get; set; }

    public virtual DbSet<DocumentosGestionTraspaso> DocumentosGestionTraspasos { get; set; }

    public virtual DbSet<DocumentosGestionTraspasosSetup> DocumentosGestionTraspasosSetups { get; set; }

    public virtual DbSet<Ejercicio> Ejercicios { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<EmpleadosContratosTipo> EmpleadosContratosTipos { get; set; }

    public virtual DbSet<EmpleadosDepartamento> EmpleadosDepartamentos { get; set; }

    public virtual DbSet<EmpleadosDireccione> EmpleadosDirecciones { get; set; }

    public virtual DbSet<EmpleadosEstadosCivile> EmpleadosEstadosCiviles { get; set; }

    public virtual DbSet<EmpleadosTelefono> EmpleadosTelefonos { get; set; }

    public virtual DbSet<EmpresasCuentasBancaria> EmpresasCuentasBancarias { get; set; }

    public virtual DbSet<EmpresasDiasPago> EmpresasDiasPagos { get; set; }

    public virtual DbSet<EmpresasEmailCuenta> EmpresasEmailCuentas { get; set; }

    public virtual DbSet<EmpresasPeriodosExentosPago> EmpresasPeriodosExentosPagos { get; set; }

    public virtual DbSet<Entidade> Entidades { get; set; }

    public virtual DbSet<EscalasMedida> EscalasMedidas { get; set; }

    public virtual DbSet<ExpPaquetesFormato> ExpPaquetesFormatos { get; set; }

    public virtual DbSet<Expedicione> Expediciones { get; set; }

    public virtual DbSet<ExpedicionesCdbo> ExpedicionesCdbos { get; set; }

    public virtual DbSet<ExpedicionesDetalle> ExpedicionesDetalles { get; set; }

    public virtual DbSet<ExpedicionesDetalleCdbo> ExpedicionesDetalleCdbos { get; set; }

    public virtual DbSet<ExpedicionesEstado> ExpedicionesEstados { get; set; }

    public virtual DbSet<FacturacionPlanificacion> FacturacionPlanificacions { get; set; }

    public virtual DbSet<Facturae> Facturaes { get; set; }

    public virtual DbSet<FacturasCompra> FacturasCompras { get; set; }

    public virtual DbSet<FacturasCompraCdbo> FacturasCompraCdbos { get; set; }

    public virtual DbSet<FacturasCompraDetalle> FacturasCompraDetalles { get; set; }

    public virtual DbSet<FacturasCompraDetalleCdbo> FacturasCompraDetalleCdbos { get; set; }

    public virtual DbSet<FacturasCompraEstado> FacturasCompraEstados { get; set; }

    public virtual DbSet<FacturasCompraPie> FacturasCompraPies { get; set; }

    public virtual DbSet<FacturasVentaCdbo> FacturasVentaCdbos { get; set; }

    public virtual DbSet<FacturasVentaDetalle> FacturasVentaDetalles { get; set; }

    public virtual DbSet<FacturasVentaDetalleCdbo> FacturasVentaDetalleCdbos { get; set; }

    public virtual DbSet<FacturasVentaDetalleEntrega> FacturasVentaDetalleEntregas { get; set; }

    public virtual DbSet<FacturasVentaEstado> FacturasVentaEstados { get; set; }

    public virtual DbSet<FacturasVentum> FacturasVenta { get; set; }

    public virtual DbSet<Familia> Familias { get; set; }

    public virtual DbSet<FamiliasDatosDinamico> FamiliasDatosDinamicos { get; set; }

    public virtual DbSet<Fase> Fases { get; set; }

    public virtual DbSet<FasesCentro> FasesCentros { get; set; }

    public virtual DbSet<FasesEstado> FasesEstados { get; set; }

    public virtual DbSet<FeFormato> FeFormatos { get; set; }

    public virtual DbSet<Fichaje> Fichajes { get; set; }

    public virtual DbSet<FichajesDetalle> FichajesDetalles { get; set; }

    public virtual DbSet<FichajesEstado> FichajesEstados { get; set; }

    public virtual DbSet<FichajesOrdenesOperacionesListum> FichajesOrdenesOperacionesLista { get; set; }

    public virtual DbSet<FichajesParte> FichajesPartes { get; set; }

    public virtual DbSet<FichajesPartesEstado> FichajesPartesEstados { get; set; }

    public virtual DbSet<FichajesSteep> FichajesSteeps { get; set; }

    public virtual DbSet<FichajesTareasStandBy> FichajesTareasStandBies { get; set; }

    public virtual DbSet<FichajesTipo> FichajesTipos { get; set; }

    public virtual DbSet<FormasPago> FormasPagos { get; set; }

    public virtual DbSet<FormasPagoApi> FormasPagoApis { get; set; }

    public virtual DbSet<Formulario> Formularios { get; set; }

    public virtual DbSet<FormulariosCategoria> FormulariosCategorias { get; set; }

    public virtual DbSet<GastosFacturacion> GastosFacturacions { get; set; }

    public virtual DbSet<GdAplicacione> GdAplicaciones { get; set; }

    public virtual DbSet<GdDocumento> GdDocumentos { get; set; }

    public virtual DbSet<GdDocumentosEntidade> GdDocumentosEntidades { get; set; }

    public virtual DbSet<GdEntidade> GdEntidades { get; set; }

    public virtual DbSet<GdFormatosArchivo> GdFormatosArchivos { get; set; }

    public virtual DbSet<GdTipo> GdTipos { get; set; }

    public virtual DbSet<GeneralSetup> GeneralSetups { get; set; }

    public virtual DbSet<GsAccessLog> GsAccessLogs { get; set; }

    public virtual DbSet<GsConsultasInfoAdd> GsConsultasInfoAdds { get; set; }

    public virtual DbSet<GsEditMasksType> GsEditMasksTypes { get; set; }

    public virtual DbSet<GsEntidade> GsEntidades { get; set; }

    public virtual DbSet<GsGridColumn> GsGridColumns { get; set; }

    public virtual DbSet<GsGridDefinition> GsGridDefinitions { get; set; }

    public virtual DbSet<GsGridsView> GsGridsViews { get; set; }

    public virtual DbSet<GsInternalType> GsInternalTypes { get; set; }

    public virtual DbSet<GsRecordsKey> GsRecordsKeys { get; set; }

    public virtual DbSet<GsUsrComboList> GsUsrComboLists { get; set; }

    public virtual DbSet<GsUsrComboListsItem> GsUsrComboListsItems { get; set; }

    public virtual DbSet<GsUsrGridsViewsCustomization> GsUsrGridsViewsCustomizations { get; set; }

    public virtual DbSet<GsUsrOperator> GsUsrOperators { get; set; }

    public virtual DbSet<GsUsrType> GsUsrTypes { get; set; }

    public virtual DbSet<HorasExtra> HorasExtras { get; set; }

    public virtual DbSet<InstalacionesTipo> InstalacionesTipos { get; set; }

    public virtual DbSet<IsoActividade> IsoActividades { get; set; }

    public virtual DbSet<IsoActividadesPersonal> IsoActividadesPersonals { get; set; }

    public virtual DbSet<IsoCalificacionesCompra> IsoCalificacionesCompras { get; set; }

    public virtual DbSet<IsoComunicacione> IsoComunicaciones { get; set; }

    public virtual DbSet<IsoCriteriosEficacium> IsoCriteriosEficacia { get; set; }

    public virtual DbSet<IsoCriteriosSeleccion> IsoCriteriosSeleccions { get; set; }

    public virtual DbSet<IsoCurso> IsoCursos { get; set; }

    public virtual DbSet<IsoDocumento> IsoDocumentos { get; set; }

    public virtual DbSet<IsoEncuesta> IsoEncuestas { get; set; }

    public virtual DbSet<IsoEncuestasDetalle> IsoEncuestasDetalles { get; set; }

    public virtual DbSet<IsoFrecuencia> IsoFrecuencias { get; set; }

    public virtual DbSet<IsoIncidencia> IsoIncidencias { get; set; }

    public virtual DbSet<IsoIncidenciasDetalle> IsoIncidenciasDetalles { get; set; }

    public virtual DbSet<IsoIncidenciasEstado> IsoIncidenciasEstados { get; set; }

    public virtual DbSet<IsoIndicadore> IsoIndicadores { get; set; }

    public virtual DbSet<IsoIndicadoresDetalle> IsoIndicadoresDetalles { get; set; }

    public virtual DbSet<IsoMantenimiento> IsoMantenimientos { get; set; }

    public virtual DbSet<IsoMantenimientosDetalle> IsoMantenimientosDetalles { get; set; }

    public virtual DbSet<IsoPedidosCompra> IsoPedidosCompras { get; set; }

    public virtual DbSet<IsoPedidosCompraDetalle> IsoPedidosCompraDetalles { get; set; }

    public virtual DbSet<IsoPlanesFormacion> IsoPlanesFormacions { get; set; }

    public virtual DbSet<IsoPregunta> IsoPreguntas { get; set; }

    public virtual DbSet<IsoProceso> IsoProcesos { get; set; }

    public virtual DbSet<IsoProducto> IsoProductos { get; set; }

    public virtual DbSet<IsoProveedore> IsoProveedores { get; set; }

    public virtual DbSet<IsoRegistro> IsoRegistros { get; set; }

    public virtual DbSet<IsoRequisito> IsoRequisitos { get; set; }

    public virtual DbSet<IsoRespuesta> IsoRespuestas { get; set; }

    public virtual DbSet<IsoRevisione> IsoRevisiones { get; set; }

    public virtual DbSet<IsoRevisionesAcuerdo> IsoRevisionesAcuerdos { get; set; }

    public virtual DbSet<IsoTendencia> IsoTendencias { get; set; }

    public virtual DbSet<IsoTiposAccione> IsoTiposAcciones { get; set; }

    public virtual DbSet<IsoTiposIncidencia> IsoTiposIncidencias { get; set; }

    public virtual DbSet<IsoTiposMantenimiento> IsoTiposMantenimientos { get; set; }

    public virtual DbSet<IsoTiposNorma> IsoTiposNormas { get; set; }

    public virtual DbSet<IsoTiposRegistro> IsoTiposRegistros { get; set; }

    public virtual DbSet<IsoTiposVencimiento> IsoTiposVencimientos { get; set; }

    public virtual DbSet<IsoVencimiento> IsoVencimientos { get; set; }

    public virtual DbSet<IvaClase> IvaClases { get; set; }

    public virtual DbSet<IvaLibroClaveOperacion> IvaLibroClaveOperacions { get; set; }

    public virtual DbSet<IvaLibroRepercutido> IvaLibroRepercutidos { get; set; }

    public virtual DbSet<IvaLibroSoportado> IvaLibroSoportados { get; set; }

    public virtual DbSet<IvaLibroTipoClave> IvaLibroTipoClaves { get; set; }

    public virtual DbSet<IvaTipo> IvaTipos { get; set; }

    public virtual DbSet<Ivagrupo> Ivagrupos { get; set; }

    public virtual DbSet<LabAnalisisTipo> LabAnalisisTipos { get; set; }

    public virtual DbSet<LabBoletine> LabBoletines { get; set; }

    public virtual DbSet<LabBoletinesCdbo> LabBoletinesCdbos { get; set; }

    public virtual DbSet<LabBoletinesDetalle> LabBoletinesDetalles { get; set; }

    public virtual DbSet<LabBoletinesDetalleCdbo> LabBoletinesDetalleCdbos { get; set; }

    public virtual DbSet<LabBoletinesDetalleDatosDinamico> LabBoletinesDetalleDatosDinamicos { get; set; }

    public virtual DbSet<LabBoletinesEstado> LabBoletinesEstados { get; set; }

    public virtual DbSet<LabBoletinesPool> LabBoletinesPools { get; set; }

    public virtual DbSet<LabBoletinesPoolDetalle> LabBoletinesPoolDetalles { get; set; }

    public virtual DbSet<LabDatosDinamico> LabDatosDinamicos { get; set; }

    public virtual DbSet<LabDatosDinamicosLineasDef> LabDatosDinamicosLineasDefs { get; set; }

    public virtual DbSet<LabMatrix> LabMatrices { get; set; }

    public virtual DbSet<LabNormativasParametro> LabNormativasParametros { get; set; }

    public virtual DbSet<LabOa> LabOas { get; set; }

    public virtual DbSet<LabOasCdbo> LabOasCdbos { get; set; }

    public virtual DbSet<LabOasDetalle> LabOasDetalles { get; set; }

    public virtual DbSet<LabOasDetalleCdbo> LabOasDetalleCdbos { get; set; }

    public virtual DbSet<LabOasEstado> LabOasEstados { get; set; }

    public virtual DbSet<LabOasLectura> LabOasLecturas { get; set; }

    public virtual DbSet<LabOasLecturasEstado> LabOasLecturasEstados { get; set; }

    public virtual DbSet<LabPrioridade> LabPrioridades { get; set; }

    public virtual DbSet<LabProcedimientosEnsayo> LabProcedimientosEnsayos { get; set; }

    public virtual DbSet<LiquidacionesComercial> LiquidacionesComercials { get; set; }

    public virtual DbSet<LiquidacionesComercialCdbo> LiquidacionesComercialCdbos { get; set; }

    public virtual DbSet<LiquidacionesComercialDetalle> LiquidacionesComercialDetalles { get; set; }

    public virtual DbSet<LiquidacionesComercialDetalleCdbo> LiquidacionesComercialDetalleCdbos { get; set; }

    public virtual DbSet<LiquidacionesComercialEstado> LiquidacionesComercialEstados { get; set; }

    public virtual DbSet<Listado> Listados { get; set; }

    public virtual DbSet<Localidade> Localidades { get; set; }

    public virtual DbSet<LogCompuesto> LogCompuestos { get; set; }

    public virtual DbSet<LogDebug> LogDebugs { get; set; }

    public virtual DbSet<Lote> Lotes { get; set; }

    public virtual DbSet<LotesCdbo> LotesCdbos { get; set; }

    public virtual DbSet<LotesEstado> LotesEstados { get; set; }

    public virtual DbSet<LotesTraza> LotesTrazas { get; set; }

    public virtual DbSet<Maquina> Maquinas { get; set; }

    public virtual DbSet<MaquinasConsumo> MaquinasConsumos { get; set; }

    public virtual DbSet<MaquinasConsumosSaldo> MaquinasConsumosSaldos { get; set; }

    public virtual DbSet<MaquinasEstado> MaquinasEstados { get; set; }

    public virtual DbSet<MaquinasGrupo> MaquinasGrupos { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<MargenesClafe> MargenesClaves { get; set; }

    public virtual DbSet<MargenesTipo> MargenesTipos { get; set; }

    public virtual DbSet<Medida> Medidas { get; set; }

    public virtual DbSet<MediosPago> MediosPagos { get; set; }

    public virtual DbSet<MediosPagoCargoCuentum> MediosPagoCargoCuenta { get; set; }

    public virtual DbSet<Mese> Meses { get; set; }

    public virtual DbSet<Modelo> Modelos { get; set; }

    public virtual DbSet<ModulosGestion> ModulosGestions { get; set; }

    public virtual DbSet<MovimientosAlmacen> MovimientosAlmacens { get; set; }

    public virtual DbSet<MovimientosAlmacenDetalle> MovimientosAlmacenDetalles { get; set; }

    public virtual DbSet<MovimientosAlmacenSaldo> MovimientosAlmacenSaldos { get; set; }

    public virtual DbSet<MovimientosAlmacenTipo> MovimientosAlmacenTipos { get; set; }

    public virtual DbSet<NicDiccionario> NicDiccionarios { get; set; }

    public virtual DbSet<NicPgcCuentasListado> NicPgcCuentasListados { get; set; }

    public virtual DbSet<Ope> Opes { get; set; }

    public virtual DbSet<Operacione> Operaciones { get; set; }

    public virtual DbSet<OperacionesAtributo> OperacionesAtributos { get; set; }

    public virtual DbSet<OpesCdbo> OpesCdbos { get; set; }

    public virtual DbSet<OpesDetalle> OpesDetalles { get; set; }

    public virtual DbSet<OpesDetalleCdbo> OpesDetalleCdbos { get; set; }

    public virtual DbSet<OpesEnvioMaterial> OpesEnvioMaterials { get; set; }

    public virtual DbSet<OpesEstado> OpesEstados { get; set; }

    public virtual DbSet<OrdenesFabricacion> OrdenesFabricacions { get; set; }

    public virtual DbSet<OrdenesFabricacionDatosDinamico> OrdenesFabricacionDatosDinamicos { get; set; }

    public virtual DbSet<OrdenesFabricacionDetalle> OrdenesFabricacionDetalles { get; set; }

    public virtual DbSet<OrdenesFabricacionDetalleEmpleado> OrdenesFabricacionDetalleEmpleados { get; set; }

    public virtual DbSet<OrdenesFabricacionEstado> OrdenesFabricacionEstados { get; set; }

    public virtual DbSet<OrdenesFabricacionOrigene> OrdenesFabricacionOrigenes { get; set; }

    public virtual DbSet<OrdenesFabricacionPrioridade> OrdenesFabricacionPrioridades { get; set; }

    public virtual DbSet<OrdenesFabricacionTipo> OrdenesFabricacionTipos { get; set; }

    public virtual DbSet<OrdenesSeriada> OrdenesSeriadas { get; set; }

    public virtual DbSet<OrdenesSeriadasDatosDinamico> OrdenesSeriadasDatosDinamicos { get; set; }

    public virtual DbSet<OrdenesSeriadasDetalle> OrdenesSeriadasDetalles { get; set; }

    public virtual DbSet<OrdenesSeriadasEstado> OrdenesSeriadasEstados { get; set; }

    public virtual DbSet<OrdenesSeriadasExplosione> OrdenesSeriadasExplosiones { get; set; }

    public virtual DbSet<Paise> Paises { get; set; }

    public virtual DbSet<Parte> Partes { get; set; }

    public virtual DbSet<PartesCdbo> PartesCdbos { get; set; }

    public virtual DbSet<PartesFormulario> PartesFormularios { get; set; }

    public virtual DbSet<PartesTipo> PartesTipos { get; set; }

    public virtual DbSet<PedidosCompra> PedidosCompras { get; set; }

    public virtual DbSet<PedidosCompraCdbo> PedidosCompraCdbos { get; set; }

    public virtual DbSet<PedidosCompraDetalle> PedidosCompraDetalles { get; set; }

    public virtual DbSet<PedidosCompraDetalleCdbo> PedidosCompraDetalleCdbos { get; set; }

    public virtual DbSet<PedidosCompraEstado> PedidosCompraEstados { get; set; }

    public virtual DbSet<PedidosVentaCdbo> PedidosVentaCdbos { get; set; }

    public virtual DbSet<PedidosVentaDatosDinamico> PedidosVentaDatosDinamicos { get; set; }

    public virtual DbSet<PedidosVentaDescuentosGenerale> PedidosVentaDescuentosGenerales { get; set; }

    public virtual DbSet<PedidosVentaDetalle> PedidosVentaDetalles { get; set; }

    public virtual DbSet<PedidosVentaDetalleCdbo> PedidosVentaDetalleCdbos { get; set; }

    public virtual DbSet<PedidosVentaEstado> PedidosVentaEstados { get; set; }

    public virtual DbSet<PedidosVentum> PedidosVenta { get; set; }

    public virtual DbSet<Periodo> Periodos { get; set; }

    public virtual DbSet<PeriodosTipo> PeriodosTipos { get; set; }

    public virtual DbSet<PermisosAccione> PermisosAcciones { get; set; }

    public virtual DbSet<PermisosCategoria> PermisosCategorias { get; set; }

    public virtual DbSet<PermisosEmpleado> PermisosEmpleados { get; set; }

    public virtual DbSet<Pgc> Pgcs { get; set; }

    public virtual DbSet<Pgcnorma> Pgcnormas { get; set; }

    public virtual DbSet<PortesTipo> PortesTipos { get; set; }

    public virtual DbSet<PresupuestosCompra> PresupuestosCompras { get; set; }

    public virtual DbSet<PresupuestosCompraCdbo> PresupuestosCompraCdbos { get; set; }

    public virtual DbSet<PresupuestosCompraDetalle> PresupuestosCompraDetalles { get; set; }

    public virtual DbSet<PresupuestosCompraDetalleCdbo> PresupuestosCompraDetalleCdbos { get; set; }

    public virtual DbSet<PresupuestosCompraEstado> PresupuestosCompraEstados { get; set; }

    public virtual DbSet<PresupuestosVentaCdbo> PresupuestosVentaCdbos { get; set; }

    public virtual DbSet<PresupuestosVentaDescuentosGenerale> PresupuestosVentaDescuentosGenerales { get; set; }

    public virtual DbSet<PresupuestosVentaDetalle> PresupuestosVentaDetalles { get; set; }

    public virtual DbSet<PresupuestosVentaDetalleCdbo> PresupuestosVentaDetalleCdbos { get; set; }

    public virtual DbSet<PresupuestosVentaEstado> PresupuestosVentaEstados { get; set; }

    public virtual DbSet<PresupuestosVentaProductosActualizable> PresupuestosVentaProductosActualizables { get; set; }

    public virtual DbSet<PresupuestosVentum> PresupuestosVenta { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<ProductosAlmacen> ProductosAlmacens { get; set; }

    public virtual DbSet<ProductosAtribsValore> ProductosAtribsValores { get; set; }

    public virtual DbSet<ProductosBase> ProductosBases { get; set; }

    public virtual DbSet<ProductosBaseCdbo> ProductosBaseCdbos { get; set; }

    public virtual DbSet<ProductosBaseUnidadesModulo> ProductosBaseUnidadesModulos { get; set; }

    public virtual DbSet<ProductosCdbo> ProductosCdbos { get; set; }

    public virtual DbSet<ProductosCliente> ProductosClientes { get; set; }

    public virtual DbSet<ProductosCodigosBarra> ProductosCodigosBarras { get; set; }

    public virtual DbSet<ProductosCompuesto> ProductosCompuestos { get; set; }

    public virtual DbSet<ProductosCompuestosCdbo> ProductosCompuestosCdbos { get; set; }

    public virtual DbSet<ProductosCompuestosPlantilla> ProductosCompuestosPlantillas { get; set; }

    public virtual DbSet<ProductosCompuestosPlantillasComponente> ProductosCompuestosPlantillasComponentes { get; set; }

    public virtual DbSet<ProductosCompuestosPlantillasLog> ProductosCompuestosPlantillasLogs { get; set; }

    public virtual DbSet<ProductosConjunto> ProductosConjuntos { get; set; }

    public virtual DbSet<ProductosConjuntosComponente> ProductosConjuntosComponentes { get; set; }

    public virtual DbSet<ProductosConjuntosDatosDinamico> ProductosConjuntosDatosDinamicos { get; set; }

    public virtual DbSet<ProductosDatosDinamico> ProductosDatosDinamicos { get; set; }

    public virtual DbSet<ProductosEspeciale> ProductosEspeciales { get; set; }

    public virtual DbSet<ProductosEstado> ProductosEstados { get; set; }

    public virtual DbSet<ProductosFotosLog> ProductosFotosLogs { get; set; }

    public virtual DbSet<ProductosProveedore> ProductosProveedores { get; set; }

    public virtual DbSet<ProductosSugerido> ProductosSugeridos { get; set; }

    public virtual DbSet<ProductosTipo> ProductosTipos { get; set; }

    public virtual DbSet<ProductosUnidadesModulo> ProductosUnidadesModulos { get; set; }

    public virtual DbSet<PropuestasCompra> PropuestasCompras { get; set; }

    public virtual DbSet<PropuestasCompraDetalle> PropuestasCompraDetalles { get; set; }

    public virtual DbSet<Proveedore> Proveedores { get; set; }

    public virtual DbSet<ProveedoresCdbo> ProveedoresCdbos { get; set; }

    public virtual DbSet<ProveedoresContacto> ProveedoresContactos { get; set; }

    public virtual DbSet<ProveedoresCuentasBancaria> ProveedoresCuentasBancarias { get; set; }

    public virtual DbSet<ProveedoresDescuento> ProveedoresDescuentos { get; set; }

    public virtual DbSet<ProveedoresDescuentosRoot> ProveedoresDescuentosRoots { get; set; }

    public virtual DbSet<ProveedoresDiasPago> ProveedoresDiasPagos { get; set; }

    public virtual DbSet<ProveedoresDireccione> ProveedoresDirecciones { get; set; }

    public virtual DbSet<ProveedoresGrupo> ProveedoresGrupos { get; set; }

    public virtual DbSet<ProveedoresMarca> ProveedoresMarcas { get; set; }

    public virtual DbSet<ProveedoresPeriodosExentosPago> ProveedoresPeriodosExentosPagos { get; set; }

    public virtual DbSet<ProveedoresProveedoresGrupo> ProveedoresProveedoresGrupos { get; set; }

    public virtual DbSet<ProveedoresTarifasProducto> ProveedoresTarifasProductos { get; set; }

    public virtual DbSet<ProveedoresTelefono> ProveedoresTelefonos { get; set; }

    public virtual DbSet<ProveedoresTipo> ProveedoresTipos { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<Proyecto> Proyectos { get; set; }

    public virtual DbSet<ProyectosDatosDinamico> ProyectosDatosDinamicos { get; set; }

    public virtual DbSet<ProyectosEstado> ProyectosEstados { get; set; }

    public virtual DbSet<Prueba> Pruebas { get; set; }

    public virtual DbSet<Puesto> Puestos { get; set; }

    public virtual DbSet<PyG> PyGs { get; set; }

    public virtual DbSet<PyGCuenta> PyGCuentas { get; set; }

    public virtual DbSet<PyGa> PyGas { get; set; }

    public virtual DbSet<PyGaCuenta> PyGaCuentas { get; set; }

    public virtual DbSet<Rappel> Rappels { get; set; }

    public virtual DbSet<RegularizacionesAlmacen> RegularizacionesAlmacens { get; set; }

    public virtual DbSet<RemesasCompra> RemesasCompras { get; set; }

    public virtual DbSet<RemesasVentum> RemesasVenta { get; set; }

    public virtual DbSet<RepHorasExtra> RepHorasExtras { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportsConstructor> ReportsConstructors { get; set; }

    public virtual DbSet<ReportsCriteria> ReportsCriterias { get; set; }

    public virtual DbSet<ReportsFamilia> ReportsFamilias { get; set; }

    public virtual DbSet<ReportsLauncher> ReportsLaunchers { get; set; }

    public virtual DbSet<ReportsTipo> ReportsTipos { get; set; }

    public virtual DbSet<ReservasStock> ReservasStocks { get; set; }

    public virtual DbSet<ReservasStockDetalle> ReservasStockDetalles { get; set; }

    public virtual DbSet<Resultado> Resultados { get; set; }

    public virtual DbSet<RpReportsCliente> RpReportsClientes { get; set; }

    public virtual DbSet<RpReportsDefault> RpReportsDefaults { get; set; }

    public virtual DbSet<RpReportsDg> RpReportsDgs { get; set; }

    public virtual DbSet<RpReportsProveedor> RpReportsProveedors { get; set; }

    public virtual DbSet<RrhhPrimasLiquidacion> RrhhPrimasLiquidacions { get; set; }

    public virtual DbSet<RrhhPrimasLiquidacionDetalle> RrhhPrimasLiquidacionDetalles { get; set; }

    public virtual DbSet<RrhhPrimasLiquidacionEstado> RrhhPrimasLiquidacionEstados { get; set; }

    public virtual DbSet<RrhhSetup> RrhhSetups { get; set; }

    public virtual DbSet<RrhhSetupCategoria> RrhhSetupCategorias { get; set; }

    public virtual DbSet<RutasProduccion> RutasProduccions { get; set; }

    public virtual DbSet<Sctab> Sctabs { get; set; }

    public virtual DbSet<Seccione> Secciones { get; set; }

    public virtual DbSet<Series> Series { get; set; }

    public virtual DbSet<SrvContrato> SrvContratos { get; set; }

    public virtual DbSet<SrvContratosCdbo> SrvContratosCdbos { get; set; }

    public virtual DbSet<SrvContratosDetalle> SrvContratosDetalles { get; set; }

    public virtual DbSet<SrvContratosDetalleCdbo> SrvContratosDetalleCdbos { get; set; }

    public virtual DbSet<SrvContratosEstado> SrvContratosEstados { get; set; }

    public virtual DbSet<SrvContratosPlanificacion> SrvContratosPlanificacions { get; set; }

    public virtual DbSet<SrvPresupuestosVentaCdbo> SrvPresupuestosVentaCdbos { get; set; }

    public virtual DbSet<SrvPresupuestosVentaDetalle> SrvPresupuestosVentaDetalles { get; set; }

    public virtual DbSet<SrvPresupuestosVentaDetalleCdbo> SrvPresupuestosVentaDetalleCdbos { get; set; }

    public virtual DbSet<SrvPresupuestosVentaEstado> SrvPresupuestosVentaEstados { get; set; }

    public virtual DbSet<SrvPresupuestosVentum> SrvPresupuestosVenta { get; set; }

    public virtual DbSet<Subctum> Subcta { get; set; }

    public virtual DbSet<SyncConnection> SyncConnections { get; set; }

    public virtual DbSet<SyncOperation> SyncOperations { get; set; }

    public virtual DbSet<SyncSynchronization> SyncSynchronizations { get; set; }

    public virtual DbSet<SyncSynchronizedRecord> SyncSynchronizedRecords { get; set; }

    public virtual DbSet<SyncTipo> SyncTipos { get; set; }

    public virtual DbSet<Tarea> Tareas { get; set; }

    public virtual DbSet<Tarifa> Tarifas { get; set; }

    public virtual DbSet<TarifasDetalle> TarifasDetalles { get; set; }

    public virtual DbSet<TarifasTipo> TarifasTipos { get; set; }

    public virtual DbSet<Temporada> Temporadas { get; set; }

    public virtual DbSet<TesoreriaApunte> TesoreriaApuntes { get; set; }

    public virtual DbSet<TesoreriaApunteTipo> TesoreriaApunteTipos { get; set; }

    public virtual DbSet<TesoreriaSaldosFecha> TesoreriaSaldosFechas { get; set; }

    public virtual DbSet<TipoFacturacion> TipoFacturacions { get; set; }

    public virtual DbSet<TiposDireccion> TiposDireccions { get; set; }

    public virtual DbSet<TiposLinea> TiposLineas { get; set; }

    public virtual DbSet<TiposPorte> TiposPortes { get; set; }

    public virtual DbSet<Tpv> Tpvs { get; set; }

    public virtual DbSet<TpvcabeceraTicket> TpvcabeceraTickets { get; set; }

    public virtual DbSet<Tpvcambio> Tpvcambios { get; set; }

    public virtual DbSet<Tpvdescuento> Tpvdescuentos { get; set; }

    public virtual DbSet<TpvformasPago> TpvformasPagos { get; set; }

    public virtual DbSet<Tpvimg> Tpvimgs { get; set; }

    public virtual DbSet<TpvmensajesVisor> TpvmensajesVisors { get; set; }

    public virtual DbSet<TpvmovimientosCaja> TpvmovimientosCajas { get; set; }

    public virtual DbSet<TpvpagosPorCaja> TpvpagosPorCajas { get; set; }

    public virtual DbSet<TpvpieTicket> TpvpieTickets { get; set; }

    public virtual DbSet<Tpvpromocione> Tpvpromociones { get; set; }

    public virtual DbSet<Tpvticket> Tpvtickets { get; set; }

    public virtual DbSet<TpvticketsCdbo> TpvticketsCdbos { get; set; }

    public virtual DbSet<TpvticketsDetalle> TpvticketsDetalles { get; set; }

    public virtual DbSet<TpvticketsDetalleCdbo> TpvticketsDetalleCdbos { get; set; }

    public virtual DbSet<TpvticketsEstado> TpvticketsEstados { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TskTarea> TskTareas { get; set; }

    public virtual DbSet<TskTareasClase> TskTareasClases { get; set; }

    public virtual DbSet<TskTareasEstado> TskTareasEstados { get; set; }

    public virtual DbSet<TskTareasMantenimientoTipo> TskTareasMantenimientoTipos { get; set; }

    public virtual DbSet<TskTareasOrigene> TskTareasOrigenes { get; set; }

    public virtual DbSet<TskTareasPrioridade> TskTareasPrioridades { get; set; }

    public virtual DbSet<TskTareasTipoMantenimiento> TskTareasTipoMantenimientos { get; set; }

    public virtual DbSet<Turno> Turnos { get; set; }

    public virtual DbSet<UnidadesMedidum> UnidadesMedida { get; set; }

    public virtual DbSet<UnidadesProducto> UnidadesProductos { get; set; }

    public virtual DbSet<UnidadesProductoBase> UnidadesProductoBases { get; set; }

    public virtual DbSet<VAlbaranVentaCabecera> VAlbaranVentaCabeceras { get; set; }

    public virtual DbSet<VAlbaranVentaDetalleApartado> VAlbaranVentaDetalleApartados { get; set; }

    public virtual DbSet<VAlbaranVentum> VAlbaranVenta { get; set; }

    public virtual DbSet<VAlbaranesCompra> VAlbaranesCompras { get; set; }

    public virtual DbSet<VAlbaranesVentaDetalle> VAlbaranesVentaDetalles { get; set; }

    public virtual DbSet<VCdboClientesExportOutlook> VCdboClientesExportOutlooks { get; set; }

    public virtual DbSet<VClientesDato> VClientesDatos { get; set; }

    public virtual DbSet<VDetalle> VDetalles { get; set; }

    public virtual DbSet<VFabricacionesPendiente> VFabricacionesPendientes { get; set; }

    public virtual DbSet<VFacturaAlbaranDetalle> VFacturaAlbaranDetalles { get; set; }

    public virtual DbSet<VFacturasCompra> VFacturasCompras { get; set; }

    public virtual DbSet<VFacturasEmitidasContabilidad> VFacturasEmitidasContabilidads { get; set; }

    public virtual DbSet<VFacturasRecibidasCotabilidad> VFacturasRecibidasCotabilidads { get; set; }

    public virtual DbSet<VFacturasVentaCabecera> VFacturasVentaCabeceras { get; set; }

    public virtual DbSet<VFacturasVentaDetalle> VFacturasVentaDetalles { get; set; }

    public virtual DbSet<VFacturasVentaDetalleApartado> VFacturasVentaDetalleApartados { get; set; }

    public virtual DbSet<VFacturasVentum> VFacturasVenta { get; set; }

    public virtual DbSet<VIdiva> VIdivas { get; set; }

    public virtual DbSet<VInicializacionStock> VInicializacionStocks { get; set; }

    public virtual DbSet<VIva> VIvas { get; set; }

    public virtual DbSet<VIvafactura> VIvafacturas { get; set; }

    public virtual DbSet<VListadoBalanceOficial1> VListadoBalanceOficial1s { get; set; }

    public virtual DbSet<VListadoBalanceOficial2> VListadoBalanceOficial2s { get; set; }

    public virtual DbSet<VOrdenFabricacion> VOrdenFabricacions { get; set; }

    public virtual DbSet<VPartesOf> VPartesOfs { get; set; }

    public virtual DbSet<VPartesOfmat> VPartesOfmats { get; set; }

    public virtual DbSet<VPedidoVentum> VPedidoVenta { get; set; }

    public virtual DbSet<VPedidosCompra> VPedidosCompras { get; set; }

    public virtual DbSet<VPresupuestoVentum> VPresupuestoVenta { get; set; }

    public virtual DbSet<VPresupuestosCompra> VPresupuestosCompras { get; set; }

    public virtual DbSet<VPresupuestosVentaCabecera> VPresupuestosVentaCabeceras { get; set; }

    public virtual DbSet<VPresupuestosVentaDetalle> VPresupuestosVentaDetalles { get; set; }

    public virtual DbSet<VPresupuestosVentaDetalleApartado> VPresupuestosVentaDetalleApartados { get; set; }

    public virtual DbSet<VPrimeraDireccionCliente> VPrimeraDireccionClientes { get; set; }

    public virtual DbSet<VPrimeraDireccionProveedor> VPrimeraDireccionProveedors { get; set; }

    public virtual DbSet<VRemesasCompra> VRemesasCompras { get; set; }

    public virtual DbSet<VRemesasVenta> VRemesasVentas { get; set; }

    public virtual DbSet<VSumaIva> VSumaIvas { get; set; }

    public virtual DbSet<VSumaIvafacturaCompra> VSumaIvafacturaCompras { get; set; }

    public virtual DbSet<VSumaIvapedidoCompra> VSumaIvapedidoCompras { get; set; }

    public virtual DbSet<VTotalFacturaCompraPie> VTotalFacturaCompraPies { get; set; }

    public virtual DbSet<VTotalesUnidadMedidaOf> VTotalesUnidadMedidaOfs { get; set; }

    public virtual DbSet<VTotalesUnidadMedidum> VTotalesUnidadMedida { get; set; }

    public virtual DbSet<Vale> Vales { get; set; }

    public virtual DbSet<ValesCdbo> ValesCdbos { get; set; }

    public virtual DbSet<ValesDetalle> ValesDetalles { get; set; }

    public virtual DbSet<ValesDetalleCdbo> ValesDetalleCdbos { get; set; }

    public virtual DbSet<ValesEstado> ValesEstados { get; set; }

    public virtual DbSet<ValesOrigene> ValesOrigenes { get; set; }

    public virtual DbSet<ValoresLote> ValoresLotes { get; set; }

    public virtual DbSet<ValoresProducto> ValoresProductos { get; set; }

    public virtual DbSet<Vencimiento> Vencimientos { get; set; }

    public virtual DbSet<VencimientosCompra> VencimientosCompras { get; set; }

    public virtual DbSet<VencimientosVentum> VencimientosVenta { get; set; }

    public virtual DbSet<Wizard> Wizards { get; set; }

    public virtual DbSet<Zona> Zonas { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    { }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Personaliza la longitud de la columna Email
        //modelBuilder.Entity<IdentityUser>(entity =>
        //{
            //entity.Property(u => u.Email).HasMaxLength(255);
        //});
    

    modelBuilder.Entity<IdentityUser>().ToTable("ClientesUsers");
        modelBuilder.Entity<IdentityRole>().ToTable("clientesRole");
        modelBuilder.Entity<IdentityUserRole<string>>().ToTable("clientesUserRole");
        modelBuilder.Entity<IdentityUserClaim<string>>().ToTable("clientesUserClaim");
        modelBuilder.Entity<IdentityUserLogin<string>>().ToTable("clientesUserLogin");
        modelBuilder.Entity<IdentityUserToken<string>>().ToTable("clientesUsertoken");
        modelBuilder.Entity<IdentityRoleClaim<string>>().ToTable("clientesroleclaim");

        modelBuilder.Entity<ext_adm_CL_Search>(entity =>
        {
            entity.HasKey(e => e.IDPersona);

            entity.ToView("ext_adm_CL_Search"); //Indica que la entidad está mapeada a la vista ext_adm_CL_Search

            // Configura las propiedades correspondientes a las columnas de la vista
            entity.Property(e => e.IDPersona).HasColumnName("IDPersona");
            entity.Property(e => e.Nombre).HasColumnName("Nombre");
            entity.Property(e => e.NombreComercial).HasColumnName("NombreComercial");
            entity.Property(e => e.Telefono).HasColumnName("Telefono");
            entity.Property(e => e.Fax).HasColumnName("Fax");
            entity.Property(e => e.CIF_NIF).HasColumnName("CIF_NIF");
            entity.Property(e => e.Email).HasColumnName("Email");
            entity.Property(e => e.PaginaWeb).HasColumnName("PaginaWeb");
            entity.Property(e => e.UsuarioRegistrado).HasColumnName("UsuarioRegistrado");
            entity.Property(e => e.TipoDeCliente).HasColumnName("Tipo de Cliente");
            entity.Property(e => e.TipoID).HasColumnName("TipoID");
            entity.Property(e => e.LockoutEnabled).HasColumnName("LockoutEnabled");
            entity.Property(e => e.EmailConfirmed).HasColumnName("EmailConfirmed");

        });
        modelBuilder.Entity<EXT_adm_CL_Tipos_lookup>(entity =>
        {
            entity.HasKey(e => e.IDTipo);

            entity.ToView("EXT_adm_CL_Tipos_lookup"); //Indica que la entidad está mapeada a la vista ext_adm_CL_Search

            // Configura las propiedades correspondientes a las columnas de la vista
            entity.Property(e => e.IDTipo).HasColumnName("IDTipo");
            entity.Property(e => e.Nombre).HasColumnName("Nombre");
           
        });
        modelBuilder.Entity<EXT_adm_CL_email_lookup>(entity =>
        {
            entity.HasKey(e => e.IDContacto);

            entity.ToView("EXT_adm_CL_email_lookup"); //Indica que la entidad está mapeada a la vista ext_adm_CL_Search

            // Configura las propiedades correspondientes a las columnas de la vista
            entity.Property(e => e.IDContacto).HasColumnName("IDContacto");
            entity.Property(e => e.Email).HasColumnName("Email");
            entity.Property(e => e.Descripcion).HasColumnName("Descripcion");
        });


        modelBuilder.Entity<AeEntidade>(entity =>
        {
            entity.HasKey(e => e.EntidadId);

            entity.ToTable("AE_Entidades");

            entity.Property(e => e.EntidadId)
                .ValueGeneratedNever()
                .HasColumnName("EntidadID");

            entity.HasOne(d => d.Entidad).WithOne(p => p.AeEntidade)
                .HasForeignKey<AeEntidade>(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AE_Entidades_GS_Entidades");
        });

        modelBuilder.Entity<AeatM303>(entity =>
        {
            entity.HasKey(e => e.Idmodelo);

            entity.ToTable("AEAT_M303");

            entity.Property(e => e.Idmodelo).HasColumnName("IDModelo");
            entity.Property(e => e.Adeducir)
                .HasColumnType("money")
                .HasColumnName("ADeducir");
            entity.Property(e => e.AdministracionEstado).HasColumnType("money");
            entity.Property(e => e.AdministracionEstadoPerCent).HasColumnType("money");
            entity.Property(e => e.ComplementariaJustificante)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.CuotasAcompensar)
                .HasColumnType("money")
                .HasColumnName("CuotasACompensar");
            entity.Property(e => e.CuotasAcompensarAplicadasEnPeriodo)
                .HasColumnType("money")
                .HasColumnName("CuotasACompensarAplicadasEnPeriodo");
            entity.Property(e => e.CuotasAcompensarAplicadasPeriodosPosteriores)
                .HasColumnType("money")
                .HasColumnName("CuotasACompensarAplicadasPeriodosPosteriores");
            entity.Property(e => e.DedAdquisicionIntracomunitariaCorrientesBi)
                .HasColumnType("money")
                .HasColumnName("DED_AdquisicionIntracomunitariaCorrientes_BI");
            entity.Property(e => e.DedAdquisicionIntracomunitariaCorrientesCuota)
                .HasColumnType("money")
                .HasColumnName("DED_AdquisicionIntracomunitariaCorrientes_Cuota");
            entity.Property(e => e.DedAdquisicionIntracomunitariaInversionBi)
                .HasColumnType("money")
                .HasColumnName("DED_AdquisicionIntracomunitariaInversion_BI");
            entity.Property(e => e.DedAdquisicionIntracomunitariaInversionCuota)
                .HasColumnType("money")
                .HasColumnName("DED_AdquisicionIntracomunitariaInversion_Cuota");
            entity.Property(e => e.DedCompensacionRegimenEspecialAgp)
                .HasColumnType("money")
                .HasColumnName("DED_CompensacionRegimenEspecialAGP");
            entity.Property(e => e.DedImportacionCorrientesBi)
                .HasColumnType("money")
                .HasColumnName("DED_ImportacionCorrientes_BI");
            entity.Property(e => e.DedImportacionCorrientesCuota)
                .HasColumnType("money")
                .HasColumnName("DED_ImportacionCorrientes_Cuota");
            entity.Property(e => e.DedImportacionInversionBi)
                .HasColumnType("money")
                .HasColumnName("DED_ImportacionInversion_BI");
            entity.Property(e => e.DedImportacionInversionCuota)
                .HasColumnType("money")
                .HasColumnName("DED_ImportacionInversion_Cuota");
            entity.Property(e => e.DedModificacionBasesYcuotasBi)
                .HasColumnType("money")
                .HasColumnName("DED_ModificacionBasesYCuotas_BI");
            entity.Property(e => e.DedModificacionBasesYcuotasCuota)
                .HasColumnType("money")
                .HasColumnName("DED_ModificacionBasesYCuotas_Cuota");
            entity.Property(e => e.DedOpInterioresBienesInversionBi)
                .HasColumnType("money")
                .HasColumnName("DED_OpInterioresBienesInversion_BI");
            entity.Property(e => e.DedOpInterioresBienesInversionCuota)
                .HasColumnType("money")
                .HasColumnName("DED_OpInterioresBienesInversion_Cuota");
            entity.Property(e => e.DedOpInterioresCorrientesBi)
                .HasColumnType("money")
                .HasColumnName("DED_OpInterioresCorrientes_BI");
            entity.Property(e => e.DedOpInterioresCorrientesCuota)
                .HasColumnType("money")
                .HasColumnName("DED_OpInterioresCorrientes_Cuota");
            entity.Property(e => e.DedRegularizacionAplicacionPerCentProrrata)
                .HasColumnType("money")
                .HasColumnName("DED_RegularizacionAplicacionPerCentProrrata");
            entity.Property(e => e.DedRegularizacionInversiones)
                .HasColumnType("money")
                .HasColumnName("DED_RegularizacionInversiones");
            entity.Property(e => e.DedTotalAdeducir)
                .HasColumnType("money")
                .HasColumnName("DED_TotalADeducir");
            entity.Property(e => e.Dev1Bi)
                .HasColumnType("money")
                .HasColumnName("DEV1_BI");
            entity.Property(e => e.Dev1Cuota)
                .HasColumnType("money")
                .HasColumnName("DEV1_Cuota");
            entity.Property(e => e.Dev1Tipo)
                .HasColumnType("money")
                .HasColumnName("DEV1_Tipo");
            entity.Property(e => e.Dev2Bi)
                .HasColumnType("money")
                .HasColumnName("DEV2_BI");
            entity.Property(e => e.Dev2Cuota)
                .HasColumnType("money")
                .HasColumnName("DEV2_Cuota");
            entity.Property(e => e.Dev2Tipo)
                .HasColumnType("money")
                .HasColumnName("DEV2_Tipo");
            entity.Property(e => e.Dev3Bi)
                .HasColumnType("money")
                .HasColumnName("DEV3_BI");
            entity.Property(e => e.Dev3Cuota)
                .HasColumnType("money")
                .HasColumnName("DEV3_Cuota");
            entity.Property(e => e.Dev3Tipo)
                .HasColumnType("money")
                .HasColumnName("DEV3_Tipo");
            entity.Property(e => e.DevAdquisionesIntracomunitariasBi)
                .HasColumnType("money")
                .HasColumnName("DEV_AdquisionesIntracomunitarias_BI");
            entity.Property(e => e.DevAdquisionesIntracomunitariasCuota)
                .HasColumnType("money")
                .HasColumnName("DEV_AdquisionesIntracomunitarias_Cuota");
            entity.Property(e => e.DevModificacionBasesYcuotasBi)
                .HasColumnType("money")
                .HasColumnName("DEV_ModificacionBasesYCuotas_BI");
            entity.Property(e => e.DevModificacionBasesYcuotasCuota)
                .HasColumnType("money")
                .HasColumnName("DEV_ModificacionBasesYCuotas_Cuota");
            entity.Property(e => e.DevModificacionBasesYcuotasReBi)
                .HasColumnType("money")
                .HasColumnName("DEV_ModificacionBasesYCuotas_RE_BI");
            entity.Property(e => e.DevModificacionBasesYcuotasReCuota)
                .HasColumnType("money")
                .HasColumnName("DEV_ModificacionBasesYCuotas_RE_Cuota");
            entity.Property(e => e.DevOtrasActividadesInversionSujetoPasivoBi)
                .HasColumnType("money")
                .HasColumnName("DEV_OtrasActividadesInversionSujetoPasivo_BI");
            entity.Property(e => e.DevOtrasActividadesInversionSujetoPasivoCuota)
                .HasColumnType("money")
                .HasColumnName("DEV_OtrasActividadesInversionSujetoPasivo_Cuota");
            entity.Property(e => e.DevRe1Bi)
                .HasColumnType("money")
                .HasColumnName("DEV_RE1_BI");
            entity.Property(e => e.DevRe1Cuota)
                .HasColumnType("money")
                .HasColumnName("DEV_RE1_Cuota");
            entity.Property(e => e.DevRe1Tipo)
                .HasColumnType("money")
                .HasColumnName("DEV_RE1_Tipo");
            entity.Property(e => e.DevRe2Bi)
                .HasColumnType("money")
                .HasColumnName("DEV_RE2_BI");
            entity.Property(e => e.DevRe2Cuota)
                .HasColumnType("money")
                .HasColumnName("DEV_RE2_Cuota");
            entity.Property(e => e.DevRe2Tipo)
                .HasColumnType("money")
                .HasColumnName("DEV_RE2_Tipo");
            entity.Property(e => e.DevRe3Bi)
                .HasColumnType("money")
                .HasColumnName("DEV_RE3_BI");
            entity.Property(e => e.DevRe3Cuota)
                .HasColumnType("money")
                .HasColumnName("DEV_RE3_Cuota");
            entity.Property(e => e.DevRe3Tipo)
                .HasColumnType("money")
                .HasColumnName("DEV_RE3_Tipo");
            entity.Property(e => e.DevTotalDevengado)
                .HasColumnType("money")
                .HasColumnName("DEV_TotalDevengado");
            entity.Property(e => e.DevolCcb)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("DEVOL_CCB");
            entity.Property(e => e.DevolImporte)
                .HasColumnType("money")
                .HasColumnName("DEVOL_Importe");
            entity.Property(e => e.Diferencia).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EntregasIntracomunitarias).HasColumnType("money");
            entity.Property(e => e.ExportacionesYoperacionsAsimiladas)
                .HasColumnType("money")
                .HasColumnName("ExportacionesYOperacionsAsimiladas");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.IaExonClave1).HasColumnName("IA_Exon_Clave_1");
            entity.Property(e => e.IaExonClave2).HasColumnName("IA_Exon_Clave_2");
            entity.Property(e => e.IaExonClave3).HasColumnName("IA_Exon_Clave_3");
            entity.Property(e => e.IaExonClave4).HasColumnName("IA_Exon_Clave_4");
            entity.Property(e => e.IaExonClave5).HasColumnName("IA_Exon_Clave_5");
            entity.Property(e => e.IaExonClaveP).HasColumnName("IA_Exon_Clave_P");
            entity.Property(e => e.IaExonIae1)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_IAE_1");
            entity.Property(e => e.IaExonIae2)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_IAE_2");
            entity.Property(e => e.IaExonIae3)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_IAE_3");
            entity.Property(e => e.IaExonIae4)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_IAE_4");
            entity.Property(e => e.IaExonIae5)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_IAE_5");
            entity.Property(e => e.IaExonIaeP)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_IAE_P");
            entity.Property(e => e.IaExonMarcaTercerasPers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IA_Exon_Marca_TercerasPers");
            entity.Property(e => e.IaExonOperEntIntrocomExentas)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_EntIntrocomExentas");
            entity.Property(e => e.IaExonOperEntregasBienesInsMont)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_EntregasBienesInsMont");
            entity.Property(e => e.IaExonOperEntregasBienesNoHabituales)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_EntregasBienesNoHabituales");
            entity.Property(e => e.IaExonOperExentasSinDeduccion)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_Exentas_SinDeduccion");
            entity.Property(e => e.IaExonOperExportaciones)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_Exportaciones");
            entity.Property(e => e.IaExonOperNoSujetasLocal)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_NoSujetasLocal");
            entity.Property(e => e.IaExonOperReAgenciasViajes)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RE_AgenciasViajes");
            entity.Property(e => e.IaExonOperReAgricultura)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RE_Agricultura");
            entity.Property(e => e.IaExonOperReBiensUsados)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RE_BiensUsados");
            entity.Property(e => e.IaExonOperReEntregasBi)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RE_EntregasBI");
            entity.Property(e => e.IaExonOperRecc)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RECC");
            entity.Property(e => e.IaExonOperRg)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RG");
            entity.Property(e => e.IaExonOperRsimplificado)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_RSimplificado");
            entity.Property(e => e.IaExonOperSujetosRe)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_Sujetos_RE");
            entity.Property(e => e.IaExonOperTotalVolumen)
                .HasColumnType("money")
                .HasColumnName("IA_Exon_Oper_TotalVolumen");
            entity.Property(e => e.IdAplicacionProrrataEspecial).HasColumnName("ID_AplicacionProrrataEspecial");
            entity.Property(e => e.IdAplicacionProrrataEspecialRevocacion).HasColumnName("ID_AplicacionProrrataEspecial_Revocacion");
            entity.Property(e => e.IdAutoliquidacionConjunta).HasColumnName("ID_AutoliquidacionConjunta");
            entity.Property(e => e.IdCriterioDeCaja).HasColumnName("ID_CriterioDeCaja");
            entity.Property(e => e.IdCriterioDeCajaDestinatario).HasColumnName("ID_CriterioDeCajaDestinatario");
            entity.Property(e => e.IdDeclaracionConcursoDictadoEnPeriodo).HasColumnName("ID_DeclaracionConcursoDictadoEnPeriodo");
            entity.Property(e => e.IdDeclaracionConcursoFechaAuto)
                .HasColumnType("datetime")
                .HasColumnName("ID_DeclaracionConcursoFechaAuto");
            entity.Property(e => e.IdDeclaradoConcursoAcreedoresPresentePeriodo).HasColumnName("ID_DeclaradoConcursoAcreedoresPresentePeriodo");
            entity.Property(e => e.IdExisteVolumenOperacionesLiva).HasColumnName("ID_ExisteVolumenOperaciones_LIVA");
            entity.Property(e => e.IdExonerado390).HasColumnName("ID_Exonerado390");
            entity.Property(e => e.IdTributaExclusivamenteRegimenSimplificado).HasColumnName("ID_TributaExclusivamenteRegimenSimplificado");
            entity.Property(e => e.ImporteAcompensar)
                .HasColumnType("money")
                .HasColumnName("ImporteACompensar");
            entity.Property(e => e.IngCcb)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("ING_CCB");
            entity.Property(e => e.IngFormaPago)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ING_FormaPago");
            entity.Property(e => e.IngImporte)
                .HasColumnType("money")
                .HasColumnName("ING_Importe");
            entity.Property(e => e.Localidad)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Nif)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIF");
            entity.Property(e => e.NotasInternas)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OperacionesNoSujetas).HasColumnType("money");
            entity.Property(e => e.OperacionesSujetasIsp)
                .HasColumnType("money")
                .HasColumnName("OperacionesSujetas_ISP");
            entity.Property(e => e.OssOperacionesNosujetasLocalizacion)
                .HasColumnType("money")
                .HasColumnName("OSS_OperacionesNOSujetasLocalizacion");
            entity.Property(e => e.OssOperacionesSujetas)
                .HasColumnType("money")
                .HasColumnName("OSS_OperacionesSujetas");
            entity.Property(e => e.Periodo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReccAdquisicionesBienesYserviciosBi)
                .HasColumnType("money")
                .HasColumnName("RECC_AdquisicionesBienesYServicios_BI");
            entity.Property(e => e.ReccAdquisicionesBienesYserviciosCuota)
                .HasColumnType("money")
                .HasColumnName("RECC_AdquisicionesBienesYServicios_Cuota");
            entity.Property(e => e.ReccEntregasBienesYserviciosBi)
                .HasColumnType("money")
                .HasColumnName("RECC_EntregasBienesYServicios_BI");
            entity.Property(e => e.ReccEntregasBienesYserviciosCuota)
                .HasColumnType("money")
                .HasColumnName("RECC_EntregasBienesYServicios_Cuota");
            entity.Property(e => e.Resultado).HasColumnType("money");
            entity.Property(e => e.ResultadoLiquidacion).HasColumnType("money");
            entity.Property(e => e.SujPasivoTributaExcForalAduana).HasDefaultValueSql("((2))");
            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TributacionConjunta).HasColumnType("money");
            entity.Property(e => e.TributacionPorTerritorio).HasColumnType("money");
            entity.Property(e => e.VoluntarioLivasede)
                .HasDefaultValueSql("((2))")
                .HasColumnName("VoluntarioLIVASede");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.AeatM303s)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AEAT_M303_Ejercicios");
        });

        modelBuilder.Entity<AeatM303Tipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("AEAT_M303_Tipos");

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AeatM340>(entity =>
        {
            entity.HasKey(e => e.Idmodelo);

            entity.ToTable("AEAT_M340");

            entity.Property(e => e.Idmodelo).HasColumnName("IDModelo");
            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContactoTelefono)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Contacto_Telefono");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.ImporteTotalBi)
                .HasColumnType("money")
                .HasColumnName("ImporteTotalBI");
            entity.Property(e => e.ImporteTotalCuota).HasColumnType("money");
            entity.Property(e => e.ImporteTotalOperaciones).HasColumnType("money");
            entity.Property(e => e.NidentificativoDeclaracionAnterior)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIdentificativoDeclaracionAnterior");
            entity.Property(e => e.Nif)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIF");
            entity.Property(e => e.NifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFRepresentanteLegal");
            entity.Property(e => e.Nregistros).HasColumnName("NRegistros");
            entity.Property(e => e.NumeroPresentacion)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Periodo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoSoporte)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('T')")
                .IsFixedLength();
            entity.Property(e => e.Valida)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<AeatM340Detalle>(entity =>
        {
            entity.HasKey(e => e.Iddetalle);

            entity.ToTable("AEAT_M340_Detalle", tb => tb.HasTrigger("tr_AEAT_M340_Detalle_Upd_Cabecera"));

            entity.Property(e => e.Iddetalle).HasColumnName("IDDetalle");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.BaseImponibleAcoste)
                .HasColumnType("money")
                .HasColumnName("BaseImponibleACoste");
            entity.Property(e => e.ClaveDeclarado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveIdentificacion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveOperacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveTipoLibro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CobroCuenta)
                .HasMaxLength(34)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobro_Cuenta");
            entity.Property(e => e.CobroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Cobro_Fecha");
            entity.Property(e => e.CobroImporte)
                .HasColumnType("money")
                .HasColumnName("Cobro_Importe");
            entity.Property(e => e.CobroMedio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobro_Medio");
            entity.Property(e => e.CodigoEstadoMiembro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodigoFactura)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodigoPais)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuotaImpuesto).HasColumnType("money");
            entity.Property(e => e.DescripcionBienes)
                .HasMaxLength(35)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DireccionOperadorIntracomunitarioCp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionOperadorIntracomunitario_CP");
            entity.Property(e => e.DireccionOperadorIntracomunitarioDomicilio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionOperadorIntracomunitario_Domicilio");
            entity.Property(e => e.DireccionOperadorIntracomunitarioPoblacion)
                .HasMaxLength(22)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionOperadorIntracomunitario_Poblacion");
            entity.Property(e => e.FacturaRectificada)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FechaExpedicion).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioUtilizacion).HasColumnType("datetime");
            entity.Property(e => e.FechaOperacion).HasColumnType("datetime");
            entity.Property(e => e.IdentificacionBien).HasColumnType("datetime");
            entity.Property(e => e.IdentificacionEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImporteMetalico).HasColumnType("money");
            entity.Property(e => e.ImporteTotal).HasColumnType("money");
            entity.Property(e => e.ImporteTransmisionesInmuebles).HasColumnType("money");
            entity.Property(e => e.InmuebleSituacion).HasColumnName("Inmueble_Situacion");
            entity.Property(e => e.IntervaloAcumulacionFin).HasColumnName("IntervaloAcumulacion_Fin");
            entity.Property(e => e.IntervaloAcumulacionInicio).HasColumnName("IntervaloAcumulacion_Inicio");
            entity.Property(e => e.ModeloId).HasColumnName("ModeloID");
            entity.Property(e => e.Nfacturas).HasColumnName("NFacturas");
            entity.Property(e => e.NifPaisResidencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIF_PaisResidencia");
            entity.Property(e => e.Nifdeclarado)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFDeclarado");
            entity.Property(e => e.NifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFRepresentanteLegal");
            entity.Property(e => e.Nregistros).HasColumnName("NRegistros");
            entity.Property(e => e.ProrrataAnualDefinitiva)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocialDeclarado)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecargoEqCuota)
                .HasColumnType("money")
                .HasColumnName("RecargoEq_Cuota");
            entity.Property(e => e.RecargoEqTipo)
                .HasColumnType("money")
                .HasColumnName("RecargoEq_Tipo");
            entity.Property(e => e.ReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RegularizacionAnualDeduccion).HasColumnType("money");
            entity.Property(e => e.RegularizacionDeduccionEfectuad).HasColumnType("money");
            entity.Property(e => e.TipoImpositivo).HasColumnType("money");
            entity.Property(e => e.TipoOperacionIntracomunitari)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Modelo).WithMany(p => p.AeatM340Detalles)
                .HasForeignKey(d => d.ModeloId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AEAT_M340_Detalle_AEAT_M340");
        });

        modelBuilder.Entity<AeatM347>(entity =>
        {
            entity.HasKey(e => e.Idmodelo);

            entity.ToTable("AEAT_M347");

            entity.Property(e => e.Idmodelo).HasColumnName("IDModelo");
            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContactoTelefono)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Contacto_Telefono");
            entity.Property(e => e.Ejercicio)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImporteTotalAnualOperaciones).HasColumnType("money");
            entity.Property(e => e.ImporteTotalArrendamiento).HasColumnType("money");
            entity.Property(e => e.NidentificativoDeclaracionAnterior)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIdentificativoDeclaracionAnterior");
            entity.Property(e => e.Nif)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIF");
            entity.Property(e => e.NifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFRepresentanteLegal");
            entity.Property(e => e.NumeroPersonasYentidades).HasColumnName("NumeroPersonasYEntidades");
            entity.Property(e => e.NumeroPresentacion)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoSoporte)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('T')")
                .IsFixedLength();
        });

        modelBuilder.Entity<AeatM347Detalle>(entity =>
        {
            entity.HasKey(e => e.Iddetalle);

            entity.ToTable("AEAT_M347_Detalle");

            entity.Property(e => e.Iddetalle).HasColumnName("IDDetalle");
            entity.Property(e => e.ArrendamientoLocalNegocio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveOperacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodigoPais)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodigoPaisNifoperador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CodigoPaisNIFOperador");
            entity.Property(e => e.CodigoProvincia)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DireccionInmuebleBloque)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Bloque");
            entity.Property(e => e.DireccionInmuebleCalificadorNumero)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_CalificadorNumero");
            entity.Property(e => e.DireccionInmuebleCodigoMunicipio)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_CodigoMunicipio");
            entity.Property(e => e.DireccionInmuebleCodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_CodigoPostal");
            entity.Property(e => e.DireccionInmuebleCodigoProvincia)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_CodigoProvincia");
            entity.Property(e => e.DireccionInmuebleComplemento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Complemento");
            entity.Property(e => e.DireccionInmuebleEscalera)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Escalera");
            entity.Property(e => e.DireccionInmuebleLocalidad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Localidad");
            entity.Property(e => e.DireccionInmuebleMunicipio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Municipio");
            entity.Property(e => e.DireccionInmuebleNombreVia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_NombreVia");
            entity.Property(e => e.DireccionInmuebleNumero)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Numero");
            entity.Property(e => e.DireccionInmueblePlanta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Planta");
            entity.Property(e => e.DireccionInmueblePortal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Portal");
            entity.Property(e => e.DireccionInmueblePuerta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_Puerta");
            entity.Property(e => e.DireccionInmuebleTipoNumeracion)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_TipoNumeracion");
            entity.Property(e => e.DireccionInmuebleTipoVia)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DireccionInmueble_TipoVia");
            entity.Property(e => e.EjercicioImporteMetalico)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImporteAnual).HasColumnType("money");
            entity.Property(e => e.ImporteAnualOperacionesCriterioCaja)
                .HasColumnType("money")
                .HasColumnName("ImporteAnualOPeracionesCriterioCaja");
            entity.Property(e => e.ImporteAnualTransmisionesInmuebles).HasColumnType("money");
            entity.Property(e => e.ImporteMetalico).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestre1).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestre2).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestre3).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestre4).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestreTransmisionesInmuebles1).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestreTransmisionesInmuebles2).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestreTransmisionesInmuebles3).HasColumnType("money");
            entity.Property(e => e.ImporteTrimestreTransmisionesInmuebles4).HasColumnType("money");
            entity.Property(e => e.ModeloId).HasColumnName("ModeloID");
            entity.Property(e => e.Nifdeclarado)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFDeclarado");
            entity.Property(e => e.NifoperadorComunitario)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFOperadorComunitario");
            entity.Property(e => e.NifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFRepresentanteLegal");
            entity.Property(e => e.OperacionInversionSujetoPasivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OPeracionInversionSujetoPasivo");
            entity.Property(e => e.OperacionRegimenDepositoDistintoAduanero)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperacionSeguro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperacionesCriterioCaja)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocialOperador)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SituacionInmueble)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoHoja)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AeatM349>(entity =>
        {
            entity.HasKey(e => e.Idmodelo);

            entity.ToTable("AEAT_M349");

            entity.Property(e => e.Idmodelo).HasColumnName("IDModelo");
            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContactoTelefono)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Contacto_Telefono");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.ImporteTotalOperaciones).HasColumnType("money");
            entity.Property(e => e.ImporteTotalOperacionesRectificat).HasColumnType("money");
            entity.Property(e => e.IndicadorCambioPeriodicidad)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NidentificativoDeclaracionAnterior)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIdentificativoDeclaracionAnterior");
            entity.Property(e => e.Nif)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIF");
            entity.Property(e => e.NifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NIFRepresentanteLegal");
            entity.Property(e => e.NoperadoresIntracomunitarios).HasColumnName("NOperadoresIntracomunitarios");
            entity.Property(e => e.NoperadoresIntracomunitariosRectificat).HasColumnName("NOperadoresIntracomunitariosRectificat");
            entity.Property(e => e.NumeroPresentacion)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Periodo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoSoporte)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('T')")
                .IsFixedLength();
            entity.Property(e => e.Valida)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<AeatSii>(entity =>
        {
            entity.HasKey(e => e.Idpresentacion);

            entity.ToTable("AEAT_SII");

            entity.Property(e => e.Idpresentacion).HasColumnName("IDPresentacion");
            entity.Property(e => e.Autorizacion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ComunicacionTipo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Csv)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CSV");
            entity.Property(e => e.EditedCsvmanual).HasColumnName("EditedCSVManual");
            entity.Property(e => e.Ejercicio)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Nifdeclarante)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("NIFDeclarante");
            entity.Property(e => e.NifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("NIFRepresentanteLegal");
            entity.Property(e => e.Periodo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.TimestampPresentacion).HasMaxLength(8);
        });

        modelBuilder.Entity<AeatSiiDetalle>(entity =>
        {
            entity.HasKey(e => e.Iddetalle);

            entity.ToTable("AEAT_SII_Detalle");

            entity.Property(e => e.Iddetalle).HasColumnName("IDDetalle");
            entity.Property(e => e.BaseImponibleAcoste)
                .HasColumnType("money")
                .HasColumnName("BaseImponibleACoste");
            entity.Property(e => e.BaseRectificada).HasColumnType("money");
            entity.Property(e => e.BiFechaInicioUso)
                .HasColumnType("datetime")
                .HasColumnName("BI_FechaInicioUso");
            entity.Property(e => e.BiIdentificacionBien)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BI_IdentificacionBien");
            entity.Property(e => e.BiIdentificacionEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BI_identificacionEntrega");
            entity.Property(e => e.BiProrrataAnualDefinitiva).HasColumnName("BI_ProrrataAnualDefinitiva");
            entity.Property(e => e.BiRegularizacionAnualDeduccion)
                .HasColumnType("money")
                .HasColumnName("BI_RegularizacionAnualDeduccion");
            entity.Property(e => e.BiRegularizacionDeduccion)
                .HasColumnType("money")
                .HasColumnName("BI_RegularizacionDeduccion");
            entity.Property(e => e.ContraparteClaveIdentificacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContraparteEsNif).HasColumnName("ContraparteEsNIF");
            entity.Property(e => e.ContraparteIdentificacionPais)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContraparteNif)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ContraparteNIF");
            entity.Property(e => e.ContraparteNifrepresentante)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ContraparteNIFRepresentante");
            entity.Property(e => e.ContrapartePais)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContraparteRazonSocial)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.Csv)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CSV");
            entity.Property(e => e.CuentaBancariaCobro)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.CuotaRecargoRectificada).HasColumnType("money");
            entity.Property(e => e.CuotaRectificada).HasColumnType("money");
            entity.Property(e => e.DescripcionErrorRegistro)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FacturaClaveTipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FacturaFecha).HasColumnType("datetime");
            entity.Property(e => e.FacturaNifemisor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FacturaNIFEmisor");
            entity.Property(e => e.FacturaNumero)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.FacturaNumeroFin)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.FacturaOrigenId).HasColumnName("FacturaOrigenID");
            entity.Property(e => e.FacturaRectificativaTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FacturasRectificadas)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FacturasSimplificadasSustituidas)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FeBiminorporBonificaciones)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FE_BIminorporBonificaciones");
            entity.Property(e => e.FeExentaBaseImponible)
                .HasColumnType("money")
                .HasColumnName("FE_ExentaBaseImponible");
            entity.Property(e => e.FeExentaCausa)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FE_ExentaCausa");
            entity.Property(e => e.FeFacturaEmitidaTerceros)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FE_FacturaEmitidaTerceros");
            entity.Property(e => e.FeFacturaVariosDestinatarios)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FE_FacturaVariosDestinatarios");
            entity.Property(e => e.FeImporteNoSujeta)
                .HasColumnType("money")
                .HasColumnName("FE_ImporteNoSujeta");
            entity.Property(e => e.FeImporteNoSujetaLocalizacion)
                .HasColumnType("money")
                .HasColumnName("FE_ImporteNoSujetaLocalizacion");
            entity.Property(e => e.FeImporteTransmisionesInmuebles)
                .HasColumnType("money")
                .HasColumnName("FE_ImporteTransmisionesInmuebles");
            entity.Property(e => e.FeNoExentaTipoExencion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FE_NoExentaTipoExencion");
            entity.Property(e => e.FechaCobro).HasColumnType("datetime");
            entity.Property(e => e.FechaExpedicion).HasColumnType("datetime");
            entity.Property(e => e.FechaOperacion).HasColumnType("datetime");
            entity.Property(e => e.FrCuotaDeducible)
                .HasColumnType("money")
                .HasColumnName("FR_CuotaDeducible");
            entity.Property(e => e.FrFechaRegistroContable)
                .HasColumnType("datetime")
                .HasColumnName("FR_FechaRegistroContable");
            entity.Property(e => e.ImporteCobrado).HasColumnType("money");
            entity.Property(e => e.ImporteTotal).HasColumnType("money");
            entity.Property(e => e.InmuebleReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.InmuebleSituacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MedioCobro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OiClaveDeclarado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OI_ClaveDeclarado");
            entity.Property(e => e.OiCodigoEstadoMiembro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OI_CodigoEstadoMiembro");
            entity.Property(e => e.OiDescripcionBienes)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OI_DescripcionBienes");
            entity.Property(e => e.OiDireccionOperadorIntracomunitario)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("OI_DireccionOperadorIntracomunitario");
            entity.Property(e => e.OiOtrasFacturas)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("OI_OtrasFacturas");
            entity.Property(e => e.OiPlazoOperacion).HasColumnName("OI_PlazoOperacion");
            entity.Property(e => e.OiTipoOi).HasColumnName("OI_TipoOI");
            entity.Property(e => e.OperacionClaveTributaria)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperacionDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PresentacionId).HasColumnName("PresentacionID");
        });

        modelBuilder.Entity<AeatSiiSubdetalle>(entity =>
        {
            entity.HasKey(e => e.Idsubdetalle);

            entity.ToTable("AEAT_SII_Subdetalle");

            entity.Property(e => e.Idsubdetalle).HasColumnName("IDSubdetalle");
            entity.Property(e => e.DetalleId).HasColumnName("DetalleID");
            entity.Property(e => e.FeNoExentaBaseImponible)
                .HasColumnType("money")
                .HasColumnName("FE_NoExentaBaseImponible");
            entity.Property(e => e.FeNoExentaCuota)
                .HasColumnType("money")
                .HasColumnName("FE_NoExentaCuota");
            entity.Property(e => e.FeNoExentaCuotaRe)
                .HasColumnType("money")
                .HasColumnName("FE_NoExentaCuotaRE");
            entity.Property(e => e.FeNoExentaTipo).HasColumnName("FE_NoExentaTipo");
            entity.Property(e => e.FeNoExentaTipoRe).HasColumnName("FE_NoExentaTipoRE");
            entity.Property(e => e.FrBi)
                .HasColumnType("money")
                .HasColumnName("FR_BI");
            entity.Property(e => e.FrCompensacionReagyp)
                .HasColumnType("money")
                .HasColumnName("FR_CompensacionREAGYP");
            entity.Property(e => e.FrCuota)
                .HasColumnType("money")
                .HasColumnName("FR_Cuota");
            entity.Property(e => e.FrCuotaRe)
                .HasColumnType("money")
                .HasColumnName("FR_CuotaRE");
            entity.Property(e => e.FrIspBi)
                .HasColumnType("money")
                .HasColumnName("FR_ISP_BI");
            entity.Property(e => e.FrIspCuota)
                .HasColumnType("money")
                .HasColumnName("FR_ISP_Cuota");
            entity.Property(e => e.FrIspCuotaRe)
                .HasColumnType("money")
                .HasColumnName("FR_ISP_CuotaRE");
            entity.Property(e => e.FrIspTipo).HasColumnName("FR_ISP_Tipo");
            entity.Property(e => e.FrIspTipoRe).HasColumnName("FR_ISP_TipoRE");
            entity.Property(e => e.FrPercentCompensacionReagyp).HasColumnName("FR_PercentCompensacionREAGYP");
            entity.Property(e => e.FrTipo).HasColumnName("FR_Tipo");
            entity.Property(e => e.FrTipoRe).HasColumnName("FR_TipoRE");
        });

        modelBuilder.Entity<Agencia>(entity =>
        {
            entity.HasKey(e => e.Idagencia);

            entity.Property(e => e.Idagencia)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("IDAgencia");
            entity.Property(e => e.CodigoEntidad)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CodigoEntidadNavigation).WithMany(p => p.Agencia)
                .HasForeignKey(d => d.CodigoEntidad)
                .HasConstraintName("FK_Agencias_Entidades");
        });

        modelBuilder.Entity<AgenciasTransporteTarifa>(entity =>
        {
            entity.HasKey(e => e.IdtarifaAgencia).HasName("PK_AgenciasTransporte");

            entity.HasIndex(e => new { e.IdtarifaAgencia, e.AgenciaId }, "IX_AgenciasTransporteTarifas").IsUnique();

            entity.Property(e => e.IdtarifaAgencia).HasColumnName("IDTarifaAgencia");
            entity.Property(e => e.AgenciaId)
                .IsRequired()
                .HasColumnName("AgenciaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaiCodeProducto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TAI_Code_Producto");
            entity.Property(e => e.TaiCodeServicio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TAI_Code_Servicio");

            entity.HasOne(d => d.Agencia).WithMany(p => p.AgenciasTransporteTarifas)
                .HasForeignKey(d => d.AgenciaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AgenciasTransporteTarifas_Proveedores");
        });

        modelBuilder.Entity<AgenciasTransporteTarifasDetalle>(entity =>
        {
            entity.HasKey(e => e.IdtarifaAgenciaDetalle).HasName("PK_AgenciasTransporteTarifas");

            entity.ToTable("AgenciasTransporteTarifasDetalle");

            entity.Property(e => e.IdtarifaAgenciaDetalle).HasColumnName("IDTarifaAgenciaDetalle");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.ZonaId).HasColumnName("ZonaID");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.AgenciasTransporteTarifasDetalles)
                .HasForeignKey(d => d.UnidadMedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgenciasTransporteTarifas_UnidadesMedida");

            entity.HasOne(d => d.Zona).WithMany(p => p.AgenciasTransporteTarifasDetalles)
                .HasForeignKey(d => d.ZonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgenciasTransporteTarifas_Zonas");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.AgenciasTransporteTarifasDetalles)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_AgenciasTransporteTarifasDetalle_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<AlbaranesCompra>(entity =>
        {
            entity.HasKey(e => e.Idcabecera).HasName("PK_AlbaranesCompra_1");

            entity.ToTable("AlbaranesCompra", tb =>
                {
                    tb.HasTrigger("Act_Num_AlbaranesCompra");
                    tb.HasTrigger("AlbaranesCompra_Delete_CDBO");
                    tb.HasTrigger("MaxAlbaranCompraAnno");
                    tb.HasTrigger("UpdateAlbaranCompraFromDescuento");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_AlbaranesCompra_IDCDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_AlbaranesCompra_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_AlbaranesCompra_CTA_CentroCoste");

            entity.HasOne(d => d.Contacto).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_AlbaranesCompra_ProveedoresContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_AlbaranesCompra_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_AlbaranesCompra_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_AlbaranesCompra_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompra_AlbaranesCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlbaranesCompra)
                .HasForeignKey<AlbaranesCompra>(d => d.Idcdbo)
                .HasConstraintName("FK_AlbaranesCompra_AlbaranesCompra_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_AlbaranesCompra_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_AlbaranesCompra_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_AlbaranesCompra_ProveedoresDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompra_Proveedores");

            entity.HasOne(d => d.PortesTipo).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.PortesTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompra_PortesTipos");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_AlbaranesCompra_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.AlbaranesCompras)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompra_Series");
        });

        modelBuilder.Entity<AlbaranesCompraCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("AlbaranesCompra_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlbaranesCompraDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea).HasName("PK_AlbaranesCompraDetalle_1");

            entity.ToTable("AlbaranesCompraDetalle", tb =>
                {
                    tb.HasTrigger("AlbaranesCompraDetalleAfterDelete");
                    tb.HasTrigger("AlbaranesCompraDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateAlbaranesCompraDetalleNumeroLinea");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsAlbaranesCompraDetalle");
                    tb.HasTrigger("UpdateDGDUbicacionesFromAlbaranCompraDetalle");
                    tb.HasTrigger("UpdateProductosPrecioCompraFromAlbaranesCompra");
                    tb.HasTrigger("UpdateProductosProveedoresPrecioUltimaCompra");
                    tb.HasTrigger("UpdateStateAlbaranesCompra");
                    tb.HasTrigger("UpdateStateAlbaranesCompraDetalle");
                    tb.HasTrigger("tr_ACD_DG_Related_Update");
                    tb.HasTrigger("tr_AlbaranesCompraDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_AlbaranesCompraDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_AlbaranesCompraDetalle_UpdateTotalesCabecera");
                    tb.HasTrigger("tr_AlbaranesCompraDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_AlbaranesCompraDetalle_CDBO").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_AlbaranesCompraDetalle_CabeceraID");

            entity.HasIndex(e => e.ProductoId, "IX_AlbaranesCompraDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_AlbaranesCompra");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompraDetalle_AlbaranesCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlbaranesCompraDetalle)
                .HasForeignKey<AlbaranesCompraDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_AlbaranesCompraDetalle_AlbaranesCompraDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_IVAGrupos");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompraDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompraDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.AlbaranesCompraDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesCompraDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.AlbaranesCompraDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.AlbaranesCompraDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.AlbaranesCompraDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.AlbaranesCompraDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_AlbaranesCompraDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<AlbaranesCompraDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("AlbaranesCompraDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlbaranesCompraEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlbaranesVentaAnticipo>(entity =>
        {
            entity.HasKey(e => e.Idanticipo);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("AVAnticipo_InsertCodContaYEfectosACobrar");
                    tb.HasTrigger("GeneraNumeroAVAnticipo");
                });

            entity.Property(e => e.Idanticipo).HasColumnName("IDAnticipo");
            entity.Property(e => e.CabeceraDestinoId).HasColumnName("CabeceraDestinoID");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CuentaEmpresaId).HasColumnName("CuentaEmpresaID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Efectos)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FechaCargo).HasColumnType("datetime");
            entity.Property(e => e.FechaEmision)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Iban).HasColumnName("IBAN");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NumeroAnticipo)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('(#)')")
                .IsFixedLength();
            entity.Property(e => e.Pagado)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PersonaNif)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PersonaNIF");
            entity.Property(e => e.PersonaNombre)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VencimientoDestinoId).HasColumnName("VencimientoDestinoID");

            entity.HasOne(d => d.CabeceraDestino).WithMany(p => p.AlbaranesVentaAnticipos)
                .HasForeignKey(d => d.CabeceraDestinoId)
                .HasConstraintName("FK_AlbaranesVentaAnticipos_FacturasVenta");

            entity.HasOne(d => d.CabeceraOrigen).WithMany(p => p.AlbaranesVentaAnticipos)
                .HasForeignKey(d => d.CabeceraOrigenId)
                .HasConstraintName("FK_AlbaranesVentaAnticipos_AlbaranesVenta");

            entity.HasOne(d => d.CuentaEmpresa).WithMany(p => p.AlbaranesVentaAnticipos)
                .HasForeignKey(d => d.CuentaEmpresaId)
                .HasConstraintName("FK_AlbaranesVentaAnticipos_EmpresasCuentasBancarias");

            entity.HasOne(d => d.Medio).WithMany(p => p.AlbaranesVentaAnticipos)
                .HasForeignKey(d => d.MedioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVentaAnticipos_MediosPago");

            entity.HasOne(d => d.Persona).WithMany(p => p.AlbaranesVentaAnticipos)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVentaAnticipos_Clientes");

            entity.HasOne(d => d.VencimientoDestino).WithMany(p => p.AlbaranesVentaAnticipos)
                .HasForeignKey(d => d.VencimientoDestinoId)
                .HasConstraintName("FK_AlbaranesVentaAnticipos_VencimientosVenta");
        });

        modelBuilder.Entity<AlbaranesVentaCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("AlbaranesVenta_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlbaranesVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("AlbaranesVentaDetalle", tb =>
                {
                    tb.HasTrigger("AlbaranesVentaDetalleAfterDelete");
                    tb.HasTrigger("AlbaranesVentaDetalle_Delete_CDBO");
                    tb.HasTrigger("AlbaranesVentaDetalle_UpdateCoste");
                    tb.HasTrigger("InsertarProductosClientes");
                    tb.HasTrigger("UpdateAlbaranesVentaTotalesCabecera");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsAlbaranesVentaDetalle");
                    tb.HasTrigger("UpdateDGDUbicacionesFromAlbaranVentaDetalle");
                    tb.HasTrigger("UpdatePortesAlbaranesVenta");
                    tb.HasTrigger("UpdateStateAlbaranesVenta");
                    tb.HasTrigger("tr_AVD_DG_Related_Update");
                    tb.HasTrigger("tr_AlbaranesVentaDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_AlbaranesVentaDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_AlbaranesVentaDetalle_Update_NumLinea");
                    tb.HasTrigger("tr_AlbaranesVentaDetalle_Update_StateDetalles");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_AlbaranesVentaDetalle_CDBO").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_AlbaranesVentaDetalle_CabeceraID");

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_AlbaranesVentaDetalle_LineaID_NumLinea");

            entity.HasIndex(e => e.ProductoId, "IX_AlbaranesVentaDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DtoCoste).HasDefaultValueSql("((0))");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IncluirMaterial)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_Material");
            entity.Property(e => e.IncluirMo)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_MO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasDefaultValueSql("((0))");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVenta");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlbaranesVentaDetalle)
                .HasForeignKey<AlbaranesVentaDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVentaDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_AlbaranesVentaDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVentaDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVentaDetalle_Productos");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_Proveedores");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.AlbaranesVentaDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVentaDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.AlbaranesVentaDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.AlbaranesVentaDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.AlbaranesVentaDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.AlbaranesVentaDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_AlbaranesVentaDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<AlbaranesVentaDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("AlbaranesVentaDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlbaranesVentaEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlbaranesVentum>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Act_Num_AlbaranesVenta");
                    tb.HasTrigger("AlbaranesVenta_Delete_CDBO");
                    tb.HasTrigger("MaxAlbaranVentaAnno");
                    tb.HasTrigger("UpdateAlbaranVentaFromDescuento");
                    tb.HasTrigger("UpdateStatePedidosVentaFromAlbaranesVenta");
                    tb.HasTrigger("tr_AlbaranesVenta_Delete_Direccion");
                    tb.HasTrigger("tr_AlbaranesVenta_Insert_Direccion");
                    tb.HasTrigger("tr_AlbaranesVenta_Update_Direccion");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_AlbaranesVenta_CDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_AlbaranesVenta_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CalculoPortesTipo).HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DirRecogidaDireccionId).HasColumnName("DirRecogida_DireccionID");
            entity.Property(e => e.DirRecogidaEntidadOrigenId).HasColumnName("DirRecogida_EntidadOrigenID");
            entity.Property(e => e.DirRecogidaKeyFieldValueId).HasColumnName("DirRecogida_KeyFieldValueID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmailSentFenvio)
                .HasColumnType("datetime")
                .HasColumnName("EmailSentFEnvio");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.TipoId1).HasColumnName("TipoID_1");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_AlbaranesVenta_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_AlbaranesVenta_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_AlbaranesVenta_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_AlbaranesVenta_ClientesContactos");

            entity.HasOne(d => d.DirRecogidaEntidadOrigen).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.DirRecogidaEntidadOrigenId)
                .HasConstraintName("FK_AlbaranesVenta_Direcciones_EntidadesOrigen");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_AlbaranesVenta_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.AlbaranesVentumEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_AlbaranesVenta_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.AlbaranesVentumEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_AlbaranesVenta_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_AlbaranesVenta_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVenta_AlbaranesVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlbaranesVentum)
                .HasForeignKey<AlbaranesVentum>(d => d.Idcdbo)
                .HasConstraintName("FK_AlbaranesVenta_AlbaranesVenta_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_AlbaranesVenta_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_AlbaranesVenta_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_AlbaranesVenta_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVenta_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_AlbaranesVenta_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.AlbaranesVenta)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbaranesVenta_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.AlbaranesVenta)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_AlbaranesVenta_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<Almacene>(entity =>
        {
            entity.HasKey(e => e.Idalmacen);

            entity.ToTable(tb => tb.HasTrigger("InsertAlmacenUbicacionMaestra"));

            entity.Property(e => e.Idalmacen).HasColumnName("IDAlmacen");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DepositoOpe).HasColumnName("DepositoOPE");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.IsReserva)
                .IsRequired()
                .HasDefaultValueSql("(CONVERT([bit],(0),0))");
            entity.Property(e => e.LocalidadId).HasColumnName("LocalidadID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisId).HasColumnName("PaisID");
            entity.Property(e => e.PalabraBaseUbicaciones)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");

            entity.HasOne(d => d.Centro).WithMany(p => p.Almacenes)
                .HasForeignKey(d => d.CentroId)
                .HasConstraintName("FK_Almacenes_CentrosTrabajo");
        });

        modelBuilder.Entity<AlmacenesUbicacione>(entity =>
        {
            entity.HasKey(e => e.Idubicacion);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("CheckUbicacionMaestraNotDeleted");
                    tb.HasTrigger("GestAlmacenesUbicaciones_Nivel_Nombre");
                });

            entity.HasIndex(e => new { e.Idubicacion, e.AlmacenId }, "IX_AlmacenesUbicaciones").IsUnique();

            entity.Property(e => e.Idubicacion).HasColumnName("IDUbicacion");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('#')");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.AlmacenesUbicaciones)
                .HasForeignKey(d => d.AlmacenId)
                .HasConstraintName("FK_AlmacenesUbicaciones_Almacenes");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.InverseUbicacion)
                .HasForeignKey(d => d.UbicacionId)
                .HasConstraintName("FK_AlmacenesUbicaciones_AlmacenesUbicaciones");
        });

        modelBuilder.Entity<AlqAlquilere>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("ALQ_Alquileres", tb =>
                {
                    tb.HasTrigger("ALQ_Alquileres_Delete_CDBO");
                    tb.HasTrigger("ALQ_Alquileres_UpdateStateAnulado");
                    tb.HasTrigger("MaxALQ_AlquileresAnno");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_ALQ_Alquileres_CDBO").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.ContactosTrabajo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DireccionTrabajo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImporteAval).HasColumnType("money");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Telefonos)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_ALQ_Alquileres_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_ALQ_Alquileres_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_ALQ_Alquileres_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_ALQ_Alquileres_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_ALQ_Alquileres_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ALQ_Alquileres_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_ALQ_Alquileres_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_Alquileres_ALQ_AlquileresEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlqAlquilere)
                .HasForeignKey<AlqAlquilere>(d => d.Idcdbo)
                .HasConstraintName("FK_ALQ_Alquileres_ALQ_Alquileres_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_ALQ_Alquileres_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_ALQ_Alquileres_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_ALQ_Alquileres_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_Alquileres_Clientes");

            entity.HasOne(d => d.Serie).WithMany(p => p.AlqAlquileres)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_Alquileres_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.AlqAlquileres)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_ALQ_Alquileres_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<AlqAlquileresCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ALQ_Alquileres_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlqAlquileresDescuentosGenerale>(entity =>
        {
            entity.HasKey(e => e.Iddescuento);

            entity.ToTable("ALQ_AlquileresDescuentosGenerales");

            entity.Property(e => e.Iddescuento).HasColumnName("IDDescuento");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlqAlquileresDescuentosGenerales)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ALQ_AlquileresDescuentosGenerales_ALQ_Alquileres");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.AlqAlquileresDescuentosGenerales)
                .HasForeignKey(d => d.ProductoTipoId)
                .HasConstraintName("FK_ALQ_AlquileresDescuentosGenerales_ProductosTipos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.AlqAlquileresDescuentosGenerales)
                .HasForeignKey(d => d.TipoLineaId)
                .HasConstraintName("FK_ALQ_AlquileresDescuentosGenerales_TiposLinea");
        });

        modelBuilder.Entity<AlqAlquileresDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ALQ_AlquileresDetalle", tb =>
                {
                    tb.HasTrigger("ALQ_AlquileresDetalleAfterDelete");
                    tb.HasTrigger("ALQ_AlquileresDetalle_Delete_CDBO");
                    tb.HasTrigger("ALQ_AlquileresUpdateStateCabecera");
                    tb.HasTrigger("ALQ_AlquileresUpdateStateDetalle");
                    tb.HasTrigger("UpdateALQ_AlquileresTotalesCabecera");
                    tb.HasTrigger("UpdateDGDUbicacionesFromALQ_AlquileresDetalle");
                    tb.HasTrigger("UpdatePortesALQ_Alquileres");
                    tb.HasTrigger("tr_ALQ_AlquileresDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_ALQ_AlquileresDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_ALQ_AlquileresDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.CabeceraId, "IX_ALQ_AlquileresDetalle_CabeceraID");

            entity.HasIndex(e => e.Idcdbo, "IX_ALQ_AlquileresDetalle_IDCDBO").IsUnique();

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_ALQ_AlquileresDetalle_LineaID_NumLinea");

            entity.HasIndex(e => e.ProductoId, "IX_ALQ_AlquileresDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DescuentoGeneral).HasColumnType("money");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IncluirMaterial)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_Material");
            entity.Property(e => e.IncluirMo)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_MO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroDiasFacturar).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NumeroDiasTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_Alquileres");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Empleado).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_Empleados");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_AlquileresEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlqAlquileresDetalle)
                .HasForeignKey<AlqAlquileresDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_AlquileresDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_ALQ_AlquileresDetalle");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.AlqAlquileresDetalles)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_ALQ_AlquileresDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<AlqAlquileresDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ALQ_AlquileresDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlqAlquileresDetallePicking>(entity =>
        {
            entity.HasKey(e => e.IdpickingDetalle);

            entity.ToTable("ALQ_AlquileresDetallePicking");

            entity.Property(e => e.IdpickingDetalle).HasColumnName("IDPickingDetalle");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadEntradaAuto).HasComment("Determina si la línea se la Cantidad se ha informado de forma automática (sin lectura)");
            entity.Property(e => e.CantidadSalidaAuto).HasComment("Determina si la línea se la Cantidad se ha informado de forma automática (sin lectura)");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PickingEntradaId).HasColumnName("PickingEntradaID");
            entity.Property(e => e.PickingSalidaId).HasColumnName("PickingSalidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlqAlquileresDetallePickings)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresDetallePicking_ALQ_Alquileres");

            entity.HasOne(d => d.PickingEntrada).WithMany(p => p.AlqAlquileresDetallePickingPickingEntrada)
                .HasForeignKey(d => d.PickingEntradaId)
                .HasConstraintName("FK_ALQ_AlquileresDetallePicking_PickingEntradaID_ALQ_AlquileresPicking");

            entity.HasOne(d => d.PickingSalida).WithMany(p => p.AlqAlquileresDetallePickingPickingSalida)
                .HasForeignKey(d => d.PickingSalidaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ALQ_AlquileresDetallePicking_PickingSalidaID_ALQ_AlquileresPicking");
        });

        modelBuilder.Entity<AlqAlquileresEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("ALQ_AlquileresEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlqAlquileresPicking>(entity =>
        {
            entity.HasKey(e => e.Idpicking);

            entity.ToTable("ALQ_AlquileresPicking");

            entity.Property(e => e.Idpicking).HasColumnName("IDPicking");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlqAlquileresPickings)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresPicking_ALQ_Alquileres");

            entity.HasOne(d => d.Tipo).WithMany(p => p.AlqAlquileresPickings)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_AlquileresPicking_ALQ_AlquileresPickingTipos");
        });

        modelBuilder.Entity<AlqAlquileresPickingTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("ALQ_AlquileresPickingTipos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlqPresupuesto>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("ALQ_Presupuestos", tb =>
                {
                    tb.HasTrigger("ALQ_Presupuestos_Delete_CDBO");
                    tb.HasTrigger("Act_Num_ALQ_Presupuestos");
                    tb.HasTrigger("MaxALQ_PresupuestosAnno");
                    tb.HasTrigger("UpdateStateALQ_PresupuestosDetalleFromHeader");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_ALQ_Presupuestos_CDBO").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.ContactosTrabajo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DireccionTrabajo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImporteAval).HasColumnType("money");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Telefonos)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");
            entity.Property(e => e.Version)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_ALQ_Presupuestos_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_ALQ_Presupuestos_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_ALQ_Presupuestos_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_ALQ_Presupuestos_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_ALQ_Presupuestos_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ALQ_Presupuestos_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_ALQ_Presupuestos_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_Presupuestos_ALQ_PresupuestosEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlqPresupuesto)
                .HasForeignKey<AlqPresupuesto>(d => d.Idcdbo)
                .HasConstraintName("FK_ALQ_Presupuestos_ALQ_Presupuestos_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_ALQ_Presupuestos_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_ALQ_Presupuestos_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_ALQ_Presupuestos_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_Presupuestos_Clientes");

            entity.HasOne(d => d.Serie).WithMany(p => p.AlqPresupuestos)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_Presupuestos_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.AlqPresupuestos)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_ALQ_Presupuestos_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<AlqPresupuestosCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ALQ_Presupuestos_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
            entity.Property(e => e.TarifaDiasSemanaId).HasColumnName("TarifaDiasSemanaID");
        });

        modelBuilder.Entity<AlqPresupuestosDescuentosGenerale>(entity =>
        {
            entity.HasKey(e => e.Iddescuento);

            entity.ToTable("ALQ_PresupuestosDescuentosGenerales");

            entity.Property(e => e.Iddescuento).HasColumnName("IDDescuento");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlqPresupuestosDescuentosGenerales)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ALQ_PresupuestosDescuentosGenerales_ALQ_Presupuestos");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.AlqPresupuestosDescuentosGenerales)
                .HasForeignKey(d => d.ProductoTipoId)
                .HasConstraintName("FK_ALQ_PresupuestosDescuentosGenerales_ProductosTipos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.AlqPresupuestosDescuentosGenerales)
                .HasForeignKey(d => d.TipoLineaId)
                .HasConstraintName("FK_ALQ_PresupuestosDescuentosGenerales_TiposLinea");
        });

        modelBuilder.Entity<AlqPresupuestosDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ALQ_PresupuestosDetalle", tb =>
                {
                    tb.HasTrigger("ALQ_PresupuestosDetalleAfterDelete");
                    tb.HasTrigger("ALQ_PresupuestosDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateALQ_PresupuestosTotalesCabecera");
                    tb.HasTrigger("UpdatePortesALQ_Presupuestos");
                    tb.HasTrigger("tr_ALQPrD_Update_EstadoID");
                    tb.HasTrigger("tr_ALQ_PresupuestosDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_ALQ_PresupuestosDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_ALQ_PresupuestosDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.CabeceraId, "IX_ALQ_PresupuestosDetalle_CabeceraID");

            entity.HasIndex(e => e.Idcdbo, "IX_ALQ_PresupuestosDetalle_IDCDBO").IsUnique();

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_ALQ_PresupuestosDetalle_LineaID_NumLinea");

            entity.HasIndex(e => e.ProductoId, "IX_ALQ_PresupuestosDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DescuentoGeneral).HasColumnType("money");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IncluirMaterial)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_Material");
            entity.Property(e => e.IncluirMo)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_MO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroDiasFacturar).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NumeroDiasTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_Presupuestos");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Empleado).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_Empleados");

            entity.HasOne(d => d.Estado).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.AlqPresupuestosDetalle)
                .HasForeignKey<AlqPresupuestosDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_ALQ_PresupuestosDetalle");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.AlqPresupuestosDetalles)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_ALQ_PresupuestosDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<AlqPresupuestosDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ALQ_PresupuestosDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<AlqPresupuestosEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("ALQ_PresupuestosEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Asiento>(entity =>
        {
            entity.HasKey(e => e.Clave);

            entity.Property(e => e.Clave).ValueGeneratedNever();
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AsientosDiario>(entity =>
        {
            entity.HasKey(e => new { e.Clave, e.Apunte });

            entity.ToTable("Asientos_Diario", tb =>
                {
                    tb.HasTrigger("InsertarNumeroApunte");
                    tb.HasTrigger("tr_Asientos_Diario_Insert");
                });

            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Concepto)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Cuenta)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Dh)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DH");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.TipoIva).HasColumnName("Tipo_IVA");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.AsientosDiarios)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_Asientos_Diario_CTA_CentroCoste");

            entity.HasOne(d => d.ClaveNavigation).WithMany(p => p.AsientosDiarios)
                .HasForeignKey(d => d.Clave)
                .HasConstraintName("FK_Asientos_Diario_Asientos");
        });

        modelBuilder.Entity<AtributosCampo>(entity =>
        {
            entity.HasKey(e => e.IdatributoCampo).HasName("PK_AtributosTallas");

            entity.Property(e => e.IdatributoCampo)
                .ValueGeneratedNever()
                .HasColumnName("IDAtributoCampo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AtributosCatalogo>(entity =>
        {
            entity.HasKey(e => e.IdatributoCatalogo);

            entity.ToTable("AtributosCatalogo", tb =>
                {
                    tb.HasTrigger("tr_AtributosCatalogo_Delete");
                    tb.HasTrigger("tr_AtributosCatalogo_Update");
                });

            entity.Property(e => e.IdatributoCatalogo).HasColumnName("IDAtributoCatalogo");
            entity.Property(e => e.AtributoProductoId).HasColumnName("AtributoProductoID");
            entity.Property(e => e.CatalogoAtributoId).HasColumnName("CatalogoAtributoID");

            entity.HasOne(d => d.AtributoProducto).WithMany(p => p.AtributosCatalogos)
                .HasForeignKey(d => d.AtributoProductoId)
                .HasConstraintName("FK_AtributosCatalogo_AtributosProductos");

            entity.HasOne(d => d.CatalogoAtributo).WithMany(p => p.AtributosCatalogos)
                .HasForeignKey(d => d.CatalogoAtributoId)
                .HasConstraintName("FK_AtributosCatalogo_CatalogosAtributos");
        });

        modelBuilder.Entity<AtributosProducto>(entity =>
        {
            entity.HasKey(e => e.IdatributoProducto).HasName("PK_Atributos");

            entity.Property(e => e.IdatributoProducto).HasColumnName("IDAtributoProducto");
            entity.Property(e => e.AtributoProductoId).HasColumnName("AtributoProductoID");
            entity.Property(e => e.ComponerNombre)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Prefijo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Sufijo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.AtributoProducto).WithMany(p => p.InverseAtributoProducto)
                .HasForeignKey(d => d.AtributoProductoId)
                .HasConstraintName("FK_AtributosProductos_AtributosProductos");

            entity.HasOne(d => d.Tipo).WithMany(p => p.AtributosProductos)
                .HasForeignKey(d => d.TipoId)
                .HasConstraintName("FK_AtributosProductos_AtributosTipos");
        });

        modelBuilder.Entity<AtributosTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Hint)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AtributosValoresFotosLog>(entity =>
        {
            entity.HasKey(e => e.Idlog);

            entity.ToTable("AtributosValoresFotosLog", tb => tb.HasTrigger("FotosLog_UpdateFecha"));

            entity.Property(e => e.Idlog).HasColumnName("IDLog");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.ValorAtributoId).HasColumnName("ValorAtributoID");

            entity.HasOne(d => d.ValorAtributo).WithMany(p => p.AtributosValoresFotosLogs)
                .HasForeignKey(d => d.ValorAtributoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AtributosValoresFotosLog_ValoresProductos");
        });

        modelBuilder.Entity<Autofactura>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb => tb.HasTrigger("MaxAutofacturaAnno"));

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Codigo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FacturaCompraId).HasColumnName("FacturaCompraID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Autofacturas)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Autofacturas_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Autofacturas)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_Autofacturas_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Autofacturas)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_Autofacturas_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.Autofacturas)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Autofacturas_AutofacturasEstados");

            entity.HasOne(d => d.FacturaCompra).WithMany(p => p.Autofacturas)
                .HasForeignKey(d => d.FacturaCompraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Autofacturas_FacturasCompra");

            entity.HasOne(d => d.Serie).WithMany(p => p.Autofacturas)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Autofacturas_Series");
        });

        modelBuilder.Entity<AutofacturasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Auxiliar01>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Auxiliar_01");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idaux)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDAux");
        });

        modelBuilder.Entity<BienesAmortizable>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.CategoriaId).HasColumnName("CategoriaID");
            entity.Property(e => e.CausaBajaId).HasColumnName("CausaBajaID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.CuentaAmortizacion)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuentaDotacion)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FacturaCompraDetalleId).HasColumnName("FacturaCompraDetalleID");
            entity.Property(e => e.FechaAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaBaja).HasColumnType("datetime");
            entity.Property(e => e.FechaComienzoUso).HasColumnType("datetime");
            entity.Property(e => e.LongitudPeriodo).HasDefaultValueSql("((12))");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MetodoDepreciacionId).HasColumnName("MetodoDepreciacionID");
            entity.Property(e => e.NaturalezaId).HasColumnName("NaturalezaID");
            entity.Property(e => e.Ndepreciaciones)
                .HasDefaultValueSql("((1))")
                .HasColumnName("NDepreciaciones");
            entity.Property(e => e.PrimeAmortProporcional)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ResponsableId).HasColumnName("ResponsableID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.ValorAmortizable).HasColumnType("money");
            entity.Property(e => e.ValorBruto).HasColumnType("money");
            entity.Property(e => e.ValorPendienteAmortizar).HasColumnType("money");
            entity.Property(e => e.ValorResidual).HasColumnType("money");

            entity.HasOne(d => d.Almacen).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.AlmacenId)
                .HasConstraintName("FK_BienesAmortizables_Almacenes");

            entity.HasOne(d => d.Categoria).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.CategoriaId)
                .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesCategorias");

            entity.HasOne(d => d.CausaBaja).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.CausaBajaId)
                .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesBajaCausas");

            entity.HasOne(d => d.Estado).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesEstados");

            entity.HasOne(d => d.FacturaCompraDetalle).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.FacturaCompraDetalleId)
                .HasConstraintName("FK_BienesAmortizables_FacturasCompraDetalle");

            entity.HasOne(d => d.Lote).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_BienesAmortizables_Lotes");

            entity.HasOne(d => d.Naturaleza).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.NaturalezaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesNaturalezas");

            entity.HasOne(d => d.Producto).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_BienesAmortizables_Productos");

            entity.HasOne(d => d.Responsable).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.ResponsableId)
                .HasConstraintName("FK_BienesAmortizables_Empleados");

            entity.HasOne(d => d.Tipo).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BienesAmortizables_BienesAmortizablesTipos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.BienesAmortizables)
                .HasForeignKey(d => d.UbicacionId)
                .HasConstraintName("FK_BienesAmortizables_AlmacenesUbicaciones");
        });

        modelBuilder.Entity<BienesAmortizablesBajaCausa>(entity =>
        {
            entity.HasKey(e => e.IdcausaBaja);

            entity.Property(e => e.IdcausaBaja).HasColumnName("IDCausaBaja");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BienesAmortizablesCategoria>(entity =>
        {
            entity.HasKey(e => e.Idcategoria);

            entity.Property(e => e.Idcategoria).HasColumnName("IDCategoria");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CuentaAmortizacion)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuentaDotacion)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LongitudPeriodo).HasDefaultValueSql("((12))");
            entity.Property(e => e.MetodoDepreciacionId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("MetodoDepreciacionID");
            entity.Property(e => e.Ndepreciaciones)
                .HasDefaultValueSql("((1))")
                .HasColumnName("NDepreciaciones");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
        });

        modelBuilder.Entity<BienesAmortizablesDetalle>(entity =>
        {
            entity.HasKey(e => e.Iddetalle);

            entity.ToTable("BienesAmortizablesDetalle", tb => tb.HasTrigger("tr_BienesAmortizablesDetalle_UpdateCabecera"));

            entity.Property(e => e.Iddetalle).HasColumnName("IDDetalle");
            entity.Property(e => e.Anno)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.ValorAmortizacion).HasColumnType("money");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.BienesAmortizablesDetalles)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_BienesAmortizablesDetalle_Ejercicios");
        });

        modelBuilder.Entity<BienesAmortizablesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BienesAmortizablesMetodo>(entity =>
        {
            entity.HasKey(e => e.Idmetodo);

            entity.Property(e => e.Idmetodo)
                .ValueGeneratedNever()
                .HasColumnName("IDMetodo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BienesAmortizablesNaturaleza>(entity =>
        {
            entity.HasKey(e => e.Idnaturaleza);

            entity.Property(e => e.Idnaturaleza).HasColumnName("IDNaturaleza");
            entity.Property(e => e.Codigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nombre)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BienesAmortizablesTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Bo>(entity =>
        {
            entity.HasKey(e => e.Idbo)
                .HasName("PK_BO_nueva")
                .IsClustered(false);

            entity.ToTable("BO");

            entity.HasIndex(e => e.Boid, "IX_BO_nueva_BOID").IsClustered();

            entity.Property(e => e.Idbo).HasColumnName("IDBO");
            entity.Property(e => e.Boid).HasColumnName("BOID");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BoNavigation).WithMany(p => p.InverseBoNavigation)
                .HasForeignKey(d => d.Boid)
                .HasConstraintName("FK_BO_BO_nueva");
        });

        modelBuilder.Entity<BoCuenta>(entity =>
        {
            entity.HasKey(e => e.IdboCuentas)
                .HasName("PK_BO_Cuentas_nueva")
                .IsClustered(false);

            entity.ToTable("BO_Cuentas");

            entity.HasIndex(e => e.Boid, "IX_BO_cuentas_nueva_BOID").IsClustered();

            entity.HasIndex(e => e.Cuenta, "IX_BO_cuentas_nueva_cuenta");

            entity.Property(e => e.IdboCuentas).HasColumnName("IDBO_Cuentas");
            entity.Property(e => e.Boid).HasColumnName("BOID");
            entity.Property(e => e.Cuenta)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Signo)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.HasOne(d => d.Bo).WithMany(p => p.BoCuenta)
                .HasForeignKey(d => d.Boid)
                .HasConstraintName("FK_BO_Cuentas_BO_nueva");
        });

        modelBuilder.Entity<BoOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BO_Old");

            entity.Property(e => e.Ap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AP");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Formato)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Nivel1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BoOldCuenta>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BO_Old_Cuentas");

            entity.Property(e => e.Cuenta)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Signo)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Boa>(entity =>
        {
            entity.HasKey(e => e.Clave);

            entity.ToTable("BOA");

            entity.Property(e => e.Clave).ValueGeneratedNever();
            entity.Property(e => e.Ap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AP");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Formato)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Nivel1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BoaCuenta>(entity =>
        {
            entity.HasKey(e => new { e.Clave, e.Cuenta });

            entity.ToTable("BOA_Cuentas");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Signo)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Calendario>(entity =>
        {
            entity.HasKey(e => e.Idcalendario);

            entity.HasIndex(e => e.Nombre, "IX_Calendarios_Nombre").IsUnique();

            entity.Property(e => e.Idcalendario).HasColumnName("IDCalendario");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CalendarioDiasEmpleado>(entity =>
        {
            entity.HasKey(e => new { e.CalendarioId, e.EjercicioId, e.Fecha, e.EmpleadoId });

            entity.ToTable("CalendarioDiasEmpleado");

            entity.Property(e => e.CalendarioId).HasColumnName("CalendarioID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TurnoId).HasColumnName("TurnoID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.CalendarioDiasEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_CalendarioDiasEmpleado_Empleados");

            entity.HasOne(d => d.Turno).WithMany(p => p.CalendarioDiasEmpleados)
                .HasForeignKey(d => d.TurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CalendarioDiasEmpleado_Turnos");

            entity.HasOne(d => d.CalendariosDia).WithMany(p => p.CalendarioDiasEmpleados)
                .HasForeignKey(d => new { d.CalendarioId, d.EjercicioId, d.Fecha })
                .HasConstraintName("FK_CalendarioDiasEmpleado_CalendariosDias");
        });

        modelBuilder.Entity<CalendariosDia>(entity =>
        {
            entity.HasKey(e => new { e.CalendarioId, e.EjercicioId, e.Fecha });

            entity.Property(e => e.CalendarioId).HasColumnName("CalendarioID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Anno).HasComputedColumnSql("(datepart(year,[Fecha]))", false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DiaAnno)
                .HasComputedColumnSql("(datepart(dayofyear,[Fecha]))", false)
                .HasColumnName("Dia_Anno");
            entity.Property(e => e.DiaMes)
                .HasComputedColumnSql("(datepart(day,[Fecha]))", false)
                .HasColumnName("Dia_Mes");
            entity.Property(e => e.Mes).HasComputedColumnSql("(datepart(month,[Fecha]))", false);
            entity.Property(e => e.TurnoId).HasColumnName("TurnoID");

            entity.HasOne(d => d.Turno).WithMany(p => p.CalendariosDia)
                .HasForeignKey(d => d.TurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CalendariosDias_Turnos");

            entity.HasOne(d => d.CalendariosEjercicio).WithMany(p => p.CalendariosDia)
                .HasForeignKey(d => new { d.CalendarioId, d.EjercicioId })
                .HasConstraintName("FK_CalendariosDias_CalendariosEjercicios");
        });

        modelBuilder.Entity<CalendariosEjercicio>(entity =>
        {
            entity.HasKey(e => new { e.CalendarioId, e.EjercicioId });

            entity.Property(e => e.CalendarioId).HasColumnName("CalendarioID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Calendario).WithMany(p => p.CalendariosEjercicios)
                .HasForeignKey(d => d.CalendarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CalendariosEjercicios_Calendarios");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.CalendariosEjercicios)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CalendariosEjercicios_Ejercicios");
        });

        modelBuilder.Entity<CalendariosPlanSemanalDef>(entity =>
        {
            entity.HasKey(e => new { e.CalendarioId, e.EjercicioId });

            entity.ToTable("Calendarios_PlanSemanal_Def");

            entity.Property(e => e.CalendarioId).HasColumnName("CalendarioID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.DomingoTurnoId).HasColumnName("Domingo_TurnoID");
            entity.Property(e => e.JuevesTurnoId).HasColumnName("Jueves_TurnoID");
            entity.Property(e => e.LunesTurnoId).HasColumnName("Lunes_TurnoID");
            entity.Property(e => e.MartesTurnoId).HasColumnName("Martes_TurnoID");
            entity.Property(e => e.MiercolesTurnoId).HasColumnName("Miercoles_TurnoID");
            entity.Property(e => e.SabadoTurnoId).HasColumnName("Sabado_TurnoID");
            entity.Property(e => e.ViernesTurnoId).HasColumnName("Viernes_TurnoID");

            entity.HasOne(d => d.DomingoTurno).WithMany(p => p.CalendariosPlanSemanalDefDomingoTurnos)
                .HasForeignKey(d => d.DomingoTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos6");

            entity.HasOne(d => d.JuevesTurno).WithMany(p => p.CalendariosPlanSemanalDefJuevesTurnos)
                .HasForeignKey(d => d.JuevesTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos3");

            entity.HasOne(d => d.LunesTurno).WithMany(p => p.CalendariosPlanSemanalDefLunesTurnos)
                .HasForeignKey(d => d.LunesTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos");

            entity.HasOne(d => d.MartesTurno).WithMany(p => p.CalendariosPlanSemanalDefMartesTurnos)
                .HasForeignKey(d => d.MartesTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos1");

            entity.HasOne(d => d.MiercolesTurno).WithMany(p => p.CalendariosPlanSemanalDefMiercolesTurnos)
                .HasForeignKey(d => d.MiercolesTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos2");

            entity.HasOne(d => d.SabadoTurno).WithMany(p => p.CalendariosPlanSemanalDefSabadoTurnos)
                .HasForeignKey(d => d.SabadoTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos5");

            entity.HasOne(d => d.ViernesTurno).WithMany(p => p.CalendariosPlanSemanalDefViernesTurnos)
                .HasForeignKey(d => d.ViernesTurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aux_Calendarios_PlanSemanal_Turnos4");

            entity.HasOne(d => d.CalendariosEjercicio).WithOne(p => p.CalendariosPlanSemanalDef)
                .HasForeignKey<CalendariosPlanSemanalDef>(d => new { d.CalendarioId, d.EjercicioId })
                .HasConstraintName("FK_Calendarios_PlanSemanal_Def_CalendariosEjercicios");
        });

        modelBuilder.Entity<CalendariosTurnosDef>(entity =>
        {
            entity.HasKey(e => new { e.CalendarioId, e.EjercicioId, e.FechaInicio }).HasName("PK_Calendarios_Festivos_Def");

            entity.ToTable("Calendarios_Turnos_Def");

            entity.Property(e => e.CalendarioId).HasColumnName("CalendarioID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TurnoId).HasColumnName("TurnoID");

            entity.HasOne(d => d.CalendariosEjercicio).WithMany(p => p.CalendariosTurnosDefs)
                .HasForeignKey(d => new { d.CalendarioId, d.EjercicioId })
                .HasConstraintName("FK_Calendarios_Turnos_Def_CalendariosEjercicios");
        });

        modelBuilder.Entity<CantidadesPrecargaComisione>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");

            entity.HasOne(d => d.Operacion).WithMany()
                .HasForeignKey(d => d.OperacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CantidadesPrecargaComisiones_ComisionesOperaciones");
        });

        modelBuilder.Entity<CarneConducirTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CatalogosAtributo>(entity =>
        {
            entity.HasKey(e => e.IdcatalogoAtributo).HasName("PK_Catalogos");

            entity.Property(e => e.IdcatalogoAtributo).HasColumnName("IDCatalogoAtributo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CdboCantidadesPrecargaTarifa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CDBO_CantidadesPrecargaTarifas");
        });

        modelBuilder.Entity<CdboParametrosAnalitico>(entity =>
        {
            entity.HasKey(e => e.Idparametro);

            entity.ToTable("CDBO_ParametrosAnaliticos");

            entity.Property(e => e.Idparametro).HasColumnName("IDParametro");
            entity.Property(e => e.ComboListId).HasColumnName("ComboListID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrTypeId).HasColumnName("UsrTypeID");

            entity.HasOne(d => d.UsrType).WithMany(p => p.CdboParametrosAnaliticos)
                .HasForeignKey(d => d.UsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDBO_ParametrosAnaliticos_GS_UsrTypes");
        });

        modelBuilder.Entity<CdboPedidosPendientesImportar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CDBO_PedidosPendientesImportar");

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idpedido).HasColumnName("IDPedido");
            entity.Property(e => e.MetodoPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CdboProductosXYField>(entity =>
        {
            entity.HasKey(e => e.Idfield);

            entity.ToTable("CDBO_ProductosX_Y_Fields");

            entity.Property(e => e.Idfield)
                .ValueGeneratedNever()
                .HasColumnName("IDField");
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DisplayFormat)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FieldName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CdbpProcess>(entity =>
        {
            entity.HasKey(e => e.Idprocess);

            entity.ToTable("CDBP_Processes", tb => tb.HasTrigger("tr_CDBP_Processes_ins"));

            entity.HasIndex(e => e.Codigo, "UIX_CDBP_Processes_Codigo").IsUnique();

            entity.Property(e => e.Idprocess).HasColumnName("IDProcess");
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Formato: CDBP_DDDD, del 3000 en adelante reservados para el usuario");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Hint)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsPublic).HasComment("Indica si el proceso es visible para los usuarios del ERP");
            entity.Property(e => e.TipoId)
                .HasDefaultValueSql("((1))")
                .HasComment("1 > Proceso monolítico que se ejecuta en SIDBS")
                .HasColumnName("TipoID");

            entity.HasMany(d => d.Entidads).WithMany(p => p.Processes)
                .UsingEntity<Dictionary<string, object>>(
                    "CdbpEntidade",
                    r => r.HasOne<GsEntidade>().WithMany()
                        .HasForeignKey("EntidadId")
                        .HasConstraintName("FK_CDBP_Entidades_GS_Entidades"),
                    l => l.HasOne<CdbpProcess>().WithMany()
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK_CDBP_Entidades_CDBP_Processes"),
                    j =>
                    {
                        j.HasKey("ProcessId", "EntidadId");
                        j.ToTable("CDBP_Entidades");
                        j.IndexerProperty<int>("ProcessId").HasColumnName("ProcessID");
                        j.IndexerProperty<int>("EntidadId").HasColumnName("EntidadID");
                    });
        });

        modelBuilder.Entity<CdbpStep>(entity =>
        {
            entity.HasKey(e => e.Idstep);

            entity.ToTable("CDBP_Steps", tb => tb.HasTrigger("tr_CDBP_Steps_ins"));

            entity.Property(e => e.Idstep).HasColumnName("IDStep");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IdguidConnection).HasColumnName("IDGUID_Connection");
            entity.Property(e => e.LibraryName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.MethodName)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.MethodTypeId)
                .HasComment("1 > StoredProc; 2 > Llamada a código compilado (se comprueba LibraryName)")
                .HasColumnName("MethodTypeID");
            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

            entity.HasOne(d => d.Process).WithMany(p => p.CdbpSteps)
                .HasForeignKey(d => d.ProcessId)
                .HasConstraintName("FK_CDBP_Steps_CDBP_Processes");
        });

        modelBuilder.Entity<CentrosTipo>(entity =>
        {
            entity.HasKey(e => e.IdcentroTipo);

            entity.Property(e => e.IdcentroTipo)
                .ValueGeneratedNever()
                .HasColumnName("IDCentroTipo");
            entity.Property(e => e.CampoLookup)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CampoResultado)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TablaLookup)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CentrosTrabajo>(entity =>
        {
            entity.HasKey(e => e.Idcentro);

            entity.ToTable("CentrosTrabajo", tb => tb.HasTrigger("tr_CentrosTrabajo_Update"));

            entity.Property(e => e.Idcentro).HasColumnName("IDCentro");
            entity.Property(e => e.CualificacionId).HasColumnName("CualificacionID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.PhoraExtra)
                .HasColumnType("money")
                .HasColumnName("PHoraExtra");
            entity.Property(e => e.PhoraExtraFestivo)
                .HasColumnType("money")
                .HasColumnName("PHoraExtraFestivo");
            entity.Property(e => e.PrimaCompensacionFestivo).HasColumnType("money");
            entity.Property(e => e.PrimaFestivo).HasColumnType("money");
            entity.Property(e => e.PrimaLaborable).HasColumnType("money");
            entity.Property(e => e.PrimaMensual).HasColumnType("money");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Cualificacion).WithMany(p => p.CentrosTrabajos)
                .HasForeignKey(d => d.CualificacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CentrosTrabajo_Cualificaciones");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.CentrosTrabajos)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_CentrosTrabajo_Proveedores");

            entity.HasMany(d => d.Empleados).WithMany(p => p.Centros)
                .UsingEntity<Dictionary<string, object>>(
                    "CentrosEmpleado",
                    r => r.HasOne<Empleado>().WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CentrosEmpleados_Empleados"),
                    l => l.HasOne<CentrosTrabajo>().WithMany()
                        .HasForeignKey("CentroId")
                        .HasConstraintName("FK_CentrosEmpleados_CentrosTrabajo"),
                    j =>
                    {
                        j.HasKey("CentroId", "EmpleadoId");
                        j.ToTable("CentrosEmpleados");
                        j.IndexerProperty<int>("CentroId").HasColumnName("CentroID");
                        j.IndexerProperty<int>("EmpleadoId").HasColumnName("EmpleadoID");
                    });

            entity.HasMany(d => d.Maquinas).WithMany(p => p.Centros)
                .UsingEntity<Dictionary<string, object>>(
                    "CentrosMaquina",
                    r => r.HasOne<Maquina>().WithMany()
                        .HasForeignKey("MaquinaId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CentrosMaquinas_Maquinas"),
                    l => l.HasOne<CentrosTrabajo>().WithMany()
                        .HasForeignKey("CentroId")
                        .HasConstraintName("FK_CentrosMaquinas_CentrosTrabajo"),
                    j =>
                    {
                        j.HasKey("CentroId", "MaquinaId");
                        j.ToTable("CentrosMaquinas");
                        j.IndexerProperty<int>("CentroId").HasColumnName("CentroID");
                        j.IndexerProperty<int>("MaquinaId").HasColumnName("MaquinaID");
                    });
        });

        modelBuilder.Entity<Certificacione>(entity =>
        {
            entity.HasKey(e => e.Idcertificacion);

            entity.ToTable(tb => tb.HasTrigger("tr_Certificaciones_Update"));

            entity.Property(e => e.Idcertificacion).HasColumnName("IDCertificacion");
            entity.Property(e => e.Avdliquidacion).HasColumnName("AVDLiquidacion");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CuentaContable)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoOrigenId).HasColumnName("DocumentoOrigenID");
            entity.Property(e => e.FacturaDestinoId).HasColumnName("FacturaDestinoID");
            entity.Property(e => e.FacturaDetalleDestinoId).HasColumnName("FacturaDetalleDestinoID");
            entity.Property(e => e.FechaEmision)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaFactura).HasColumnType("datetime");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Numero)
                .HasMaxLength(28)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.AvdliquidacionNavigation).WithMany(p => p.Certificaciones)
                .HasForeignKey(d => d.Avdliquidacion)
                .HasConstraintName("FK_Certificaciones_AlbaranesVentaDetalle");

            entity.HasOne(d => d.FacturaDetalleDestino).WithMany(p => p.Certificaciones)
                .HasForeignKey(d => d.FacturaDetalleDestinoId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Certificaciones_FacturasVentaDetalle");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.Certificaciones)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_Certificaciones_FormasPago");

            entity.HasOne(d => d.Medio).WithMany(p => p.Certificaciones)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_Certificaciones_MediosPago");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.Idpersona);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Clientes_CRM");
                    tb.HasTrigger("Clientes_Delete_CDBO");
                    tb.HasTrigger("tr_Clientes_ins");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_Clientes_IDCDBO").IsUnique();

            entity.Property(e => e.Idpersona).HasColumnName("IDPersona");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.AvEmail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AV_Email");
            entity.Property(e => e.AvEnvioEmailReq).HasColumnName("AV_EnvioEmailReq");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CifNif)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CrmFidelizacion)
                .HasComment("Indica si lleva Gesti¥n de fidelizaci¥n de puntos para el m¥dulo de CRM")
                .HasColumnName("CRM_Fidelizacion");
            entity.Property(e => e.CuentaBancariaEmpresaId).HasColumnName("CuentaBancariaEmpresaID");
            entity.Property(e => e.CuentaBancariaId)
                .HasComment("Cuenta bancaria por defecto para documentos")
                .HasColumnName("CuentaBancariaID");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.DescuentoId).HasColumnName("DescuentoID");
            entity.Property(e => e.DireccionEntregaId).HasColumnName("DireccionEntregaID");
            entity.Property(e => e.DireccionFraId).HasColumnName("DireccionFraID");
            entity.Property(e => e.DtoComercial).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Efectos)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExentoIva).HasColumnName("ExentoIVA");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FeEmail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FE_Email");
            entity.Property(e => e.FeFormatoId).HasColumnName("FE_FormatoID");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.M347Excluir).HasColumnName("M347_Excluir");
            entity.Property(e => e.MedioPagoId).HasColumnName("MedioPagoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NombreComercial)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NotasIntAviso)
                .HasDefaultValueSql("((0))")
                .HasColumnName("NotasInt_Aviso");
            entity.Property(e => e.Nproveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NProveedor");
            entity.Property(e => e.PaginaWeb)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RappelId).HasColumnName("RappelID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TaiEmailAviso)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TAI_EmailAviso");
            entity.Property(e => e.TaiTelefono1Aviso)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("TAI_Telefono1Aviso");
            entity.Property(e => e.TaiTelefono2Aviso)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasComment("Este normalmente será el móvil para SMS")
                .HasColumnName("TAI_Telefono2Aviso");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoFacturacionId).HasColumnName("TipoFacturacionID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.TipoIdentificacionId).HasColumnName("TipoIdentificacionID");
            entity.Property(e => e.TipoPorteId).HasColumnName("TipoPorteID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_Clientes_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_Clientes_ConceptosRetencion");

            entity.HasOne(d => d.DireccionEntrega).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.DireccionEntregaId)
                .HasConstraintName("FK_Clientes_ClientesDirecciones");

            entity.HasOne(d => d.FeFormato).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.FeFormatoId)
                .HasConstraintName("FK_Clientes_FE_Formatos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_Clientes_IVAGrupos");

            entity.HasOne(d => d.Serie).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_Clientes_Series");

            entity.HasMany(d => d.Comercials).WithMany(p => p.Personas)
                .UsingEntity<Dictionary<string, object>>(
                    "ComercialesCliente",
                    r => r.HasOne<Comerciale>().WithMany()
                        .HasForeignKey("ComercialId")
                        .HasConstraintName("FK_ComercialesClientes_Comerciales"),
                    l => l.HasOne<Cliente>().WithMany()
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_ComercialesClientes_Clientes"),
                    j =>
                    {
                        j.HasKey("PersonaId", "ComercialId");
                        j.ToTable("ComercialesClientes");
                        j.IndexerProperty<int>("PersonaId").HasColumnName("PersonaID");
                        j.IndexerProperty<int>("ComercialId").HasColumnName("ComercialID");
                    });
        });

        modelBuilder.Entity<ClientesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Clientes_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ClientesCentrosAdministrativo>(entity =>
        {
            entity.HasKey(e => e.IdcentroAdministrativo);

            entity.Property(e => e.IdcentroAdministrativo).HasColumnName("IDCentroAdministrativo");
            entity.Property(e => e.OcCodigo)
                .IsRequired()
                .HasMaxLength(15)
                .HasComment("Oficina Contable Código")
                .HasColumnName("OC_Codigo");
            entity.Property(e => e.OcNombre)
                .IsRequired()
                .HasMaxLength(40)
                .HasComment("Oficina Contable Nombre")
                .HasColumnName("OC_Nombre");
            entity.Property(e => e.OgCodigo)
                .IsRequired()
                .HasMaxLength(15)
                .HasComment("Organo Gestor Código")
                .HasColumnName("OG_Codigo");
            entity.Property(e => e.OgNombre)
                .IsRequired()
                .HasMaxLength(40)
                .HasComment("Organo Gestor Nombre")
                .HasColumnName("OG_Nombre");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.UtCodigo)
                .IsRequired()
                .HasMaxLength(15)
                .HasComment("Unidad Tramitadora Código")
                .HasColumnName("UT_Codigo");
            entity.Property(e => e.UtNombre)
                .IsRequired()
                .HasMaxLength(40)
                .HasComment("Unidad Tramitadora Nombre")
                .HasColumnName("UT_Nombre");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesCentrosAdministrativos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesCentrosAdministrativos_Clientes");
        });

        modelBuilder.Entity<ClientesContacto>(entity =>
        {
            entity.HasIndex(e => new { e.Id, e.PersonaId }, "IX_ClientesContactos").IsUnique();

            entity.HasIndex(e => e.PersonaId, "IX_ClientesContactos_PersonaID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Apellidos)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cargo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactoTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ContactoTipoID");
            entity.Property(e => e.Departamento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notas)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.PersonaDireccionId).HasColumnName("PersonaDireccionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Telefono1)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.Telefono2)
                .HasMaxLength(17)
                .IsUnicode(false);

            entity.HasOne(d => d.ContactoTipo).WithMany(p => p.ClientesContactos)
                .HasForeignKey(d => d.ContactoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientesContactos_ClientesContactosTipos");

            entity.HasOne(d => d.PersonaDireccion).WithMany(p => p.ClientesContactoPersonaDireccions)
                .HasForeignKey(d => d.PersonaDireccionId)
                .HasConstraintName("FK_ClientesContactos_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesContactos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesContactos_Clientes");

            entity.HasOne(d => d.ClientesDireccione).WithMany(p => p.ClientesContactoClientesDirecciones)
                .HasPrincipalKey(p => new { p.IdpersonaDireccion, p.PersonaId })
                .HasForeignKey(d => new { d.PersonaDireccionId, d.PersonaId })
                .HasConstraintName("FK_ClientesContactos_ClientesDirecciones2");
        });

        modelBuilder.Entity<ClientesContactosTipo>(entity =>
        {
            entity.HasKey(e => e.IdcontactoTipo);

            entity.Property(e => e.IdcontactoTipo).HasColumnName("IDContactoTipo");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClientesCuentasBancaria>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Iban).HasColumnName("IBAN");
            entity.Property(e => e.Ibancodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("IBANCodigo");
            entity.Property(e => e.Ibancuenta)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("IBANCuenta");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumCta)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Swift1)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SWIFT1");
            entity.Property(e => e.Swift2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SWIFT2");
            entity.Property(e => e.Swift3)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SWIFT3");
            entity.Property(e => e.Swift4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SWIFT4");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesCuentasBancaria)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesCuentasBancarias_Clientes");
        });

        modelBuilder.Entity<ClientesDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("Clientes_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.ClientesDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Clientes_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesDatosDinamicos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_Clientes_DatosDinamicos_Clientes");
        });

        modelBuilder.Entity<ClientesDepartamento>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClientesDescuento>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.FamiliaId });

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.ApplySubfamilias).HasColumnName("Apply_Subfamilias");
            entity.Property(e => e.Descuento).HasColumnType("money");

            entity.HasOne(d => d.Familia).WithMany(p => p.ClientesDescuentos)
                .HasForeignKey(d => d.FamiliaId)
                .HasConstraintName("FK_ClientesDescuentos_Familias");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesDescuentos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesDescuentos_Clientes");
        });

        modelBuilder.Entity<ClientesDescuentosRoot>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.ProductoTipoId });

            entity.ToTable("ClientesDescuentos_Root");

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.Descuento).HasColumnType("money");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesDescuentosRoots)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesDescuentos_Root_Clientes");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.ClientesDescuentosRoots)
                .HasForeignKey(d => d.ProductoTipoId)
                .HasConstraintName("FK_ClientesDescuentos_Root_ProductosTipos");
        });

        modelBuilder.Entity<ClientesDiasPago>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.DiaInicio }).HasName("PK_Tabla2");

            entity.ToTable("ClientesDiasPago");

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesDiasPagos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesDiasPago_Clientes");
        });

        modelBuilder.Entity<ClientesDireccione>(entity =>
        {
            entity.HasKey(e => e.IdpersonaDireccion);

            entity.ToTable(tb => tb.HasTrigger("ClientesDirecciones_Delete_CDBO"));

            entity.HasIndex(e => new { e.LocalidadId, e.ProvinciaId, e.PaisId }, "IX_ClientesDireccion_LocProvPais");

            entity.HasIndex(e => new { e.IdpersonaDireccion, e.PersonaId }, "IX_ClientesDirecciones").IsUnique();

            entity.HasIndex(e => e.LocalidadId, "IX_ClientesDirecciones_LocalidadID");

            entity.HasIndex(e => e.PaisId, "IX_ClientesDirecciones_PaisID");

            entity.HasIndex(e => e.PersonaId, "IX_ClientesDirecciones_PersonaID");

            entity.HasIndex(e => e.ProvinciaId, "IX_ClientesDirecciones_ProvinciaID");

            entity.Property(e => e.IdpersonaDireccion).HasColumnName("IDPersonaDireccion");
            entity.Property(e => e.Activa)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Horario)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.LocalidadId).HasColumnName("LocalidadID");
            entity.Property(e => e.Nombre)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PaisId).HasColumnName("PaisID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");
            entity.Property(e => e.TipoDireccionId).HasColumnName("TipoDireccionID");
            entity.Property(e => e.TipoInstalacionId).HasColumnName("TipoInstalacionID");

            entity.HasOne(d => d.IdcdboNavigation).WithMany(p => p.ClientesDirecciones)
                .HasForeignKey(d => d.Idcdbo)
                .HasConstraintName("FK_ClientesDirecciones_ClientesDirecciones_CDBO");

            entity.HasOne(d => d.Localidad).WithMany(p => p.ClientesDirecciones)
                .HasForeignKey(d => d.LocalidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientesDirecciones_Localidades");

            entity.HasOne(d => d.Pais).WithMany(p => p.ClientesDirecciones)
                .HasForeignKey(d => d.PaisId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientesDirecciones_Paises");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesDirecciones)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesDirecciones_Clientes");

            entity.HasOne(d => d.Provincia).WithMany(p => p.ClientesDirecciones)
                .HasForeignKey(d => d.ProvinciaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientesDirecciones_Provincias");
        });

        modelBuilder.Entity<ClientesDireccionesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ClientesDirecciones_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ClientesMandato>(entity =>
        {
            entity.HasKey(e => e.Idmandato);

            entity.ToTable(tb => tb.HasTrigger("trClientesMandatos_Generar"));

            entity.Property(e => e.Idmandato).HasColumnName("IDMandato");
            entity.Property(e => e.CuentaBancariaId).HasColumnName("CuentaBancariaID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Ffirma)
                .HasColumnType("datetime")
                .HasColumnName("FFirma");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ReferenciaMandato)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.TipoMandatoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("TipoMandatoID");

            entity.HasOne(d => d.CuentaBancaria).WithMany(p => p.ClientesMandatos)
                .HasForeignKey(d => d.CuentaBancariaId)
                .HasConstraintName("FK_ClientesMandatos_ClientesCuentasBancarias");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesMandatos)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientesMandatos_Clientes");
        });

        modelBuilder.Entity<ClientesPeriodosExentosPago>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.FechaInicio });

            entity.ToTable("ClientesPeriodosExentosPago");

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesPeriodosExentosPagos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesPeriodosExentosPago_Clientes");
        });

        //modelBuilder.Entity<ClientesRole>(entity =>
        //{
        //    entity.ToTable("clientesRole");

        //    entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
        //        .IsUnique()
        //        .HasFilter("([NormalizedName] IS NOT NULL)");

        //    entity.Property(e => e.Name).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedName).HasMaxLength(256);
        //});

        modelBuilder.Entity<ClientesTelefono>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PersonaDireccionId).HasColumnName("PersonaDireccionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Telefono)
                .HasMaxLength(17)
                .IsUnicode(false);

            entity.HasOne(d => d.PersonaDireccion).WithMany(p => p.ClientesTelefonos)
                .HasForeignKey(d => d.PersonaDireccionId)
                .HasConstraintName("FK_ClientesTelefonos_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.ClientesTelefonos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ClientesTelefonos_Clientes");
        });

        modelBuilder.Entity<ClientesTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.HasIndex(e => e.Nombre, "IX_ClientesTipos").IsUnique();

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Codigo)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClientesTipoIdentificacion>(entity =>
        {
            entity.HasKey(e => e.IdtipoIdentificacion);

            entity.ToTable("ClientesTipoIdentificacion");

            entity.Property(e => e.IdtipoIdentificacion).HasColumnName("IDTipoIdentificacion");
            entity.Property(e => e.TipoIdentificacion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        //modelBuilder.Entity<ClientesUser>(entity =>
        //{
        //    entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

        //    entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
        //        .IsUnique()
        //        .HasFilter("([NormalizedUserName] IS NOT NULL)");

        //    entity.Property(e => e.Email).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
        //    entity.Property(e => e.UserName).HasMaxLength(256);

        //    entity.HasMany(d => d.Roles).WithMany(p => p.Users)
        //        .UsingEntity<Dictionary<string, object>>(
        //            "ClientesUserRole",
        //            r => r.HasOne<ClientesRole>().WithMany().HasForeignKey("RoleId"),
        //            l => l.HasOne<ClientesUser>().WithMany().HasForeignKey("UserId"),
        //            j =>
        //            {
        //                j.HasKey("UserId", "RoleId");
        //                j.ToTable("clientesUserRole");
        //                j.HasIndex(new[] { "RoleId" }, "IX_clientesUserRole_RoleId");
        //            });
        //});

        //modelBuilder.Entity<ClientesUserClaim>(entity =>
        //{
        //    entity.ToTable("clientesUserClaim");

        //    entity.HasIndex(e => e.UserId, "IX_clientesUserClaim_UserId");

        //    entity.Property(e => e.UserId).IsRequired();

        //    entity.HasOne(d => d.User).WithMany(p => p.ClientesUserClaims).HasForeignKey(d => d.UserId);
        //});

        //modelBuilder.Entity<ClientesUserLogin>(entity =>
        //{
        //    entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

        //    entity.ToTable("clientesUserLogin");

        //    entity.HasIndex(e => e.UserId, "IX_clientesUserLogin_UserId");

        //    entity.Property(e => e.LoginProvider).HasMaxLength(128);
        //    entity.Property(e => e.ProviderKey).HasMaxLength(128);
        //    entity.Property(e => e.UserId).IsRequired();

        //    entity.HasOne(d => d.User).WithMany(p => p.ClientesUserLogins).HasForeignKey(d => d.UserId);
        //});

        //modelBuilder.Entity<ClientesUsertoken>(entity =>
        //{
        //    entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

        //    entity.ToTable("clientesUsertoken");

        //    entity.Property(e => e.LoginProvider).HasMaxLength(128);
        //    entity.Property(e => e.Name).HasMaxLength(128);

        //    entity.HasOne(d => d.User).WithMany(p => p.ClientesUsertokens).HasForeignKey(d => d.UserId);
        //});

        //modelBuilder.Entity<Clientesroleclaim>(entity =>
        //{
        //    entity.ToTable("clientesroleclaim");

        //    entity.HasIndex(e => e.RoleId, "IX_clientesroleclaim_RoleId");

        //    entity.Property(e => e.RoleId).IsRequired();

        //    entity.HasOne(d => d.Role).WithMany(p => p.Clientesroleclaims).HasForeignKey(d => d.RoleId);
        //});

        modelBuilder.Entity<Comarca>(entity =>
        {
            entity.HasKey(e => e.Idcomarca);

            entity.Property(e => e.Idcomarca).HasColumnName("IDComarca");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisId).HasColumnName("PaisID");

            entity.HasOne(d => d.Pais).WithMany(p => p.Comarcas)
                .HasForeignKey(d => d.PaisId)
                .HasConstraintName("FK_Comarcas_Paises");
        });

        modelBuilder.Entity<Comerciale>(entity =>
        {
            entity.HasKey(e => e.Idcomercial);

            entity.Property(e => e.Idcomercial).HasColumnName("IDComercial");
            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComercialTipoId).HasColumnName("ComercialTipoID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ComisionResponsableId).HasColumnName("ComisionResponsableID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");

            entity.HasOne(d => d.Comercial).WithMany(p => p.InverseComercial)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_Comerciales_Comerciales");

            entity.HasOne(d => d.ComercialTipo).WithMany(p => p.Comerciales)
                .HasForeignKey(d => d.ComercialTipoId)
                .HasConstraintName("FK_Comerciales_ComercialesTipos");

            entity.HasOne(d => d.Comision).WithMany(p => p.ComercialeComisions)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_Comerciales_Comisiones");

            entity.HasOne(d => d.ComisionResponsable).WithMany(p => p.ComercialeComisionResponsables)
                .HasForeignKey(d => d.ComisionResponsableId)
                .HasConstraintName("FK_Comerciales_Comisiones1");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Comerciales)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_Comerciales_Empleados");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.Comerciales)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_Comerciales_Proveedores");
        });

        modelBuilder.Entity<ComercialesTipo>(entity =>
        {
            entity.HasKey(e => e.IdcomercialTipo);

            entity.Property(e => e.IdcomercialTipo).HasColumnName("IDComercialTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Comisione>(entity =>
        {
            entity.HasKey(e => e.Idcomision);

            entity.Property(e => e.Idcomision).HasColumnName("IDComision");
            entity.Property(e => e.ComisionFija).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ComisionesDetalle>(entity =>
        {
            entity.HasKey(e => e.IdcomisionDetalle);

            entity.ToTable("ComisionesDetalle");

            entity.HasIndex(e => new { e.ComisionId, e.ProductoId, e.CantidadDesde }, "IX_ComisionesDetalle").IsUnique();

            entity.Property(e => e.IdcomisionDetalle).HasColumnName("IDComisionDetalle");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.ComisionNavigation).WithMany(p => p.ComisionesDetalles)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_ComisionesDetalle_Comisiones");

            entity.HasOne(d => d.Operacion).WithMany(p => p.ComisionesDetalles)
                .HasForeignKey(d => d.OperacionId)
                .HasConstraintName("FK_ComisionesDetalle_ComisionesOperaciones");

            entity.HasOne(d => d.Producto).WithMany(p => p.ComisionesDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComisionesDetalle_Productos");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ComisionesDetalles)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .HasConstraintName("FK_ComisionesDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<ComisionesOperacione>(entity =>
        {
            entity.HasKey(e => e.Idoperacion);

            entity.Property(e => e.Idoperacion)
                .ValueGeneratedNever()
                .HasColumnName("IDOperacion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConceptosContabilidad>(entity =>
        {
            entity.HasKey(e => e.Clave);

            entity.ToTable("ConceptosContabilidad");

            entity.Property(e => e.Clave).ValueGeneratedNever();
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConceptosRetencion>(entity =>
        {
            entity.HasKey(e => e.IdconceptoRetencion);

            entity.ToTable("ConceptosRetencion");

            entity.Property(e => e.IdconceptoRetencion).HasColumnName("IDConceptoRetencion");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CtaCompras)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CtaVentas)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");

            entity.HasOne(d => d.CtaComprasNavigation).WithMany(p => p.ConceptosRetencionCtaComprasNavigations)
                .HasForeignKey(d => d.CtaCompras)
                .HasConstraintName("FK_ConceptosRetencion_PGC");

            entity.HasOne(d => d.CtaVentasNavigation).WithMany(p => p.ConceptosRetencionCtaVentasNavigations)
                .HasForeignKey(d => d.CtaVentas)
                .HasConstraintName("FK_ConceptosRetencion_PGC1");
        });

        modelBuilder.Entity<ConexionContum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ConceptoFactura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Concepto_Factura");
            entity.Property(e => e.ConceptoRecibo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Concepto_Recibo");
            entity.Property(e => e.CuentaFactura1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Factura_1");
            entity.Property(e => e.CuentaFactura2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Factura_2");
            entity.Property(e => e.CuentaRecibo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Recibo");
            entity.Property(e => e.LugarConexion)
                .HasMaxLength(255)
                .HasColumnName("Lugar_Conexion");
        });

        modelBuilder.Entity<ConfiguracionBloque>(entity =>
        {
            entity.HasKey(e => e.IdconfiguracionBloque);

            entity.Property(e => e.IdconfiguracionBloque).HasColumnName("IDConfiguracionBloque");
            entity.Property(e => e.Ak)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AK");
            entity.Property(e => e.Dle)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DLE");
            entity.Property(e => e.Dle0)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DLE0");
            entity.Property(e => e.Dle1)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DLE1");
            entity.Property(e => e.Enq)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ENQ");
            entity.Property(e => e.Eot)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EOT");
            entity.Property(e => e.Etb)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ETB");
            entity.Property(e => e.Etx)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ETX");
            entity.Property(e => e.ModeloId).HasColumnName("ModeloID");
            entity.Property(e => e.Nak)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NAK");
            entity.Property(e => e.Stx)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STX");

            entity.HasOne(d => d.Modelo).WithMany(p => p.ConfiguracionBloques)
                .HasForeignKey(d => d.ModeloId)
                .HasConstraintName("FK_ConfiguracionBloques_Modelos");
        });

        modelBuilder.Entity<ConfiguracionEmpresa>(entity =>
        {
            entity.HasKey(e => e.Idempresa);

            entity.ToTable("ConfiguracionEmpresa");

            entity.Property(e => e.Idempresa).HasColumnName("IDEmpresa");
            entity.Property(e => e.AliasReport)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CodigoCuentaCotizacion)
                .HasMaxLength(11)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Idguid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("IDGUID");
            entity.Property(e => e.LocalidadId).HasColumnName("LocalidadID");
            entity.Property(e => e.NifCif)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIF_CIF");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.PaginaWeb)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisId).HasColumnName("PaisID");
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");
            entity.Property(e => e.RegimenEspecial).HasColumnName("Regimen_Especial");
            entity.Property(e => e.Registro)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.RegistroIntracomunitario).HasColumnName("Registro_Intracomunitario");
            entity.Property(e => e.Rgpdtext)
                .HasMaxLength(1024)
                .HasColumnName("RGPDText");
            entity.Property(e => e.Telefono1)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.Telefono2)
                .HasMaxLength(13)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConfiguracionEmpresaCtum>(entity =>
        {
            entity.HasKey(e => e.Idctaempresa);

            entity.ToTable("ConfiguracionEmpresa_CTA");

            entity.Property(e => e.Idctaempresa).HasColumnName("IDCTAEmpresa");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.LiActividadGrupoCDef)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadGrupo_C_def");
            entity.Property(e => e.LiActividadGrupoVDef)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadGrupo_V_def");
            entity.Property(e => e.LiActividadTipoCDef)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadTipo_C_def");
            entity.Property(e => e.LiActividadTipoVDef)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadTipo_V_def");
            entity.Property(e => e.LiConceptoCDef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_Concepto_C_def");
            entity.Property(e => e.LiConceptoVDef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_Concepto_V_def");
            entity.Property(e => e.M303CcbdevolucionId).HasColumnName("M303_CCBDevolucionID");
            entity.Property(e => e.M303CcbingresoId).HasColumnName("M303_CCBIngresoID");
            entity.Property(e => e.M303InscritoRegistroDevMensual).HasColumnName("M303_InscritoRegistroDevMensual");
            entity.Property(e => e.M303Path)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("M303_Path");
            entity.Property(e => e.M303Periodicidad).HasColumnName("M303_Periodicidad");
            entity.Property(e => e.SiiNifrepresentanteLegal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SII_NIFRepresentanteLegal");
            entity.Property(e => e.TerritorioId).HasColumnName("TerritorioID");

            entity.HasOne(d => d.Empresa).WithMany(p => p.ConfiguracionEmpresaCta)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConfiguracionEmpresa_CTA_ConfiguracionEmpresa");

            entity.HasOne(d => d.M303Ccbdevolucion).WithMany(p => p.ConfiguracionEmpresaCtumM303Ccbdevolucions)
                .HasForeignKey(d => d.M303CcbdevolucionId)
                .HasConstraintName("FK_ConfiguracionEmpresa_CTA_EmpresasCuentasBancarias");

            entity.HasOne(d => d.M303Ccbingreso).WithMany(p => p.ConfiguracionEmpresaCtumM303Ccbingresos)
                .HasForeignKey(d => d.M303CcbingresoId)
                .HasConstraintName("FK_ConfiguracionEmpresa_CTA_EmpresasCuentasBancarias1");

            entity.HasOne(d => d.Territorio).WithMany(p => p.ConfiguracionEmpresaCta)
                .HasForeignKey(d => d.TerritorioId)
                .HasConstraintName("FK_ConfiguracionEmpresa_CTA_CTA_AEAT_Territorios");
        });

        modelBuilder.Entity<CrmAccione>(entity =>
        {
            entity.HasKey(e => e.Idcabecera).HasName("PK_CRM_Acciones_1");

            entity.ToTable("CRM_Acciones");

            entity.HasIndex(e => e.Idcdbo, "IX_CRM_Acciones_IDCDBO").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AppointmentItemEntryId)
                .HasMaxLength(140)
                .IsUnicode(false)
                .HasColumnName("AppointmentItem_EntryID");
            entity.Property(e => e.Asunto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.CabeceraRecurrenceId).HasColumnName("CabeceraRecurrenceID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ComercialEmpleadoId).HasColumnName("ComercialEmpleadoID");
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.Coste).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoAccionId).HasColumnName("EstadoAccionID");
            entity.Property(e => e.EstadoComercialEmpleadoId).HasColumnName("EstadoComercialEmpleadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IniciativaId).HasColumnName("IniciativaID");
            entity.Property(e => e.Lugar)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Motivo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Notas)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Numero).HasDefaultValueSql("((0))");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.OportunidadId).HasColumnName("OportunidadID");
            entity.Property(e => e.Origen)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PersonaContactoId).HasColumnName("PersonaContactoID");
            entity.Property(e => e.PersonaDireccionId).HasColumnName("PersonaDireccionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.RecurrenceInfo)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ReminderDate).HasColumnType("datetime");
            entity.Property(e => e.ReminderResourcesData).HasColumnType("text");
            entity.Property(e => e.ResultadoId).HasColumnName("ResultadoID");
            entity.Property(e => e.TaskLinks).HasColumnType("text");
            entity.Property(e => e.Telefono)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.TipoAccionId).HasColumnName("TipoAccionID");

            entity.HasOne(d => d.CabeceraOrigen).WithMany(p => p.InverseCabeceraOrigen)
                .HasForeignKey(d => d.CabeceraOrigenId)
                .HasConstraintName("FK_CRM_Acciones_CRM_Acciones");

            entity.HasOne(d => d.CabeceraRecurrence).WithMany(p => p.InverseCabeceraRecurrence)
                .HasForeignKey(d => d.CabeceraRecurrenceId)
                .HasConstraintName("FK_CRM_Acciones_Recurrencia");

            entity.HasOne(d => d.ComercialEmpleado).WithMany(p => p.CrmAccioneComercialEmpleados)
                .HasForeignKey(d => d.ComercialEmpleadoId)
                .HasConstraintName("FK_CRM_Acciones_EmpleadosComerciales");

            entity.HasOne(d => d.Comercial).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.ComercialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_Comerciales");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.CrmAccioneEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_ConfiguracionEmpresa");

            entity.HasOne(d => d.EstadoAccion).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.EstadoAccionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_CRM_AccionesEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.CrmAccione)
                .HasForeignKey<CrmAccione>(d => d.Idcdbo)
                .HasConstraintName("FK_CRM_Acciones_CRM_Acciones_CDBO");

            entity.HasOne(d => d.Iniciativa).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.IniciativaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_CRM_AccionesIniciativas");

            entity.HasOne(d => d.Medio).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.MedioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_CRM_AccionesMedios");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Acciones_Clientes");

            entity.HasOne(d => d.Resultado).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.ResultadoId)
                .HasConstraintName("FK_CRM_Acciones_CRM_AccionesResultados");

            entity.HasOne(d => d.TipoAccion).WithMany(p => p.CrmAcciones)
                .HasForeignKey(d => d.TipoAccionId)
                .HasConstraintName("FK_CRM_Acciones_CRM_AccionesTipos");

            entity.HasOne(d => d.ClientesContacto).WithMany(p => p.CrmAcciones)
                .HasPrincipalKey(p => new { p.Id, p.PersonaId })
                .HasForeignKey(d => new { d.PersonaContactoId, d.PersonaId })
                .HasConstraintName("FK_CRM_Acciones_ClientesContactos");

            entity.HasOne(d => d.ClientesDireccione).WithMany(p => p.CrmAcciones)
                .HasPrincipalKey(p => new { p.IdpersonaDireccion, p.PersonaId })
                .HasForeignKey(d => new { d.PersonaDireccionId, d.PersonaId })
                .HasConstraintName("FK_CRM_Acciones_ClientesDirecciones");
        });

        modelBuilder.Entity<CrmAccionesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("CRM_Acciones_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<CrmAccionesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("CRM_AccionesEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Traspaso)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<CrmAccionesIniciativa>(entity =>
        {
            entity.HasKey(e => e.Idiniciativa);

            entity.ToTable("CRM_AccionesIniciativas", tb => tb.HasTrigger("CRM_AccionesIniciativas_SetOrden"));

            entity.Property(e => e.Idiniciativa).HasColumnName("IDIniciativa");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmAccionesMedio>(entity =>
        {
            entity.HasKey(e => e.Idmedio);

            entity.ToTable("CRM_AccionesMedios");

            entity.Property(e => e.Idmedio).HasColumnName("IDMedio");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmAccionesResultado>(entity =>
        {
            entity.HasKey(e => e.Idresultado).HasName("PK_CRM_AccionesResultado");

            entity.ToTable("CRM_AccionesResultados");

            entity.Property(e => e.Idresultado).HasColumnName("IDResultado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmAccionesTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("CRM_AccionesTipos");

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TipoGenericoId).HasColumnName("TipoGenericoID");

            entity.HasOne(d => d.TipoGenerico).WithMany(p => p.CrmAccionesTipos)
                .HasForeignKey(d => d.TipoGenericoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_AccionesTipos_CRM_AccionesTiposGenericos");
        });

        modelBuilder.Entity<CrmAccionesTiposGenerico>(entity =>
        {
            entity.HasKey(e => e.IdtipoGenerico).HasName("PK_CRM_Acciones_TiposGenerico");

            entity.ToTable("CRM_AccionesTiposGenericos");

            entity.Property(e => e.IdtipoGenerico).HasColumnName("IDTipoGenerico");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmCampanya>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("CRM_Campanyas", tb =>
                {
                    tb.HasTrigger("CRM_Campanyas_Delete_CDBO");
                    tb.HasTrigger("MaxCRM_CampanyasAnno");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_CRM_Campanyas").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.FsigEmision)
                .HasColumnType("datetime")
                .HasColumnName("FSigEmision");
            entity.Property(e => e.FultEmision)
                .HasColumnType("datetime")
                .HasColumnName("FUltEmision");
            entity.Property(e => e.Generico)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.Objetivos).HasColumnType("text");
            entity.Property(e => e.TipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("TipoID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.CrmCampanyas)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_CRM_Campanyas_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.CrmCampanyas)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_CRM_Campanyas_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CrmCampanyas)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_CRM_Campanyas_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.CrmCampanyas)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Campanyas_CRM_CampanyasEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.CrmCampanya)
                .HasForeignKey<CrmCampanya>(d => d.Idcdbo)
                .HasConstraintName("FK_CRM_Campanyas_CRM_Campanyas_CDBO");

            entity.HasOne(d => d.Tipo).WithMany(p => p.CrmCampanyas)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Campanyas_CRM_CampanyasTipos");
        });

        modelBuilder.Entity<CrmCampanyasCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("CRM_Campanyas_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<CrmCampanyasCriterio>(entity =>
        {
            entity.HasKey(e => e.Idcriterio);

            entity.ToTable("CRM_CampanyasCriterios");

            entity.Property(e => e.Idcriterio).HasColumnName("IDCriterio");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CampoCriterioId).HasColumnName("CampoCriterioID");
            entity.Property(e => e.Clausula)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.OperadorId).HasColumnName("OperadorID");
            entity.Property(e => e.Valor)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.CrmCampanyasCriterios)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_CRM_CampanyasCriterios_CRM_Campanyas");

            entity.HasOne(d => d.CampoCriterio).WithMany(p => p.CrmCampanyasCriterios)
                .HasForeignKey(d => d.CampoCriterioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_CampanyasCriterios_CRM_CamposCriterios");
        });

        modelBuilder.Entity<CrmCampanyasDestinatario>(entity =>
        {
            entity.HasKey(e => e.Iddestinatario);

            entity.ToTable("CRM_CampanyasDestinatarios");

            entity.Property(e => e.Iddestinatario).HasColumnName("IDDestinatario");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.CrmCampanyasDestinatarios)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_CRM_CampanyasDestinatarios_CRM_Campanyas");

            entity.HasOne(d => d.Contacto).WithMany(p => p.CrmCampanyasDestinatarios)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_CRM_CampanyasDestinatarios_ClientesContactos");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmCampanyasDestinatarios)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_CampanyasDestinatarios_Clientes");
        });

        modelBuilder.Entity<CrmCampanyasDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("CRM_CampanyasDetalle", tb => tb.HasTrigger("CRM_CampanyasDetalle_Delete_CDBO"));

            entity.HasIndex(e => e.Idcdbo, "IX_CRM_CampanyasDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_CRM_CampanyasDetalle_CabeceraID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DocumentoId).HasColumnName("DocumentoID");
            entity.Property(e => e.Femision)
                .HasColumnType("datetime")
                .HasColumnName("FEmision");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.CrmCampanyasDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_CRM_CampanyasDetalle_CRM_Campanyas");

            entity.HasOne(d => d.Documento).WithMany(p => p.CrmCampanyasDetalles)
                .HasForeignKey(d => d.DocumentoId)
                .HasConstraintName("FK_CRM_CampanyasDetalle_CRM_CampanyasDocumentos");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.CrmCampanyasDetalle)
                .HasForeignKey<CrmCampanyasDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_CRM_CampanyasDetalle_CRM_CampanyasDetalle_CDBO");
        });

        modelBuilder.Entity<CrmCampanyasDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("CRM_CampanyasDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<CrmCampanyasDocumento>(entity =>
        {
            entity.HasKey(e => e.Iddocumento);

            entity.ToTable("CRM_CampanyasDocumentos");

            entity.Property(e => e.Iddocumento).HasColumnName("IDDocumento");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Fichero)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FormatoId).HasColumnName("FormatoID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.CrmCampanyasDocumentos)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_CampanyasDocumentos_CRM_Campanyas");

            entity.HasOne(d => d.Formato).WithMany(p => p.CrmCampanyasDocumentos)
                .HasForeignKey(d => d.FormatoId)
                .HasConstraintName("FK_CRM_CampanyasDocumentos_GD_FormatosArchivos");

            entity.HasOne(d => d.Tipo).WithMany(p => p.CrmCampanyasDocumentos)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_CampanyasDocumentos_CRM_DocumentosTipos");
        });

        modelBuilder.Entity<CrmCampanyasEmisionesTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("CRM_CampanyasEmisionesTipos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmCampanyasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("CRM_CampanyasEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmCampanyasSeguimiento>(entity =>
        {
            entity.HasKey(e => e.Idseguimiento);

            entity.ToTable("CRM_CampanyasSeguimientos");

            entity.Property(e => e.Idseguimiento).HasColumnName("IDSeguimiento");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DestinatarioId).HasColumnName("DestinatarioID");
            entity.Property(e => e.Fecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Respuesta).HasColumnType("text");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.CrmCampanyasSeguimientos)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_CampanyasSeguimientos_CRM_Campanyas");

            entity.HasOne(d => d.Destinatario).WithMany(p => p.CrmCampanyasSeguimientos)
                .HasForeignKey(d => d.DestinatarioId)
                .HasConstraintName("FK_CRM_CampanyasSeguimientos_CRM_CampanyasDestinatarios");
        });

        modelBuilder.Entity<CrmCampanyasTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("CRM_CampanyasTipos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmCamposCriterio>(entity =>
        {
            entity.HasKey(e => e.IdcampoCriterio);

            entity.ToTable("CRM_CamposCriterios");

            entity.Property(e => e.IdcampoCriterio)
                .ValueGeneratedNever()
                .HasComment("ID 1-100 para Fijos; Segmentos a partir de 100")
                .HasColumnName("IDCampoCriterio");
            entity.Property(e => e.FieldName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Funcion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SegmentoId).HasColumnName("SegmentoID");
            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Segmento).WithMany(p => p.CrmCamposCriterios)
                .HasForeignKey(d => d.SegmentoId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CRM_CamposCriterios_CRM_Segmentos");
        });

        modelBuilder.Entity<CrmCanje>(entity =>
        {
            entity.HasKey(e => e.Idcanje);

            entity.ToTable("CRM_Canjes");

            entity.Property(e => e.Idcanje).HasColumnName("IDCanje");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorFijo).HasColumnType("money");
        });

        modelBuilder.Entity<CrmCanjesDetalle>(entity =>
        {
            entity.HasKey(e => e.IdcanjeDetalle);

            entity.ToTable("CRM_CanjesDetalle");

            entity.Property(e => e.IdcanjeDetalle).HasColumnName("IDCanjeDetalle");
            entity.Property(e => e.CanjeId).HasColumnName("CanjeID");
            entity.Property(e => e.Obsequio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Vale).HasColumnType("money");

            entity.HasOne(d => d.Canje).WithMany(p => p.CrmCanjesDetalles)
                .HasForeignKey(d => d.CanjeId)
                .HasConstraintName("FK_CRM_CanjesDetalle_CRM_Canjes");
        });

        modelBuilder.Entity<CrmClientesPunto>(entity =>
        {
            entity.HasKey(e => e.PersonaId);

            entity.ToTable("CRM_ClientesPuntos");

            entity.Property(e => e.PersonaId)
                .ValueGeneratedNever()
                .HasColumnName("PersonaID");
            entity.Property(e => e.PuntosActuales).HasColumnName("Puntos_Actuales");
            entity.Property(e => e.PuntosAcumulados).HasColumnName("Puntos_Acumulados");
            entity.Property(e => e.PuntosSobrantes).HasColumnName("Puntos_Sobrantes");

            entity.HasOne(d => d.Persona).WithOne(p => p.CrmClientesPunto)
                .HasForeignKey<CrmClientesPunto>(d => d.PersonaId)
                .HasConstraintName("FK_CRM_ClientesPuntos_Clientes");
        });

        modelBuilder.Entity<CrmClientesPuntosCabecera>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("CRM_ClientesPuntosCabeceras");

            entity.HasIndex(e => new { e.PersonaId, e.DocumentoGestionId, e.DocumentoGestionCabeceraId }, "IX_CRM_ClientesPuntosCabeceras_CabeceraDocGest").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.DocumentoGestionCabeceraId).HasColumnName("DocumentoGestionCabeceraID");
            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaLiquidacion).HasColumnType("datetime");
            entity.Property(e => e.LiquidacionId).HasColumnName("LiquidacionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.CrmClientesPuntosCabeceras)
                .HasForeignKey(d => d.DocumentoGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_ClientesPuntosCabeceras_DocumentosGestion");

            entity.HasOne(d => d.Liquidacion).WithMany(p => p.CrmClientesPuntosCabeceras)
                .HasForeignKey(d => d.LiquidacionId)
                .HasConstraintName("FK_CRM_ClientesPuntosCabeceras_CRM_Liquidaciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmClientesPuntosCabeceras)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_CRM_ClientesPuntosCabeceras_CRM_ClientesPuntos");
        });

        modelBuilder.Entity<CrmClientesPuntosDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("CRM_ClientesPuntosDetalle");

            entity.HasIndex(e => new { e.CabeceraId, e.DocumentoGestionLineaId }, "IX_CRM_ClientesPuntosDetalle_LineaDoc").IsUnique();

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoGestionLineaId).HasColumnName("DocumentoGestionLineaID");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.PuntosTablaDetalleId).HasColumnName("PuntosTablaDetalleID");
            entity.Property(e => e.PuntosTablaId).HasColumnName("PuntosTablaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.CrmClientesPuntosDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_CRM_ClientesPuntosDetalle_CRM_ClientesPuntosCabeceras");

            entity.HasOne(d => d.PuntosTabla).WithMany(p => p.CrmClientesPuntosDetalles)
                .HasForeignKey(d => d.PuntosTablaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_ClientesPuntosDetalle_CRM_PuntosTabla");

            entity.HasOne(d => d.CrmPuntosTablaDetalle).WithMany(p => p.CrmClientesPuntosDetalles)
                .HasPrincipalKey(p => new { p.IdpuntosTablaDetalle, p.PuntosTablaId, p.ProductoId })
                .HasForeignKey(d => new { d.PuntosTablaDetalleId, d.PuntosTablaId, d.ProductoId })
                .HasConstraintName("FK_CRM_ClientesPuntosDetalle_CRM_PuntosTablaDetalle2");
        });

        modelBuilder.Entity<CrmClientesSegmento>(entity =>
        {
            entity.HasKey(e => e.IdclienteSegmento);

            entity.ToTable("CRM_ClientesSegmentos");

            entity.Property(e => e.IdclienteSegmento).HasColumnName("IDClienteSegmento");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.SegmentoId).HasColumnName("SegmentoID");
            entity.Property(e => e.Valor)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Contacto).WithMany(p => p.CrmClientesSegmentos)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_CRM_ClientesSegmentos_ClientesContactos");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmClientesSegmentos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_CRM_ClientesSegmentos_Clientes");

            entity.HasOne(d => d.Segmento).WithMany(p => p.CrmClientesSegmentos)
                .HasForeignKey(d => d.SegmentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_ClientesSegmentos_CRM_Segmentos");
        });

        modelBuilder.Entity<CrmDocumentosTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("CRM_DocumentosTipos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmLiquidacione>(entity =>
        {
            entity.HasKey(e => e.Idliquidacion);

            entity.ToTable("CRM_Liquidaciones");

            entity.Property(e => e.Idliquidacion).HasColumnName("IDLiquidacion");
            entity.Property(e => e.CanjeId).HasColumnName("CanjeID");
            entity.Property(e => e.FechaCaducidad).HasColumnType("datetime");
            entity.Property(e => e.FechaLiquidacion).HasColumnType("datetime");
            entity.Property(e => e.Obsequio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Vale).HasColumnType("money");

            entity.HasOne(d => d.Canje).WithMany(p => p.CrmLiquidaciones)
                .HasForeignKey(d => d.CanjeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Liquidaciones_CRM_Canjes");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmLiquidaciones)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Liquidaciones_Clientes");
        });

        modelBuilder.Entity<CrmOportunidade>(entity =>
        {
            entity.HasKey(e => e.Idoportunidad);

            entity.ToTable("CRM_Oportunidades");

            entity.Property(e => e.Idoportunidad).HasColumnName("IDOportunidad");
            entity.Property(e => e.Asunto).HasMaxLength(300);
            entity.Property(e => e.Descripcion).HasMaxLength(500);
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("EstadoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");

            entity.HasOne(d => d.Estado).WithMany(p => p.CrmOportunidades)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Oportunidades_CRM_OportunidadesEstados");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmOportunidades)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_CRM_Oportunidades_Clientes");

            entity.HasOne(d => d.Prioridad).WithMany(p => p.CrmOportunidades)
                .HasForeignKey(d => d.PrioridadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Oportunidades_CRM_OportunidadesPrioridades");
        });

        modelBuilder.Entity<CrmOportunidadesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("CRM_OportunidadesEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmOportunidadesPrioridade>(entity =>
        {
            entity.HasKey(e => e.Idprioridad);

            entity.ToTable("CRM_OportunidadesPrioridades");

            entity.Property(e => e.Idprioridad)
                .ValueGeneratedNever()
                .HasColumnName("IDPrioridad");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CrmPuntosTabla>(entity =>
        {
            entity.HasKey(e => e.IdpuntosTabla);

            entity.ToTable("CRM_PuntosTabla");

            entity.Property(e => e.IdpuntosTabla).HasColumnName("IDPuntosTabla");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ValorFijo).HasColumnType("money");
        });

        modelBuilder.Entity<CrmPuntosTablaDetalle>(entity =>
        {
            entity.HasKey(e => e.IdpuntosTablaDetalle);

            entity.ToTable("CRM_PuntosTablaDetalle");

            entity.HasIndex(e => new { e.PuntosTablaId, e.ProductoId }, "IX_CRM_PuntosTablaDetalle").IsUnique();

            entity.HasIndex(e => new { e.IdpuntosTablaDetalle, e.PuntosTablaId, e.ProductoId }, "IX_CRM_PuntosTablaDetalle_PK_PuntosTablaID_ProductoID").IsUnique();

            entity.Property(e => e.IdpuntosTablaDetalle).HasColumnName("IDPuntosTablaDetalle");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.PuntosTablaId).HasColumnName("PuntosTablaID");
            entity.Property(e => e.ValorPunto).HasColumnType("money");

            entity.HasOne(d => d.Producto).WithMany(p => p.CrmPuntosTablaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_CRM_PuntosTablaDetalle_Productos");

            entity.HasOne(d => d.PuntosTabla).WithMany(p => p.CrmPuntosTablaDetalles)
                .HasForeignKey(d => d.PuntosTablaId)
                .HasConstraintName("FK_CRM_PuntosTablaDetalle_CRM_PuntosTabla");
        });

        modelBuilder.Entity<CrmSegmento>(entity =>
        {
            entity.HasKey(e => e.Idsegmento);

            entity.ToTable("CRM_Segmentos");

            entity.Property(e => e.Idsegmento).HasColumnName("IDSegmento");
            entity.Property(e => e.ComboListId).HasColumnName("ComboListID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrTypeId).HasColumnName("UsrTypeID");

            entity.HasOne(d => d.UsrType).WithMany(p => p.CrmSegmentos)
                .HasForeignKey(d => d.UsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRM_Segmentos_GS_UsrTypes");
        });

        modelBuilder.Entity<CrmTarjetasFidelizacion>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.NumeroTarjeta });

            entity.ToTable("CRM_TarjetasFidelizacion");

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.NumeroTarjeta)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("1: Tarjeta Activa. 0: Tarjeta Inactiva");

            entity.HasOne(d => d.Persona).WithMany(p => p.CrmTarjetasFidelizacions)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_CRM_TarjetasFidelizacion_Clientes");
        });

        modelBuilder.Entity<CtaAeatTerritorio>(entity =>
        {
            entity.HasKey(e => e.Idterritorio);

            entity.ToTable("CTA_AEAT_Territorios");

            entity.Property(e => e.Idterritorio).HasColumnName("IDTerritorio");
            entity.Property(e => e.M303PerCent)
                .HasDefaultValueSql("((100))")
                .HasColumnType("money")
                .HasColumnName("M303_PerCent");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CtaAsientosOrigene>(entity =>
        {
            entity.HasKey(e => e.Idorigen);

            entity.ToTable("CTA_AsientosOrigenes");

            entity.Property(e => e.Idorigen).HasColumnName("IDOrigen");
            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.CtaAsientosOrigenes)
                .HasForeignKey(d => d.DocumentoGestionId)
                .HasConstraintName("FK_CTA_AsientosOrigenes_DocumentosGestion");
        });

        modelBuilder.Entity<CtaCentroCoste>(entity =>
        {
            entity.HasKey(e => e.IdcentroCoste);

            entity.ToTable("CTA_CentroCoste", tb =>
                {
                    tb.HasTrigger("CTA_CentroCoste_Calcular_Codigo");
                    tb.HasTrigger("CTA_CentroCoste_IsDetail");
                });

            entity.Property(e => e.IdcentroCoste).HasColumnName("IDCentroCoste");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.IsDetail)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.InverseCentroCoste)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_CTA_CentroCoste_CTA_CentroCoste");

            entity.HasOne(d => d.Departamento).WithMany(p => p.CtaCentroCostes)
                .HasForeignKey(d => d.DepartamentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CTA_CentroCoste_Departamentos");

            entity.HasOne(d => d.Seccione).WithMany(p => p.CtaCentroCostes)
                .HasPrincipalKey(p => new { p.Idseccion, p.DepartamentoId })
                .HasForeignKey(d => new { d.SeccionId, d.DepartamentoId })
                .HasConstraintName("FK_CTA_CentroCoste_Secciones");
        });

        modelBuilder.Entity<CtaCuentasIntercambio>(entity =>
        {
            entity.HasKey(e => e.Idintercambio);

            entity.ToTable("CTA_Cuentas_Intercambio");

            entity.Property(e => e.Idintercambio).HasColumnName("IDIntercambio");
            entity.Property(e => e.CuentaDestino)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CuentaOrigen)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaDesde).HasColumnType("datetime");
            entity.Property(e => e.FechaHasta).HasColumnType("datetime");

            entity.HasOne(d => d.Empleado).WithMany(p => p.CtaCuentasIntercambios)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_CTA_Cuentas_Intercambio_Empleados");
        });

        modelBuilder.Entity<Cualificacione>(entity =>
        {
            entity.HasKey(e => e.Idcualificacion);

            entity.HasIndex(e => new { e.AtributoId, e.ValorId }, "IX_Cualificaciones_Atributo_Valor").IsUnique();

            entity.Property(e => e.Idcualificacion).HasColumnName("IDCualificacion");
            entity.Property(e => e.AtributoId)
                .HasComment("Referencia a la tabla AtributosProducto")
                .HasColumnName("AtributoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.ValorId)
                .HasComment("Referencia a la tabla ValoresProductos")
                .HasColumnName("ValorID");

            entity.HasOne(d => d.Atributo).WithMany(p => p.Cualificaciones)
                .HasForeignKey(d => d.AtributoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cualificaciones_CualificacionesAtributos");

            entity.HasOne(d => d.Valor).WithMany(p => p.Cualificaciones)
                .HasForeignKey(d => d.ValorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cualificaciones_ValoresProductos");
        });

        modelBuilder.Entity<CualificacionesAtributo>(entity =>
        {
            entity.HasKey(e => e.AtributoId);

            entity.Property(e => e.AtributoId)
                .ValueGeneratedNever()
                .HasColumnName("AtributoID");

            entity.HasOne(d => d.Atributo).WithOne(p => p.CualificacionesAtributo)
                .HasForeignKey<CualificacionesAtributo>(d => d.AtributoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CualificacionesAtributos_AtributosProductos");
        });

        modelBuilder.Entity<DatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamico);

            entity.Property(e => e.IddatoDinamico).HasColumnName("IDDatoDinamico");
            entity.Property(e => e.ComboListId).HasColumnName("ComboListID");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrTypeId).HasColumnName("UsrTypeID");

            entity.HasOne(d => d.UsrType).WithMany(p => p.DatosDinamicos)
                .HasForeignKey(d => d.UsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DatosDinamicos_GS_UsrTypes");
        });

        modelBuilder.Entity<DatosDinamicosGsEntidade>(entity =>
        {
            entity.HasKey(e => e.EntidadId);

            entity.ToTable("DatosDinamicos_GS_Entidades");

            entity.Property(e => e.EntidadId)
                .ValueGeneratedNever()
                .HasColumnName("EntidadID");
            entity.Property(e => e.CategoryId)
                .HasComment("Determina la CategorÝa en la que aparecerß la Entidad (0 = Documentos de Gesti¾n, 1 = Productos, 2 = Clientes)")
                .HasColumnName("CategoryID");

            entity.HasOne(d => d.Entidad).WithOne(p => p.DatosDinamicosGsEntidade)
                .HasForeignKey<DatosDinamicosGsEntidade>(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DatosDinamicos_GS_Entidades_GS_Entidades");
        });

        modelBuilder.Entity<DatosDinamicosGsEntidadesDef>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoGsEntidadDef);

            entity.ToTable("DatosDinamicos_GS_EntidadesDef");

            entity.Property(e => e.IddatoDinamicoGsEntidadDef).HasColumnName("IDDatoDinamicoGS_EntidadDef");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DatoDinamicoId).HasColumnName("DatoDinamicoID");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.Precargar)
                .IsRequired()
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.DatoDinamico).WithMany(p => p.DatosDinamicosGsEntidadesDefs)
                .HasForeignKey(d => d.DatoDinamicoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DatosDinamicos_GS_EntidadesDef_DatosDinamicos");

            entity.HasOne(d => d.Entidad).WithMany(p => p.DatosDinamicosGsEntidadesDefs)
                .HasForeignKey(d => d.EntidadId)
                .HasConstraintName("FK_DatosDinamicos_GS_EntidadesDef_DatosDinamicos_GS_Entidades");
        });

        modelBuilder.Entity<DatosIva>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DatosIVA");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Dinero).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.General).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<DatosMovimientoCaja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DatosMovimientoCaja");

            entity.Property(e => e.Acuenta)
                .HasColumnType("money")
                .HasColumnName("ACuenta");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DtoTotal).HasColumnType("money");
            entity.Property(e => e.Entra).HasColumnType("money");
            entity.Property(e => e.Sale).HasColumnType("money");
        });

        modelBuilder.Entity<DatosTicket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DatosTicket");

            entity.Property(e => e.Cliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.CodProd)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Empleado)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.PrecioVentaRebajado).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Producto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Pvp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PVP");
            entity.Property(e => e.Total).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalNeto).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Departamento>(entity =>
        {
            entity.HasKey(e => e.Iddepartamento);

            entity.Property(e => e.Iddepartamento).HasColumnName("IDDepartamento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Descuento>(entity =>
        {
            entity.HasKey(e => e.Iddescuento);

            entity.Property(e => e.Iddescuento).HasColumnName("IDDescuento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Porcentaje).HasColumnType("money");
        });

        modelBuilder.Entity<DevolucionesVentaCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("DevolucionesVenta_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<DevolucionesVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("DevolucionesVentaDetalle", tb =>
                {
                    tb.HasTrigger("DevolucionesVentaDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateDGDUbicacionesFromDevolucionesVentaDetalle");
                    tb.HasTrigger("tr_DVD_UpdateStateDV");
                    tb.HasTrigger("tr_DevolucionesVentaDetalle_AfterDelete");
                    tb.HasTrigger("tr_DevolucionesVentaDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_DevolucionesVentaDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_DevolucionesVentaDetalle_Update_NumLinea");
                    tb.HasTrigger("tr_DevolucionesVenta_TotalesCabecera");
                    tb.HasTrigger("tr_DevolucionesVenta_UpdatePortes");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_DevolucionesVentaDetalle_CDBO").IsUnique();

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FechaDevolucion).HasColumnType("datetime");
            entity.Property(e => e.FechaDevolucionPrevista).HasColumnType("datetime");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVenta");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.DevolucionesVentaDetalle)
                .HasForeignKey<DevolucionesVentaDetalle>(d => d.Idcdbo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVentaDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_DevolucionesVentaDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVentaDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVentaDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.DevolucionesVentaDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVentaDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.DevolucionesVentaDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.DevolucionesVentaDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.DevolucionesVentaDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.DevolucionesVentaDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_DevolucionesVentaDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<DevolucionesVentaDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("DevolucionesVentaDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<DevolucionesVentaEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DevolucionesVentum>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Act_Num_DevolucionesVenta");
                    tb.HasTrigger("DevolucionesVenta_Delete_CDBO");
                    tb.HasTrigger("tr_DevolucionVenta_UpdateFromDescuento");
                    tb.HasTrigger("tr_DevolucionesVenta_MaxAnno_ins");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_DevolucionesVenta_CDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_DevolucionesVenta_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CalculoPortesTipo).HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DirRecogidaDireccionId).HasColumnName("DirRecogida_DireccionID");
            entity.Property(e => e.DirRecogidaEntidadOrigenId).HasColumnName("DirRecogida_EntidadOrigenID");
            entity.Property(e => e.DirRecogidaKeyFieldValueId).HasColumnName("DirRecogida_KeyFieldValueID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaAviso).HasColumnType("datetime");
            entity.Property(e => e.FechaDevolucion).HasColumnType("datetime");
            entity.Property(e => e.FechaDevolucionPrevista).HasColumnType("datetime");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.TipoId1).HasColumnName("TipoID_1");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_DevolucionesVenta_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_DevolucionesVenta_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_DevolucionesVenta_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_DevolucionesVenta_ClientesContactos");

            entity.HasOne(d => d.DirRecogidaEntidadOrigen).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.DirRecogidaEntidadOrigenId)
                .HasConstraintName("FK_DevolucionesVenta_Direcciones_EntidadesOrigen");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_DevolucionesVenta_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.DevolucionesVentumEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_DevolucionesVenta_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.DevolucionesVentumEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_DevolucionesVenta_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_DevolucionesVenta_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVenta_DevolucionesVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.DevolucionesVentum)
                .HasForeignKey<DevolucionesVentum>(d => d.Idcdbo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DevolucionesVenta_DevolucionesVenta_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_DevolucionesVenta_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_DevolucionesVenta_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_DevolucionesVenta_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVenta_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_DevolucionesVenta_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.DevolucionesVenta)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevolucionesVenta_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.DevolucionesVenta)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_DevolucionesVenta_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<DgDgdireccione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DG_DGDirecciones");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DgdireccionId).HasColumnName("DGDireccionID");
            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");

            entity.HasOne(d => d.Dgdireccion).WithMany()
                .HasForeignKey(d => d.DgdireccionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DG_DGDirecciones_DG_Direcciones");

            entity.HasOne(d => d.DocumentoGestion).WithMany()
                .HasForeignKey(d => d.DocumentoGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DG_DGDirecciones_DocumentosGestion");
        });

        modelBuilder.Entity<DgDireccione>(entity =>
        {
            entity.HasKey(e => e.Iddgdireccion);

            entity.ToTable("DG_Direcciones");

            entity.Property(e => e.Iddgdireccion).HasColumnName("IDDGDireccion");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocalidadId).HasColumnName("LocalidadID");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisId).HasColumnName("PaisID");
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");
        });

        modelBuilder.Entity<DgdUbicacione>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.LineaId, e.UbicacionId, e.LoteId });

            entity.ToTable("DGD_Ubicaciones", tb => tb.HasTrigger("UpdateMovimientosAlmacenFromDGD_Ubicaciones"));

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Iddgdu)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDdgdu");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.AlmacenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_Almacenes");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.DocumentoGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_DocumentosGestion");

            entity.HasOne(d => d.Lote).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_Lotes");

            entity.HasOne(d => d.Medida).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.MedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_Productos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.UbicacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.DgdUbicaciones)
                .HasForeignKey(d => d.UnidadMedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DGD_Ubicaciones_UnidadesMedida");
        });

        modelBuilder.Entity<Diario>(entity =>
        {
            entity.HasKey(e => new { e.EjercicioId, e.Asiento, e.Apunte });

            entity.ToTable("Diario", tb =>
                {
                    tb.HasTrigger("ActualizarFactura");
                    tb.HasTrigger("ActualizarFecha");
                    tb.HasTrigger("Actualizar_Mayor_DELETE");
                    tb.HasTrigger("Diario_DescontabilizarFactura_delete");
                });

            entity.HasIndex(e => e.Cuenta, "IX_Diario_Cuenta");

            entity.HasIndex(e => e.Fecha, "IX_Diario_Fecha");

            entity.HasIndex(e => e.Iddiario, "IX_Diario_IDDiario").IsUnique();

            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Anno).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Concepto)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Cuenta)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Dh)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DH");
            entity.Property(e => e.Factura)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FacturaId).HasColumnName("FacturaID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.FechaExp).HasColumnType("datetime");
            entity.Property(e => e.Iddiario)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDDiario");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ImporteRe)
                .HasColumnType("money")
                .HasColumnName("ImporteRE");
            entity.Property(e => e.Incidencia)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.OrigenId).HasColumnName("OrigenID");
            entity.Property(e => e.Re)
                .HasColumnType("money")
                .HasColumnName("RE");
            entity.Property(e => e.RemesaId).HasColumnName("RemesaID");
            entity.Property(e => e.TipoIva).HasColumnName("Tipo_IVA");
            entity.Property(e => e.VencimientoId).HasColumnName("VencimientoID");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.Diarios)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_Diario_CTA_CentroCoste");

            entity.HasOne(d => d.CuentaNavigation).WithMany(p => p.Diarios)
                .HasForeignKey(d => d.Cuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Diario_PGC");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Diarios)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Diario_Ejercicios");

            entity.HasOne(d => d.Origen).WithMany(p => p.Diarios)
                .HasForeignKey(d => d.OrigenId)
                .HasConstraintName("FK_Diario_CTA_AsientosOrigenes");
        });

        modelBuilder.Entity<DiarioAux>(entity =>
        {
            entity.HasKey(e => new { e.EjercicioId, e.Asiento, e.Apunte });

            entity.ToTable("Diario_Aux");

            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Concepto)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Cuenta)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Dh)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DH");
            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FacturaId).HasColumnName("FacturaID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.ImporteRe)
                .HasColumnType("money")
                .HasColumnName("ImporteRE");
            entity.Property(e => e.Incidencia)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Re)
                .HasColumnType("money")
                .HasColumnName("RE");
            entity.Property(e => e.TipoIva).HasColumnName("Tipo_IVA");
        });

        modelBuilder.Entity<DiarioAux1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DiarioAUX");

            entity.Property(e => e.Concepto)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cuenta)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Dh)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DH");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Incidencia)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.TipoIva).HasColumnName("Tipo_IVA");
        });

        modelBuilder.Entity<DireccionesEntidadesOrigen>(entity =>
        {
            entity.HasKey(e => e.Idorigen);

            entity.ToTable("Direcciones_EntidadesOrigen");

            entity.Property(e => e.Idorigen).HasColumnName("IDOrigen");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Entidad).WithMany(p => p.DireccionesEntidadesOrigens)
                .HasForeignKey(d => d.EntidadId)
                .HasConstraintName("FK_Direcciones_EntidadesOrigen_GS_Entidades");
        });

        modelBuilder.Entity<DmnDataSet>(entity =>
        {
            entity.HasKey(e => e.IddataSet);

            entity.ToTable("DMN_DataSet");

            entity.HasIndex(e => e.Codigo, "IX_DMN_DataSet_Codigo").IsUnique();

            entity.HasIndex(e => e.GridDefinitionId, "IX_DMN_DataSet_GridDefinitionID");

            entity.HasIndex(e => e.QueryFormId, "IX_DMN_DataSet_QueryFormID");

            entity.Property(e => e.IddataSet).HasColumnName("IDDataSet");
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Código único para identificar el DataSet > Formato: [Cod. Entidad]_00000");
            entity.Property(e => e.CommandText)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasDefaultValueSql("(3)")
                .HasComment("0 = cmdUnknown, 1 = cmdText, 2 = cmdTable, 3 = cmdStoredProc, 4 = cmdFile, 5 = cmdTableDirect");
            entity.Property(e => e.GridDefinitionId).HasColumnName("GridDefinitionID");
            entity.Property(e => e.QueryFormId).HasColumnName("QueryFormID");

            entity.HasOne(d => d.GridDefinition).WithMany(p => p.DmnDataSets)
                .HasForeignKey(d => d.GridDefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_DataSet_GS_GridDefinitions");

            entity.HasOne(d => d.QueryForm).WithMany(p => p.DmnDataSets)
                .HasForeignKey(d => d.QueryFormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_DataSet_DMN_QueryForm");
        });

        modelBuilder.Entity<DmnDataSetParameter>(entity =>
        {
            entity.HasKey(e => e.Idparameter);

            entity.ToTable("DMN_DataSet_Parameter");

            entity.HasIndex(e => e.DataSetId, "IX_DMN_DataSet_Parameter_DataSetID");

            entity.HasIndex(e => e.OperatorId, "IX_DMN_DataSet_Parameter_OperatorID");

            entity.HasIndex(e => e.UsrTypeId, "IX_DMN_DataSet_Parameter_UsrTypeID");

            entity.HasIndex(e => new { e.DataSetId, e.Name }, "UIX_DMN_DataSet_Parameter_DataSetID_Name").IsUnique();

            entity.Property(e => e.Idparameter).HasColumnName("IDParameter");
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataSetId).HasColumnName("DataSetID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.UsrTypeId).HasColumnName("UsrTypeID");

            entity.HasOne(d => d.DataSet).WithMany(p => p.DmnDataSetParameters)
                .HasForeignKey(d => d.DataSetId)
                .HasConstraintName("FK_DMN_DataSet_Parameter_DMN_DataSet");

            entity.HasOne(d => d.Operator).WithMany(p => p.DmnDataSetParameters)
                .HasForeignKey(d => d.OperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_DataSet_Parameter_GS_UsrOperators");

            entity.HasOne(d => d.UsrType).WithMany(p => p.DmnDataSetParameters)
                .HasForeignKey(d => d.UsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_DataSet_Parameter_GS_UsrTypes");
        });

        modelBuilder.Entity<DmnDataSetRel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DMN_DataSet_rel", tb => tb.HasTrigger("DMN_DataSet_rel_OnInsert"));

            entity.HasIndex(e => new { e.IddataSet1, e.IddataSet2 }, "UIX_DMN_DataSet_rel_IDDataSet_1_2")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.IddataSet1).HasColumnName("IDDataSet_1");
            entity.Property(e => e.IddataSet2).HasColumnName("IDDataSet_2");

            entity.HasOne(d => d.IddataSet1Navigation).WithMany()
                .HasForeignKey(d => d.IddataSet1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_DataSet_rel_DMN_DataSet1");

            entity.HasOne(d => d.IddataSet2Navigation).WithMany()
                .HasForeignKey(d => d.IddataSet2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_DataSet_rel_DMN_DataSet2");
        });

        modelBuilder.Entity<DmnQueryForm>(entity =>
        {
            entity.HasKey(e => e.IdqueryForm);

            entity.ToTable("DMN_QueryForm");

            entity.HasIndex(e => e.FormularioId, "IX_DMN_QueryForm_FormularioID");

            entity.HasIndex(e => e.Codigo, "UIX_DMN_QueryForm_Codigo").IsUnique();

            entity.Property(e => e.IdqueryForm).HasColumnName("IDQueryForm");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Mantenido por Soltic > Formato: Prefijo_DDDD, del 3000 en adelante reservados para el usuario");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");

            entity.HasOne(d => d.Formulario).WithMany(p => p.DmnQueryForms)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DMN_QueryForm_Formularios");
        });

        modelBuilder.Entity<DocumentosAlmacenTipo>(entity =>
        {
            entity.HasKey(e => e.IddocumentoAlmacenTipo);

            entity.Property(e => e.IddocumentoAlmacenTipo)
                .ValueGeneratedNever()
                .HasColumnName("IDDocumentoAlmacenTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatePrecioCompra)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasColumnName("Update_PrecioCompra");
            entity.Property(e => e.UpdateStock)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasColumnName("Update_Stock");
        });

        modelBuilder.Entity<DocumentosGestion>(entity =>
        {
            entity.HasKey(e => e.IddocumentoGestion);

            entity.ToTable("DocumentosGestion");

            entity.HasIndex(e => e.EntidadId, "IX_DocumentosGestion_EntidadID");

            entity.HasIndex(e => e.FormularioId, "IX_DocumentosGestion_FormularioID");

            entity.Property(e => e.IddocumentoGestion).HasColumnName("IDDocumentoGestion");
            entity.Property(e => e.AllowCopy).HasColumnName("Allow_Copy");
            entity.Property(e => e.AllowInProyecto).HasColumnName("Allow_InProyecto");
            entity.Property(e => e.AllowPedidoAgencia).HasColumnName("Allow_PedidoAgencia");
            entity.Property(e => e.DocumentoGestionDestinatarioId).HasColumnName("DocumentoGestionDestinatarioID");
            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.EntidadId)
                .HasComment("Referencia a la tabla GS_Entidades")
                .HasColumnName("EntidadID");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.ModuloGestionId).HasColumnName("ModuloGestionID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrdenProceso).HasDefaultValueSql("(1)");
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("1: Recalculamos Precio al cambiar Cantidad; 0: No recalculamos");
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.WhereCabecera)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WhereDestinatario)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DocumentoGestionDestinatario).WithMany(p => p.DocumentosGestions)
                .HasForeignKey(d => d.DocumentoGestionDestinatarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestion_DocumentosGestionDestinatarios");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.InverseDocumentoGestion)
                .HasForeignKey(d => d.DocumentoGestionId)
                .HasConstraintName("FK_DocumentosGestion_DocumentosGestion");

            entity.HasOne(d => d.Entidad).WithMany(p => p.DocumentosGestions)
                .HasForeignKey(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestion_GS_Entidades");

            entity.HasOne(d => d.Formulario).WithMany(p => p.DocumentosGestions)
                .HasForeignKey(d => d.FormularioId)
                .HasConstraintName("FK_DocumentosGestion_Formularios");

            entity.HasOne(d => d.ModuloGestion).WithMany(p => p.DocumentosGestions)
                .HasForeignKey(d => d.ModuloGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestion_ModulosGestion");
        });

        modelBuilder.Entity<DocumentosGestionAsiento>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.CabeceraId, e.EjercicioId, e.Asiento });

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DocumentosGestionAsientos)
                .HasForeignKey(d => d.DocumentoGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionAsientos_DocumentosGestion");
        });

        modelBuilder.Entity<DocumentosGestionDestinatario>(entity =>
        {
            entity.HasKey(e => e.IddocumentoGestionDestinatario);

            entity.HasIndex(e => e.NombreEntidad, "IX_DocumentosGestionDestinatariosEntidad").IsUnique();

            entity.HasIndex(e => e.TableName, "IX_DocumentosGestionDestinatariosTableName").IsUnique();

            entity.Property(e => e.IddocumentoGestionDestinatario).HasColumnName("IDDocumentoGestionDestinatario");
            entity.Property(e => e.NombreEntidad)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NombreEntidadSingular)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DocumentosGestionDetalleObservacione>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.CabeceraId, e.DetalleId });

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DetalleId).HasColumnName("DetalleID");
            entity.Property(e => e.FirstCabeceraId).HasColumnName("FirstCabeceraID");
            entity.Property(e => e.FirstDetalleId).HasColumnName("FirstDetalleID");
            entity.Property(e => e.FirstDocumentoGestionId).HasColumnName("FirstDocumentoGestionID");
            entity.Property(e => e.Observacion).HasColumnType("text");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DocumentosGestionDetalleObservaciones)
                .HasForeignKey(d => d.DocumentoGestionId)
                .HasConstraintName("FK_DocumentosGestionDetalleObservaciones_DocumentosGestion");
        });

        modelBuilder.Entity<DocumentosGestionDetalleUbicacione>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.LineaId, e.UbicacionId, e.LoteId });

            entity.ToTable(tb => tb.HasTrigger("UpdateMovimientosAlmacenFromDGDUbicaciones"));

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Iddgdu)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDdgdu");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.AlmacenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Almacenes");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.DocumentoGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_DocumentosGestion");

            entity.HasOne(d => d.Lote).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Lotes");

            entity.HasOne(d => d.Medida).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.MedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_Productos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.UbicacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.DocumentosGestionDetalleUbicaciones)
                .HasForeignKey(d => d.UnidadMedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionDetalleUbicaciones_UnidadesMedida");
        });

        modelBuilder.Entity<DocumentosGestionMargenesClafe>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.CabeceraId, e.MargenClaveId });

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.Margen).HasColumnType("money");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DocumentosGestionMargenesClaves)
                .HasForeignKey(d => d.DocumentoGestionId)
                .HasConstraintName("FK_DocumentosGestionMargenesClaves_DocumentosGestion");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.DocumentosGestionMargenesClaves)
                .HasForeignKey(d => d.MargenClaveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionMargenesClaves_MargenesClaves");
        });

        modelBuilder.Entity<DocumentosGestionRegistroAlmacen>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionOrigenId, e.CabeceraOrigenId, e.DetalleOrigenId, e.DocumentoGestionDestinoId, e.CabeceraDestinoId, e.DetalleDestinoId });

            entity.ToTable("DocumentosGestionRegistroAlmacen");

            entity.Property(e => e.DocumentoGestionOrigenId).HasColumnName("DocumentoGestionOrigenID");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.DetalleOrigenId).HasColumnName("DetalleOrigenID");
            entity.Property(e => e.DocumentoGestionDestinoId).HasColumnName("DocumentoGestionDestinoID");
            entity.Property(e => e.CabeceraDestinoId).HasColumnName("CabeceraDestinoID");
            entity.Property(e => e.DetalleDestinoId).HasColumnName("DetalleDestinoID");
            entity.Property(e => e.DgduId).HasColumnName("dgduID");

            entity.HasOne(d => d.CabeceraDestino).WithMany(p => p.DocumentosGestionRegistroAlmacens)
                .HasForeignKey(d => d.CabeceraDestinoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_MovimientosAlmacen");

            entity.HasOne(d => d.DetalleDestino).WithMany(p => p.DocumentosGestionRegistroAlmacens)
                .HasForeignKey(d => d.DetalleDestinoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_MovimientosAlmacenDetalle");

            entity.HasOne(d => d.DocumentoGestionDestino).WithMany(p => p.DocumentosGestionRegistroAlmacenDocumentoGestionDestinos)
                .HasForeignKey(d => d.DocumentoGestionDestinoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_DocumentosGestion");

            entity.HasOne(d => d.DocumentoGestionOrigen).WithMany(p => p.DocumentosGestionRegistroAlmacenDocumentoGestionOrigens)
                .HasForeignKey(d => d.DocumentoGestionOrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionRegistroAlmacen_DocumentosGestion1");
        });

        modelBuilder.Entity<DocumentosGestionTipo1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DocumentosGestionTipo1");

            entity.Property(e => e.Abreviatura)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Idtipo)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DocumentosGestionTiposLinea>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.TipoLineaId });

            entity.ToTable("DocumentosGestionTiposLinea");

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DocumentosGestionTiposLineas)
                .HasForeignKey(d => d.DocumentoGestionId)
                .HasConstraintName("FK_DocumentosGestionTiposLinea_DocumentosGestion");

            entity.HasOne(d => d.Formulario).WithMany(p => p.DocumentosGestionTiposLineas)
                .HasForeignKey(d => d.FormularioId)
                .HasConstraintName("FK_DocumentosGestionTiposLinea_Formularios");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.DocumentosGestionTiposLineas)
                .HasForeignKey(d => d.TipoLineaId)
                .HasConstraintName("FK_DocumentosGestionTiposLinea_TiposLinea");

            entity.HasMany(d => d.ProductoTipos).WithMany(p => p.DocumentosGestionTiposLineas)
                .UsingEntity<Dictionary<string, object>>(
                    "DocumentosGestionTiposLineaProductosTipo",
                    r => r.HasOne<ProductosTipo>().WithMany()
                        .HasForeignKey("ProductoTipoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DocumentosGestionTiposLineaProductosTipos_ProductosTipos"),
                    l => l.HasOne<DocumentosGestionTiposLinea>().WithMany()
                        .HasForeignKey("DocumentoGestionId", "TipoLineaId")
                        .HasConstraintName("FK_DocumentosGestionTiposLineaProductosTipos_DocumentosGestionTiposLinea"),
                    j =>
                    {
                        j.HasKey("DocumentoGestionId", "TipoLineaId", "ProductoTipoId");
                        j.ToTable("DocumentosGestionTiposLineaProductosTipos");
                        j.IndexerProperty<int>("DocumentoGestionId").HasColumnName("DocumentoGestionID");
                        j.IndexerProperty<int>("TipoLineaId").HasColumnName("TipoLineaID");
                        j.IndexerProperty<int>("ProductoTipoId").HasColumnName("ProductoTipoID");
                    });
        });

        modelBuilder.Entity<DocumentosGestionTiposLineaTiposLinea>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionId, e.TipoLineaId, e.ParentTipoLineaId });

            entity.ToTable("DocumentosGestionTiposLineaTiposLinea");

            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.ParentTipoLineaId).HasColumnName("Parent_TipoLineaID");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");

            entity.HasOne(d => d.DocumentoGestion).WithMany(p => p.DocumentosGestionTiposLineaTiposLineas)
                .HasForeignKey(d => d.DocumentoGestionId)
                .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_DocumentosGestion");

            entity.HasOne(d => d.Formulario).WithMany(p => p.DocumentosGestionTiposLineaTiposLineas)
                .HasForeignKey(d => d.FormularioId)
                .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_Formularios");

            entity.HasOne(d => d.ParentTipoLinea).WithMany(p => p.DocumentosGestionTiposLineaTiposLineaParentTipoLineas)
                .HasForeignKey(d => d.ParentTipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_TiposLinea1");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.DocumentosGestionTiposLineaTiposLineaTipoLineas)
                .HasForeignKey(d => d.TipoLineaId)
                .HasConstraintName("FK_DocumentosGestionTiposLineaTiposLinea_TiposLinea");
        });

        modelBuilder.Entity<DocumentosGestionTraspaso>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionOrigenId, e.CabeceraOrigenId, e.DetalleOrigenId, e.DocumentoGestionDestinoId, e.CabeceraDestinoId, e.DetalleDestinoId }).HasName("PK_DocumentosGestionTraspasos_1");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("CopyDocumentoGestionDetalleObservaciones");
                    tb.HasTrigger("InformarCoste");
                    tb.HasTrigger("InformarFacturasMedioPago");
                    tb.HasTrigger("InformarIVAClaseYRecargo");
                    tb.HasTrigger("UpdateDocumentoDestinoCantidadServida");
                    tb.HasTrigger("UpdateStatePedidoApartadoSinLineas");
                });

            entity.HasIndex(e => new { e.DocumentoGestionDestinoId, e.CabeceraDestinoId, e.Tipo }, "IX_DocumentosGestionTraspasos_DocumentoGestionDestinoID_CabeceraDestinoID_Tipo");

            entity.Property(e => e.DocumentoGestionOrigenId).HasColumnName("DocumentoGestionOrigenID");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.DetalleOrigenId).HasColumnName("DetalleOrigenID");
            entity.Property(e => e.DocumentoGestionDestinoId).HasColumnName("DocumentoGestionDestinoID");
            entity.Property(e => e.CabeceraDestinoId).HasColumnName("CabeceraDestinoID");
            entity.Property(e => e.DetalleDestinoId).HasColumnName("DetalleDestinoID");
            entity.Property(e => e.GestCantidadServidaOrigen)
                .IsRequired()
                .HasDefaultValueSql("(1)");

            entity.HasOne(d => d.DocumentoGestionDestino).WithMany(p => p.DocumentosGestionTraspasoDocumentoGestionDestinos)
                .HasForeignKey(d => d.DocumentoGestionDestinoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionTraspasos_DocumentosGestion1");

            entity.HasOne(d => d.DocumentoGestionOrigen).WithMany(p => p.DocumentosGestionTraspasoDocumentoGestionOrigens)
                .HasForeignKey(d => d.DocumentoGestionOrigenId)
                .HasConstraintName("FK_DocumentosGestionTraspasos_DocumentosGestion");
        });

        modelBuilder.Entity<DocumentosGestionTraspasosSetup>(entity =>
        {
            entity.HasKey(e => new { e.DocumentoGestionOrigenId, e.DocumentoGestionDestinoId, e.DocumentoGestionStateOrigen }).HasName("PK_DocumentosGestionTraspasos");

            entity.ToTable("DocumentosGestionTraspasosSetup");

            entity.Property(e => e.DocumentoGestionOrigenId).HasColumnName("DocumentoGestionOrigenID");
            entity.Property(e => e.DocumentoGestionDestinoId).HasColumnName("DocumentoGestionDestinoID");
            entity.Property(e => e.CopiarObservaciones)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.GestCantidadServidaOrigen)
                .IsRequired()
                .HasDefaultValueSql("(1)");

            entity.HasOne(d => d.DocumentoGestionDestino).WithMany(p => p.DocumentosGestionTraspasosSetupDocumentoGestionDestinos)
                .HasForeignKey(d => d.DocumentoGestionDestinoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentosGestionTraspasosSetup_DocumentosGestion1");

            entity.HasOne(d => d.DocumentoGestionOrigen).WithMany(p => p.DocumentosGestionTraspasosSetupDocumentoGestionOrigens)
                .HasForeignKey(d => d.DocumentoGestionOrigenId)
                .HasConstraintName("FK_DocumentosGestionTraspasosSetup_DocumentosGestion");
        });

        modelBuilder.Entity<Ejercicio>(entity =>
        {
            entity.HasKey(e => e.IdEjercicio);

            entity.Property(e => e.IdEjercicio).HasColumnName("idEjercicio");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.Idempleado);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Empleados_Chk_Unique_usr");
                    tb.HasTrigger("Insert_PermisosEmpleadosFromEmpleado");
                });

            entity.Property(e => e.Idempleado).HasColumnName("IDEmpleado");
            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.Alias)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Apellido1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Apellido2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AutoEdit)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.CalendarioId).HasColumnName("CalendarioID");
            entity.Property(e => e.CualificacionId).HasColumnName("CualificacionID");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Discapacidad).HasDefaultValueSql("(0)");
            entity.Property(e => e.DiscapacidadPorcentaje).HasDefaultValueSql("(0)");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMail");
            entity.Property(e => e.EmpleadoContratoTipoId).HasColumnName("EmpleadoContratoTipoID");
            entity.Property(e => e.EmpleadoDepartamentoId).HasColumnName("EmpleadoDepartamentoID");
            entity.Property(e => e.EmpleadoEstadoCivilId).HasColumnName("EmpleadoEstadoCivilID");
            entity.Property(e => e.EmpleadoPuestoId).HasColumnName("EmpleadoPuestoID");
            entity.Property(e => e.Empresas).HasColumnType("text");
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaBaja).HasColumnType("datetime");
            entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");
            entity.Property(e => e.FiAllowUpdateTime)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("FI_AllowUpdateTime");
            entity.Property(e => e.Fichajes).HasComment("Determina si el Empleado realiza o no Fichajes, se tiene en cuenta en el Visor de Fichajes a la hora de mostrar los Fichajes no realizados");
            entity.Property(e => e.FinContrato).HasColumnType("datetime");
            entity.Property(e => e.Fotografia).HasColumnType("image");
            entity.Property(e => e.LiquidacionPrimasObservaciones)
                .HasColumnType("text")
                .HasColumnName("LiquidacionPrimas_Observaciones");
            entity.Property(e => e.NhorasSemanaContrato).HasColumnName("NHorasSemanaContrato");
            entity.Property(e => e.Nif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NIF");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumeroHijos).HasDefaultValueSql("(0)");
            entity.Property(e => e.NumeroSs)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("NumeroSS");
            entity.Property(e => e.NumeroTarjetaId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("NumeroTarjetaID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PcosteHora)
                .HasColumnType("money")
                .HasColumnName("PCosteHora");
            entity.Property(e => e.PhoraExtra)
                .HasColumnType("money")
                .HasColumnName("PHoraExtra");
            entity.Property(e => e.PhoraExtraFestivo)
                .HasColumnType("money")
                .HasColumnName("PHoraExtraFestivo");
            entity.Property(e => e.PhoraReten)
                .HasColumnType("money")
                .HasColumnName("PHoraReten");
            entity.Property(e => e.PrimaCompensacionFestivo).HasColumnType("money");
            entity.Property(e => e.PrimaFestivo).HasColumnType("money");
            entity.Property(e => e.PrimaLaborable).HasColumnType("money");
            entity.Property(e => e.PrimaMensual).HasColumnType("money");
            entity.Property(e => e.Puestos).HasColumnType("text");
            entity.Property(e => e.Pw)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("pw");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");
            entity.Property(e => e.ServicioReten).HasColumnType("money");
            entity.Property(e => e.TipoCarneConducirId).HasColumnName("TipoCarneConducirID");
            entity.Property(e => e.Usr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usr");

            entity.HasOne(d => d.Calendario).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.CalendarioId)
                .HasConstraintName("FK_Empleados_Calendarios");

            entity.HasOne(d => d.Cualificacion).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.CualificacionId)
                .HasConstraintName("FK_Empleados_Cualificaciones");

            entity.HasOne(d => d.Departamento).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_Empleados_Departamentos");

            entity.HasOne(d => d.EmpleadoContratoTipo).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.EmpleadoContratoTipoId)
                .HasConstraintName("FK_Empleados_EmpleadosContratosTipos");

            entity.HasOne(d => d.EmpleadoDepartamento).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.EmpleadoDepartamentoId)
                .HasConstraintName("FK_Empleados_EmpleadosDepartamentos");

            entity.HasOne(d => d.EmpleadoEstadoCivil).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.EmpleadoEstadoCivilId)
                .HasConstraintName("FK_Empleados_EmpleadosEstadosCiviles");

            entity.HasOne(d => d.Seccion).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_Empleados_Secciones");

            entity.HasOne(d => d.TipoCarneConducir).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.TipoCarneConducirId)
                .HasConstraintName("FK_Empleados_CarneConducirTipos");

            entity.HasMany(d => d.PuestosNavigation).WithMany(p => p.Empleados)
                .UsingEntity<Dictionary<string, object>>(
                    "EmpleadosPuesto",
                    r => r.HasOne<Puesto>().WithMany()
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmpleadosPuestos_Puestos"),
                    l => l.HasOne<Empleado>().WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmpleadosPuestos_Empleados"),
                    j =>
                    {
                        j.HasKey("EmpleadoId", "PuestoId");
                        j.ToTable("EmpleadosPuestos");
                        j.IndexerProperty<int>("EmpleadoId").HasColumnName("EmpleadoID");
                        j.IndexerProperty<int>("PuestoId").HasColumnName("PuestoID");
                    });
        });

        modelBuilder.Entity<EmpleadosContratosTipo>(entity =>
        {
            entity.HasKey(e => e.IdempleadoContratoTipo);

            entity.Property(e => e.IdempleadoContratoTipo).HasColumnName("IDEmpleadoContratoTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmpleadosDepartamento>(entity =>
        {
            entity.HasKey(e => e.IdempleadoDepartamento);

            entity.Property(e => e.IdempleadoDepartamento).HasColumnName("IDEmpleadoDepartamento");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmpleadosDireccione>(entity =>
        {
            entity.HasKey(e => e.IdempleadoDireccion);

            entity.Property(e => e.IdempleadoDireccion).HasColumnName("IDEmpleadoDireccion");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.LocalidadId).HasColumnName("LocalidadID");
            entity.Property(e => e.PaisId).HasColumnName("PaisID");
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.EmpleadosDirecciones)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_EmpleadosDirecciones_Empleados");

            entity.HasOne(d => d.Localidad).WithMany(p => p.EmpleadosDirecciones)
                .HasForeignKey(d => d.LocalidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpleadosDirecciones_Localidades");

            entity.HasOne(d => d.Pais).WithMany(p => p.EmpleadosDirecciones)
                .HasForeignKey(d => d.PaisId)
                .HasConstraintName("FK_EmpleadosDirecciones_Paises");

            entity.HasOne(d => d.Provincia).WithMany(p => p.EmpleadosDirecciones)
                .HasForeignKey(d => d.ProvinciaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpleadosDirecciones_Provincias");
        });

        modelBuilder.Entity<EmpleadosEstadosCivile>(entity =>
        {
            entity.HasKey(e => e.IdempleadoEstadoCivil);

            entity.Property(e => e.IdempleadoEstadoCivil).HasColumnName("IDEmpleadoEstadoCivil");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmpleadosTelefono>(entity =>
        {
            entity.HasKey(e => e.IdempleadoTelefono);

            entity.Property(e => e.IdempleadoTelefono).HasColumnName("IDEmpleadoTelefono");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);

            entity.HasOne(d => d.Empleado).WithMany(p => p.EmpleadosTelefonos)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_EmpleadosTelefonos_Empleados");
        });

        modelBuilder.Entity<EmpresasCuentasBancaria>(entity =>
        {
            entity.HasKey(e => e.Idcuenta);

            entity.Property(e => e.Idcuenta).HasColumnName("IDCuenta");
            entity.Property(e => e.Activa)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Alias)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Bic)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("BIC");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaDescuento)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ExtensionFicherosN19)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ExtensionFicherosN58)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Ibancodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("IBANCodigo");
            entity.Property(e => e.Ibancuenta)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("IBANCuenta");
            entity.Property(e => e.LimiteDescuento).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumCta)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.RutaFicherosN19)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RutaFicherosN58)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SufijoPresentador)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sufijo_Presentador");
            entity.Property(e => e.TitularId).HasColumnName("TitularID");

            entity.HasOne(d => d.Titular).WithMany(p => p.EmpresasCuentasBancaria)
                .HasForeignKey(d => d.TitularId)
                .HasConstraintName("FK_EmpresasCuentasBancarias_ConfiguracionEmpresa");
        });

        modelBuilder.Entity<EmpresasDiasPago>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.DiaInicio });

            entity.ToTable("EmpresasDiasPago");

            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");

            entity.HasOne(d => d.Empresa).WithMany(p => p.EmpresasDiasPagos)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_EmpresasDiasPago_ConfiguracionEmpresa");
        });

        modelBuilder.Entity<EmpresasEmailCuenta>(entity =>
        {
            entity.HasKey(e => e.IdemailAccount);

            entity.Property(e => e.IdemailAccount).HasColumnName("IDEmailAccount");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.DisplayName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.EmailAddress)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EnableSsl).HasColumnName("EnableSSL");
            entity.Property(e => e.Host)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Port).HasDefaultValueSql("((25))");
            entity.Property(e => e.ReplyToAddress)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ServerTypeId)
                .HasDefaultValueSql("((1))")
                .HasComment("(1 = SMTP)")
                .HasColumnName("ServerTypeID");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.Empresa).WithMany(p => p.EmpresasEmailCuenta)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresasEmailCuentas_EmpresasEmailCuentas");
        });

        modelBuilder.Entity<EmpresasPeriodosExentosPago>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.FechaInicio });

            entity.ToTable("EmpresasPeriodosExentosPago");

            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Empresa).WithMany(p => p.EmpresasPeriodosExentosPagos)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_EmpresasPeriodosExentosPago_ConfiguracionEmpresa");
        });

        modelBuilder.Entity<Entidade>(entity =>
        {
            entity.HasKey(e => e.Codigo);

            entity.Property(e => e.Codigo)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EscalasMedida>(entity =>
        {
            entity.HasKey(e => e.IdescalaMedida);

            entity.Property(e => e.IdescalaMedida).HasColumnName("IDEscalaMedida");
            entity.Property(e => e.LookupText)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ExpPaquetesFormato>(entity =>
        {
            entity.HasKey(e => e.Idformato);

            entity.ToTable("EXP_PaquetesFormatos");

            entity.Property(e => e.Idformato).HasColumnName("IDFormato");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Expedicione>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tr_Expediciones_Delete_CDBO");
                    tb.HasTrigger("tr_Expediciones_Insert_Codigo");
                    tb.HasTrigger("tr_Expediciones_Update_Codigo");
                    tb.HasTrigger("tr_Expediciones_Update_Estado");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_Expediciones_IDCDBO").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fsalida)
                .HasColumnType("datetime")
                .HasColumnName("FSalida");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaContactoId).HasColumnName("PersonaContactoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Transportista)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransportistaTelefono)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.VehiculoMatricula)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Expediciones)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Expediciones_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.ExpedicioneEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_Expediciones_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.ExpedicioneEmpleadoResponsables).HasForeignKey(d => d.EmpleadoResponsableId);

            entity.HasOne(d => d.Empresa).WithMany(p => p.Expediciones)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_Expediciones_ConfiguracionEmpresa");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Expedicione)
                .HasForeignKey<Expedicione>(d => d.Idcdbo)
                .HasConstraintName("FK_Expediciones_Expediciones_CDBO");

            entity.HasOne(d => d.Persona).WithMany(p => p.Expediciones)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_Expediciones_Proveedores");

            entity.HasOne(d => d.Serie).WithMany(p => p.Expediciones)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Expediciones_Series");

            entity.HasOne(d => d.TarifaAgencia).WithMany(p => p.Expediciones)
                .HasForeignKey(d => d.TarifaAgenciaId)
                .HasConstraintName("FK_Expediciones_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<ExpedicionesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Expediciones_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ExpedicionesDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ExpedicionesDetalle", tb =>
                {
                    tb.HasTrigger("ExpedicionesDetalleAfterDelete");
                    tb.HasTrigger("tr_ExpedicionesDetalle_Delete_CDBO");
                    tb.HasTrigger("tr_ExpedicionesDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_ExpedicionesDetalle_Update_Estado");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_ExpedicionesDetalle_IDCDBO").IsUnique();

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.AvisoEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AvisoEmailOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AvisoEmail_Origen");
            entity.Property(e => e.AvisoTelefono)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.AvisoTelefono2)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.AvisoTelefono2Origen)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("AvisoTelefono2_Origen");
            entity.Property(e => e.AvisoTelefonoOrigen)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("AvisoTelefono_Origen");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.ContraReembolsoPortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ContraReembolsoPortesTipoID");
            entity.Property(e => e.ContraReembolsoValor).HasColumnType("money");
            entity.Property(e => e.DatosAdicionales)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.DatosAdicionalesOrigen)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DatosAdicionales_Origen");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DgorigenId).HasColumnName("DGOrigenID");
            entity.Property(e => e.DirEntregaDireccionId).HasColumnName("DirEntrega_DireccionID");
            entity.Property(e => e.DirEntregaEntidadOrigenId).HasColumnName("DirEntrega_EntidadOrigenID");
            entity.Property(e => e.DirEntregaKeyFieldValueId).HasColumnName("DirEntrega_KeyFieldValueID");
            entity.Property(e => e.DirSalidaDireccionId).HasColumnName("DirSalida_DireccionID");
            entity.Property(e => e.DirSalidaEntidadOrigenId).HasColumnName("DirSalida_EntidadOrigenID");
            entity.Property(e => e.DirSalidaKeyFieldValueId).HasColumnName("DirSalida_KeyFieldValueID");
            entity.Property(e => e.EmEnviado)
                .HasComment("Email enviado")
                .HasColumnName("EM_Enviado");
            entity.Property(e => e.EmFenvio)
                .HasComment("Email Fecha Envio")
                .HasColumnType("datetime")
                .HasColumnName("EM_FEnvio");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FechaEntrega).HasColumnType("datetime");
            entity.Property(e => e.FechaSalida).HasColumnType("datetime");
            entity.Property(e => e.HoraMannanaAOrigen).HasColumnName("HoraMannanaA_Origen");
            entity.Property(e => e.HoraMannanaDeOrigen).HasColumnName("HoraMannanaDe_Origen");
            entity.Property(e => e.HoraTardeAOrigen).HasColumnName("HoraTardeA_Origen");
            entity.Property(e => e.HoraTardeDeOrigen).HasColumnName("HoraTardeDe_Origen");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Nbultos)
                .HasDefaultValueSql("((1))")
                .HasColumnName("NBultos");
            entity.Property(e => e.Nenvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEnvio");
            entity.Property(e => e.PaqueteFormatoId).HasColumnName("PaqueteFormatoID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.Referencia)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Seguimiento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TipoId)
                .HasComment("Espcifica el Tipo refiriéndose al tipo de Servicio: Expedición Normal (0), Recogida (1), etc. Sólo tiene sentido en las líneas GroupHeader, en las hijas (Bultos) se copia el valor del padre")
                .HasColumnName("TipoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.ExpedicionesDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ExpedicionesDetalle_Expediciones");

            entity.HasOne(d => d.Dgorigen).WithMany(p => p.ExpedicionesDetalles)
                .HasForeignKey(d => d.DgorigenId)
                .HasConstraintName("FK_ExpedicionesDetalle_DocumentosGestion");

            entity.HasOne(d => d.DirEntregaEntidadOrigen).WithMany(p => p.ExpedicionesDetalleDirEntregaEntidadOrigens)
                .HasForeignKey(d => d.DirEntregaEntidadOrigenId)
                .HasConstraintName("FK_ExpedicionesDetalle_Direcciones_EntidadesOrigenEntrega");

            entity.HasOne(d => d.DirSalidaEntidadOrigen).WithMany(p => p.ExpedicionesDetalleDirSalidaEntidadOrigens)
                .HasForeignKey(d => d.DirSalidaEntidadOrigenId)
                .HasConstraintName("FK_ExpedicionesDetalle_Direcciones_EntidadesOrigen");

            entity.HasOne(d => d.Estado).WithMany(p => p.ExpedicionesDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExpedicionesDetalle_ExpedicionesEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.ExpedicionesDetalle)
                .HasForeignKey<ExpedicionesDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_ExpedicionesDetalle_ExpedicionesDetalle_CDBO");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_ExpedicionesDetalle_ExpedicionesDetalle");

            entity.HasOne(d => d.PaqueteFormato).WithMany(p => p.ExpedicionesDetalles)
                .HasForeignKey(d => d.PaqueteFormatoId)
                .HasConstraintName("FK_ExpedicionesDetalle_EXP_PaquetesFormatos");

            entity.HasOne(d => d.PortesTipo).WithMany(p => p.ExpedicionesDetalles)
                .HasForeignKey(d => d.PortesTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExpedicionesDetalle_PortesTipos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.ExpedicionesDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExpedicionesDetalle_TiposLinea");
        });

        modelBuilder.Entity<ExpedicionesDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ExpedicionesDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ExpedicionesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FacturacionPlanificacion>(entity =>
        {
            entity.HasKey(e => e.Idplanificacion);

            entity.ToTable("FacturacionPlanificacion");

            entity.Property(e => e.Idplanificacion).HasColumnName("IDPlanificacion");
            entity.Property(e => e.CabeceraDestinoId).HasColumnName("CabeceraDestinoID");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CuentaContable)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DetalleDestinoId).HasColumnName("DetalleDestinoID");
            entity.Property(e => e.DocumentoDestinoId).HasColumnName("DocumentoDestinoID");
            entity.Property(e => e.DocumentoOrigenId).HasColumnName("DocumentoOrigenID");
            entity.Property(e => e.FechaDestino).HasColumnType("datetime");
            entity.Property(e => e.FechaEmision)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaPrevista).HasColumnType("datetime");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Numero)
                .HasMaxLength(28)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.FacturacionPlanificacions)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_FacturacionPlanificacion_FormasPago");

            entity.HasOne(d => d.Medio).WithMany(p => p.FacturacionPlanificacions)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_FacturacionPlanificacion_MediosPago");
        });

        modelBuilder.Entity<Facturae>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Facturae");

            entity.Property(e => e.EmailBody)
                .HasMaxLength(6144)
                .IsUnicode(false)
                .HasColumnName("Email_Body");
        });

        modelBuilder.Entity<FacturasCompra>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("FacturasCompra", tb =>
                {
                    tb.HasTrigger("Act_Num_FacturasCompra");
                    tb.HasTrigger("FacturasCompra_Delete_CDBO");
                    tb.HasTrigger("InsertGastosFacturacionIntoPie");
                    tb.HasTrigger("MaxFacturaCompraAnno");
                    tb.HasTrigger("UpdateFacturaCompraFromDescuento");
                    tb.HasTrigger("UpdateStateFacturasCompraDetalleFromHeader");
                    tb.HasTrigger("UpdateStateFacturasCompraFromTotal");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_FacturasCompra_CDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_FacturasCompra_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.ClaveTipoFactura)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveTributariaOperacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.DescripcionOperacion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FacturaRectificadaId).HasColumnName("FacturaRectificadaID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FeFenvio)
                .HasColumnType("datetime")
                .HasColumnName("FE_Fenvio");
            entity.Property(e => e.FechaOperacion).HasColumnType("datetime");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.InmuebleReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InmuebleSituacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LiActividadGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadGrupo");
            entity.Property(e => e.LiActividadTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadTipo");
            entity.Property(e => e.LiConcepto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_Concepto");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.RectificativaClave)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.SiiExportado).HasColumnName("SII_Exportado");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_FacturasCompra_CTA_CentroCoste");

            entity.HasOne(d => d.Contacto).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_FacturasCompra_ProveedoresContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_FacturasCompra_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_FacturasCompra_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_FacturasCompra_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompra_FacturasCompraEstados");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_FacturasCompra_FormasPago");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.FacturasCompra)
                .HasForeignKey<FacturasCompra>(d => d.Idcdbo)
                .HasConstraintName("FK_FacturasCompra_FacturasCompra_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_FacturasCompra_IVAGrupos");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_FacturasCompra_ProveedoresDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompra_Proveedores");

            entity.HasOne(d => d.PortesTipo).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.PortesTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompra_PortesTipos");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_FacturasCompra_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.FacturasCompras)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompra_Series");
        });

        modelBuilder.Entity<FacturasCompraCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("FacturasCompra_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<FacturasCompraDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("FacturasCompraDetalle", tb =>
                {
                    tb.HasTrigger("FacturasCompraDetalleAfterDelete");
                    tb.HasTrigger("FacturasCompraDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsFacturasCompraDetalle");
                    tb.HasTrigger("UpdateFacturasCompraDetalleNumeroLinea");
                    tb.HasTrigger("tr_FacturasCompraDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_FacturasCompraDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_FacturasCompraDetalle_UpdateTotalesCabecera");
                    tb.HasTrigger("tr_FacturasCompraDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_FacturasCompraDetalle_CDBO").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_FacturasCompraDetalle_CabeceraID");

            entity.HasIndex(e => e.ProductoId, "IX_FacturasCompraDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaRet)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cta_Ret");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImporteRet)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("Importe_Ret");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PorcentajeRet)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("Porcentaje_Ret");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_FacturasCompraDetalle_FacturasCompra");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_FacturasCompraDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_FacturasCompraDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompraDetalle_FacturasCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.FacturasCompraDetalle)
                .HasForeignKey<FacturasCompraDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_FacturasCompraDetalle_FacturasCompraDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_FacturasCompraDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_FacturasCompraDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_FacturasCompraDetalle_IVAGrupos");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompraDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_FacturasCompraDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompraDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.FacturasCompraDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompraDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.FacturasCompraDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.FacturasCompraDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.FacturasCompraDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.FacturasCompraDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_FacturasCompraDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<FacturasCompraDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("FacturasCompraDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<FacturasCompraEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FacturasCompraPie>(entity =>
        {
            entity.HasKey(e => new { e.CabeceraId, e.IvaclaseId, e.IvagrupoId, e.RecargoEquivalencia });

            entity.ToTable("FacturasCompraPie");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Importe)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.ImporteRecargo)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.Ivaporcentaje)
                .HasColumnType("money")
                .HasColumnName("IVAPorcentaje");
            entity.Property(e => e.IvatipoId).HasColumnName("IVATipoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.FacturasCompraPies)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_FacturasCompraPie_FacturasCompra");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.FacturasCompraPies)
                .HasForeignKey(d => d.IvaclaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompraPie_IvaClases");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.FacturasCompraPies)
                .HasForeignKey(d => d.IvagrupoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasCompraPie_IVAGrupos");

            entity.HasOne(d => d.Ivatipo).WithMany(p => p.FacturasCompraPies)
                .HasForeignKey(d => d.IvatipoId)
                .HasConstraintName("FK_FacturasCompraPie_IvaTipos");
        });

        modelBuilder.Entity<FacturasVentaCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("FacturasVenta_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<FacturasVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("FacturasVentaDetalle", tb =>
                {
                    tb.HasTrigger("FacturasVentaDetalleAfterDelete");
                    tb.HasTrigger("FacturasVentaDetalle_Delete_CDBO");
                    tb.HasTrigger("FacturasVentaDetalle_UpdateCoste");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsFacturasVentaDetalle");
                    tb.HasTrigger("UpdateFacturasVentaTotalesCabecera");
                    tb.HasTrigger("UpdatePortesFacturasVenta");
                    tb.HasTrigger("tr_FacturasVentaDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_FacturasVentaDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_FacturasVentaDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_FacturasVentaDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_FacturasVentaDetalle_CabeceraID");

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_FacturasVentaDetalle_LineaID_NumLinea");

            entity.HasIndex(e => e.ProductoId, "IX_FacturasVentaDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaRet)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cta_Ret");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasDefaultValueSql("((0))");
            entity.Property(e => e.DtoCoste).HasDefaultValueSql("((0))");
            entity.Property(e => e.Entregado)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImporteRet)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("Importe_Ret");
            entity.Property(e => e.IncluirMaterial)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_Material");
            entity.Property(e => e.IncluirMo)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_MO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasDefaultValueSql("((0))");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PorcentajeRet)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("Porcentaje_Ret");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_FacturasVentaDetalle_FacturasVenta");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_FacturasVentaDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_FacturasVentaDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVentaDetalle_FacturasVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.FacturasVentaDetalle)
                .HasForeignKey<FacturasVentaDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_FacturasVentaDetalle_FacturasVentaDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_FacturasVentaDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_FacturasVentaDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_FacturasVentaDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_FacturasVentaDetalle_FacturasVentaDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_FacturasVentaDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVentaDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_FacturasVentaDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVentaDetalle_Productos");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_FacturasVentaDetalle_Proveedores");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.FacturasVentaDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVentaDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.FacturasVentaDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.FacturasVentaDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.FacturasVentaDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.FacturasVentaDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_FacturasVentaDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<FacturasVentaDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("FacturasVentaDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<FacturasVentaDetalleEntrega>(entity =>
        {
            entity.HasKey(e => e.Identrega);

            entity.ToTable("FacturasVentaDetalle_Entregas");

            entity.Property(e => e.Identrega).HasColumnName("IDEntrega");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.FechaAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaEntrega)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
        });

        modelBuilder.Entity<FacturasVentaEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FacturasVentum>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Act_Num_FacturasVenta");
                    tb.HasTrigger("FV_TR_Delete_VV");
                    tb.HasTrigger("FacturasVenta_Delete_CDBO");
                    tb.HasTrigger("MaxFacturaVentaAnno");
                    tb.HasTrigger("T_FacturasVenta_CRM");
                    tb.HasTrigger("UpdateFacturaVentaFromDescuento");
                    tb.HasTrigger("UpdateStateFacturasVentaDetalleFromHeader");
                    tb.HasTrigger("UpdateStateFacturasVentaFromTotal");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_FacturasVenta_CDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_FacturasVenta_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CalculoPortesTipo).HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroAdministrativoId).HasColumnName("CentroAdministrativoID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.ClaveTipoFactura)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveTributariaOperacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.DescripcionOperacion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.ExentaCausa)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FacturaRectificadaId).HasColumnName("FacturaRectificadaID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FeFenvio)
                .HasColumnType("datetime")
                .HasColumnName("FE_FEnvio");
            entity.Property(e => e.FeFormatoId).HasColumnName("FE_FormatoID");
            entity.Property(e => e.FechaOperacion).HasColumnType("datetime");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.InmuebleReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InmuebleSituacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LiActividadGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadGrupo");
            entity.Property(e => e.LiActividadTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_ActividadTipo");
            entity.Property(e => e.LiConcepto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LI_Concepto");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.RectificativaClave)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.SiiExportado).HasColumnName("SII_Exportado");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.TipoId1).HasColumnName("TipoID_1");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_FacturasVenta_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_FacturasVenta_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_FacturasVenta_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_FacturasVenta_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_FacturasVenta_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_FacturasVenta_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_FacturasVenta_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVenta_FacturasVentaEstados");

            entity.HasOne(d => d.FacturaRectificada).WithMany(p => p.InverseFacturaRectificada)
                .HasForeignKey(d => d.FacturaRectificadaId)
                .HasConstraintName("FK_FacturasVenta_FacturasVenta");

            entity.HasOne(d => d.FeFormato).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.FeFormatoId)
                .HasConstraintName("FK_FacturasVenta_FE_Formatos");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_FacturasVenta_FormasPago");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.FacturasVentum)
                .HasForeignKey<FacturasVentum>(d => d.Idcdbo)
                .HasConstraintName("FK_FacturasVenta_FacturasVenta_CDBO");

            entity.HasOne(d => d.Medio).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_FacturasVenta_MediosPago");

            entity.HasOne(d => d.Persona).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVenta_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_FacturasVenta_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.FacturasVenta)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FacturasVenta_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.FacturasVenta)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_FacturasVenta_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<Familia>(entity =>
        {
            entity.HasKey(e => e.Idfamilia);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("BorrarSubFamilias");
                    tb.HasTrigger("Familias_SetOrden");
                    tb.HasTrigger("tr_Familias_ins");
                });

            entity.Property(e => e.Idfamilia).HasColumnName("IDFamilia");
            entity.Property(e => e.CatalogoAtributoId).HasColumnName("CatalogoAtributoID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CtaCompras)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaVentas)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.Imprimir)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.WmDescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("wm_Description");
            entity.Property(e => e.WmKeyword)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("wm_Keyword");
            entity.Property(e => e.WmTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("wm_Title");

            entity.HasOne(d => d.CatalogoAtributo).WithMany(p => p.Familia)
                .HasForeignKey(d => d.CatalogoAtributoId)
                .HasConstraintName("FK_Familias_CatalogosAtributos");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.Familia)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_Familias_CTA_CentroCoste");

            entity.HasOne(d => d.FamiliaNavigation).WithMany(p => p.InverseFamiliaNavigation)
                .HasForeignKey(d => d.FamiliaId)
                .HasConstraintName("FK_Familias_Familias");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.Familia)
                .HasForeignKey(d => d.ProductoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Familias_ProductosTipos");
        });

        modelBuilder.Entity<FamiliasDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("Familias_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.FamiliasDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Familias_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

            entity.HasOne(d => d.Familia).WithMany(p => p.FamiliasDatosDinamicos)
                .HasForeignKey(d => d.FamiliaId)
                .HasConstraintName("FK_Familias_DatosDinamicos_Familias");
        });

        modelBuilder.Entity<Fase>(entity =>
        {
            entity.HasKey(e => e.Idfase);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Fases_UpdateFasesCentros_ProductoID");
                    tb.HasTrigger("Fases_UpdateOrden");
                    tb.HasTrigger("tr_Fases_UpdateRutas");
                });

            entity.HasIndex(e => new { e.RutaId, e.Orden }, "IXU_Fases_RutaID_Orden").IsUnique();

            entity.Property(e => e.Idfase).HasColumnName("IDFase");
            entity.Property(e => e.FactorSolapamiento).HasColumnType("money");
            entity.Property(e => e.FaseId).HasColumnName("FaseID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.RutaId).HasColumnName("RutaID");

            entity.HasOne(d => d.FaseNavigation).WithMany(p => p.InverseFaseNavigation)
                .HasForeignKey(d => d.FaseId)
                .HasConstraintName("FK_Fases_Fases");

            entity.HasOne(d => d.Operacion).WithMany(p => p.Fases)
                .HasForeignKey(d => d.OperacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fases_Operaciones");

            entity.HasOne(d => d.Ruta).WithMany(p => p.Fases)
                .HasForeignKey(d => d.RutaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fases_RutasProduccion");
        });

        modelBuilder.Entity<FasesCentro>(entity =>
        {
            entity.HasKey(e => e.IdfaseCentro);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("FasesCentros_UpdateProductoID");
                    tb.HasTrigger("FasesCentros_UpdateTiemposFase");
                });

            entity.Property(e => e.IdfaseCentro).HasColumnName("IDFaseCentro");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.FaseId).HasColumnName("FaseID");
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");

            entity.HasOne(d => d.Centro).WithMany(p => p.FasesCentros)
                .HasForeignKey(d => d.CentroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FasesCentros_CentrosTrabajo");

            entity.HasOne(d => d.Fase).WithMany(p => p.FasesCentros)
                .HasForeignKey(d => d.FaseId)
                .HasConstraintName("FK_FasesCentros_Fases");

            entity.HasOne(d => d.Producto).WithMany(p => p.FasesCentros)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_FasesCentros_Productos");
        });

        modelBuilder.Entity<FasesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartesAllowModify).HasColumnName("Partes_AllowModify");
        });

        modelBuilder.Entity<FeFormato>(entity =>
        {
            entity.HasKey(e => e.Idformato);

            entity.ToTable("FE_Formatos");

            entity.Property(e => e.Idformato).HasColumnName("IDFormato");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Version)
                .HasMaxLength(12)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fichaje>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FaltaInt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta_Int");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.TurnoId).HasColumnName("TurnoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.InverseCabecera)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_Fichajes_Fichajes");

            entity.HasOne(d => d.Estado).WithMany(p => p.Fichajes)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fichajes_FichajesEstados");

            entity.HasOne(d => d.Persona).WithMany(p => p.FichajesNavigation)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fichajes_Empleados");

            entity.HasOne(d => d.Turno).WithMany(p => p.Fichajes)
                .HasForeignKey(d => d.TurnoId)
                .HasConstraintName("FK_Fichajes_Turnos");
        });

        modelBuilder.Entity<FichajesDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("FichajesDetalle", tb =>
                {
                    tb.HasTrigger("FichajesDetalle_OnDelete");
                    tb.HasTrigger("FichajesDetalle_OnInsert_OnUpdate");
                });

            entity.HasIndex(e => e.CabeceraId, "IX_FichajesDetalle_CabeceraID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.FechaHora)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Hora");
            entity.Property(e => e.FechaHoraInt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Hora_Int");
            entity.Property(e => e.FechaHoraOperario)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Hora_Operario");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.FichajesDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_FichajesDetalle_Fichajes");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_FichajesDetalle_FichajesDetalle");

            entity.HasOne(d => d.Tipo).WithMany(p => p.FichajesDetalles)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FichajesDetalle_FichajesTipos");
        });

        modelBuilder.Entity<FichajesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FichajesOrdenesOperacionesListum>(entity =>
        {
            entity.HasKey(e => e.IdordenOperacion);

            entity.ToTable("Fichajes_Ordenes_Operaciones_Lista", tb => tb.HasTrigger("Fichajes_Ordenes_Operaciones_Lista_OnDelete"));

            entity.Property(e => e.IdordenOperacion).HasColumnName("IDOrden_Operacion");
            entity.Property(e => e.CierreAutomatico)
                .HasComment("Determina como se comporta el sistema a la hora de realizar una Salida o Fin de Turno y tener la tarea de este tipo abierta")
                .HasColumnName("Cierre_Automatico");
            entity.Property(e => e.Excluyente)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("Determina si al insertar una tarea de este tipo NO permitimos la inserción de otra tarea");
            entity.Property(e => e.OfId)
                .HasComment("ID de la Orden indirecta")
                .HasColumnName("OfID");
            entity.Property(e => e.OperacionId)
                .HasComment("ID de la Operación")
                .HasColumnName("OperacionID");
            entity.Property(e => e.TextoObservaciones)
                .IsRequired()
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("Texto_Observaciones");
            entity.Property(e => e.TipoId)
                .HasComment("Tipo de la Orden (Indirecta, Fabricación, Seriada)")
                .HasColumnName("TipoID");

            entity.HasOne(d => d.Operacion).WithMany(p => p.FichajesOrdenesOperacionesLista)
                .HasForeignKey(d => d.OperacionId)
                .HasConstraintName("FK_Fichajes_Ordenes_Operaciones_Lista_Operaciones");
        });

        modelBuilder.Entity<FichajesParte>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("Fichajes_Partes", tb =>
                {
                    tb.HasTrigger("Fichajes_Partes_InsertPartes");
                    tb.HasTrigger("Fichajes_Partes_OnDelete");
                    tb.HasTrigger("Fichajes_Partes_OnInsert");
                });

            entity.HasIndex(e => e.FichajeDetalleId, "IX_Fichajes_Partes_DetalleID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadPf).HasColumnName("CantidadPF");
            entity.Property(e => e.CantidadPfrechazada).HasColumnName("CantidadPFRechazada");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.FichajeDetalleId).HasColumnName("FichajeDetalleID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.MaquinaId).HasColumnName("MaquinaID");
            entity.Property(e => e.OfId).HasColumnName("OfID");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.OsId).HasColumnName("OsID");
            entity.Property(e => e.ParteId).HasColumnName("ParteID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.TotalCoste).HasColumnType("money");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.InverseCabecera)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_Fichajes_Partes_Fichajes_Partes");

            entity.HasOne(d => d.Estado).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fichajes_Partes_Fichajes_PartesEstados");

            entity.HasOne(d => d.FichajeDetalle).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.FichajeDetalleId)
                .HasConstraintName("FK_Fichajes_Partes_FichajesDetalle");

            entity.HasOne(d => d.Maquina).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.MaquinaId)
                .HasConstraintName("FK_Fichajes_Partes_Maquinas");

            entity.HasOne(d => d.Of).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.OfId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Fichajes_Partes_OrdenesFabricacion");

            entity.HasOne(d => d.Operacion).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.OperacionId)
                .HasConstraintName("FK_Fichajes_Partes_Operaciones");

            entity.HasOne(d => d.Os).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.OsId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Fichajes_Partes_OrdenesSeriadas");

            entity.HasOne(d => d.Parte).WithMany(p => p.FichajesPartes)
                .HasForeignKey(d => d.ParteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Fichajes_Partes_Partes");
        });

        modelBuilder.Entity<FichajesPartesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("Fichajes_PartesEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FichajesSteep>(entity =>
        {
            entity.HasKey(e => e.Idsteep);

            entity.ToTable("Fichajes_Steeps");

            entity.HasIndex(e => e.NextSteepId, "IX_Fichajes_Steeps_Next_SteepID").IsUnique();

            entity.Property(e => e.Idsteep)
                .ValueGeneratedNever()
                .HasColumnName("IDSteep");
            entity.Property(e => e.HelpTextIdle)
                .HasColumnType("text")
                .HasColumnName("Help_Text_Idle");
            entity.Property(e => e.HelpTextOnError)
                .HasColumnType("text")
                .HasColumnName("Help_Text_OnError");
            entity.Property(e => e.ImageIndexIdle)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("Image_Index_Idle");
            entity.Property(e => e.ImageIndexOk)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("Image_Index_Ok");
            entity.Property(e => e.ImageIndexOnError)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("Image_Index_OnError");
            entity.Property(e => e.NextSteepId).HasColumnName("Next_SteepID");
            entity.Property(e => e.PrevSteepId).HasColumnName("Prev_SteepID");
            entity.Property(e => e.SteepNumber).HasColumnName("Steep_Number");

            entity.HasOne(d => d.NextSteep).WithOne(p => p.InverseNextSteep)
                .HasForeignKey<FichajesSteep>(d => d.NextSteepId)
                .HasConstraintName("FK_Fichajes_Steeps_Fichajes_Steeps");
        });

        modelBuilder.Entity<FichajesTareasStandBy>(entity =>
        {
            entity.HasKey(e => e.FichajeParteId);

            entity.ToTable("Fichajes_Tareas_StandBy");

            entity.HasIndex(e => e.PersonaId, "IX_Fichajes_Tareas_StandBy_PersonaID");

            entity.Property(e => e.FichajeParteId)
                .ValueGeneratedNever()
                .HasColumnName("Fichaje_ParteID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.FichajeParte).WithOne(p => p.FichajesTareasStandBy)
                .HasForeignKey<FichajesTareasStandBy>(d => d.FichajeParteId)
                .HasConstraintName("FK_Fichajes_Tareas_StandBy_Fichajes_Partes");

            entity.HasOne(d => d.Persona).WithMany(p => p.FichajesTareasStandBies)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fichajes_Tareas_StandBy_Empleados");
        });

        modelBuilder.Entity<FichajesTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormasPago>(entity =>
        {
            entity.HasKey(e => e.IdformaPago);

            entity.ToTable("FormasPago");

            entity.Property(e => e.IdformaPago).HasColumnName("IDFormaPago");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormasPagoApi>(entity =>
        {
            entity.HasKey(e => e.IdformaPagoApi).HasName("PK__FormasPa__478D9C2607A9E6E1");

            entity.ToTable("FormasPagoAPI");

            entity.Property(e => e.IdformaPagoApi).HasColumnName("IDFormaPagoAPI");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Urlprefix)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("URLPrefix");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.FormasPagoApis)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK__FormasPag__Forma__1B0C352A");
        });

        modelBuilder.Entity<Formulario>(entity =>
        {
            entity.HasKey(e => e.Idformulario);

            entity.HasIndex(e => e.Nombre, "IXU_Formularios_Nombre").IsUnique();

            entity.Property(e => e.Idformulario).HasColumnName("IDFormulario");
            entity.Property(e => e.CategoriaId).HasColumnName("CategoriaID");
            entity.Property(e => e.Libreria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Categoria).WithMany(p => p.Formularios)
                .HasForeignKey(d => d.CategoriaId)
                .HasConstraintName("FK_Formularios_FormulariosCategorias");
        });

        modelBuilder.Entity<FormulariosCategoria>(entity =>
        {
            entity.HasKey(e => e.Idcategoria);

            entity.Property(e => e.Idcategoria).HasColumnName("IDCategoria");
            entity.Property(e => e.CategoriaId).HasColumnName("CategoriaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Categoria).WithMany(p => p.InverseCategoria)
                .HasForeignKey(d => d.CategoriaId)
                .HasConstraintName("FK_FormulariosCategorias_FormulariosCategorias");
        });

        modelBuilder.Entity<GastosFacturacion>(entity =>
        {
            entity.HasKey(e => e.IdgastoFacturacion);

            entity.ToTable("GastosFacturacion");

            entity.Property(e => e.IdgastoFacturacion).HasColumnName("IDGastoFacturacion");
            entity.Property(e => e.CtaCompras)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaVentas)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoCompraId).HasColumnName("IVAGrupoCompraID");
            entity.Property(e => e.IvagrupoVentaId).HasColumnName("IVAGrupoVentaID");
            entity.Property(e => e.Ivaporcentaje)
                .HasColumnType("money")
                .HasColumnName("IVAPorcentaje");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.GastosFacturacions)
                .HasForeignKey(d => d.IvaclaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GastosFacturacion_IvaClases");
        });

        modelBuilder.Entity<GdAplicacione>(entity =>
        {
            entity.HasKey(e => e.Idaplicacion);

            entity.ToTable("GD_Aplicaciones");

            entity.Property(e => e.Idaplicacion).HasColumnName("IDAplicacion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GdDocumento>(entity =>
        {
            entity.HasKey(e => e.Iddocumento);

            entity.ToTable("GD_Documentos", tb => tb.HasTrigger("GD_Documentos_SetFichero"));

            entity.Property(e => e.Iddocumento).HasColumnName("IDDocumento");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoId)
                .HasComment("Para poder establecer relaciones entre Documentos")
                .HasColumnName("DocumentoID");
            entity.Property(e => e.Fichero)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('#')")
                .HasComment("Nombre Interno del fichero: 9 digitos +  '.' + 5 de extensión. Se autogenera por trigger");
            entity.Property(e => e.FormatoId).HasColumnName("FormatoID");
            entity.Property(e => e.OriginalFileName)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.Documento).WithMany(p => p.InverseDocumento)
                .HasForeignKey(d => d.DocumentoId)
                .HasConstraintName("FK_GD_Documentos_GD_Documentos");

            entity.HasOne(d => d.Formato).WithMany(p => p.GdDocumentos)
                .HasForeignKey(d => d.FormatoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GD_Documentos_GD_TipoArchivos");

            entity.HasOne(d => d.Tipo).WithMany(p => p.GdDocumentos)
                .HasForeignKey(d => d.TipoId)
                .HasConstraintName("FK_GD_Documentos_GD_Tipos");
        });

        modelBuilder.Entity<GdDocumentosEntidade>(entity =>
        {
            entity.HasKey(e => new { e.EntidadId, e.DocumentoId, e.IdentificadorEntidadId });

            entity.ToTable("GD_DocumentosEntidades");

            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.DocumentoId).HasColumnName("DocumentoID");
            entity.Property(e => e.IdentificadorEntidadId)
                .HasComment("El valor del ID de la Identidad en su tabla correspondiente (x. ej. IDProducto de la tabla Productos)")
                .HasColumnName("IdentificadorEntidadID");

            entity.HasOne(d => d.Documento).WithMany(p => p.GdDocumentosEntidades)
                .HasForeignKey(d => d.DocumentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GD_DocumentosEntidades_GD_Documentos");

            entity.HasOne(d => d.Entidad).WithMany(p => p.GdDocumentosEntidades)
                .HasForeignKey(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GD_DocumentosEntidades_GD_Entidades");
        });

        modelBuilder.Entity<GdEntidade>(entity =>
        {
            entity.HasKey(e => e.Identidad);

            entity.ToTable("GD_Entidades");

            entity.Property(e => e.Identidad)
                .ValueGeneratedNever()
                .HasColumnName("IDEntidad");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Formulario).WithMany(p => p.GdEntidades)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GD_Entidades_Formularios");

            entity.HasOne(d => d.IdentidadNavigation).WithOne(p => p.GdEntidade)
                .HasForeignKey<GdEntidade>(d => d.Identidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GD_Entidades_GS_Entidades");
        });

        modelBuilder.Entity<GdFormatosArchivo>(entity =>
        {
            entity.HasKey(e => e.Idformato).HasName("PK_GD_TipoArchivos");

            entity.ToTable("GD_FormatosArchivos");

            entity.Property(e => e.Idformato).HasColumnName("IDFormato");
            entity.Property(e => e.AplicacionId).HasColumnName("AplicacionID");
            entity.Property(e => e.Extension)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Icon).HasColumnType("image");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Aplicacion).WithMany(p => p.GdFormatosArchivos)
                .HasForeignKey(d => d.AplicacionId)
                .HasConstraintName("FK_GD_TipoArchivos_GD_Aplicaciones");
        });

        modelBuilder.Entity<GdTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("GD_Tipos");

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeneralSetup>(entity =>
        {
            entity.HasKey(e => new { e.Variable, e.Valor });

            entity.ToTable("GeneralSetup");

            entity.Property(e => e.Variable)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Valor)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Caption)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Hint)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GsAccessLog>(entity =>
        {
            entity.HasKey(e => e.IdaccessLog);

            entity.ToTable("GS_AccessLog");

            entity.Property(e => e.IdaccessLog).HasColumnName("IDAccessLog");
            entity.Property(e => e.AplicacionId).HasColumnName("AplicacionID");
            entity.Property(e => e.AppVersion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Host)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("host");
            entity.Property(e => e.IpAddress)
                .IsRequired()
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("IP_address");
            entity.Property(e => e.Usr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usr");
        });

        modelBuilder.Entity<GsConsultasInfoAdd>(entity =>
        {
            entity.HasKey(e => e.Idgs);

            entity.ToTable("GS_Consultas_InfoAdd");

            entity.Property(e => e.Idgs).HasColumnName("IDGS");
            entity.Property(e => e.AtributoId).HasColumnName("AtributoID");
            entity.Property(e => e.AtributoLabel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Atributo_Label");
            entity.Property(e => e.Consulta)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ConsultaId).HasColumnName("ConsultaID");
        });

        modelBuilder.Entity<GsEditMasksType>(entity =>
        {
            entity.HasKey(e => e.IdeditMaskType).HasName("PK_GS_MaskTypes");

            entity.ToTable("GS_EditMasksTypes");

            entity.Property(e => e.IdeditMaskType)
                .ValueGeneratedNever()
                .HasColumnName("IDEditMaskType");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GsEntidade>(entity =>
        {
            entity.HasKey(e => e.Identidad);

            entity.ToTable("GS_Entidades");

            entity.HasIndex(e => e.Nombre, "IXU_GS_Entidades_Nombre").IsUnique();

            entity.HasIndex(e => e.FormularioId, "IX_GS_Entidades_FormularioID");

            entity.Property(e => e.Identidad).HasColumnName("IDEntidad");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.GestionCdbo).HasColumnName("Gestion_CDBO");
            entity.Property(e => e.KeyField)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Formulario).WithMany(p => p.GsEntidades)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_Entidades_Formularios");

            entity.HasMany(d => d.Tipos).WithMany(p => p.Entidads)
                .UsingEntity<Dictionary<string, object>>(
                    "SyncEntidadesTipo",
                    r => r.HasOne<SyncTipo>().WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_sync_Entidades_Tipos_sync_Tipos"),
                    l => l.HasOne<GsEntidade>().WithMany()
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_sync_Entidades_Tipos_GS_Entidades"),
                    j =>
                    {
                        j.HasKey("EntidadId", "TipoId");
                        j.ToTable("sync_Entidades_Tipos");
                        j.IndexerProperty<int>("EntidadId").HasColumnName("EntidadID");
                        j.IndexerProperty<int>("TipoId").HasColumnName("TipoID");
                    });
        });

        modelBuilder.Entity<GsGridColumn>(entity =>
        {
            entity.HasKey(e => e.Idcolumn);

            entity.ToTable("GS_GridColumns");

            entity.HasIndex(e => e.DataBindingFieldName, "IX_GS_GridColumns_DataBinding_FieldName");

            entity.HasIndex(e => e.GridDefinitionId, "IX_GS_GridColumns_GridDefinitionID");

            entity.HasIndex(e => new { e.GridDefinitionId, e.PositionBandIndex, e.PositionRowIndex, e.PositionColIndex }, "UIX_GS_GridColumns_GridDefinitionID_BandIndex_ColIndex_RowIndex").IsUnique();

            entity.Property(e => e.Idcolumn).HasColumnName("IDColumn");
            entity.Property(e => e.Alignment).HasComment("(0 = taLeft, 1 = taRight, 2 = taCenter)");
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataBindingFieldName)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("DataBinding_FieldName");
            entity.Property(e => e.GridDefinitionId).HasColumnName("GridDefinitionID");
            entity.Property(e => e.PositionBandIndex).HasColumnName("Position_BandIndex");
            entity.Property(e => e.PositionColIndex).HasColumnName("Position_ColIndex");
            entity.Property(e => e.PositionRowIndex).HasColumnName("Position_RowIndex");
            entity.Property(e => e.Visible)
                .IsRequired()
                .HasDefaultValueSql("(1)");

            entity.HasOne(d => d.GridDefinition).WithMany(p => p.GsGridColumns)
                .HasForeignKey(d => d.GridDefinitionId)
                .HasConstraintName("FK_GS_GridColumns_GS_GridDefinitions");
        });

        modelBuilder.Entity<GsGridDefinition>(entity =>
        {
            entity.HasKey(e => e.IdgridDefinition);

            entity.ToTable("GS_GridDefinitions");

            entity.HasIndex(e => e.EntidadId, "IX_GS_GridDefinitions_EntidadID");

            entity.HasIndex(e => e.GridDefinitionId, "IX_GS_GridDefinitions_GridDefinitionID");

            entity.HasIndex(e => e.Codigo, "UIX_GS_GridDefinitions").IsUnique();

            entity.Property(e => e.IdgridDefinition)
                .HasComment("ID autonumerico debido a que se usará el código para localizar un registro (UIX)")
                .HasColumnName("IDGridDefinition");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Formato: PrefijoEntidad_DDDD, del 3000 en adelante reservados para el usuario");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.GridDefinitionId).HasColumnName("GridDefinitionID");

            entity.HasOne(d => d.Entidad).WithMany(p => p.GsGridDefinitions)
                .HasForeignKey(d => d.EntidadId)
                .HasConstraintName("FK_GS_GridDefinitions_GS_Entidades");

            entity.HasOne(d => d.GridDefinition).WithMany(p => p.InverseGridDefinition)
                .HasForeignKey(d => d.GridDefinitionId)
                .HasConstraintName("FK_GS_GridDefinitions_GS_GridDefinitions");
        });

        modelBuilder.Entity<GsGridsView>(entity =>
        {
            entity.HasKey(e => e.IdgridView);

            entity.ToTable("GS_GridsViews");

            entity.Property(e => e.IdgridView).HasColumnName("IDGridView");
            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.GridViewName)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.Entidad).WithMany(p => p.GsGridsViews)
                .HasForeignKey(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_GridsViews_GS_Entidades");

            entity.HasOne(d => d.Formulario).WithMany(p => p.GsGridsViews)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_GridsViews_Formularios");
        });

        modelBuilder.Entity<GsInternalType>(entity =>
        {
            entity.HasKey(e => e.IdinternalType);

            entity.ToTable("GS_InternalTypes");

            entity.Property(e => e.IdinternalType)
                .ValueGeneratedNever()
                .HasColumnName("IDInternalType");
            entity.Property(e => e.DelphiFieldClassName)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("Delphi_FieldClassName");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.SqlName)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("SQL_Name");
        });

        modelBuilder.Entity<GsRecordsKey>(entity =>
        {
            entity.HasKey(e => e.Idrecord);

            entity.ToTable("GS_RecordsKeys");

            entity.Property(e => e.Idrecord).HasColumnName("IDRecord");
            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.FechaHora)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("UserID");

            entity.HasOne(d => d.Entidad).WithMany(p => p.GsRecordsKeys)
                .HasForeignKey(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_RecordsKeys_GS_Entidades");
        });

        modelBuilder.Entity<GsUsrComboList>(entity =>
        {
            entity.HasKey(e => e.IdcomboList);

            entity.ToTable("GS_UsrComboLists");

            entity.Property(e => e.IdcomboList).HasColumnName("IDComboList");
            entity.Property(e => e.ItemsUsrTypeId).HasColumnName("Items_UsrTypeID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("('GS_UsrComboListsItems')");
            entity.Property(e => e.UsrTypeId).HasColumnName("UsrTypeID");

            entity.HasOne(d => d.ItemsUsrType).WithMany(p => p.GsUsrComboListItemsUsrTypes)
                .HasForeignKey(d => d.ItemsUsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_UsrComboListsItem_GS_UsrTypes");

            entity.HasOne(d => d.UsrType).WithMany(p => p.GsUsrComboListUsrTypes)
                .HasForeignKey(d => d.UsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_UsrComboLists_GS_UsrTypes");
        });

        modelBuilder.Entity<GsUsrComboListsItem>(entity =>
        {
            entity.HasKey(e => e.IdcomboListItem);

            entity.ToTable("GS_UsrComboListsItems", tb => tb.HasTrigger("GS_UsrComboListsItems_CalcItemIndex"));

            entity.HasIndex(e => new { e.ComboListId, e.ItemIndex }, "IX_GS_UsrComboListsItems_ComboListID_ItemIndex").IsUnique();

            entity.Property(e => e.IdcomboListItem).HasColumnName("IDComboListItem");
            entity.Property(e => e.ComboListId).HasColumnName("ComboListID");
            entity.Property(e => e.ItemValue)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.ComboList).WithMany(p => p.GsUsrComboListsItems)
                .HasForeignKey(d => d.ComboListId)
                .HasConstraintName("FK_GS_UsrComboListsItems_GS_UsrComboLists");
        });

        modelBuilder.Entity<GsUsrGridsViewsCustomization>(entity =>
        {
            entity.HasKey(e => e.IdusrGridViewCustomization);

            entity.ToTable("GS_UsrGridsViewsCustomizations");

            entity.Property(e => e.IdusrGridViewCustomization).HasColumnName("IDUsrGridViewCustomization");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.GridViewId).HasColumnName("GridViewID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.RawData)
                .IsRequired()
                .HasColumnType("text");

            entity.HasOne(d => d.GridView).WithMany(p => p.GsUsrGridsViewsCustomizations)
                .HasForeignKey(d => d.GridViewId)
                .HasConstraintName("FK_GS_UsrGridsViewsCustomizations_GS_GridsViews");

            entity.HasOne(d => d.Persona).WithMany(p => p.GsUsrGridsViewsCustomizations)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GS_UsrGridsViewsCustomizations_Empleados");
        });

        modelBuilder.Entity<GsUsrOperator>(entity =>
        {
            entity.HasKey(e => e.Idoperator);

            entity.ToTable("GS_UsrOperators");

            entity.Property(e => e.Idoperator)
                .ValueGeneratedNever()
                .HasColumnName("IDOperator");
            entity.Property(e => e.Operator)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GsUsrType>(entity =>
        {
            entity.HasKey(e => e.IdusrType);

            entity.ToTable("GS_UsrTypes");

            entity.Property(e => e.IdusrType)
                .ValueGeneratedNever()
                .HasColumnName("IDUsrType");
            entity.Property(e => e.DevExpIndexEditor)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("Dev_Exp_IndexEditor");
            entity.Property(e => e.EditMask)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.EditMaskTypeId).HasColumnName("EditMaskTypeID");
            entity.Property(e => e.InternalTypeId).HasColumnName("InternalTypeID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.EditMaskType).WithMany(p => p.GsUsrTypes)
                .HasForeignKey(d => d.EditMaskTypeId)
                .HasConstraintName("FK_GS_UsrTypes_GS_EditMasksTypes");

            entity.HasOne(d => d.InternalType).WithMany(p => p.GsUsrTypes)
                .HasForeignKey(d => d.InternalTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GS_UsrTypes_GS_InternalTypes");
        });

        modelBuilder.Entity<HorasExtra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HorasExtras");

            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.Documentoid).HasColumnName("documentoid");
            entity.Property(e => e.DíaDelMes).HasColumnName("Día del mes");
            entity.Property(e => e.Empleado)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.FechaImputacion).HasColumnType("datetime");
            entity.Property(e => e.HorasExtras)
                .HasColumnType("money")
                .HasColumnName("Horas Extras");
            entity.Property(e => e.Mes).HasMaxLength(61);
            entity.Property(e => e.TipoOf).HasColumnName("TipoOF");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InstalacionesTipo>(entity =>
        {
            entity.HasKey(e => e.IdtipoInstalacion);

            entity.Property(e => e.IdtipoInstalacion).HasColumnName("IDTipoInstalacion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoActividade>(entity =>
        {
            entity.HasKey(e => e.Idactividad);

            entity.ToTable("ISO_Actividades", tb => tb.HasTrigger("ISO_Actividades_UpdateOrden"));

            entity.HasIndex(e => new { e.ProcesoId, e.Orden }, "IX_Orden").IsUnique();

            entity.Property(e => e.Idactividad).HasColumnName("IDActividad");
            entity.Property(e => e.ActividadId).HasColumnName("ActividadID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProcesoId).HasColumnName("ProcesoID");

            entity.HasOne(d => d.Actividad).WithMany(p => p.InverseActividad)
                .HasForeignKey(d => d.ActividadId)
                .HasConstraintName("FK_ISO_Actividades_ISO_Actividades");

            entity.HasOne(d => d.Proceso).WithMany(p => p.IsoActividades)
                .HasForeignKey(d => d.ProcesoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Actividades_ISO_Procesos");

            entity.HasMany(d => d.Maquinas).WithMany(p => p.Actividads)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoActividadesMaquina",
                    r => r.HasOne<Maquina>().WithMany()
                        .HasForeignKey("MaquinaId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ISO_ActividadesMaquinas_Maquinas"),
                    l => l.HasOne<IsoActividade>().WithMany()
                        .HasForeignKey("ActividadId")
                        .HasConstraintName("FK_ISO_ActividadesMaquinas_ISO_Actividades"),
                    j =>
                    {
                        j.HasKey("ActividadId", "MaquinaId");
                        j.ToTable("ISO_ActividadesMaquinas");
                        j.IndexerProperty<int>("ActividadId").HasColumnName("ActividadID");
                        j.IndexerProperty<int>("MaquinaId").HasColumnName("MaquinaID");
                    });
        });

        modelBuilder.Entity<IsoActividadesPersonal>(entity =>
        {
            entity.HasKey(e => e.IdactividadPersonal);

            entity.ToTable("ISO_ActividadesPersonal");

            entity.Property(e => e.IdactividadPersonal).HasColumnName("IDActividadPersonal");
            entity.Property(e => e.ActividadId).HasColumnName("ActividadID");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.PuestoId).HasColumnName("PuestoID");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");

            entity.HasOne(d => d.Actividad).WithMany(p => p.IsoActividadesPersonals)
                .HasForeignKey(d => d.ActividadId)
                .HasConstraintName("FK_ISO_ActividadesPersonal_ISO_Actividades");

            entity.HasOne(d => d.Departamento).WithMany(p => p.IsoActividadesPersonals)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_ISO_ActividadesPersonal_Departamentos");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoActividadesPersonals)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_ActividadesPersonal_Empleados");

            entity.HasOne(d => d.Puesto).WithMany(p => p.IsoActividadesPersonals)
                .HasForeignKey(d => d.PuestoId)
                .HasConstraintName("FK_ISO_ActividadesPersonal_Puestos");

            entity.HasOne(d => d.Seccion).WithMany(p => p.IsoActividadesPersonals)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_ISO_ActividadesPersonal_Secciones");
        });

        modelBuilder.Entity<IsoCalificacionesCompra>(entity =>
        {
            entity.HasKey(e => e.Idcalificacion);

            entity.ToTable("ISO_CalificacionesCompra");

            entity.Property(e => e.Idcalificacion).HasColumnName("IDCalificacion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoComunicacione>(entity =>
        {
            entity.HasKey(e => e.Idcomunicacion);

            entity.ToTable("ISO_Comunicaciones");

            entity.Property(e => e.Idcomunicacion).HasColumnName("IDComunicacion");
            entity.Property(e => e.Contenido).HasColumnType("text");
            entity.Property(e => e.ContenidoRespuesta).HasColumnType("text");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoDemanda)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoRespuesta)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaRespuesta).HasColumnType("datetime");
            entity.Property(e => e.RespDemandaId).HasColumnName("RespDemandaID");
            entity.Property(e => e.RespRespuestaId).HasColumnName("RespRespuestaID");
            entity.Property(e => e.TipoDestDemandaId).HasColumnName("TipoDestDemandaID");
            entity.Property(e => e.TipoDestRespuestaId).HasColumnName("TipoDestRespuestaID");

            entity.HasOne(d => d.TipoDestDemanda).WithMany(p => p.IsoComunicacioneTipoDestDemanda)
                .HasForeignKey(d => d.TipoDestDemandaId)
                .HasConstraintName("FK_ISO_Comunicaciones_DocumentosGestionDestinatarios");

            entity.HasOne(d => d.TipoDestRespuesta).WithMany(p => p.IsoComunicacioneTipoDestRespuesta)
                .HasForeignKey(d => d.TipoDestRespuestaId)
                .HasConstraintName("FK_ISO_Comunicaciones_DocumentosGestionDestinatarios1");
        });

        modelBuilder.Entity<IsoCriteriosEficacium>(entity =>
        {
            entity.HasKey(e => e.IdcriterioEficacia);

            entity.ToTable("ISO_CriteriosEficacia");

            entity.Property(e => e.IdcriterioEficacia).HasColumnName("IDCriterioEficacia");
            entity.Property(e => e.FrecuenciaId).HasColumnName("FrecuenciaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PlanFormacionId).HasColumnName("PlanFormacionID");

            entity.HasOne(d => d.Frecuencia).WithMany(p => p.IsoCriteriosEficacia)
                .HasForeignKey(d => d.FrecuenciaId)
                .HasConstraintName("FK_ISO_CriteriosEficacia_ISO_Frecuencias");

            entity.HasOne(d => d.PlanFormacion).WithMany(p => p.IsoCriteriosEficacia)
                .HasForeignKey(d => d.PlanFormacionId)
                .HasConstraintName("FK_ISO_CriteriosEficacia_ISO_PlanesFormacion");
        });

        modelBuilder.Entity<IsoCriteriosSeleccion>(entity =>
        {
            entity.HasKey(e => e.Idcriterio);

            entity.ToTable("ISO_CriteriosSeleccion");

            entity.Property(e => e.Idcriterio).HasColumnName("IDCriterio");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoCurso>(entity =>
        {
            entity.HasKey(e => e.Idcurso);

            entity.ToTable("ISO_Cursos");

            entity.Property(e => e.Idcurso).HasColumnName("IDCurso");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Impartido)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Lugar)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Personal)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PlanFormacionId).HasColumnName("PlanFormacionID");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");

            entity.HasOne(d => d.Departamento).WithMany(p => p.IsoCursos)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_ISO_Cursos_Departamentos");

            entity.HasOne(d => d.PlanFormacion).WithMany(p => p.IsoCursos)
                .HasForeignKey(d => d.PlanFormacionId)
                .HasConstraintName("FK_ISO_Cursos_ISO_PlanesFormacion");

            entity.HasOne(d => d.Seccion).WithMany(p => p.IsoCursos)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_ISO_Cursos_Secciones");

            entity.HasMany(d => d.Empleados).WithMany(p => p.Cursos)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoCursosAsistente",
                    r => r.HasOne<Empleado>().WithMany()
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_CursosAsistentes_Empleados"),
                    l => l.HasOne<IsoCurso>().WithMany()
                        .HasForeignKey("CursoId")
                        .HasConstraintName("FK_ISO_CursosAsistentes_ISO_Cursos"),
                    j =>
                    {
                        j.HasKey("CursoId", "EmpleadoId");
                        j.ToTable("ISO_CursosAsistentes");
                        j.IndexerProperty<int>("CursoId").HasColumnName("CursoID");
                        j.IndexerProperty<int>("EmpleadoId").HasColumnName("EmpleadoID");
                    });
        });

        modelBuilder.Entity<IsoDocumento>(entity =>
        {
            entity.HasKey(e => e.Iddocumento);

            entity.ToTable("ISO_Documentos");

            entity.Property(e => e.Iddocumento).HasColumnName("IDDocumento");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.Documento)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaRevision).HasColumnType("datetime");
            entity.Property(e => e.FechaVigor).HasColumnType("datetime");
            entity.Property(e => e.Identificacion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Modelo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoRegistroId).HasColumnName("TipoRegistroID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoDocumentos)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_Documentos_Empleados");

            entity.HasOne(d => d.TipoRegistro).WithMany(p => p.IsoDocumentos)
                .HasForeignKey(d => d.TipoRegistroId)
                .HasConstraintName("FK_ISO_Documentos_ISO_TiposRegistros");
        });

        modelBuilder.Entity<IsoEncuesta>(entity =>
        {
            entity.HasKey(e => e.Idencuesta);

            entity.ToTable("ISO_Encuestas");

            entity.Property(e => e.Idencuesta).HasColumnName("IDEncuesta");
            entity.Property(e => e.EncuestadorId).HasColumnName("EncuestadorID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.Encuestador).WithMany(p => p.IsoEncuesta)
                .HasForeignKey(d => d.EncuestadorId)
                .HasConstraintName("FK_ISO_Encuestas_Empleados");

            entity.HasOne(d => d.Persona).WithMany(p => p.IsoEncuesta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Encuestas_Clientes");
        });

        modelBuilder.Entity<IsoEncuestasDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ISO_EncuestasDetalle", tb => tb.HasTrigger("ISO_EncuestasDetalle_UpdateCabecera"));

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.EncuestaId).HasColumnName("EncuestaID");
            entity.Property(e => e.PreguntaId).HasColumnName("PreguntaID");
            entity.Property(e => e.RespuestaId).HasColumnName("RespuestaID");

            entity.HasOne(d => d.Encuesta).WithMany(p => p.IsoEncuestasDetalles)
                .HasForeignKey(d => d.EncuestaId)
                .HasConstraintName("FK_ISO_EncuestasDetalle_ISO_Encuestas");

            entity.HasOne(d => d.Pregunta).WithMany(p => p.IsoEncuestasDetalles)
                .HasForeignKey(d => d.PreguntaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_EncuestasDetalle_ISO_Preguntas");

            entity.HasOne(d => d.Respuesta).WithMany(p => p.IsoEncuestasDetalles)
                .HasForeignKey(d => d.RespuestaId)
                .HasConstraintName("FK_ISO_EncuestasDetalle_ISO_Respuestas");
        });

        modelBuilder.Entity<IsoFrecuencia>(entity =>
        {
            entity.HasKey(e => e.Idfrecuencia);

            entity.ToTable("ISO_Frecuencias");

            entity.Property(e => e.Idfrecuencia).HasColumnName("IDFrecuencia");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoIncidencia>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("ISO_Incidencias", tb => tb.HasTrigger("ISO_Incidencias_Numero"));

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Causas).HasColumnType("text");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.DestinatarioId).HasColumnName("DestinatarioID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaCierre).HasColumnType("datetime");
            entity.Property(e => e.Resolucion).HasColumnType("text");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");
            entity.Property(e => e.TipoDestinatarioId).HasColumnName("TipoDestinatarioID");
            entity.Property(e => e.TipoIncidenciaId).HasColumnName("TipoIncidenciaID");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TotalCoste).HasColumnType("money");

            entity.HasOne(d => d.Departamento).WithMany(p => p.IsoIncidencia)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_ISO_Incidencias_Departamentos");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoIncidencia)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_Incidencias_Empleados");

            entity.HasOne(d => d.Estado).WithMany(p => p.IsoIncidencia)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Incidencias_ISO_IncidenciasEstados");

            entity.HasOne(d => d.Seccion).WithMany(p => p.IsoIncidencia)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_ISO_Incidencias_Secciones");

            entity.HasOne(d => d.TipoDestinatario).WithMany(p => p.IsoIncidencia)
                .HasForeignKey(d => d.TipoDestinatarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Incidencias_DocumentosGestionDestinatarios");

            entity.HasOne(d => d.TipoIncidencia).WithMany(p => p.IsoIncidencia)
                .HasForeignKey(d => d.TipoIncidenciaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Incidencias_ISO_TiposIncidencias");
        });

        modelBuilder.Entity<IsoIncidenciasDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ISO_IncidenciasDetalle", tb => tb.HasTrigger("ISO_IncidenciasDetalle_Numero"));

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.Accion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaPrevista).HasColumnType("datetime");
            entity.Property(e => e.FechaRealizacion).HasColumnType("datetime");
            entity.Property(e => e.TipoAccionId).HasColumnName("TipoAccionID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.IsoIncidenciasDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ISO_IncidenciasDetalle_ISO_Incidencias");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoIncidenciasDetalles)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_IncidenciasDetalle_Empleados");

            entity.HasOne(d => d.TipoAccion).WithMany(p => p.IsoIncidenciasDetalles)
                .HasForeignKey(d => d.TipoAccionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_IncidenciasDetalle_ISO_TiposAcciones");
        });

        modelBuilder.Entity<IsoIncidenciasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("ISO_IncidenciasEstados");

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoIndicadore>(entity =>
        {
            entity.HasKey(e => e.Idindicador);

            entity.ToTable("ISO_Indicadores");

            entity.Property(e => e.Idindicador).HasColumnName("IDIndicador");
            entity.Property(e => e.Amenazas).HasColumnType("text");
            entity.Property(e => e.Debilidades).HasColumnType("text");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaPrevista).HasColumnType("datetime");
            entity.Property(e => e.FechaRealizacion).HasColumnType("datetime");
            entity.Property(e => e.Fortalezas).HasColumnType("text");
            entity.Property(e => e.FrecuenciaId).HasColumnName("FrecuenciaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Objetivos).HasColumnType("text");
            entity.Property(e => e.Oportunidades).HasColumnType("text");
            entity.Property(e => e.ProcesoId).HasColumnName("ProcesoID");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");
            entity.Property(e => e.TendenciaId).HasColumnName("TendenciaID");

            entity.HasOne(d => d.Departamento).WithMany(p => p.IsoIndicadores)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_ISO_Indicadores_Departamentos");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoIndicadores)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_Indicadores_Empleados");

            entity.HasOne(d => d.Frecuencia).WithMany(p => p.IsoIndicadores)
                .HasForeignKey(d => d.FrecuenciaId)
                .HasConstraintName("FK_ISO_Indicadores_ISO_Frecuencias");

            entity.HasOne(d => d.Proceso).WithMany(p => p.IsoIndicadores)
                .HasForeignKey(d => d.ProcesoId)
                .HasConstraintName("FK_ISO_Indicadores_ISO_Procesos");

            entity.HasOne(d => d.Seccion).WithMany(p => p.IsoIndicadores)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_ISO_Indicadores_Secciones");

            entity.HasOne(d => d.Tendencia).WithMany(p => p.IsoIndicadores)
                .HasForeignKey(d => d.TendenciaId)
                .HasConstraintName("FK_ISO_Indicadores_ISO_Tendencias");
        });

        modelBuilder.Entity<IsoIndicadoresDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ISO_IndicadoresDetalle", tb => tb.HasTrigger("ISO_IndicadoresDetalle_Numero"));

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.Acciones).HasColumnType("text");
            entity.Property(e => e.FechaMedicion).HasColumnType("datetime");
            entity.Property(e => e.IndicadorId).HasColumnName("IndicadorID");

            entity.HasOne(d => d.Indicador).WithMany(p => p.IsoIndicadoresDetalles)
                .HasForeignKey(d => d.IndicadorId)
                .HasConstraintName("FK_ISO_IndicadoresDetalle_ISO_Indicadores");
        });

        modelBuilder.Entity<IsoMantenimiento>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("ISO_Mantenimientos");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaProxima).HasColumnType("datetime");
            entity.Property(e => e.FechaRealizacion).HasColumnType("datetime");
            entity.Property(e => e.FrecuenciaId).HasColumnName("FrecuenciaID");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.IncidenciaId).HasColumnName("IncidenciaID");
            entity.Property(e => e.MaquinaId).HasColumnName("MaquinaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoMantenimientos)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_Mantenimientos_Empleados");

            entity.HasOne(d => d.Frecuencia).WithMany(p => p.IsoMantenimientos)
                .HasForeignKey(d => d.FrecuenciaId)
                .HasConstraintName("FK_ISO_Mantenimientos_ISO_Frecuencias");

            entity.HasOne(d => d.Maquina).WithMany(p => p.IsoMantenimientos)
                .HasForeignKey(d => d.MaquinaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Mantenimientos_Maquinas");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.IsoMantenimientos)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_ISO_Mantenimientos_Proveedores");

            entity.HasOne(d => d.Tipo).WithMany(p => p.IsoMantenimientos)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Mantenimientos_ISO_TiposMantenimientos");
        });

        modelBuilder.Entity<IsoMantenimientosDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ISO_MantenimientosDetalle");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.IsoMantenimientosDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ISO_MantenimientosDetalle_ISO_Mantenimientos");

            entity.HasOne(d => d.Producto).WithMany(p => p.IsoMantenimientosDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_MantenimientosDetalle_Productos");
        });

        modelBuilder.Entity<IsoPedidosCompra>(entity =>
        {
            entity.HasKey(e => e.CabeceraId);

            entity.ToTable("ISO_PedidosCompra");

            entity.Property(e => e.CabeceraId)
                .ValueGeneratedNever()
                .HasColumnName("CabeceraID");
            entity.Property(e => e.CalificacionId).HasColumnName("CalificacionID");
            entity.Property(e => e.ObservacionesCalidad).HasColumnType("text");

            entity.HasOne(d => d.Cabecera).WithOne(p => p.IsoPedidosCompra)
                .HasForeignKey<IsoPedidosCompra>(d => d.CabeceraId)
                .HasConstraintName("FK_ISO_PedidosCompra_PedidosCompra");

            entity.HasOne(d => d.Calificacion).WithMany(p => p.IsoPedidosCompras)
                .HasForeignKey(d => d.CalificacionId)
                .HasConstraintName("FK_ISO_PedidosCompra_ISO_CalificacionesCompra");
        });

        modelBuilder.Entity<IsoPedidosCompraDetalle>(entity =>
        {
            entity.HasKey(e => e.LineaId);

            entity.ToTable("ISO_PedidosCompraDetalle");

            entity.Property(e => e.LineaId)
                .ValueGeneratedNever()
                .HasColumnName("LineaID");
            entity.Property(e => e.CalificacionId).HasColumnName("CalificacionID");
            entity.Property(e => e.Certificado).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Calificacion).WithMany(p => p.IsoPedidosCompraDetalles)
                .HasForeignKey(d => d.CalificacionId)
                .HasConstraintName("FK_ISO_PedidosCompraDetalle_ISO_CalificacionesCompra");

            entity.HasOne(d => d.Linea).WithOne(p => p.IsoPedidosCompraDetalle)
                .HasForeignKey<IsoPedidosCompraDetalle>(d => d.LineaId)
                .HasConstraintName("FK_ISO_PedidosCompraDetalle_PedidosCompraDetalle");
        });

        modelBuilder.Entity<IsoPlanesFormacion>(entity =>
        {
            entity.HasKey(e => e.IdplanFormacion);

            entity.ToTable("ISO_PlanesFormacion");

            entity.Property(e => e.IdplanFormacion).HasColumnName("IDPlanFormacion");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Impartido)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Personal)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoPregunta>(entity =>
        {
            entity.HasKey(e => e.Idpregunta);

            entity.ToTable("ISO_Preguntas");

            entity.Property(e => e.Idpregunta).HasColumnName("IDPregunta");
            entity.Property(e => e.Texto)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoProceso>(entity =>
        {
            entity.HasKey(e => e.Idproceso);

            entity.ToTable("ISO_Procesos");

            entity.Property(e => e.Idproceso).HasColumnName("IDProceso");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoProducto>(entity =>
        {
            entity.HasKey(e => e.ProductoId);

            entity.ToTable("ISO_Productos");

            entity.Property(e => e.ProductoId)
                .ValueGeneratedNever()
                .HasColumnName("ProductoID");
            entity.Property(e => e.BuenasPracticas).HasColumnType("text");

            entity.HasOne(d => d.Producto).WithOne(p => p.IsoProducto)
                .HasForeignKey<IsoProducto>(d => d.ProductoId)
                .HasConstraintName("FK_ISO_Productos_Productos");
        });

        modelBuilder.Entity<IsoProveedore>(entity =>
        {
            entity.HasKey(e => e.PersonaId);

            entity.ToTable("ISO_Proveedores");

            entity.Property(e => e.PersonaId)
                .ValueGeneratedNever()
                .HasColumnName("PersonaID");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaBaja).HasColumnType("datetime");
            entity.Property(e => e.FechaHomologacion).HasColumnType("datetime");
            entity.Property(e => e.ObservacionesCalidad).HasColumnType("text");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoProveedores)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_Proveedores_Empleados");

            entity.HasOne(d => d.Persona).WithOne(p => p.IsoProveedore)
                .HasForeignKey<IsoProveedore>(d => d.PersonaId)
                .HasConstraintName("FK_ISO_Proveedores_Proveedores");
        });

        modelBuilder.Entity<IsoRegistro>(entity =>
        {
            entity.HasKey(e => e.Idregistro);

            entity.ToTable("ISO_Registros");

            entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Destruccion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoId).HasColumnName("DocumentoID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaRevision).HasColumnType("datetime");
            entity.Property(e => e.Formato)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TiempoConservacion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoRegistroId).HasColumnName("TipoRegistroID");

            entity.HasOne(d => d.Documento).WithMany(p => p.IsoRegistros)
                .HasForeignKey(d => d.DocumentoId)
                .HasConstraintName("FK_ISO_Registros_ISO_Documentos");

            entity.HasOne(d => d.Empleado).WithMany(p => p.IsoRegistros)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_ISO_Registros_Empleados");

            entity.HasOne(d => d.TipoRegistro).WithMany(p => p.IsoRegistros)
                .HasForeignKey(d => d.TipoRegistroId)
                .HasConstraintName("FK_ISO_Registros_ISO_TiposRegistros");
        });

        modelBuilder.Entity<IsoRequisito>(entity =>
        {
            entity.HasKey(e => e.Idrequisito);

            entity.ToTable("ISO_Requisitos");

            entity.Property(e => e.Idrequisito).HasColumnName("IDRequisito");
            entity.Property(e => e.Ambito)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Derogada)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoId).HasColumnName("DocumentoID");
            entity.Property(e => e.FechaVigor).HasColumnType("datetime");
            entity.Property(e => e.ModuloGestionId)
                .HasComment("En lugar de ModuloCalidadID")
                .HasColumnName("ModuloGestionID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Resumen).HasColumnType("text");
            entity.Property(e => e.TipoNormaId).HasColumnName("TipoNormaID");

            entity.HasOne(d => d.Documento).WithMany(p => p.IsoRequisitos)
                .HasForeignKey(d => d.DocumentoId)
                .HasConstraintName("FK_ISO_Requisitos_ISO_Documentos");

            entity.HasOne(d => d.ModuloGestion).WithMany(p => p.IsoRequisitos)
                .HasForeignKey(d => d.ModuloGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISO_Requisitos_ModulosGestion");

            entity.HasOne(d => d.TipoNorma).WithMany(p => p.IsoRequisitos)
                .HasForeignKey(d => d.TipoNormaId)
                .HasConstraintName("FK_ISO_Requisitos_ISO_TiposNormas");
        });

        modelBuilder.Entity<IsoRespuesta>(entity =>
        {
            entity.HasKey(e => e.Idrespuesta);

            entity.ToTable("ISO_Respuestas");

            entity.Property(e => e.Idrespuesta).HasColumnName("IDRespuesta");
            entity.Property(e => e.PreguntaId).HasColumnName("PreguntaID");
            entity.Property(e => e.Texto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Pregunta).WithMany(p => p.IsoRespuesta)
                .HasForeignKey(d => d.PreguntaId)
                .HasConstraintName("FK_ISO_Respuestas_ISO_Preguntas");
        });

        modelBuilder.Entity<IsoRevisione>(entity =>
        {
            entity.HasKey(e => e.Idrevision);

            entity.ToTable("ISO_Revisiones");

            entity.Property(e => e.Idrevision).HasColumnName("IDRevision");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.FechaRevision).HasColumnType("datetime");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");
            entity.Property(e => e.Temas).HasColumnType("text");

            entity.HasOne(d => d.Departamento).WithMany(p => p.IsoRevisiones)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_ISO_Revisiones_Departamentos");

            entity.HasOne(d => d.Seccion).WithMany(p => p.IsoRevisiones)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_ISO_Revisiones_Secciones");

            entity.HasMany(d => d.Empleados).WithMany(p => p.Revisions)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoRevisionesAsistente",
                    r => r.HasOne<Empleado>().WithMany()
                        .HasForeignKey("EmpleadoId")
                        .HasConstraintName("FK_ISO_RevisionesAsistentes_Empleados"),
                    l => l.HasOne<IsoRevisione>().WithMany()
                        .HasForeignKey("RevisionId")
                        .HasConstraintName("FK_ISO_RevisionesAsistentes_ISO_Revisiones"),
                    j =>
                    {
                        j.HasKey("RevisionId", "EmpleadoId");
                        j.ToTable("ISO_RevisionesAsistentes");
                        j.IndexerProperty<int>("RevisionId").HasColumnName("RevisionID");
                        j.IndexerProperty<int>("EmpleadoId").HasColumnName("EmpleadoID");
                    });
        });

        modelBuilder.Entity<IsoRevisionesAcuerdo>(entity =>
        {
            entity.HasKey(e => e.IdrevisionAcuerdo);

            entity.ToTable("ISO_RevisionesAcuerdos", tb => tb.HasTrigger("ISO_RevisionesAcuerdos_Numero"));

            entity.Property(e => e.IdrevisionAcuerdo).HasColumnName("IDRevisionAcuerdo");
            entity.Property(e => e.Aspecto).HasColumnType("text");
            entity.Property(e => e.FechaCumplimiento).HasColumnType("datetime");
            entity.Property(e => e.FechaPrevista).HasColumnType("datetime");
            entity.Property(e => e.IndCompetencia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IndPropio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IndSector)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mejora).HasColumnType("text");
            entity.Property(e => e.RevisionId).HasColumnName("RevisionID");

            entity.HasOne(d => d.Revision).WithMany(p => p.IsoRevisionesAcuerdos)
                .HasForeignKey(d => d.RevisionId)
                .HasConstraintName("FK_ISO_RevisionesAcuerdos_ISO_Revisiones");
        });

        modelBuilder.Entity<IsoTendencia>(entity =>
        {
            entity.HasKey(e => e.Idtendencia);

            entity.ToTable("ISO_Tendencias");

            entity.Property(e => e.Idtendencia).HasColumnName("IDTendencia");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoTiposAccione>(entity =>
        {
            entity.HasKey(e => e.IdtipoAccion);

            entity.ToTable("ISO_TiposAcciones");

            entity.Property(e => e.IdtipoAccion).HasColumnName("IDTipoAccion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoTiposIncidencia>(entity =>
        {
            entity.HasKey(e => e.IdtipoIncidencia);

            entity.ToTable("ISO_TiposIncidencias");

            entity.Property(e => e.IdtipoIncidencia).HasColumnName("IDTipoIncidencia");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoDestinatarioId).HasColumnName("TipoDestinatarioID");

            entity.HasOne(d => d.TipoDestinatario).WithMany(p => p.IsoTiposIncidencia)
                .HasForeignKey(d => d.TipoDestinatarioId)
                .HasConstraintName("FK_ISO_TiposIncidencias_DocumentosGestionDestinatarios");
        });

        modelBuilder.Entity<IsoTiposMantenimiento>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("ISO_TiposMantenimientos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoTiposNorma>(entity =>
        {
            entity.HasKey(e => e.IdtipoNorma);

            entity.ToTable("ISO_TiposNormas");

            entity.Property(e => e.IdtipoNorma).HasColumnName("IDTipoNorma");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoTiposRegistro>(entity =>
        {
            entity.HasKey(e => e.IdtipoRegistro);

            entity.ToTable("ISO_TiposRegistros");

            entity.Property(e => e.IdtipoRegistro).HasColumnName("IDTipoRegistro");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoTiposVencimiento>(entity =>
        {
            entity.HasKey(e => e.IdtipoVencimiento);

            entity.ToTable("ISO_TiposVencimientos");

            entity.Property(e => e.IdtipoVencimiento).HasColumnName("IDTipoVencimiento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IsoVencimiento>(entity =>
        {
            entity.HasKey(e => e.Idvencimiento);

            entity.ToTable("ISO_Vencimientos");

            entity.Property(e => e.Idvencimiento).HasColumnName("IDVencimiento");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.DestinatarioId).HasColumnName("DestinatarioID");
            entity.Property(e => e.FechaProximaRevision).HasColumnType("datetime");
            entity.Property(e => e.FechaUltimaRevision).HasColumnType("datetime");
            entity.Property(e => e.FrecuenciaId).HasColumnName("FrecuenciaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoDestinatarioId).HasColumnName("TipoDestinatarioID");
            entity.Property(e => e.TipoVencimientoId).HasColumnName("TipoVencimientoID");

            entity.HasOne(d => d.Frecuencia).WithMany(p => p.IsoVencimientos)
                .HasForeignKey(d => d.FrecuenciaId)
                .HasConstraintName("FK_ISO_Vencimientos_ISO_Frecuencias");

            entity.HasOne(d => d.TipoDestinatario).WithMany(p => p.IsoVencimientos)
                .HasForeignKey(d => d.TipoDestinatarioId)
                .HasConstraintName("FK_ISO_Vencimientos_DocumentosGestionDestinatarios");

            entity.HasOne(d => d.TipoVencimiento).WithMany(p => p.IsoVencimientos)
                .HasForeignKey(d => d.TipoVencimientoId)
                .HasConstraintName("FK_ISO_Vencimientos_ISO_TiposVencimientos");
        });

        modelBuilder.Entity<IvaClase>(entity =>
        {
            entity.HasKey(e => e.IdivaClase);

            entity.Property(e => e.IdivaClase).HasColumnName("IDIvaClase");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IvaLibroClaveOperacion>(entity =>
        {
            entity.HasKey(e => e.IdclaveOperacion);

            entity.ToTable("IVA_Libro_ClaveOperacion");

            entity.Property(e => e.IdclaveOperacion).HasColumnName("IDClaveOperacion");
            entity.Property(e => e.ClaveOperacion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IvaLibroRepercutido>(entity =>
        {
            entity.HasKey(e => new { e.Clave, e.EjercicioId });

            entity.ToTable("IVA_LibroRepercutido");

            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Abono).HasDefaultValueSql("(0)");
            entity.Property(e => e.ActividadGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActividadTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AsientoAntiguo).HasColumnName("Asiento_Antiguo");
            entity.Property(e => e.Base)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.ClaveTipoFactura)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveTributariaOperacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Computable).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.Concepto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CtaConta)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CuentaIva)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_IVA");
            entity.Property(e => e.CuentaRet)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Ret");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DescripcionOperacion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FacturaRectificada)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.FechaOperacion).HasColumnType("datetime");
            entity.Property(e => e.InmuebleReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InmuebleSituacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IrpfImporte)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("IRPF_Importe");
            entity.Property(e => e.IrpfRetencion)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IRPF_Retencion");
            entity.Property(e => e.Iva)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("IVA");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Nif)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NIF");
            entity.Property(e => e.NifTipo)
                .HasDefaultValueSql("((1))")
                .HasColumnName("NIF_Tipo");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PorcentajeIva)
                .HasDefaultValueSql("(0)")
                .HasColumnName("Porcentaje_IVA");
            entity.Property(e => e.PorcentajeRe)
                .HasDefaultValueSql("(0)")
                .HasColumnName("Porcentaje_RE");
            entity.Property(e => e.PorcentajeRet)
                .HasDefaultValueSql("(0)")
                .HasColumnName("Porcentaje_Ret");
            entity.Property(e => e.Re)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("RE");
            entity.Property(e => e.RectificativaClave)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Retencion)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.SiiExportado).HasColumnName("SII_Exportado");
            entity.Property(e => e.TipoClaveId).HasColumnName("TipoClaveID");
            entity.Property(e => e.Total)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");

            entity.HasOne(d => d.CtaContaNavigation).WithMany(p => p.IvaLibroRepercutidos)
                .HasForeignKey(d => d.CtaConta)
                .HasConstraintName("FK_IVA_LibroRepercutido_PGC");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.IvaLibroRepercutidos)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_IVA_LibroRepercutido_Ejercicios");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.IvaLibroRepercutidos)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_IVA_LibroRepercutido_IVAGrupos");

            entity.HasOne(d => d.TipoClave).WithMany(p => p.IvaLibroRepercutidos)
                .HasForeignKey(d => d.TipoClaveId)
                .HasConstraintName("FK_IVA_LibroRepercutido_IVA_Libro_TipoClave");
        });

        modelBuilder.Entity<IvaLibroSoportado>(entity =>
        {
            entity.HasKey(e => new { e.Clave, e.EjercicioId });

            entity.ToTable("IVA_LibroSoportado");

            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.Abono).HasDefaultValueSql("(0)");
            entity.Property(e => e.ActividadGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ActividadTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AsientoAntiguo).HasColumnName("Asiento_Antiguo");
            entity.Property(e => e.Base)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.ClaveTipoFactura)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClaveTributariaOperacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Concepto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CtaConta)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CuentaIva)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_IVA");
            entity.Property(e => e.CuentaRet)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Ret");
            entity.Property(e => e.Deducible).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DescripcionOperacion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FacturaRectificada)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.FechaOperacion).HasColumnType("datetime");
            entity.Property(e => e.InmuebleReferenciaCatastral)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InmuebleSituacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IrpfImporte)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("IRPF_Importe");
            entity.Property(e => e.IrpfRetencion)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IRPF_Retencion");
            entity.Property(e => e.Iva)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("IVA");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Nif)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NIF");
            entity.Property(e => e.NifTipo)
                .HasDefaultValueSql("((1))")
                .HasColumnName("NIF_Tipo");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PorcentajeIva)
                .HasDefaultValueSql("(0)")
                .HasColumnName("Porcentaje_IVA");
            entity.Property(e => e.PorcentajeRe)
                .HasDefaultValueSql("(0)")
                .HasColumnName("Porcentaje_RE");
            entity.Property(e => e.PorcentajeRet)
                .HasDefaultValueSql("(0)")
                .HasColumnName("Porcentaje_Ret");
            entity.Property(e => e.Re)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money")
                .HasColumnName("RE");
            entity.Property(e => e.RectificativaClave)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Retencion)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.SiiExportado).HasColumnName("SII_Exportado");
            entity.Property(e => e.TipoClaveId).HasColumnName("TipoClaveID");
            entity.Property(e => e.Total)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");

            entity.HasOne(d => d.CtaContaNavigation).WithMany(p => p.IvaLibroSoportados)
                .HasForeignKey(d => d.CtaConta)
                .HasConstraintName("FK_IVA_LibroSoportado_PGC");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.IvaLibroSoportados)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_IVA_LibroSoportado_Ejercicios");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.IvaLibroSoportados)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_IVA_LibroSoportado_IVAGrupos");

            entity.HasOne(d => d.TipoClave).WithMany(p => p.IvaLibroSoportados)
                .HasForeignKey(d => d.TipoClaveId)
                .HasConstraintName("FK_IVA_LibroSoportado_IVA_Libro_TipoClave");
        });

        modelBuilder.Entity<IvaLibroTipoClave>(entity =>
        {
            entity.HasKey(e => e.IdtipoClave);

            entity.ToTable("IVA_Libro_TipoClave");

            entity.Property(e => e.IdtipoClave).HasColumnName("IDTipoClave");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TipoClave)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<IvaTipo>(entity =>
        {
            entity.HasKey(e => e.IdivaTipo);

            entity.Property(e => e.IdivaTipo).HasColumnName("IDIvaTipo");
            entity.Property(e => e.CtaIvaintracomunitarioRepercutido)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CtaIVAIntracomunitarioRepercutido");
            entity.Property(e => e.CtaIvaintracomunitarioSoportado)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CtaIVAIntracomunitarioSoportado");
            entity.Property(e => e.CtaIvainversionSujetoPasivoR)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CtaIVAInversionSujetoPasivo_R");
            entity.Property(e => e.CtaIvainversionSujetoPasivoS)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CtaIVAInversionSujetoPasivo_S");
            entity.Property(e => e.CtaIvarepercutido)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CtaIVARepercutido");
            entity.Property(e => e.CtaIvasoportado)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CtaIVASoportado");
            entity.Property(e => e.CtaRecargoRepercutido)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CtaRecargoSoportado)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.General).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.Recargo).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.IvaTipos)
                .HasForeignKey(d => d.IvaClaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IvaTipos_IvaClases");
        });

        modelBuilder.Entity<Ivagrupo>(entity =>
        {
            entity.HasKey(e => e.Idivagrupo);

            entity.ToTable("IVAGrupos");

            entity.Property(e => e.Idivagrupo).HasColumnName("IDIVAGrupo");
            entity.Property(e => e.CtaIvaDefault)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CtaIVA_Default");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IvaclaveId).HasColumnName("IVAClaveID");
            entity.Property(e => e.M347)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LabAnalisisTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("LAB_AnalisisTipos");

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Grupo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LabBoletine>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("LAB_Boletines", tb =>
                {
                    tb.HasTrigger("LAB_Boletines_Delete_CDBO");
                    tb.HasTrigger("MaxLAB_BoletinesAnno");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_LAB_Boletines").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AnalisisTipoId).HasColumnName("AnalisisTipoID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodificacionManual)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Codigo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Fprevista)
                .HasColumnType("datetime")
                .HasColumnName("FPrevista");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.RefCliente)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ResponsableRecepcionId).HasColumnName("ResponsableRecepcionID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.VisiblePuntoEntrega)
                .IsRequired()
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.Contacto).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_LAB_Boletines_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_LAB_Boletines_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.LabBoletineEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_LAB_Boletines_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_LAB_Boletines_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_Boletines_LAB_BoletinesEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.LabBoletine)
                .HasForeignKey<LabBoletine>(d => d.Idcdbo)
                .HasConstraintName("FK_LAB_Boletines_LAB_Boletines_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_LAB_Boletines_IVAGrupos");

            entity.HasOne(d => d.Prioridad).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.PrioridadId)
                .HasConstraintName("FK_LAB_Boletines_LAB_Prioridades");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_LAB_Boletines_Proyectos");

            entity.HasOne(d => d.ResponsableRecepcion).WithMany(p => p.LabBoletineResponsableRecepcions)
                .HasForeignKey(d => d.ResponsableRecepcionId)
                .HasConstraintName("FK_LAB_Boletines_Empleados1");

            entity.HasOne(d => d.Serie).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_Boletines_Series");

            entity.HasOne(d => d.Tarifa).WithMany(p => p.LabBoletines)
                .HasForeignKey(d => d.TarifaId)
                .HasConstraintName("FK_LAB_Boletines_Tarifas");
        });

        modelBuilder.Entity<LabBoletinesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("LAB_Boletines_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LabBoletinesDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("LAB_BoletinesDetalle", tb =>
                {
                    tb.HasTrigger("LAB_BoletinesDetalleAfterDelete");
                    tb.HasTrigger("LAB_BoletinesDetalle_Delete_CDBO");
                    tb.HasTrigger("LAB_UpdateStateBoletin");
                    tb.HasTrigger("LAB_UpdateStateBoletinDetalle");
                    tb.HasTrigger("UpdateLAB_BoletinesDetalleNumeroLinea");
                    tb.HasTrigger("tr_LAB_BoletinesDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_LAB_BoletinesDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_LAB_BoletinesDetalle_Update_NumLinea");
                    tb.HasTrigger("tr_LAB_BoletinesDetalle_ins");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_LAB_BoletinesDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_LAB_BoletinesDetalle_CabeceraID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.Acondicionamiento).HasMaxLength(200);
            entity.Property(e => e.ActaMuestreo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AnalisisTipoId).HasColumnName("AnalisisTipoID");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoMuestra)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DireccionRecogidaId).HasColumnName("DireccionRecogidaID");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.Envase).HasMaxLength(200);
            entity.Property(e => e.EnvaseMuestra)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Fprevista)
                .HasColumnType("datetime")
                .HasColumnName("FPrevista");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Frecogida)
                .HasColumnType("datetime")
                .HasColumnName("FRecogida");
            entity.Property(e => e.FrecogidaFin)
                .HasColumnType("datetime")
                .HasColumnName("FRecogidaFin");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IdentificacionMuestra)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Incertidumbre)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Legislacion)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LimiteCuantificacion).HasMaxLength(50);
            entity.Property(e => e.LimiteDeteccion).HasMaxLength(50);
            entity.Property(e => e.LimiteMaximo).HasMaxLength(50);
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Nenvases).HasColumnName("NEnvases");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NumeroManipulaciones).HasDefaultValueSql("((1))");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.ProcedimientoEnsayo).HasMaxLength(200);
            entity.Property(e => e.ProcedimientoEnsayoId).HasColumnName("ProcedimientoEnsayoID");
            entity.Property(e => e.ProcedimientoMuestreo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ProductoCompuestoId).HasColumnName("ProductoCompuestoID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.PuntoMuestreo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PuntoMuestreoSinac).HasColumnName("PuntoMuestreoSINAC");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResponsableMuestreo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ResponsableRecepcionId).HasColumnName("ResponsableRecepcionID");
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.TecnicaAnalisis).HasMaxLength(200);
            entity.Property(e => e.TempEntradaMuestra)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.Unidades).HasMaxLength(100);
            entity.Property(e => e.ValorParametrico).HasMaxLength(50);
            entity.Property(e => e.VisiblePuntoEntrega)
                .IsRequired()
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.AnalisisTipo).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.AnalisisTipoId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_AnalisisTipos");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_Boletines");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_BoletinesEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.LabBoletinesDetalle)
                .HasForeignKey<LabBoletinesDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_BoletinesDetalle_CDBO");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_IvaTipos");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.IvaclaseId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_IvaClases");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_LAB_BoletinesDetalle");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_Medidas");

            entity.HasOne(d => d.ProductoCompuesto).WithMany(p => p.LabBoletinesDetalleProductoCompuestos)
                .HasForeignKey(d => d.ProductoCompuestoId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_Productos1");

            entity.HasOne(d => d.Producto).WithMany(p => p.LabBoletinesDetalleProductos)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesDetalle_Productos");

            entity.HasOne(d => d.ResponsableRecepcion).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.ResponsableRecepcionId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_Empleados");

            entity.HasOne(d => d.Tarifa).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.TarifaId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_Tarifas");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.LabBoletinesDetalles)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<LabBoletinesDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("LAB_BoletinesDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LabBoletinesDetalleDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("LAB_BoletinesDetalle_DatosDinamicos");

            entity.HasIndex(e => e.LineaId, "IX_LAB_BoletinesDetalle_DatosDinamicos_LineaID");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Linea).WithMany(p => p.LabBoletinesDetalleDatosDinamicos)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_LAB_BoletinesDetalle_DatosDinamicos_LAB_BoletinesDetalle");
        });

        modelBuilder.Entity<LabBoletinesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("LAB_BoletinesEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LabBoletinesPool>(entity =>
        {
            entity.HasKey(e => e.Idpool);

            entity.ToTable("LAB_BoletinesPool");

            entity.Property(e => e.Idpool).HasColumnName("IDPool");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fprevista)
                .HasColumnType("datetime")
                .HasColumnName("FPrevista");
            entity.Property(e => e.IdentificacionMuestra)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaInterna)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.LabBoletinesPools)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesPool_LAB_Boletines");

            entity.HasOne(d => d.Estado).WithMany(p => p.LabBoletinesPools)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesPool_LAB_BoletinesEstados");
        });

        modelBuilder.Entity<LabBoletinesPoolDetalle>(entity =>
        {
            entity.HasKey(e => e.Idrelacion);

            entity.ToTable("LAB_BoletinesPoolDetalle");

            entity.Property(e => e.Idrelacion).HasColumnName("IDRelacion");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DetalleId).HasColumnName("DetalleID");
            entity.Property(e => e.PoolId).HasColumnName("PoolID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.LabBoletinesPoolDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesPoolDetalle_LAB_Boletines");

            entity.HasOne(d => d.Detalle).WithMany(p => p.LabBoletinesPoolDetalles)
                .HasForeignKey(d => d.DetalleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesPoolDetalle_LAB_BoletinesDetalle");

            entity.HasOne(d => d.Pool).WithMany(p => p.LabBoletinesPoolDetalles)
                .HasForeignKey(d => d.PoolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_BoletinesPoolDetalle_LAB_BoletinesPool");
        });

        modelBuilder.Entity<LabDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamico);

            entity.ToTable("LAB_DatosDinamicos");

            entity.Property(e => e.IddatoDinamico).HasColumnName("IDDatoDinamico");
            entity.Property(e => e.ComboListId).HasColumnName("ComboListID");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrTypeId).HasColumnName("UsrTypeID");

            entity.HasOne(d => d.UsrType).WithMany(p => p.LabDatosDinamicos)
                .HasForeignKey(d => d.UsrTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_DatosDinamicos_GS_UsrTypes");
        });

        modelBuilder.Entity<LabDatosDinamicosLineasDef>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoLineaDef);

            entity.ToTable("LAB_DatosDinamicos_LineasDef");

            entity.HasIndex(e => e.DatoDinamicoId, "IX_LAB_DatosDinamicos_LineasDef_DatoDinamicoID");

            entity.Property(e => e.IddatoDinamicoLineaDef).HasColumnName("IDDatoDinamicoLineaDef");
            entity.Property(e => e.DatoDinamicoId).HasColumnName("DatoDinamicoID");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.LabTipoLineaCategoryId).HasColumnName("LAB_TipoLineaCategoryID");
            entity.Property(e => e.LabTipoLineaId).HasColumnName("LAB_TipoLineaID");

            entity.HasOne(d => d.DatoDinamico).WithMany(p => p.LabDatosDinamicosLineasDefs)
                .HasForeignKey(d => d.DatoDinamicoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_DatosDinamicos_LineasDef_LAB_DatosDinamicos");

            entity.HasOne(d => d.LabTipoLinea).WithMany(p => p.LabDatosDinamicosLineasDefs)
                .HasForeignKey(d => d.LabTipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_DatosDinamicos_LineasDef_TiposLinea");
        });

        modelBuilder.Entity<LabMatrix>(entity =>
        {
            entity.HasKey(e => e.Idmatriz);

            entity.ToTable("LAB_Matrices", tb => tb.HasTrigger("tr_LAB_Matrices_ins"));

            entity.Property(e => e.Idmatriz).HasColumnName("IDMatriz");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.MatrizId).HasColumnName("MatrizID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Matriz).WithMany(p => p.InverseMatriz)
                .HasForeignKey(d => d.MatrizId)
                .HasConstraintName("FK_LAB_Matrices_LAB_Matrices");
        });

        modelBuilder.Entity<LabNormativasParametro>(entity =>
        {
            entity.HasKey(e => e.Idnormativa);

            entity.ToTable("LAB_NormativasParametros");

            entity.Property(e => e.Idnormativa).HasColumnName("IDNormativa");
            entity.Property(e => e.Documento)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.IdcdboNavigation).WithMany(p => p.LabNormativasParametros)
                .HasForeignKey(d => d.Idcdbo)
                .HasConstraintName("FK_LAB_NormativasParametros_ProductosCompuestos_CDBO");
        });

        modelBuilder.Entity<LabOa>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("LAB_OAs", tb =>
                {
                    tb.HasTrigger("Act_Num_LAB_OAs");
                    tb.HasTrigger("LAB_OAs_Delete_CDBO");
                    tb.HasTrigger("LAB_UpdateStateBoletinOrigen");
                    tb.HasTrigger("MaxLAB_OAsAnno");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_LAB_OAs").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Edicion).HasDefaultValueSql("((1))");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaInforme).HasColumnType("datetime");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FfinReal)
                .HasColumnType("datetime")
                .HasColumnName("FFinReal");
            entity.Property(e => e.FfinTeorico)
                .HasColumnType("datetime")
                .HasColumnName("FFinTeorico");
            entity.Property(e => e.FinicioReal)
                .HasColumnType("datetime")
                .HasColumnName("FInicioReal");
            entity.Property(e => e.FinicioTeorico)
                .HasColumnType("datetime")
                .HasColumnName("FInicioTeorico");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Frecogida)
                .HasColumnType("datetime")
                .HasColumnName("FRecogida");
            entity.Property(e => e.Fvalidacion)
                .HasColumnType("datetime")
                .HasColumnName("FValidacion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.LineaOrigenId).HasColumnName("LineaOrigenID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PoolOrigenId).HasColumnName("PoolOrigenID");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.RefCliente)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ResponsableId).HasColumnName("ResponsableID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Version).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_OAs_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.LabOaEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_LAB_OAs_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_LAB_OAs_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_OAs_LAB_OAsEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.LabOa)
                .HasForeignKey<LabOa>(d => d.Idcdbo)
                .HasConstraintName("FK_LAB_OAs_LAB_OAs_CDBO");

            entity.HasOne(d => d.Persona).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_OAs_Clientes");

            entity.HasOne(d => d.Prioridad).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.PrioridadId)
                .HasConstraintName("FK_LAB_OAs_LAB_Prioridades");

            entity.HasOne(d => d.Producto).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_LAB_OAs_Productos");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_LAB_OAs_Proyectos");

            entity.HasOne(d => d.Responsable).WithMany(p => p.LabOaResponsables)
                .HasForeignKey(d => d.ResponsableId)
                .HasConstraintName("FK_LAB_OAs_Empleados1");

            entity.HasOne(d => d.Serie).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_LAB_OAs_Series");

            entity.HasOne(d => d.Tarifa).WithMany(p => p.LabOas)
                .HasForeignKey(d => d.TarifaId)
                .HasConstraintName("FK_LAB_OAs_Tarifas");
        });

        modelBuilder.Entity<LabOasCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("LAB_OAs_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LabOasDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("LAB_OAsDetalle", tb =>
                {
                    tb.HasTrigger("LAB_OAsDetalleAfterDelete");
                    tb.HasTrigger("LAB_OAsDetalle_Delete_CDBO");
                    tb.HasTrigger("LAB_UpdateStateOA");
                    tb.HasTrigger("tr_LAB_OAsDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_LAB_OAsDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_LAB_OAsDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_LAB_OAsDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_LAB_OAsDetalle_CabeceraID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.Acondicionamiento).HasMaxLength(200);
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.Envase).HasMaxLength(200);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Fprevista)
                .HasColumnType("datetime")
                .HasColumnName("FPrevista");
            entity.Property(e => e.Freal)
                .HasColumnType("datetime")
                .HasColumnName("FReal");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImpresoOt).HasColumnName("Impreso_OT");
            entity.Property(e => e.Incertidumbre)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LimiteCuantificacion).HasMaxLength(50);
            entity.Property(e => e.LimiteDeteccion).HasMaxLength(50);
            entity.Property(e => e.LimiteMaximo).HasMaxLength(50);
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.ProcedimientoEnsayo).HasMaxLength(200);
            entity.Property(e => e.ProcedimientoEnsayoId).HasColumnName("ProcedimientoEnsayoID");
            entity.Property(e => e.ProductoCompuestoId).HasColumnName("ProductoCompuestoID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResponsableId).HasColumnName("ResponsableID");
            entity.Property(e => e.Resultado).HasMaxLength(75);
            entity.Property(e => e.Resultado2).HasMaxLength(75);
            entity.Property(e => e.Resultado3).HasMaxLength(75);
            entity.Property(e => e.Resultado4).HasMaxLength(75);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TecnicaAnalisis).HasMaxLength(200);
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.Unidades).HasMaxLength(100);
            entity.Property(e => e.ValorParametrico).HasMaxLength(50);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.LabOasDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_LAB_OAsDetalle_LAB_OAs");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.LabOasDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_LAB_OAsDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.LabOasDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_LAB_OAsDetalle_IvaTipos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_LAB_OAsDetalle_LAB_OAsDetalle");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.LabOasDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_OAsDetalle_MargenesTipos");

            entity.HasOne(d => d.ProcedimientoEnsayoNavigation).WithMany(p => p.LabOasDetalles)
                .HasForeignKey(d => d.ProcedimientoEnsayoId)
                .HasConstraintName("FK_LAB_OAsDetalle_LAB_ProcedimientosEnsayo");

            entity.HasOne(d => d.ProductoCompuesto).WithMany(p => p.LabOasDetalles)
                .HasForeignKey(d => d.ProductoCompuestoId)
                .HasConstraintName("FK_LAB_OAsDetalle_Productos");
        });

        modelBuilder.Entity<LabOasDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("LAB_OAsDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LabOasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("LAB_OAsEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LabOasLectura>(entity =>
        {
            entity.HasKey(e => e.Idlectura);

            entity.ToTable("LAB_OAsLecturas", tb => tb.HasTrigger("LAB_UpdateOAOrigen"));

            entity.Property(e => e.Idlectura).HasColumnName("IDLectura");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Freal)
                .HasColumnType("datetime")
                .HasColumnName("FReal");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.ResponsableId).HasColumnName("ResponsableID");
            entity.Property(e => e.Resultado)
                .IsRequired()
                .HasMaxLength(75);
            entity.Property(e => e.Resultado2).HasMaxLength(75);
            entity.Property(e => e.Resultado3).HasMaxLength(75);
            entity.Property(e => e.Resultado4).HasMaxLength(75);

            entity.HasOne(d => d.Estado).WithMany(p => p.LabOasLecturas)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LAB_OAsLecturas_LAB_OAsLecturasEstados");

            entity.HasOne(d => d.Linea).WithMany(p => p.LabOasLecturas)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_LAB_OAsLecturas_LAB_OAsDetalle");

            entity.HasOne(d => d.Responsable).WithMany(p => p.LabOasLecturas)
                .HasForeignKey(d => d.ResponsableId)
                .HasConstraintName("FK_LAB_OAsLecturas_Empleados");
        });

        modelBuilder.Entity<LabOasLecturasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("LAB_OAsLecturasEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LabPrioridade>(entity =>
        {
            entity.HasKey(e => e.Idprioridad);

            entity.ToTable("LAB_Prioridades");

            entity.Property(e => e.Idprioridad)
                .ValueGeneratedNever()
                .HasColumnName("IDPrioridad");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LabProcedimientosEnsayo>(entity =>
        {
            entity.HasKey(e => e.Idprocedimiento);

            entity.ToTable("LAB_ProcedimientosEnsayo");

            entity.Property(e => e.Idprocedimiento).HasColumnName("IDProcedimiento");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sinac).HasColumnName("SINAC");
        });

        modelBuilder.Entity<LiquidacionesComercial>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("LiquidacionesComercial", tb =>
                {
                    tb.HasTrigger("Act_Num_LiquidacionesComercial");
                    tb.HasTrigger("LiquidacionesComercial_Delete_CDBO");
                    tb.HasTrigger("MaxLiquidacionesComercialAnno");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_LiquidacionesComercial").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoDestinatarioId).HasColumnName("EmpleadoDestinatarioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.ProveedorDestinatarioId).HasColumnName("ProveedorDestinatarioID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.Comercial).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.ComercialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercial_Comerciales");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercial_Ejercicios");

            entity.HasOne(d => d.EmpleadoDestinatario).WithMany(p => p.LiquidacionesComercialEmpleadoDestinatarios)
                .HasForeignKey(d => d.EmpleadoDestinatarioId)
                .HasConstraintName("FK_LiquidacionesComercial_Empleados");

            entity.HasOne(d => d.Empleado).WithMany(p => p.LiquidacionesComercialEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_LiquidacionesComercial_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_LiquidacionesComercial_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercial_LiquidacionesComercialEstados");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_LiquidacionesComercial_FormasPago");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.LiquidacionesComercial)
                .HasForeignKey<LiquidacionesComercial>(d => d.Idcdbo)
                .HasConstraintName("FK_LiquidacionesComercial_LiquidacionesComercial_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_LiquidacionesComercial_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_LiquidacionesComercial_MediosPago");

            entity.HasOne(d => d.ProveedorDestinatario).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.ProveedorDestinatarioId)
                .HasConstraintName("FK_LiquidacionesComercial_Proveedores");

            entity.HasOne(d => d.Serie).WithMany(p => p.LiquidacionesComercials)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercial_Series");
        });

        modelBuilder.Entity<LiquidacionesComercialCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("LiquidacionesComercial_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LiquidacionesComercialDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("LiquidacionesComercialDetalle", tb =>
                {
                    tb.HasTrigger("LiquidacionesComercialDetalleAfterDelete");
                    tb.HasTrigger("LiquidacionesComercialDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateLiquidacionesComercialTotalesCabecera");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_LiquidacionesComercialDetalle").IsUnique();

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Biventa)
                .HasColumnType("money")
                .HasColumnName("BIVenta");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CabeceraOrigenId)
                .HasComment("Lo Informaremos en los Apartados, para coger informaci¾n de la Factura sin usar DGT")
                .HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercial");

            entity.HasOne(d => d.Comision).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_Comisiones");

            entity.HasOne(d => d.Estado).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercialEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.LiquidacionesComercialDetalle)
                .HasForeignKey<LiquidacionesComercialDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercialDetalle_CDBO");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_IvaTipos");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.IvaclaseId)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_IvaClases");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_LiquidacionesComercialDetalle");

            entity.HasOne(d => d.Operacion).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.OperacionId)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_ComisionesOperaciones");

            entity.HasOne(d => d.Producto).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LiquidacionesComercialDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.LiquidacionesComercialDetalles)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .HasConstraintName("FK_LiquidacionesComercialDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<LiquidacionesComercialDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("LiquidacionesComercialDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LiquidacionesComercialEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Listado>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Aeat).HasColumnName("AEAT");
            entity.Property(e => e.Daa).HasColumnName("DAA");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Disponible)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.IdListado)
                .ValueGeneratedOnAdd()
                .HasColumnName("idListado");
            entity.Property(e => e.Informe)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TagCriteria).HasDefaultValueSql("(1)");
        });

        modelBuilder.Entity<Localidade>(entity =>
        {
            entity.HasKey(e => e.Idlocalidad);

            entity.Property(e => e.Idlocalidad).HasColumnName("IDLocalidad");
            entity.Property(e => e.ComarcaId).HasColumnName("ComarcaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");

            entity.HasOne(d => d.Comarca).WithMany(p => p.Localidades)
                .HasForeignKey(d => d.ComarcaId)
                .HasConstraintName("FK_Localidades_Comarcas");

            entity.HasOne(d => d.Provincia).WithMany(p => p.Localidades)
                .HasForeignKey(d => d.ProvinciaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Localidades_Provincias");
        });

        modelBuilder.Entity<LogCompuesto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Log_Compuestos");

            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<LogDebug>(entity =>
        {
            entity.HasKey(e => e.Idlog).HasName("PK_Log");

            entity.ToTable("LogDebug");

            entity.Property(e => e.Idlog).HasColumnName("idlog");
            entity.Property(e => e.Texto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("texto");
            entity.Property(e => e.Valor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("valor");
        });

        modelBuilder.Entity<Lote>(entity =>
        {
            entity.HasKey(e => e.Idlote);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("CheckLoteMaestroNotDeleted");
                    tb.HasTrigger("GetNumeroLote");
                    tb.HasTrigger("Lotes_Delete_CDBO");
                    tb.HasTrigger("UpdatePrecioVentaProductoFromPrecioCompraLotes");
                    tb.HasTrigger("tr_Lotes_UpdateCaducidad");
                });

            entity.Property(e => e.Idlote).HasColumnName("IDLote");
            entity.Property(e => e.CantidadEnvase).HasDefaultValueSql("((1))");
            entity.Property(e => e.ClienteId).HasColumnName("ClienteID");
            entity.Property(e => e.DtoCompraUltima).HasColumnType("money");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fbaja)
                .HasColumnType("datetime")
                .HasColumnName("FBaja");
            entity.Property(e => e.FechaCaducidad).HasColumnType("datetime");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('#')");
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.Numero)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(0)");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.ReferenciaProveedor)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Cliente).WithMany(p => p.Lotes)
                .HasForeignKey(d => d.ClienteId)
                .HasConstraintName("FK_Lotes_Clientes");

            entity.HasOne(d => d.Estado).WithMany(p => p.Lotes)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Lotes_LotesEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithMany(p => p.Lotes)
                .HasForeignKey(d => d.Idcdbo)
                .HasConstraintName("FK_Lotes_Lotes_CDBO");

            entity.HasOne(d => d.Producto).WithMany(p => p.Lotes)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_Lotes_Productos");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.Lotes)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_Lotes_Proveedores");
        });

        modelBuilder.Entity<LotesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Lotes_CDBO");

            entity.HasIndex(e => e.Idcdbo, "IX_Lotes_CDBO").IsUnique();

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<LotesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LotesTraza>(entity =>
        {
            entity.HasKey(e => e.IdloteTraza);

            entity.ToTable("LotesTraza");

            entity.Property(e => e.IdloteTraza).HasColumnName("IDLoteTraza");
            entity.Property(e => e.LineaOsiddestino).HasColumnName("LineaOSIDDestino");
            entity.Property(e => e.LineaOsidorigen).HasColumnName("LineaOSIDOrigen");
            entity.Property(e => e.LoteIddestino).HasColumnName("LoteIDDestino");
            entity.Property(e => e.LoteIdorigen).HasColumnName("LoteIDOrigen");

            entity.HasOne(d => d.LineaOsiddestinoNavigation).WithMany(p => p.LotesTrazaLineaOsiddestinoNavigations)
                .HasForeignKey(d => d.LineaOsiddestino)
                .HasConstraintName("FK_LotesTraza_OrdenesSeriadasDetalle1");

            entity.HasOne(d => d.LineaOsidorigenNavigation).WithMany(p => p.LotesTrazaLineaOsidorigenNavigations)
                .HasForeignKey(d => d.LineaOsidorigen)
                .HasConstraintName("FK_LotesTraza_OrdenesSeriadasDetalle");

            entity.HasOne(d => d.LoteIddestinoNavigation).WithMany(p => p.LotesTrazaLoteIddestinoNavigations)
                .HasForeignKey(d => d.LoteIddestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LotesTraza_Lotes1");

            entity.HasOne(d => d.LoteIdorigenNavigation).WithMany(p => p.LotesTrazaLoteIdorigenNavigations)
                .HasForeignKey(d => d.LoteIdorigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LotesTraza_Lotes");
        });

        modelBuilder.Entity<Maquina>(entity =>
        {
            entity.HasKey(e => e.Idmaquina);

            entity.Property(e => e.Idmaquina).HasColumnName("IDMaquina");
            entity.Property(e => e.Caracteristicas).HasColumnType("text");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fabricante)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaBaja).HasColumnType("datetime");
            entity.Property(e => e.GrupoId).HasColumnName("GrupoID");
            entity.Property(e => e.Mantenedor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Marca)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Modelo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.Nserie)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NSerie");
            entity.Property(e => e.Potencia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PuestoId).HasColumnName("PuestoID");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");
            entity.Property(e => e.Voltaje)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Departamento).WithMany(p => p.Maquinas)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_Maquinas_Departamentos");

            entity.HasOne(d => d.Estado).WithMany(p => p.Maquinas)
                .HasForeignKey(d => d.EstadoId)
                .HasConstraintName("FK_Maquinas_MaquinasEstados");

            entity.HasOne(d => d.Grupo).WithMany(p => p.Maquinas)
                .HasForeignKey(d => d.GrupoId)
                .HasConstraintName("FK_Maquinas_MaquinasGrupos");

            entity.HasOne(d => d.Puesto).WithMany(p => p.Maquinas)
                .HasForeignKey(d => d.PuestoId)
                .HasConstraintName("FK_Maquinas_Puestos");

            entity.HasOne(d => d.Seccion).WithMany(p => p.Maquinas)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_Maquinas_Secciones");
        });

        modelBuilder.Entity<MaquinasConsumo>(entity =>
        {
            entity.HasKey(e => e.Idconsumo);

            entity.Property(e => e.Idconsumo).HasColumnName("IDConsumo");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FacturaCompraDetalleId).HasColumnName("FacturaCompraDetalleID");
            entity.Property(e => e.FacturaCompraId).HasColumnName("FacturaCompraID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaConsumo).HasColumnType("datetime");
            entity.Property(e => e.MaquinaId).HasColumnName("MaquinaID");
        });

        modelBuilder.Entity<MaquinasConsumosSaldo>(entity =>
        {
            entity.HasKey(e => e.Fecha);

            entity.ToTable(tb => tb.HasTrigger("MaquinasConsumosSaldos_Actualizar_TodasFechas"));

            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.NlitrosDeposito).HasColumnName("NLitrosDeposito");
            entity.Property(e => e.NlitrosTotales).HasColumnName("NLitrosTotales");
        });

        modelBuilder.Entity<MaquinasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MaquinasGrupo>(entity =>
        {
            entity.HasKey(e => e.Idgrupo);

            entity.Property(e => e.Idgrupo).HasColumnName("IDGrupo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.Idmarca);

            entity.Property(e => e.Idmarca).HasColumnName("IDMarca");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Imagen)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MargenesClafe>(entity =>
        {
            entity.HasKey(e => e.IdmargenClave);

            entity.Property(e => e.IdmargenClave).HasColumnName("IDMargenClave");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MargenesTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasComment("0: No se aplican Margenes; 1: Se aplica un margen sobre el P. de Compra; 2: se aplica un dto sobre el P. de Venta")
                .HasColumnName("IDTipo");
            entity.Property(e => e.Aplica)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('D')")
                .IsFixedLength();
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Medida>(entity =>
        {
            entity.HasKey(e => e.Idmedida);

            entity.Property(e => e.Idmedida).HasColumnName("IDMedida");
            entity.Property(e => e.NdimCorte).HasColumnName("NDimCorte");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MediosPago>(entity =>
        {
            entity.HasKey(e => e.IdmedioPago);

            entity.ToTable("MediosPago");

            entity.Property(e => e.IdmedioPago).HasColumnName("IDMedioPago");
            entity.Property(e => e.CargoCuentaId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("CargoCuentaID");
            entity.Property(e => e.CuentaEmpresaId).HasColumnName("CuentaEmpresaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CargoCuenta).WithMany(p => p.MediosPagos)
                .HasForeignKey(d => d.CargoCuentaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MediosPago_MediosPago_CargoCuenta");

            entity.HasOne(d => d.CuentaEmpresa).WithMany(p => p.MediosPagos)
                .HasForeignKey(d => d.CuentaEmpresaId)
                .HasConstraintName("FK_MediosPago_EmpresasCuentasBancarias");
        });

        modelBuilder.Entity<MediosPagoCargoCuentum>(entity =>
        {
            entity.HasKey(e => e.IdcuentaCargo);

            entity.ToTable("MediosPago_CargoCuenta");

            entity.Property(e => e.IdcuentaCargo)
                .ValueGeneratedNever()
                .HasComment("1 Sin Cuenta, 2 Cuenta Empresa, 3 Cuenta Destinatario")
                .HasColumnName("IDCuentaCargo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Mese>(entity =>
        {
            entity.HasKey(e => e.Idmes);

            entity.Property(e => e.Idmes)
                .ValueGeneratedNever()
                .HasColumnName("IDMes");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Modelo>(entity =>
        {
            entity.HasKey(e => e.Idmodelo);

            entity.Property(e => e.Idmodelo).HasColumnName("IDModelo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ModulosGestion>(entity =>
        {
            entity.HasKey(e => e.IdmoduloGestion);

            entity.ToTable("ModulosGestion", tb => tb.HasTrigger("ModulosGestion_SubModulos_Enabled"));

            entity.Property(e => e.IdmoduloGestion).HasColumnName("IDModuloGestion");
            entity.Property(e => e.ModuloGestionId).HasColumnName("ModuloGestionID");
            entity.Property(e => e.Nombre)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Precision).HasComment("N║ de decimales empleados en cada m¾dulo");

            entity.HasOne(d => d.ModuloGestion).WithMany(p => p.InverseModuloGestion)
                .HasForeignKey(d => d.ModuloGestionId)
                .HasConstraintName("FK_ModulosGestion_ModulosGestion");
        });

        modelBuilder.Entity<MovimientosAlmacen>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("MovimientosAlmacen", tb =>
                {
                    tb.HasTrigger("MaxMovimientoAlmacenAnno");
                    tb.HasTrigger("MovimientosAlmacen_UpdateFecha");
                    tb.HasTrigger("UpdateHora");
                });

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocumentoAlmacenTipoId).HasColumnName("DocumentoAlmacenTipoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.HasOne(d => d.DocumentoAlmacenTipo).WithMany(p => p.MovimientosAlmacens)
                .HasForeignKey(d => d.DocumentoAlmacenTipoId)
                .HasConstraintName("FK_MovimientosAlmacen_DocumentosAlmacenTipos");
        });

        modelBuilder.Entity<MovimientosAlmacenDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("MovimientosAlmacenDetalle", tb =>
                {
                    tb.HasTrigger("MovimientosAlmacenDetalle_Update_PrecioCompraMedio");
                    tb.HasTrigger("MovimientosAlmacenDetalle_Update_ProductosAlmacen");
                    tb.HasTrigger("MovimientosAlmacenDetalle_Update_Saldos");
                });

            entity.HasIndex(e => e.ProductoId, "IX_MovimientosAlmacenDetalle");

            entity.HasIndex(e => e.CabeceraId, "IX_MovimientosAlmacenDetalle_CabeceraID");

            entity.HasIndex(e => e.LoteId, "IX_MovimientosAlmacenDetalle_LoteID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoId)
                .HasComment("1 Entrada, 2 Salida, 3 Regularización")
                .HasColumnName("TipoID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.AlmacenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_Almacenes");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_MovimientosAlmacen");

            entity.HasOne(d => d.Lote).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_Lotes");

            entity.HasOne(d => d.Producto).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_Productos");

            entity.HasOne(d => d.Tipo).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_MovimientosAlmacenTipos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.UbicacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => d.UnidadMedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadesProducto).WithMany(p => p.MovimientosAlmacenDetalles)
                .HasForeignKey(d => new { d.ProductoId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenDetalle_UnidadesProducto");
        });

        modelBuilder.Entity<MovimientosAlmacenSaldo>(entity =>
        {
            entity.HasKey(e => new { e.Fecha, e.ProductoId, e.LoteId, e.AlmacenId, e.UbicacionId });

            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.MovimientosAlmacenSaldos)
                .HasForeignKey(d => d.AlmacenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenSaldos_Almacenes");

            entity.HasOne(d => d.Lote).WithMany(p => p.MovimientosAlmacenSaldos)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenSaldos_Lotes");

            entity.HasOne(d => d.Producto).WithMany(p => p.MovimientosAlmacenSaldos)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenSaldos_Productos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.MovimientosAlmacenSaldos)
                .HasForeignKey(d => d.UbicacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MovimientosAlmacenSaldos_AlmacenesUbicaciones");
        });

        modelBuilder.Entity<MovimientosAlmacenTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NicDiccionario>(entity =>
        {
            entity.HasKey(e => e.IdnicDiccionario);

            entity.ToTable("NIC_Diccionario");

            entity.Property(e => e.IdnicDiccionario).HasColumnName("IDNIC_Diccionario");
            entity.Property(e => e.CuentaDestino)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Destino");
            entity.Property(e => e.CuentaOrigen)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Origen");
            entity.Property(e => e.DescDestino)
                .HasMaxLength(255)
                .HasColumnName("Desc_Destino");
            entity.Property(e => e.DescOrigen)
                .HasMaxLength(255)
                .HasColumnName("Desc_Origen");
        });

        modelBuilder.Entity<NicPgcCuentasListado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NIC_PGC_CuentasListados");

            entity.Property(e => e.Cuenta)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Ope>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("OPEs", tb =>
                {
                    tb.HasTrigger("Act_Num_OPEs");
                    tb.HasTrigger("OPE_OnCreate");
                    tb.HasTrigger("OPEs_Delete_CDBO");
                    tb.HasTrigger("UpdateOPEFromDescuento");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_OPEs").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_OPEs_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaNecesidad).HasColumnType("datetime");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TotalCosteTeorico).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.Opes)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_OPEs_CTA_CentroCoste");

            entity.HasOne(d => d.Centro).WithMany(p => p.Opes)
                .HasForeignKey(d => d.CentroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEs_CentrosTrabajo");

            entity.HasOne(d => d.Contacto).WithMany(p => p.Opes)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_OPEs_ProveedoresContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Opes)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEs_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Opes)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_OPEs_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Opes)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_OPEs_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.Opes)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEs_OPEsEstados");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.Opes)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_OPEs_FormasPago");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Ope)
                .HasForeignKey<Ope>(d => d.Idcdbo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPEs_OPEs_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.Opes)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_OPEs_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.Opes)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_OPEs_MediosPago");

            entity.HasOne(d => d.PersonaDireccionEntrega).WithMany(p => p.OpePersonaDireccionEntregas)
                .HasForeignKey(d => d.PersonaDireccionEntregaId)
                .HasConstraintName("FK_OPEs_ProveedoresDirecciones1");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.OpePersonaDireccionFacturas)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_OPEs_ProveedoresDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.Opes)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEs_Proveedores");

            entity.HasOne(d => d.PortesTipo).WithMany(p => p.Opes)
                .HasForeignKey(d => d.PortesTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEs_PortesTipos");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.Opes)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_OPEs_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.Opes)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEs_Series");
        });

        modelBuilder.Entity<Operacione>(entity =>
        {
            entity.HasKey(e => e.Idoperacion);

            entity.HasIndex(e => new { e.AtributoId, e.ValorId }, "IX_Operaciones_Atributo_Valor").IsUnique();

            entity.Property(e => e.Idoperacion)
                .HasComment("")
                .HasColumnName("IDOperacion");
            entity.Property(e => e.AtributoId)
                .HasComment("Referencia a la tabla AtributosProducto")
                .HasColumnName("AtributoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.ValorId)
                .HasComment("Referencia a la tabla ValoresProductos")
                .HasColumnName("ValorID");

            entity.HasOne(d => d.Atributo).WithMany(p => p.Operaciones)
                .HasForeignKey(d => d.AtributoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Operaciones_OperacionesAtributos");

            entity.HasOne(d => d.Valor).WithMany(p => p.Operaciones)
                .HasForeignKey(d => d.ValorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Operaciones_ValoresProductos");
        });

        modelBuilder.Entity<OperacionesAtributo>(entity =>
        {
            entity.HasKey(e => e.AtributoId);

            entity.Property(e => e.AtributoId)
                .ValueGeneratedNever()
                .HasColumnName("AtributoID");

            entity.HasOne(d => d.Atributo).WithOne(p => p.OperacionesAtributo)
                .HasForeignKey<OperacionesAtributo>(d => d.AtributoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OperacionesAtributos_AtributosProductos");
        });

        modelBuilder.Entity<OpesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("OPEs_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<OpesDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("OPEsDetalle", tb =>
                {
                    tb.HasTrigger("OPEsDetalleAfterDelete");
                    tb.HasTrigger("OPEsDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateOPEsTotalesCabecera");
                    tb.HasTrigger("UpdateStateOPEs");
                    tb.HasTrigger("UpdateStateOPEsDetalle");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_OPEsDetalle").IsUnique();

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadPfreal).HasColumnName("CantidadPFReal");
            entity.Property(e => e.CantidadPfrechazada).HasColumnName("CantidadPFRechazada");
            entity.Property(e => e.CantidadPfteorica).HasColumnName("CantidadPFTeorica");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.MedidaPfid).HasColumnName("MedidaPFID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.OfDetalleId).HasColumnName("OfDetalleID");
            entity.Property(e => e.OfId).HasColumnName("OfID");
            entity.Property(e => e.OsDetalleId).HasColumnName("OsDetalleID");
            entity.Property(e => e.OsId).HasColumnName("OsID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProductoPfid).HasColumnName("ProductoPFID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");
            entity.Property(e => e.UnidadMedidaPfid).HasColumnName("UnidadMedidaPFID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_OPEsDetalle_OPEs");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_OPEsDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_OPEsDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsDetalle_OPEsEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.OpesDetalle)
                .HasForeignKey<OpesDetalle>(d => d.Idcdbo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPEsDetalle_OPEsDetalle_CDBO");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_OPEsDetalle_IvaTipos");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.IvaclaseId)
                .HasConstraintName("FK_OPEsDetalle_IvaClases");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_OPEsDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_OPEsDetalle_OPEsDetalle");

            entity.HasOne(d => d.Lote).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_OPEsDetalle_Lotes");

            entity.HasOne(d => d.Medida).WithMany(p => p.OpesDetalleMedida)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_OPEsDetalle_Medidas");

            entity.HasOne(d => d.MedidaPf).WithMany(p => p.OpesDetalleMedidaPfs)
                .HasForeignKey(d => d.MedidaPfid)
                .HasConstraintName("FK_OPEsDetalle_Medidas1");

            entity.HasOne(d => d.Of).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.OfId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPEsDetalle_OrdenesFabricacion");

            entity.HasOne(d => d.Os).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.OsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPEsDetalle_OrdenesSeriadas");

            entity.HasOne(d => d.Producto).WithMany(p => p.OpesDetalleProductos)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsDetalle_Productos");

            entity.HasOne(d => d.ProductoPf).WithMany(p => p.OpesDetalleProductoPfs)
                .HasForeignKey(d => d.ProductoPfid)
                .HasConstraintName("FK_OPEsDetalle_Productos1");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.OpesDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.OpesDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_OPEsDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.OpesDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_OPEsDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.OpesDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_OPEsDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.OpesDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_OPEsDetalle_UnidadesMedida_Z");

            entity.HasOne(d => d.UnidadMedidaPf).WithMany(p => p.OpesDetalleUnidadMedidaPfs)
                .HasForeignKey(d => d.UnidadMedidaPfid)
                .HasConstraintName("FK_OPEsDetalle_UnidadesMedida1");
        });

        modelBuilder.Entity<OpesDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("OPEsDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<OpesEnvioMaterial>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OPEsEnvioMaterial");

            entity.Property(e => e.AlmacenDestinoId).HasColumnName("AlmacenDestinoID");
            entity.Property(e => e.AlmacenOrigenId).HasColumnName("AlmacenOrigenID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UbicacionDestinoId).HasColumnName("UbicacionDestinoID");
            entity.Property(e => e.UbicacionOrigenId).HasColumnName("UbicacionOrigenID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.AlmacenDestino).WithMany()
                .HasForeignKey(d => d.AlmacenDestinoId)
                .HasConstraintName("FK_OPEsEnvioMaterial_Almacenes1");

            entity.HasOne(d => d.AlmacenOrigen).WithMany()
                .HasForeignKey(d => d.AlmacenOrigenId)
                .HasConstraintName("FK_OPEsEnvioMaterial_Almacenes");

            entity.HasOne(d => d.Lote).WithMany()
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsEnvioMaterial_Lotes");

            entity.HasOne(d => d.Medida).WithMany()
                .HasForeignKey(d => d.MedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsEnvioMaterial_Medidas");

            entity.HasOne(d => d.Producto).WithMany()
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsEnvioMaterial_Productos");

            entity.HasOne(d => d.UbicacionDestino).WithMany()
                .HasForeignKey(d => d.UbicacionDestinoId)
                .HasConstraintName("FK_OPEsEnvioMaterial_AlmacenesUbicaciones1");

            entity.HasOne(d => d.UbicacionOrigen).WithMany()
                .HasForeignKey(d => d.UbicacionOrigenId)
                .HasConstraintName("FK_OPEsEnvioMaterial_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadMedida).WithMany()
                .HasForeignKey(d => d.UnidadMedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPEsEnvioMaterial_UnidadesMedida");
        });

        modelBuilder.Entity<OpesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("OPEsEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrdenesFabricacion>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("OrdenesFabricacion", tb =>
                {
                    tb.HasTrigger("tr_OrdenesFabricacion_Insert");
                    tb.HasTrigger("tr_OrdenesFabricacion_Update");
                    tb.HasTrigger("tr_OrdenesFabricacion_ins");
                });

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_OrdenesFabricacion_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoGestionOrigenId).HasColumnName("DocumentoGestionOrigenID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaNecesidad).HasColumnType("datetime");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaOrigenId).HasColumnName("LineaOrigenID");
            entity.Property(e => e.MargenReal).HasColumnType("money");
            entity.Property(e => e.MargenTeorico).HasColumnType("money");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.OrigenId).HasColumnName("OrigenID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PlanificacionOrigenId).HasColumnName("PlanificacionOrigenID");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TotalCosteReal).HasColumnType("money");
            entity.Property(e => e.TotalCosteTeorico).HasColumnType("money");
            entity.Property(e => e.TotalVentaReal).HasColumnType("money");
            entity.Property(e => e.TotalVentaTeorico).HasColumnType("money");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_OrdenesFabricacion_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.OrdenesFabricacionEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_OrdenesFabricacion_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.OrdenesFabricacionEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_OrdenesFabricacion_EmpleadosResponsable");

            entity.HasOne(d => d.Empresa).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_OrdenesFabricacion_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionEstados");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_OrdenesFabricacion_IVAGrupos");

            entity.HasOne(d => d.Origen).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.OrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionOrigenes");

            entity.HasOne(d => d.Persona).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_OrdenesFabricacion_Clientes");

            entity.HasOne(d => d.Prioridad).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.PrioridadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionPrioridades");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_OrdenesFabricacion_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_OrdenesFabricacion_Series");

            entity.HasOne(d => d.Tipo).WithMany(p => p.OrdenesFabricacions)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacion_OrdenesFabricacionTipos");
        });

        modelBuilder.Entity<OrdenesFabricacionDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("OrdenesFabricacion_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.OrdenesFabricacionDatosDinamicos)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_OrdenesFabricacion_DatosDinamicos_OrdenesFabricacion");

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.OrdenesFabricacionDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacion_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");
        });

        modelBuilder.Entity<OrdenesFabricacionDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("OrdenesFabricacionDetalle", tb =>
                {
                    tb.HasTrigger("OFD_BorrarDocumentosGestionTraspasos");
                    tb.HasTrigger("OFD_BorrarPartes");
                    tb.HasTrigger("OFD_CalcularTotalesCabecera");
                    tb.HasTrigger("OFD_CalcularTotalesLinea");
                    tb.HasTrigger("OFD_UpdatePropuestaCompra");
                    tb.HasTrigger("OFDetalle_InformarOperacionCualificacion");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsOrdenesFabricacionDetalle");
                });

            entity.HasIndex(e => e.CabeceraId, "IX_OrdenesFabricacionDetalle_CabeceraID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.CualificacionId).HasColumnName("CualificacionID");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MargenReal).HasColumnType("money");
            entity.Property(e => e.MargenTeorico).HasColumnType("money");
            entity.Property(e => e.MargenTipoIdreal).HasColumnName("MargenTipoIDReal");
            entity.Property(e => e.MargenTipoIdteorico).HasColumnName("MargenTipoIDTeorico");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.TotalCosteReal).HasColumnType("money");
            entity.Property(e => e.TotalCosteTeorico).HasColumnType("money");
            entity.Property(e => e.TotalVentaReal).HasColumnType("money");
            entity.Property(e => e.TotalVentaTeorico).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_OrdenesFabricacion");

            entity.HasOne(d => d.Estado).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_OrdenesFabricacionEstados");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_IVAGrupos");

            entity.HasOne(d => d.MargenTipoIdrealNavigation).WithMany(p => p.OrdenesFabricacionDetalleMargenTipoIdrealNavigations)
                .HasForeignKey(d => d.MargenTipoIdreal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_MargenesTipos1");

            entity.HasOne(d => d.MargenTipoIdteoricoNavigation).WithMany(p => p.OrdenesFabricacionDetalleMargenTipoIdteoricoNavigations)
                .HasForeignKey(d => d.MargenTipoIdteorico)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.OrdenesFabricacionDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_Productos");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.OrdenesFabricacionDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.OrdenesFabricacionDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.OrdenesFabricacionDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.OrdenesFabricacionDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_OrdenesFabricacionDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<OrdenesFabricacionDetalleEmpleado>(entity =>
        {
            entity.HasKey(e => e.Idofde);

            entity.Property(e => e.Idofde).HasColumnName("IDOFDE");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.PuestoId).HasColumnName("PuestoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.OrdenesFabricacionDetalleEmpleados)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_OrdenesFabricacion");

            entity.HasOne(d => d.Empleado).WithMany(p => p.OrdenesFabricacionDetalleEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_Empleados");

            entity.HasOne(d => d.Linea).WithMany(p => p.OrdenesFabricacionDetalleEmpleados)
                .HasForeignKey(d => d.LineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_OrdenesFabricacionDetalle");

            entity.HasOne(d => d.Puesto).WithMany(p => p.OrdenesFabricacionDetalleEmpleados)
                .HasForeignKey(d => d.PuestoId)
                .HasConstraintName("FK_OrdenesFabricacionDetalleEmpleados_Puestos");
        });

        modelBuilder.Entity<OrdenesFabricacionEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado).HasName("PK_OrdenesEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.CantidadPendiente).HasDefaultValueSql("(0)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartesAllowModify).HasColumnName("Partes_AllowModify");
        });

        modelBuilder.Entity<OrdenesFabricacionOrigene>(entity =>
        {
            entity.HasKey(e => e.Idorigen).HasName("PK_OrdenFabricacionOrigen");

            entity.Property(e => e.Idorigen)
                .ValueGeneratedNever()
                .HasColumnName("IDOrigen");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrdenesFabricacionPrioridade>(entity =>
        {
            entity.HasKey(e => e.Idprioridad).HasName("PK_OrdenesPrioridades");

            entity.Property(e => e.Idprioridad)
                .ValueGeneratedNever()
                .HasColumnName("IDPrioridad");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrdenesFabricacionTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo).HasName("PK_OrdenesTipos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrdenesSeriada>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("OS_OnCreate");
                    tb.HasTrigger("OS_UpdateCantidadPFEntradaFases");
                    tb.HasTrigger("OS_UpdateFechaFinReal");
                    tb.HasTrigger("OS_UpdateToStateParcialmenteTerminada");
                    tb.HasTrigger("tr_OrdenesSeriadas_ins");
                });

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_OrdenesSeriadas_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ConjuntoId).HasColumnName("ConjuntoID");
            entity.Property(e => e.DocumentoGestionOrigenId).HasColumnName("DocumentoGestionOrigenID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaNecesidad).HasColumnType("datetime");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaOrigenId).HasColumnName("LineaOrigenID");
            entity.Property(e => e.MargenReal).HasColumnType("money");
            entity.Property(e => e.MargenTeorico).HasColumnType("money");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.OrigenId).HasColumnName("OrigenID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.RutaId).HasColumnName("RutaID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TotalCosteReal).HasColumnType("money");
            entity.Property(e => e.TotalCosteTeorico).HasColumnType("money");
            entity.Property(e => e.TotalVentaReal).HasColumnType("money");
            entity.Property(e => e.TotalVentaTeorico).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Conjunto).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.ConjuntoId)
                .HasConstraintName("FK_OrdenesSeriadas_ProductosConjuntos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_OrdenesSeriadas_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.OrdenesSeriadaEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_OrdenesSeriadas_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.OrdenesSeriadaEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_OrdenesSeriadas_EmpleadosResponsable");

            entity.HasOne(d => d.Empresa).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_OrdenesSeriadas_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadas_OrdenesSeriadasEstados");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_OrdenesSeriadas_IVAGrupos");

            entity.HasOne(d => d.Medida).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_OrdenesSeriadas_Medidas");

            entity.HasOne(d => d.Origen).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.OrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadas_OrdenesFabricacionOrigenes");

            entity.HasOne(d => d.Persona).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_OrdenesSeriadas_Clientes");

            entity.HasOne(d => d.Prioridad).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.PrioridadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadas_OrdenesFabricacionPrioridades");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_OrdenesSeriadas_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_OrdenesSeriadas_Series");

            entity.HasOne(d => d.Tipo).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadas_OrdenesFabricacionTipos");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.OrdenesSeriada)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_OrdenesSeriadas_UnidadesMedida");
        });

        modelBuilder.Entity<OrdenesSeriadasDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("OrdenesSeriadas_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.OrdenesSeriadasDatosDinamicos)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_OrdenesSeriadas_DatosDinamicos_OrdenesSeriadas");

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.OrdenesSeriadasDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadas_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");
        });

        modelBuilder.Entity<OrdenesSeriadasDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("OrdenesSeriadasDetalle", tb =>
                {
                    tb.HasTrigger("OSD_BorrarPartes");
                    tb.HasTrigger("OSD_CalcularTotalesCabecera");
                    tb.HasTrigger("OSD_CalcularTotalesLinea");
                    tb.HasTrigger("OSD_Fases_UpdateOrden");
                    tb.HasTrigger("OSD_UpdateCantidadesCabecera");
                    tb.HasTrigger("OSD_UpdateFechasFases");
                    tb.HasTrigger("OSD_UpdateLotesTraza");
                    tb.HasTrigger("OSD_UpdatePropuestaCompra");
                });

            entity.HasIndex(e => new { e.Idlinea, e.LoteId }, "IX_OrdenesSeriadasDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_OrdenesSeriadasDetalle_CabeceraID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadPfentrada).HasColumnName("CantidadPFEntrada");
            entity.Property(e => e.CantidadPfrechazada).HasColumnName("CantidadPFRechazada");
            entity.Property(e => e.CantidadPfterminada).HasColumnName("CantidadPFTerminada");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.CualificacionId).HasColumnName("CualificacionID");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.FactorSolapamiento).HasColumnType("money");
            entity.Property(e => e.FaseId)
                .HasComment("Para lineas Fase, informamos su Fase padre.")
                .HasColumnName("FaseID");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId)
                .HasComment("Para lineas NO Fase, informamos su Fase.")
                .HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MargenReal).HasColumnType("money");
            entity.Property(e => e.MargenTeorico).HasColumnType("money");
            entity.Property(e => e.MargenTipoIdreal).HasColumnName("MargenTipoIDReal");
            entity.Property(e => e.MargenTipoIdteorico).HasColumnName("MargenTipoIDTeorico");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.MedidaPfid).HasColumnName("MedidaPFID");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.TotalCosteReal).HasColumnType("money");
            entity.Property(e => e.TotalCosteTeorico).HasColumnType("money");
            entity.Property(e => e.TotalVentaReal).HasColumnType("money");
            entity.Property(e => e.TotalVentaTeorico).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaPfid).HasColumnName("UnidadMedidaPFID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_OrdenesSeriadas");

            entity.HasOne(d => d.Centro).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.CentroId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_CentrosTrabajo");

            entity.HasOne(d => d.Cualificacion).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.CualificacionId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_Cualificaciones");

            entity.HasOne(d => d.Estado).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_OrdenesSeriadasEstados");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_OrdenesSeriadasDetalle");

            entity.HasOne(d => d.Lote).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_Lotes");

            entity.HasOne(d => d.MargenTipoIdrealNavigation).WithMany(p => p.OrdenesSeriadasDetalleMargenTipoIdrealNavigations)
                .HasForeignKey(d => d.MargenTipoIdreal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_MargenesTipos1");

            entity.HasOne(d => d.MargenTipoIdteoricoNavigation).WithMany(p => p.OrdenesSeriadasDetalleMargenTipoIdteoricoNavigations)
                .HasForeignKey(d => d.MargenTipoIdteorico)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.OrdenesSeriadasDetalleMedida)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_Medidas");

            entity.HasOne(d => d.MedidaPf).WithMany(p => p.OrdenesSeriadasDetalleMedidaPfs)
                .HasForeignKey(d => d.MedidaPfid)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_Medidas1");

            entity.HasOne(d => d.Operacion).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.OperacionId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_Operaciones");

            entity.HasOne(d => d.Producto).WithMany(p => p.OrdenesSeriadasDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_Productos");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.OrdenesSeriadasDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaPf).WithMany(p => p.OrdenesSeriadasDetalleUnidadMedidaPfs)
                .HasForeignKey(d => d.UnidadMedidaPfid)
                .HasConstraintName("FK_OrdenesSeriadasDetalle_UnidadesMedida1");
        });

        modelBuilder.Entity<OrdenesSeriadasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartesAllowModify).HasColumnName("Partes_AllowModify");
        });

        modelBuilder.Entity<OrdenesSeriadasExplosione>(entity =>
        {
            entity.HasKey(e => e.Idexplosion);

            entity.ToTable(tb => tb.HasTrigger("T_OSE_Create_OS"));

            entity.Property(e => e.Idexplosion).HasColumnName("IDExplosion");
            entity.Property(e => e.AmeTreeLevel)
                .HasComment("AuxMakeExplosion -> Auxiliar para la construcción del árbol de explosión")
                .HasColumnName("AME_TreeLevel");
            entity.Property(e => e.ConjuntoId).HasColumnName("ConjuntoID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.ExplosionId).HasColumnName("ExplosionID");
            entity.Property(e => e.ExplosionSessionId)
                .HasComment("Columna auxiliar para construir el árbol -> Apunta al primer IDExplosion de cada Explosion. Parecido a un identificador de sesión.")
                .HasColumnName("ExplosionSessionID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Idconjunto).HasColumnName("IDConjunto");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.OrdenSeriadaId).HasColumnName("OrdenSeriadaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RutaId).HasColumnName("RutaID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.OrdenesSeriadasExplosiones)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_OrdenesSeriadasExplosiones_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.OrdenesSeriadasExplosiones)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_OrdenesSeriadasExplosiones_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.OrdenesSeriadasExplosiones)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_OrdenesSeriadasExplosiones_ConfiguracionEmpresa");

            entity.HasOne(d => d.Explosion).WithMany(p => p.InverseExplosion)
                .HasForeignKey(d => d.ExplosionId)
                .HasConstraintName("FK_OrdenesSeriadasExplosiones_OrdenesSeriadasExplosiones");

            entity.HasOne(d => d.ExplosionSession).WithMany(p => p.InverseExplosionSession)
                .HasForeignKey(d => d.ExplosionSessionId)
                .HasConstraintName("FK_OrdenesSeriadasExplosiones_OrdenesSeriadasExplosiones1");

            entity.HasOne(d => d.Serie).WithMany(p => p.OrdenesSeriadasExplosiones)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_OrdenesSeriadasExplosiones_Series");
        });

        modelBuilder.Entity<Paise>(entity =>
        {
            entity.HasKey(e => e.Idpais);

            entity.Property(e => e.Idpais).HasColumnName("IDPais");
            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ExentoIva).HasColumnName("ExentoIVA");
            entity.Property(e => e.Iso31611Alfa2)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ISO_3161_1_Alfa_2");
            entity.Property(e => e.Iso31611Alfa3)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ISO_3161_1_Alfa_3");
            entity.Property(e => e.Iso31611Num3).HasColumnName("ISO_3161_1_Num_3");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(45);
            entity.Property(e => e.NombrePostal)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.PrefijoTel)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Ue).HasColumnName("UE");
        });

        modelBuilder.Entity<Parte>(entity =>
        {
            entity.HasKey(e => e.Idparte);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("ActilizarFechaOrden");
                    tb.HasTrigger("OF_Partes_UbicarAlmacenVirtual");
                    tb.HasTrigger("Partes_Delete_CDBO");
                    tb.HasTrigger("Partes_GenerarParteMaterial_Explosion");
                    tb.HasTrigger("Partes_GenerarPartePF");
                    tb.HasTrigger("Partes_UpdateLineaWhenOperacionChanged");
                    tb.HasTrigger("tr_Partes_CalcularOFD");
                    tb.HasTrigger("tr_Partes_UpdateRelatedOPE");
                    tb.HasTrigger("tr_Partes_del");
                    tb.HasTrigger("tr_Partes_ins");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_Partes").IsUnique();

            entity.Property(e => e.Idparte).HasColumnName("IDParte");
            entity.Property(e => e.AceptadoPorEmpleadoId).HasColumnName("AceptadoPorEmpleadoID");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.CantidadPf)
                .HasComment("")
                .HasColumnName("CantidadPF");
            entity.Property(e => e.CantidadPfrechazada).HasColumnName("CantidadPFRechazada");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CentroId).HasColumnName("CentroID");
            entity.Property(e => e.CentroTipoId).HasColumnName("CentroTipoID");
            entity.Property(e => e.CualificacionId).HasColumnName("CualificacionID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaImputacion)
                .HasDefaultValueSql("(convert(varchar,getdate(),103))")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaParte)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MaquinaId).HasColumnName("MaquinaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.MedidaPfid).HasColumnName("MedidaPFID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.OfDetalleId).HasColumnName("OfDetalleID");
            entity.Property(e => e.OfId).HasColumnName("OfID");
            entity.Property(e => e.OfTipoId).HasColumnName("OfTipoID");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.OsDetalleId).HasColumnName("OsDetalleID");
            entity.Property(e => e.OsId).HasColumnName("OsID");
            entity.Property(e => e.ParteTipoId).HasColumnName("ParteTipoID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");
            entity.Property(e => e.UnidadMedidaPfid).HasColumnName("UnidadMedidaPFID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.Partes)
                .HasForeignKey(d => d.AlmacenId)
                .HasConstraintName("FK_Partes_Almacenes");

            entity.HasOne(d => d.Centro).WithMany(p => p.Partes)
                .HasForeignKey(d => d.CentroId)
                .HasConstraintName("FK_Partes_CentrosTrabajo");

            entity.HasOne(d => d.CentroTipo).WithMany(p => p.Partes)
                .HasForeignKey(d => d.CentroTipoId)
                .HasConstraintName("FK_Partes_CentrosTipos");

            entity.HasOne(d => d.Cualificacion).WithMany(p => p.Partes)
                .HasForeignKey(d => d.CualificacionId)
                .HasConstraintName("FK_Partes_Cualificaciones");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Partes)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_Partes_Empleados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Parte)
                .HasForeignKey<Parte>(d => d.Idcdbo)
                .HasConstraintName("FK_Partes_Partes_CDBO");

            entity.HasOne(d => d.Lote).WithMany(p => p.Partes)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_Partes_Lotes");

            entity.HasOne(d => d.Maquina).WithMany(p => p.Partes)
                .HasForeignKey(d => d.MaquinaId)
                .HasConstraintName("FK_Partes_Maquinas");

            entity.HasOne(d => d.OfDetalle).WithMany(p => p.Partes)
                .HasForeignKey(d => d.OfDetalleId)
                .HasConstraintName("FK_Partes_OrdenesFabricacionDetalle");

            entity.HasOne(d => d.OfTipo).WithMany(p => p.Partes)
                .HasForeignKey(d => d.OfTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Partes_OrdenesFabricacionTipos");

            entity.HasOne(d => d.Operacion).WithMany(p => p.Partes)
                .HasForeignKey(d => d.OperacionId)
                .HasConstraintName("FK_Partes_Operaciones");

            entity.HasOne(d => d.OsDetalle).WithMany(p => p.Partes)
                .HasForeignKey(d => d.OsDetalleId)
                .HasConstraintName("FK_Partes_OrdenesSeriadasDetalle");

            entity.HasOne(d => d.ParteTipo).WithMany(p => p.Partes)
                .HasForeignKey(d => d.ParteTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Partes_PartesTipos");

            entity.HasOne(d => d.Producto).WithMany(p => p.Partes)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Partes_Productos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.Partes)
                .HasForeignKey(d => d.UbicacionId)
                .HasConstraintName("FK_Partes_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.ParteUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_Partes_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.ParteUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_Partes_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.ParteUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_Partes_UnidadesMedida_Z");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ParteUnidadesMedida)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .HasConstraintName("FK_Partes_UnidadesMedida1");

            entity.HasOne(d => d.UnidadesMedidumNavigation).WithMany(p => p.ParteUnidadesMedidumNavigations)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaPfid, d.MedidaPfid })
                .HasConstraintName("FK_Partes_UnidadesMedida");
        });

        modelBuilder.Entity<PartesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Partes_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PartesFormulario>(entity =>
        {
            entity.HasKey(e => e.IdparteFormulario);

            entity.Property(e => e.IdparteFormulario).HasColumnName("IDParteFormulario");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Formulario).WithMany(p => p.PartesFormularios)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartesFormularios_Formularios");
        });

        modelBuilder.Entity<PartesTipo>(entity =>
        {
            entity.HasKey(e => e.IdparteTipo).HasName("PK_PartesTipo");

            entity.Property(e => e.IdparteTipo)
                .ValueGeneratedNever()
                .HasColumnName("IDParteTipo");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");

            entity.HasOne(d => d.Formulario).WithMany(p => p.PartesTipos)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartesTipos_Formularios");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PartesTipos)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartesTipos_TiposLinea");

            entity.HasMany(d => d.Oftipos).WithMany(p => p.ParteTipos)
                .UsingEntity<Dictionary<string, object>>(
                    "PartesTiposOftipo",
                    r => r.HasOne<OrdenesFabricacionTipo>().WithMany()
                        .HasForeignKey("OftipoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PartesTiposOFTipos_OrdenesFabricacionTipos"),
                    l => l.HasOne<PartesTipo>().WithMany()
                        .HasForeignKey("ParteTipoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PartesTiposOFTipos_PartesTipos"),
                    j =>
                    {
                        j.HasKey("ParteTipoId", "OftipoId");
                        j.ToTable("PartesTiposOFTipos");
                        j.IndexerProperty<int>("ParteTipoId").HasColumnName("ParteTipoID");
                        j.IndexerProperty<int>("OftipoId").HasColumnName("OFTipoID");
                    });
        });

        modelBuilder.Entity<PedidosCompra>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("PedidosCompra", tb =>
                {
                    tb.HasTrigger("Act_Num_PedidosCompra");
                    tb.HasTrigger("MaxPedidoCompraAnno");
                    tb.HasTrigger("PedidosCompra_Delete_CDBO");
                    tb.HasTrigger("UpdatePedidoCompraFromDescuento");
                    tb.HasTrigger("UpdateStateAnuladoInDetailsCompra");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PedidosCompra_IDCDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_PedidosCompra_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PedidosCompra_CTA_CentroCoste");

            entity.HasOne(d => d.Contacto).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_PedidosCompra_ProveedoresContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_PedidosCompra_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_PedidosCompra_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_PedidosCompra_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompra_PedidosCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PedidosCompra)
                .HasForeignKey<PedidosCompra>(d => d.Idcdbo)
                .HasConstraintName("FK_PedidosCompra_PedidosCompra_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PedidosCompra_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_PedidosCompra_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_PedidosCompra_ProveedoresDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompra_Proveedores");

            entity.HasOne(d => d.PortesTipo).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.PortesTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompra_PortesTipos");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_PedidosCompra_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.PedidosCompras)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompra_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.PedidosCompras)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_PedidosCompra_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<PedidosCompraCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PedidosCompra_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PedidosCompraDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("PedidosCompraDetalle", tb =>
                {
                    tb.HasTrigger("PedidosCompraDetalleAfterDelete");
                    tb.HasTrigger("PedidosCompraDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsPedidosCompraDetalle");
                    tb.HasTrigger("UpdatePedidosCompraDetalleNumeroLinea");
                    tb.HasTrigger("UpdateStatePedidosCompra");
                    tb.HasTrigger("UpdateStatePedidosCompraDetalle");
                    tb.HasTrigger("tr_PedidosCompraDetalle_Actualizar_tProductos");
                    tb.HasTrigger("tr_PedidosCompraDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_PedidosCompraDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_PedidosCompraDetalle_UpdateTotalesCabecera");
                    tb.HasTrigger("tr_PedidosCompraDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PedidosCompraDetalle_CDBO").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_PedidosCompraDetalle_CabeceraID");

            entity.HasIndex(e => e.ProductoId, "IX_PedidosCompraDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PedidosCompraDetalle_PedidosCompra");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PedidosCompraDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_PedidosCompraDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompraDetalle_PedidosCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PedidosCompraDetalle)
                .HasForeignKey<PedidosCompraDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_PedidosCompraDetalle_PedidosCompraDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_PedidosCompraDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_PedidosCompraDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PedidosCompraDetalle_IVAGrupos");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompraDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_PedidosCompraDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompraDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PedidosCompraDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosCompraDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.PedidosCompraDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.PedidosCompraDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.PedidosCompraDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.PedidosCompraDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_PedidosCompraDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<PedidosCompraDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PedidosCompraDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PedidosCompraEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PedidosVentaCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PedidosVenta_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PedidosVentaDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("PedidosVenta_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PedidosVentaDatosDinamicos)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PedidosVenta_DatosDinamicos_PedidosVenta");

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.PedidosVentaDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVenta_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");
        });

        modelBuilder.Entity<PedidosVentaDescuentosGenerale>(entity =>
        {
            entity.HasKey(e => e.Iddescuento);

            entity.Property(e => e.Iddescuento).HasColumnName("IDDescuento");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PedidosVentaDescuentosGenerales)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PedidosVentaDescuentosGenerales_PedidosVenta");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.PedidosVentaDescuentosGenerales)
                .HasForeignKey(d => d.ProductoTipoId)
                .HasConstraintName("FK_PedidosVentaDescuentosGenerales_ProductosTipos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PedidosVentaDescuentosGenerales)
                .HasForeignKey(d => d.TipoLineaId)
                .HasConstraintName("FK_PedidosVentaDescuentosGenerales_TiposLinea");
        });

        modelBuilder.Entity<PedidosVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("PedidosVentaDetalle", tb =>
                {
                    tb.HasTrigger("PedidosVentaDetalleAfterDelete");
                    tb.HasTrigger("PedidosVentaDetalle_Delete_CDBO");
                    tb.HasTrigger("PedidosVentaDetalle_UpdateCoste");
                    tb.HasTrigger("UpdateCantidadServidaRelatedDocsPedidosVentaDetalle");
                    tb.HasTrigger("UpdatePedidosVentaTotalesCabecera");
                    tb.HasTrigger("UpdatePortesPedidosVenta");
                    tb.HasTrigger("UpdateStatePedidosVenta");
                    tb.HasTrigger("tr_PedidosVentaDetalle_Actualizar_tProductos");
                    tb.HasTrigger("tr_PedidosVentaDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_PedidosVentaDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_PedidosVentaDetalle_Update_NumLinea");
                    tb.HasTrigger("tr_PedidosVentaDetalle_Update_StateDetalles");
                });

            entity.HasIndex(e => e.CabeceraId, "IX_PedidosVentaDetalle_CabeceraID");

            entity.HasIndex(e => e.Idcdbo, "IX_PedidosVentaDetalle_IDCDBO").IsUnique();

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_PedidosVentaDetalle_LineaID_NumLinea");

            entity.HasIndex(e => e.ProductoId, "IX_PedidosVentaDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DescuentoGeneral).HasDefaultValueSql("((0))");
            entity.Property(e => e.DtoCoste).HasDefaultValueSql("((0))");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IncluirMaterial)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_Material");
            entity.Property(e => e.IncluirMo)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_MO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasDefaultValueSql("((0))");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PedidosVentaDetalle_PedidosVenta");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PedidosVentaDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_PedidosVentaDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVentaDetalle_PedidosVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PedidosVentaDetalle)
                .HasForeignKey<PedidosVentaDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_PedidosVentaDetalle_PedidosVentaDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_PedidosVentaDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_PedidosVentaDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PedidosVentaDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_PedidosVentaDetalle_PedidosVentaDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_PedidosVentaDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVentaDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_PedidosVentaDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVentaDetalle_Productos");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_PedidosVentaDetalle_Proveedores");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PedidosVentaDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVentaDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.PedidosVentaDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.PedidosVentaDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.PedidosVentaDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.PedidosVentaDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_PedidosVentaDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<PedidosVentaDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PedidosVentaDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PedidosVentaEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StockPendienteServirEnFicha).HasColumnName("StockPendienteServir_EnFicha");
        });

        modelBuilder.Entity<PedidosVentum>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Act_Num_PedidosVenta");
                    tb.HasTrigger("MaxPedidoVentaAnno");
                    tb.HasTrigger("PasarACliente");
                    tb.HasTrigger("PedidosVenta_Delete_CDBO");
                    tb.HasTrigger("UpdatePedidoVentaFromDescuento");
                    tb.HasTrigger("UpdateStateAnuladoInDetailsVenta");
                    tb.HasTrigger("tr_PedidosVenta_ins");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PedidosVenta").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_PedidosVenta_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CalculoPortesTipo).HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Tipo).HasDefaultValueSql("(0)");
            entity.Property(e => e.TipoId1).HasColumnName("TipoID_1");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PedidosVenta_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_PedidosVenta_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_PedidosVenta_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_PedidosVenta_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_PedidosVenta_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.PedidosVentumEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_PedidosVenta_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.PedidosVentumEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_PedidosVenta_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_PedidosVenta_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVenta_PedidosVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PedidosVentum)
                .HasForeignKey<PedidosVentum>(d => d.Idcdbo)
                .HasConstraintName("FK_PedidosVenta_PedidosVenta_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PedidosVenta_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_PedidosVenta_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_PedidosVenta_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVenta_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_PedidosVenta_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.PedidosVenta)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PedidosVenta_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.PedidosVenta)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_PedidosVenta_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<Periodo>(entity =>
        {
            entity.HasKey(e => e.IdPeriodo);

            entity.Property(e => e.IdPeriodo).HasColumnName("idPeriodo");
            entity.Property(e => e.Cerrado)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PeriodoTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PeriodoTipoID");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Periodos)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_Periodos_Ejercicios");

            entity.HasOne(d => d.PeriodoTipo).WithMany(p => p.Periodos)
                .HasForeignKey(d => d.PeriodoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Periodos_PeriodosTipos");
        });

        modelBuilder.Entity<PeriodosTipo>(entity =>
        {
            entity.HasKey(e => e.IdperiodoTipo);

            entity.Property(e => e.IdperiodoTipo).HasColumnName("IDPeriodoTipo");
            entity.Property(e => e.Division).HasDefaultValueSql("((1))");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PermisosAccione>(entity =>
        {
            entity.HasKey(e => e.IdpermisoAccion);

            entity.ToTable(tb => tb.HasTrigger("Insert_PermisosEmpleadosFromAccion"));

            entity.Property(e => e.IdpermisoAccion).HasColumnName("IDPermisoAccion");
            entity.Property(e => e.Accion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClassFormIdp1).HasColumnName("ClassFormIDP1");
            entity.Property(e => e.ClassFormIdp2).HasColumnName("ClassFormIDP2");
            entity.Property(e => e.Enabled)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.PermisoCategoriaId).HasColumnName("PermisoCategoriaID");
            entity.Property(e => e.Texto)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ClassFormIdp1Navigation).WithMany(p => p.PermisosAccioneClassFormIdp1Navigations)
                .HasForeignKey(d => d.ClassFormIdp1)
                .HasConstraintName("FK_PermisosAcciones_ClassFormIDP1_Formularios");

            entity.HasOne(d => d.ClassFormIdp2Navigation).WithMany(p => p.PermisosAccioneClassFormIdp2Navigations)
                .HasForeignKey(d => d.ClassFormIdp2)
                .HasConstraintName("FK_PermisosAcciones_ClassFormIDP2_Formularios");

            entity.HasOne(d => d.Formulario).WithMany(p => p.PermisosAccioneFormularios)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermisosAcciones_Formularios");

            entity.HasOne(d => d.PermisoCategoria).WithMany(p => p.PermisosAcciones)
                .HasForeignKey(d => d.PermisoCategoriaId)
                .HasConstraintName("FK_PermisosAcciones_PermisosCategorias");
        });

        modelBuilder.Entity<PermisosCategoria>(entity =>
        {
            entity.HasKey(e => e.IdpermisoCategoria);

            entity.Property(e => e.IdpermisoCategoria).HasColumnName("IDPermisoCategoria");
            entity.Property(e => e.AplicacionId).HasColumnName("AplicacionID");
            entity.Property(e => e.ModuloGestionId).HasColumnName("ModuloGestionID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PermisoCategoriaId).HasColumnName("PermisoCategoriaID");

            entity.HasOne(d => d.ModuloGestion).WithMany(p => p.PermisosCategoria)
                .HasForeignKey(d => d.ModuloGestionId)
                .HasConstraintName("FK_PermisosCategorias_ModulosGestion");
        });

        modelBuilder.Entity<PermisosEmpleado>(entity =>
        {
            entity.HasKey(e => new { e.EmpleadoId, e.PermisoAccionId });

            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.PermisoAccionId).HasColumnName("PermisoAccionID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.PermisosEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_PermisosEmpleados_Empleados");

            entity.HasOne(d => d.PermisoAccion).WithMany(p => p.PermisosEmpleados)
                .HasForeignKey(d => d.PermisoAccionId)
                .HasConstraintName("FK_PermisosEmpleados_PermisosAcciones");
        });

        modelBuilder.Entity<Pgc>(entity =>
        {
            entity.HasKey(e => e.Cuenta);

            entity.ToTable("PGC", tb => tb.HasTrigger("tr_PGC_Insert"));

            entity.Property(e => e.Cuenta)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pgcnorma>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Pgcnorma");

            entity.Property(e => e.Acpa)
                .HasMaxLength(1)
                .HasColumnName("ACPA");
            entity.Property(e => e.Bitmap)
                .HasMaxLength(10)
                .HasColumnName("BITMAP");
            entity.Property(e => e.Codbal)
                .HasMaxLength(10)
                .HasColumnName("CODBAL");
            entity.Property(e => e.Cta)
                .HasMaxLength(11)
                .HasColumnName("CTA");
            entity.Property(e => e.Descrip)
                .HasMaxLength(100)
                .HasColumnName("DESCRIP");
            entity.Property(e => e.Desglose).HasColumnName("DESGLOSE");
            entity.Property(e => e.Doble)
                .HasMaxLength(1)
                .HasColumnName("DOBLE");
            entity.Property(e => e.Formula)
                .HasMaxLength(255)
                .HasColumnName("FORMULA");
            entity.Property(e => e.Naturaleza)
                .HasMaxLength(2)
                .HasColumnName("NATURALEZA");
            entity.Property(e => e.Nivel).HasColumnName("NIVEL");
            entity.Property(e => e.Numero)
                .HasMaxLength(6)
                .HasColumnName("NUMERO");
            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<PortesTipo>(entity =>
        {
            entity.HasKey(e => e.IdportesTipo);

            entity.Property(e => e.IdportesTipo)
                .ValueGeneratedNever()
                .HasColumnName("IDPortesTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PresupuestosCompra>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("PresupuestosCompra", tb =>
                {
                    tb.HasTrigger("Act_Num_PresupuestosCompra");
                    tb.HasTrigger("MaxPresupuestoCompraAnno");
                    tb.HasTrigger("PresupuestosCompra_Delete_CDBO");
                    tb.HasTrigger("SetStatePrVRechazadoWhenRelatedPrCAceptado");
                    tb.HasTrigger("UpdatePresupuestoCompraFromDescuento");
                    tb.HasTrigger("UpdateStatePresupuestosCompraDetalleFromHeader");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PresupuestosCompra_CDBO").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_PresupuestosCompra_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion)
                .HasComment("")
                .HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PresupuestosCompra_CTA_CentroCoste");

            entity.HasOne(d => d.Contacto).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_PresupuestosCompra_ProveedoresContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_PresupuestosCompra_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_PresupuestosCompra_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_PresupuestosCompra_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompra_PresupuestosCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PresupuestosCompra)
                .HasForeignKey<PresupuestosCompra>(d => d.Idcdbo)
                .HasConstraintName("FK_PresupuestosCompra_PresupuestosCompra_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PresupuestosCompra_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_PresupuestosCompra_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_PresupuestosCompra_ProveedoresDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompra_Proveedores");

            entity.HasOne(d => d.PortesTipo).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.PortesTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompra_PortesTipos");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_PresupuestosCompra_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.PresupuestosCompras)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompra_Series");
        });

        modelBuilder.Entity<PresupuestosCompraCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PresupuestosCompra_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PresupuestosCompraDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("PresupuestosCompraDetalle", tb =>
                {
                    tb.HasTrigger("PresupuestosCompraDetalleAfterDelete");
                    tb.HasTrigger("PresupuestosCompraDetalle_Delete_CDBO");
                    tb.HasTrigger("SetStateRechazadoWhenRelatedAceptado");
                    tb.HasTrigger("UpdatePresupuestosCompraDetalleNumeroLinea");
                    tb.HasTrigger("tr_PrCDetalle_Aceptado_SetRelated_ToRechazado");
                    tb.HasTrigger("tr_PresupuestosCompraDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_PresupuestosCompraDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_PresupuestosCompraDetalle_UpdateTotalesCabecera");
                    tb.HasTrigger("tr_PresupuestosCompraDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PresupuestosCompraDetalle_CDBO").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_PresupuestosCompraDetalle_CabeceraID");

            entity.HasIndex(e => e.ProductoId, "IX_PresupuestosCompraDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_PresupuestosCompra");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompraDetalle_PresupuestosCompraEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PresupuestosCompraDetalle)
                .HasForeignKey<PresupuestosCompraDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_PresupuestosCompraDetalle_PresupuestosCompraDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_IVAGrupos");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompraDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompraDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PresupuestosCompraDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosCompraDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.PresupuestosCompraDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.PresupuestosCompraDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.PresupuestosCompraDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.PresupuestosCompraDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_PresupuestosCompraDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<PresupuestosCompraDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PresupuestosCompraDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PresupuestosCompraEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PresupuestosVentaCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PresupuestosVenta_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<PresupuestosVentaDescuentosGenerale>(entity =>
        {
            entity.HasKey(e => e.Iddescuento);

            entity.Property(e => e.Iddescuento).HasColumnName("IDDescuento");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PresupuestosVentaDescuentosGenerales)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PresupuestosVentaDescuentosGenerales_PresupuestosVenta");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.PresupuestosVentaDescuentosGenerales)
                .HasForeignKey(d => d.ProductoTipoId)
                .HasConstraintName("FK_PresupuestosVentaDescuentosGenerales_ProductosTipos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PresupuestosVentaDescuentosGenerales)
                .HasForeignKey(d => d.TipoLineaId)
                .HasConstraintName("FK_PresupuestosVentaDescuentosGenerales_TiposLinea");
        });

        modelBuilder.Entity<PresupuestosVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("PresupuestosVentaDetalle", tb =>
                {
                    tb.HasTrigger("PresupuestosVentaDetalleAfterDelete");
                    tb.HasTrigger("PresupuestosVentaDetalle_Delete_CDBO");
                    tb.HasTrigger("PresupuestosVentaDetalle_UpdateCoste");
                    tb.HasTrigger("UpdatePortesPresupuestosVenta");
                    tb.HasTrigger("UpdatePresupuestosVentaTotalesCabecera");
                    tb.HasTrigger("tr_PrVD_Update_EstadoID");
                    tb.HasTrigger("tr_PresupuestosVentaDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_PresupuestosVentaDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_PresupuestosVentaDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PresupuestosVentaDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_PresupuestosVentaDetalle_CabeceraID");

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_PresupuestosVentaDetalle_LineaID_NumLinea");

            entity.HasIndex(e => e.ProductoId, "IX_PresupuestosVentaDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DescuentoGeneral).HasDefaultValueSql("((0))");
            entity.Property(e => e.DtoCoste).HasDefaultValueSql("((0))");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IncluirMaterial)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_Material");
            entity.Property(e => e.IncluirMo)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("Incluir_MO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasDefaultValueSql("((0))");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVenta");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_ConceptosRetencion");

            entity.HasOne(d => d.Estado).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PresupuestosVentaDetalle)
                .HasForeignKey<PresupuestosVentaDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVentaDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_PresupuestosVentaDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVentaDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVentaDetalle_Productos");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_Proveedores");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.PresupuestosVentaDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVentaDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.PresupuestosVentaDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.PresupuestosVentaDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.PresupuestosVentaDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.PresupuestosVentaDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_PresupuestosVentaDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<PresupuestosVentaDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("PresupuestosVentaDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
            entity.Property(e => e.Acondicionamiento)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Envase)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Frecuencia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Incertidumbre)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.Legislacion)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LimiteCuantificacion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LimiteDeteccion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LimiteMaximo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcedimientoEnsayo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ProcedimientoEnsayoId).HasColumnName("ProcedimientoEnsayoID");
            entity.Property(e => e.ProductoCompuestoId).HasColumnName("ProductoCompuestoID");
            entity.Property(e => e.TecnicaAnalisis)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Unidades)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValorParametrico)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ProcedimientoEnsayoNavigation).WithMany(p => p.PresupuestosVentaDetalleCdbos)
                .HasForeignKey(d => d.ProcedimientoEnsayoId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_CDBO_LAB_ProcedimientosEnsayo");

            entity.HasOne(d => d.ProductoCompuesto).WithMany(p => p.PresupuestosVentaDetalleCdbos)
                .HasForeignKey(d => d.ProductoCompuestoId)
                .HasConstraintName("FK_PresupuestosVentaDetalle_CDBO_Productos");
        });

        modelBuilder.Entity<PresupuestosVentaEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PresupuestosVentaProductosActualizable>(entity =>
        {
            entity.HasKey(e => e.IdproductoActualizable);

            entity.Property(e => e.IdproductoActualizable).HasColumnName("IDProductoActualizable");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PresupuestosVentaProductosActualizables)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PresupuestosVentaProductosActualizables_PresupuestosVenta");

            entity.HasOne(d => d.Producto).WithMany(p => p.PresupuestosVentaProductosActualizables)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVentaProductosActualizables_Productos");
        });

        modelBuilder.Entity<PresupuestosVentum>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Act_Num_PresupuestosVenta");
                    tb.HasTrigger("MaxPresupuestoVentaAnno");
                    tb.HasTrigger("PresupuestosVenta_Delete_CDBO");
                    tb.HasTrigger("UpdatePresupuestoVentaFromDescuento");
                    tb.HasTrigger("UpdateStatePresupuestosVentaDetalleFromHeader");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_PresupuestosVenta").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_PresupuestosVenta_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CalculoPortesTipo).HasComment("0: Sin cßlculo; 1: Automßtico; 2: Manual");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumeroEnvio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasComment("1: Recalculamos Precios al cambiar Cantidad; 0: No recalculamos");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.TipoId1).HasColumnName("TipoID_1");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");
            entity.Property(e => e.Version)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_PresupuestosVenta_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_PresupuestosVenta_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_PresupuestosVenta_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_PresupuestosVenta_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_PresupuestosVenta_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.PresupuestosVentumEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_PresupuestosVenta_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.PresupuestosVentumEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_PresupuestosVenta_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_PresupuestosVenta_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVenta_PresupuestosVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.PresupuestosVentum)
                .HasForeignKey<PresupuestosVentum>(d => d.Idcdbo)
                .HasConstraintName("FK_PresupuestosVenta_PresupuestosVenta_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_PresupuestosVenta_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_PresupuestosVenta_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_PresupuestosVenta_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVenta_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_PresupuestosVenta_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.PresupuestosVenta)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PresupuestosVenta_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.PresupuestosVenta)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_PresupuestosVenta_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.HasKey(e => e.Idproducto);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("GetCodigoPropio");
                    tb.HasTrigger("InsertProductoLoteMaestro");
                    tb.HasTrigger("Productos_Delete_CDBO");
                    tb.HasTrigger("Productos_UnidadesProducto_Ins");
                    tb.HasTrigger("UpdatePVPandPrecioVenta");
                    tb.HasTrigger("UpdatePrecioVentaProductoFromPrecioCompra");
                    tb.HasTrigger("UpdateProductoLoteMaestro");
                    tb.HasTrigger("tr_Productos_Delete_Cascade");
                    tb.HasTrigger("tr_Productos_TarifasDetalle_upd");
                    tb.HasTrigger("tr_Productos_ins");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_Productos").IsUnique();

            entity.HasIndex(e => e.CodigoBarras, "IX_Productos_CodigoBarras");

            entity.HasIndex(e => e.CodigoPropio, "IX_Productos_CodigoPropio");

            entity.HasIndex(e => new { e.FamiliaId, e.ProductoTipoId }, "IX_Productos_FamiliaID_ProductoTipoID");

            entity.HasIndex(e => e.ProductoTipoId, "IX_Productos_ProductoTipoID");

            entity.Property(e => e.Idproducto).HasColumnName("IDProducto");
            entity.Property(e => e.AbreviaturaLote)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoBarras)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPropio)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaCompras)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaVentas)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Dbstate)
                .HasDefaultValueSql("(1)")
                .HasColumnName("DBState");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DescuentoMaximo).HasDefaultValueSql("((0))");
            entity.Property(e => e.DtoCompraSugerido).HasDefaultValueSql("((0))");
            entity.Property(e => e.DtoCompraUltima).HasDefaultValueSql("((0))");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.Fbaja)
                .HasColumnType("datetime")
                .HasColumnName("FBaja");
            entity.Property(e => e.GestAlmacen).HasColumnName("Gest_Almacen");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.GestCorteMultiplos).HasColumnName("GestCorte_Multiplos");
            entity.Property(e => e.GestCorteNumero).HasColumnName("GestCorte_Numero");
            entity.Property(e => e.GestLotes).HasColumnName("Gest_Lotes");
            entity.Property(e => e.GestMargen).HasColumnName("Gest_Margen");
            entity.Property(e => e.GestPreciosLotes).HasColumnName("Gest_PreciosLotes");
            entity.Property(e => e.GestStock)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasColumnName("Gest_Stock");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.MarcaId).HasColumnName("MarcaID");
            entity.Property(e => e.Margen).HasDefaultValueSql("((0))");
            entity.Property(e => e.MargenCompraId)
                .HasDefaultValueSql("((5))")
                .HasColumnName("MargenCompraID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaIdCorte).HasColumnName("MedidaID_Corte");
            entity.Property(e => e.MultiploCorteX)
                .HasDefaultValueSql("((1))")
                .HasColumnName("Multiplo_Corte_X");
            entity.Property(e => e.MultiploCorteY)
                .HasDefaultValueSql("((1))")
                .HasColumnName("Multiplo_Corte_Y");
            entity.Property(e => e.MultiploCorteZ)
                .HasDefaultValueSql("((1))")
                .HasColumnName("Multiplo_Corte_Z");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.ProductoBaseId).HasColumnName("ProductoBaseID");
            entity.Property(e => e.ProductoCompuestoPlantillaId).HasColumnName("ProductoCompuestoPlantillaID");
            entity.Property(e => e.ProductoEstadoId).HasColumnName("ProductoEstadoID");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.Pvp).HasColumnName("PVP");
            entity.Property(e => e.ReferenciaProveedor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemporadaId).HasColumnName("TemporadaID");
            entity.Property(e => e.UnidadMedidaIdCorte).HasColumnName("UnidadMedidaID_Corte");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.Productos)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_Productos_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.Productos)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_Productos_ConceptosRetencion");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.Productos)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK__Productos__Emple__2184288F");

            entity.HasOne(d => d.Familia).WithMany(p => p.Productos)
                .HasForeignKey(d => d.FamiliaId)
                .HasConstraintName("FK_Productos_Familias");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Producto)
                .HasForeignKey<Producto>(d => d.Idcdbo)
                .HasConstraintName("FK_Productos_Productos_CDBO");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.Productos)
                .HasForeignKey(d => d.IvaclaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_IvaClases");

            entity.HasOne(d => d.Marca).WithMany(p => p.Productos)
                .HasForeignKey(d => d.MarcaId)
                .HasConstraintName("FK_Productos_Marcas");

            entity.HasOne(d => d.MargenCompra).WithMany(p => p.ProductoMargenCompras)
                .HasForeignKey(d => d.MargenCompraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_MargenesTipos1");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.ProductoMargenTipos)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_MargenesTipos");

            entity.HasOne(d => d.MedidaIdCorteNavigation).WithMany(p => p.Productos)
                .HasForeignKey(d => d.MedidaIdCorte)
                .HasConstraintName("FK_Productos_Medidas_Corte");

            entity.HasOne(d => d.ProductoBase).WithMany(p => p.Productos)
                .HasForeignKey(d => d.ProductoBaseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Productos_ProductosBase");

            entity.HasOne(d => d.ProductoEstado).WithMany(p => p.Productos)
                .HasForeignKey(d => d.ProductoEstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_ProductosEstado");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.Productos)
                .HasForeignKey(d => d.ProductoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_ProductosTipos");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.ProductoUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_Productos_UnidadesMedida_Corte_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.ProductoUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_Productos_UnidadesMedida_Corte_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.ProductoUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_Productos_UnidadesMedida_Corte_Z");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ProductoUnidadesMedida)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaIdCorte, d.MedidaIdCorte })
                .HasConstraintName("FK_Productos_UnidadesMedida_Corte");

            entity.HasMany(d => d.Requisitos).WithMany(p => p.Productos)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoProductosRequisito",
                    r => r.HasOne<IsoRequisito>().WithMany()
                        .HasForeignKey("RequisitoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ISO_ProductosRequisitos_ISO_Requisitos"),
                    l => l.HasOne<Producto>().WithMany()
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_ISO_ProductosRequisitos_Productos"),
                    j =>
                    {
                        j.HasKey("ProductoId", "RequisitoId");
                        j.ToTable("ISO_ProductosRequisitos");
                        j.IndexerProperty<int>("ProductoId").HasColumnName("ProductoID");
                        j.IndexerProperty<int>("RequisitoId").HasColumnName("RequisitoID");
                    });
        });

        modelBuilder.Entity<ProductosAlmacen>(entity =>
        {
            entity.HasKey(e => new { e.AlmacenId, e.UbicacionId, e.ProductoId, e.LoteId }).HasName("PK_ProductosAlmacenes");

            entity.ToTable("ProductosAlmacen", tb => tb.HasTrigger("ProductosAlmacen_Update_Stock_Lote"));

            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");

            entity.HasOne(d => d.Lote).WithMany(p => p.ProductosAlmacens)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosAlmacenes_Lotes");

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosAlmacens)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosAlmacenes_Productos");

            entity.HasOne(d => d.AlmacenesUbicacione).WithMany(p => p.ProductosAlmacens)
                .HasPrincipalKey(p => new { p.Idubicacion, p.AlmacenId })
                .HasForeignKey(d => new { d.UbicacionId, d.AlmacenId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosAlmacenes_AlmacenesUbicaciones");
        });

        modelBuilder.Entity<ProductosAtribsValore>(entity =>
        {
            entity.HasKey(e => e.Idpav);

            entity.ToTable("Productos_Atribs_Valores");

            entity.Property(e => e.Idpav).HasColumnName("IDPAV");
            entity.Property(e => e.AtributoProductoId).HasColumnName("AtributoProductoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ValorProductoId).HasColumnName("ValorProductoID");

            entity.HasOne(d => d.AtributoProducto).WithMany(p => p.ProductosAtribsValores)
                .HasForeignKey(d => d.AtributoProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_Atribs_Valores_AtributosProductos");

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosAtribsValores)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_Productos_Atribs_Valores_Productos");

            entity.HasOne(d => d.ValorProducto).WithMany(p => p.ProductosAtribsValores)
                .HasForeignKey(d => d.ValorProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_Atribs_Valores_ValoresProductos");
        });

        modelBuilder.Entity<ProductosBase>(entity =>
        {
            entity.HasKey(e => e.IdproductoBase);

            entity.ToTable("ProductosBase", tb =>
                {
                    tb.HasTrigger("InsetarUnidadesProductoBase");
                    tb.HasTrigger("ProductosBase_Delete_CDBO");
                });

            entity.Property(e => e.IdproductoBase).HasColumnName("IDProductoBase");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoBarras)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPropio)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CtaCompras)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaVentas)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.Fbaja)
                .HasColumnType("datetime")
                .HasColumnName("FBaja");
            entity.Property(e => e.GestAlmacen).HasColumnName("Gest_Almacen");
            entity.Property(e => e.GestLotes).HasColumnName("Gest_Lotes");
            entity.Property(e => e.GestMargen).HasColumnName("Gest_Margen");
            entity.Property(e => e.GestStock)
                .IsRequired()
                .HasDefaultValueSql("(1)")
                .HasColumnName("Gest_Stock");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.MarcaId).HasColumnName("MarcaID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.ProductoEstadoId).HasColumnName("ProductoEstadoID");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.Pvp).HasColumnName("PVP");
            entity.Property(e => e.ReferenciaProveedor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemporadaId).HasColumnName("TemporadaID");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_ProductosBase_CTA_CentroCoste");

            entity.HasOne(d => d.Familia).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.FamiliaId)
                .HasConstraintName("FK_ProductosBase_Familias");

            entity.HasOne(d => d.IdcdboNavigation).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.Idcdbo)
                .HasConstraintName("FK_ProductosBase_ProductosBase_CDBO");

            entity.HasOne(d => d.Marca).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.MarcaId)
                .HasConstraintName("FK_ProductosBase_Marcas");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosBase_MargenesTipos");

            entity.HasOne(d => d.ProductoEstado).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.ProductoEstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosBase_ProductosEstado");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.ProductosBases)
                .HasForeignKey(d => d.ProductoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosBase_ProductosTipos");
        });

        modelBuilder.Entity<ProductosBaseCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ProductosBase_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ProductosBaseUnidadesModulo>(entity =>
        {
            entity.HasKey(e => new { e.ProductoBaseId, e.ModuloGestionId });

            entity.Property(e => e.ProductoBaseId).HasColumnName("ProductoBaseID");
            entity.Property(e => e.ModuloGestionId).HasColumnName("ModuloGestionID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.ModuloGestion).WithMany(p => p.ProductosBaseUnidadesModulos)
                .HasForeignKey(d => d.ModuloGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosBaseUnidadesModulos_ModulosGestion");

            entity.HasOne(d => d.UnidadesProductoBase).WithMany(p => p.ProductosBaseUnidadesModulos)
                .HasForeignKey(d => new { d.ProductoBaseId, d.MedidaId })
                .HasConstraintName("FK_ProductosBaseUnidadesModulos_UnidadesProductoBase");
        });

        modelBuilder.Entity<ProductosCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Productos_CDBO");

            entity.HasIndex(e => e.Idcdbo, "IX_Productos_CDBO").IsUnique();

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
            entity.Property(e => e.AbreviaturaLote)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Acondicionamiento).HasMaxLength(200);
            entity.Property(e => e.CodigoSinac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CodigoSINAC");
            entity.Property(e => e.Envase).HasMaxLength(200);
            entity.Property(e => e.Incertidumbre).HasColumnType("money");
            entity.Property(e => e.Legislacion).HasMaxLength(300);
            entity.Property(e => e.LimiteCuantificacion).HasMaxLength(50);
            entity.Property(e => e.LimiteDeteccion).HasMaxLength(50);
            entity.Property(e => e.LimiteMaximo).HasMaxLength(50);
            entity.Property(e => e.MatrizId).HasColumnName("MatrizID");
            entity.Property(e => e.ParametroId).HasColumnName("ParametroID");
            entity.Property(e => e.ProcedimientoEnsayo).HasMaxLength(200);
            entity.Property(e => e.ProcedimientoEnsayoId).HasColumnName("ProcedimientoEnsayoID");
            entity.Property(e => e.TecnicaAnalisis).HasMaxLength(200);
            entity.Property(e => e.Unidades).HasMaxLength(100);
            entity.Property(e => e.ValorParametrico).HasMaxLength(50);

            entity.HasOne(d => d.Matriz).WithMany(p => p.ProductosCdbos)
                .HasForeignKey(d => d.MatrizId)
                .HasConstraintName("FK_Productos_CDBO_LAB_Matrices");

            entity.HasOne(d => d.ProcedimientoEnsayoNavigation).WithMany(p => p.ProductosCdbos)
                .HasForeignKey(d => d.ProcedimientoEnsayoId)
                .HasConstraintName("FK_Productos_CDBO_LAB_ProcedimientosEnsayo");
        });

        modelBuilder.Entity<ProductosCliente>(entity =>
        {
            entity.HasKey(e => new { e.ProductoId, e.PersonaId });

            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.CalculoTipo).HasDefaultValueSql("((1))");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosClientes)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosClientes_Productos");
        });

        modelBuilder.Entity<ProductosCodigosBarra>(entity =>
        {
            entity.HasKey(e => e.IdproductoCodigoBarras);

            entity.HasIndex(e => new { e.ProductoId, e.CodigoBarras }, "UIX_ProductosCodigosBarras_ProductoID_CodigoBarras").IsUnique();

            entity.Property(e => e.IdproductoCodigoBarras).HasColumnName("IDProductoCodigoBarras");
            entity.Property(e => e.CodigoBarras)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.UnidadesProducto).WithMany(p => p.ProductosCodigosBarras)
                .HasForeignKey(d => new { d.ProductoId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosCodigosBarras_UnidadesProducto");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ProductosCodigosBarras)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosCodigosBarras_UnidadesMedida");
        });

        modelBuilder.Entity<ProductosCompuesto>(entity =>
        {
            entity.HasKey(e => e.IdproductoCompuesto);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("ProductosCompuestos_Delete_CDBO");
                    tb.HasTrigger("tr_ProductosCompuestos_Delete");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_ProductosCompuestos").IsUnique();

            entity.HasIndex(e => e.ProductoCompuestoId, "IX_ProductosCompuestos_ProductoCompuestoID");

            entity.HasIndex(e => e.ProductoId, "IX_ProductosCompuestos_ProductoID");

            entity.Property(e => e.IdproductoCompuesto).HasColumnName("IDProductoCompuesto");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoBaseId).HasColumnName("ProductoBaseID");
            entity.Property(e => e.ProductoCompuestoId).HasColumnName("ProductoCompuestoID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.ProductosCompuesto)
                .HasForeignKey<ProductosCompuesto>(d => d.Idcdbo)
                .HasConstraintName("FK_ProductosCompuestos_ProductosCompuestos_CDBO");

            entity.HasOne(d => d.ProductoCompuesto).WithMany(p => p.ProductosCompuestoProductoCompuestos)
                .HasForeignKey(d => d.ProductoCompuestoId)
                .HasConstraintName("FK_ProductosCompuestos_Productos");

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosCompuestoProductos)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_ProductosCompuestos_Productos1");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ProductosCompuestos)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosCompuestos_UnidadesMedida");
        });

        modelBuilder.Entity<ProductosCompuestosCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ProductosCompuestos_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
            entity.Property(e => e.Acondicionamiento).HasMaxLength(200);
            entity.Property(e => e.CodigoSinac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CodigoSINAC");
            entity.Property(e => e.Envase).HasMaxLength(200);
            entity.Property(e => e.Incertidumbre).HasColumnType("money");
            entity.Property(e => e.LimiteCuantificacion).HasMaxLength(50);
            entity.Property(e => e.LimiteDeteccion).HasMaxLength(50);
            entity.Property(e => e.LimiteMaximo).HasMaxLength(50);
            entity.Property(e => e.ProcedimientoEnsayo).HasMaxLength(200);
            entity.Property(e => e.ProcedimientoEnsayoId).HasColumnName("ProcedimientoEnsayoID");
            entity.Property(e => e.TecnicaAnalisis).HasMaxLength(200);
            entity.Property(e => e.Unidades).HasMaxLength(100);
            entity.Property(e => e.ValorParametrico).HasMaxLength(50);

            entity.HasOne(d => d.ProcedimientoEnsayoNavigation).WithMany(p => p.ProductosCompuestosCdbos)
                .HasForeignKey(d => d.ProcedimientoEnsayoId)
                .HasConstraintName("FK_ProductosCompuestos_CDBO_LAB_ProcedimientosEnsayo");
        });

        modelBuilder.Entity<ProductosCompuestosPlantilla>(entity =>
        {
            entity.HasKey(e => e.IdproductoCompuestoPlantilla);

            entity.Property(e => e.IdproductoCompuestoPlantilla).HasColumnName("IDProductoCompuestoPlantilla");
            entity.Property(e => e.GeneraCompuestoEstadoId)
                .HasComment("Especifica si Genera Compuesto y en qué procesos (0 = No genera compuesto, 1 = Genera Compuesto siempre, 2 = Genera Compuesto en Alta manual de productos)")
                .HasColumnName("GeneraCompuestoEstadoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductosCompuestosPlantillasComponente>(entity =>
        {
            entity.HasKey(e => e.IdproductoCompuestoPlantillaComponente);

            entity.HasIndex(e => new { e.ProductoCompuestoPlantillaId, e.ProductoId }, "IX_ProductosCompuestosPlantillasComponentes_ProductoCompuestoPlantillaID_ProductoID").IsUnique();

            entity.Property(e => e.IdproductoCompuestoPlantillaComponente).HasColumnName("IDProductoCompuestoPlantillaComponente");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoCompuestoPlantillaId).HasColumnName("ProductoCompuestoPlantillaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.ProductoCompuestoPlantilla).WithMany(p => p.ProductosCompuestosPlantillasComponentes)
                .HasForeignKey(d => d.ProductoCompuestoPlantillaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosCompuestosPlantillasComponentes_ProductosCompuestosPlantillas");

            entity.HasOne(d => d.UnidadesProducto).WithMany(p => p.ProductosCompuestosPlantillasComponentes)
                .HasForeignKey(d => new { d.ProductoId, d.MedidaId })
                .HasConstraintName("FK_ProductosCompuestosPlantillasComponentes_UnidadesProducto");
        });

        modelBuilder.Entity<ProductosCompuestosPlantillasLog>(entity =>
        {
            entity.HasKey(e => e.Idlog);

            entity.ToTable("ProductosCompuestosPlantillas_Log");

            entity.Property(e => e.Idlog).HasColumnName("IDLog");
            entity.Property(e => e.ProductoCompuestoId)
                .HasComment("IDProductoCompuesto que se genera una vez llamado al proceso")
                .HasColumnName("ProductoCompuestoID");
            entity.Property(e => e.ProductoCompuestoPlantillaId)
                .HasComment("IDPlantilla que tiene asociado el ProductoGeneratorID en el momento de la llamada al proceso de generaci¾n de compuestos")
                .HasColumnName("ProductoCompuestoPlantillaID");
            entity.Property(e => e.ProductoGeneratorId)
                .HasComment("IDProducto que llama al proceso")
                .HasColumnName("ProductoGeneratorID");

            entity.HasOne(d => d.ProductoCompuestoPlantilla).WithMany(p => p.ProductosCompuestosPlantillasLogs)
                .HasForeignKey(d => d.ProductoCompuestoPlantillaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosCompuestosPlantillas_Log_ProductosCompuestosPlantillas");

            entity.HasOne(d => d.ProductoGenerator).WithMany(p => p.ProductosCompuestosPlantillasLogs)
                .HasForeignKey(d => d.ProductoGeneratorId)
                .HasConstraintName("FK_ProductosCompuestosPlantillas_Log_Productos");
        });

        modelBuilder.Entity<ProductosConjunto>(entity =>
        {
            entity.HasKey(e => e.Idconjunto);

            entity.ToTable(tb => tb.HasTrigger("tr_ProductosConjuntos_ins"));

            entity.Property(e => e.Idconjunto).HasColumnName("IDConjunto");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.ParteFormularioId).HasColumnName("ParteFormularioID");
            entity.Property(e => e.PorcentajeDefectuosos).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RutaId).HasColumnName("RutaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.ParteFormulario).WithMany(p => p.ProductosConjuntos)
                .HasForeignKey(d => d.ParteFormularioId)
                .HasConstraintName("FK_ProductosConjuntos_PartesFormularios");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.ProductosConjuntos)
                .HasForeignKey(d => d.UnidadMedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosConjuntos_UnidadesMedida");

            entity.HasOne(d => d.UnidadesProducto).WithMany(p => p.ProductosConjuntos)
                .HasForeignKey(d => new { d.ProductoId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosConjuntos_UnidadesProducto");
        });

        modelBuilder.Entity<ProductosConjuntosComponente>(entity =>
        {
            entity.HasKey(e => e.Idcomponente);

            entity.Property(e => e.Idcomponente).HasColumnName("IDComponente");
            entity.Property(e => e.ConjuntoId).HasColumnName("ConjuntoID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Mermas).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.OperacionId).HasColumnName("OperacionID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Conjunto).WithMany(p => p.ProductosConjuntosComponentes)
                .HasForeignKey(d => d.ConjuntoId)
                .HasConstraintName("FK_ProductosConjuntosComponentes_ProductosConjuntos");

            entity.HasOne(d => d.Lote).WithMany(p => p.ProductosConjuntosComponentes)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_ProductosConjuntosComponentes_Lotes");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.ProductosConjuntosComponentes)
                .HasForeignKey(d => d.ProductoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosConjuntosComponentes_ProductosTipos");

            entity.HasOne(d => d.UnidadesProducto).WithMany(p => p.ProductosConjuntosComponentes)
                .HasForeignKey(d => new { d.ProductoId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosConjuntosComponentes_UnidadesProducto");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ProductosConjuntosComponentes)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosConjuntosComponentes_UnidadesMedida");
        });

        modelBuilder.Entity<ProductosConjuntosDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("ProductosConjuntos_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.ConjuntoId).HasColumnName("ConjuntoID");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Conjunto).WithMany(p => p.ProductosConjuntosDatosDinamicos)
                .HasForeignKey(d => d.ConjuntoId)
                .HasConstraintName("FK_ProductosConjuntos_DatosDinamicos_ProductosConjuntos");

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.ProductosConjuntosDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosConjuntos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");
        });

        modelBuilder.Entity<ProductosDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("Productos_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.ProductosDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosDatosDinamicos)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_Productos_DatosDinamicos_Productos");
        });

        modelBuilder.Entity<ProductosEspeciale>(entity =>
        {
            entity.HasKey(e => e.ProductoId);

            entity.Property(e => e.ProductoId)
                .ValueGeneratedNever()
                .HasColumnName("ProductoID");
        });

        modelBuilder.Entity<ProductosEstado>(entity =>
        {
            entity.HasKey(e => e.IdproductoEstado);

            entity.ToTable("ProductosEstado");

            entity.Property(e => e.IdproductoEstado).HasColumnName("IDProductoEstado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductosFotosLog>(entity =>
        {
            entity.HasKey(e => e.Idlog);

            entity.ToTable("ProductosFotosLog");

            entity.Property(e => e.Idlog).HasColumnName("IDLog");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Fecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductosProveedore>(entity =>
        {
            entity.HasKey(e => new { e.ProductoId, e.PersonaId, e.CantidadDesde });

            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DescuentoTarifa).HasColumnType("money");
            entity.Property(e => e.EmpleadoIdtarifa)
                .HasComment("Empleado que ha informado el precio de la Tarifa")
                .HasColumnName("EmpleadoIDTarifa");
            entity.Property(e => e.Ftarifa)
                .HasComment("Fecha de última actualización del PrecioTarifa")
                .HasColumnType("datetime")
                .HasColumnName("FTarifa");
            entity.Property(e => e.FultimaCompra)
                .HasColumnType("datetime")
                .HasColumnName("FUltimaCompra");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductosSugerido>(entity =>
        {
            entity.HasKey(e => new { e.ProductoId, e.ProductoSugeridoId, e.CantidadDesde });

            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProductoSugeridoId).HasColumnName("ProductoSugeridoID");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ProductoCompuestoId).HasColumnName("ProductoCompuestoID");

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosSugeridoProductos)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_ProductosSugeridos_Productos");

            entity.HasOne(d => d.ProductoSugerido).WithMany(p => p.ProductosSugeridoProductoSugeridos)
                .HasForeignKey(d => d.ProductoSugeridoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosSugeridos_Productos1");
        });

        modelBuilder.Entity<ProductosTipo>(entity =>
        {
            entity.HasKey(e => e.IdproductoTipo);

            entity.Property(e => e.IdproductoTipo).HasColumnName("IDProductoTipo");
            entity.Property(e => e.AlmacenIdDef).HasColumnName("AlmacenID_def");
            entity.Property(e => e.Codigo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CtaCompras)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CtaVentas)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DefaultGestAlmacen)
                .HasComment("Valor por defecto para el campo Gest_Almacen en Productos")
                .HasColumnName("Default_Gest_Almacen");
            entity.Property(e => e.DefaultGestCorte).HasColumnName("Default_Gest_Corte");
            entity.Property(e => e.DefaultGestLotes)
                .HasComment("Valor por defecto para el campo Gest_Lotes en Productos")
                .HasColumnName("Default_Gest_Lotes");
            entity.Property(e => e.DefaultGestMargen)
                .HasComment("Valor por defecto para el campo Gest_Margen en Productos")
                .HasColumnName("Default_Gest_Margen");
            entity.Property(e => e.DefaultGestPreciosLotes).HasColumnName("Default_Gest_PreciosLotes");
            entity.Property(e => e.DefaultGestStock)
                .HasComment("Valor por defecto para el campo Gest_Stock en Productos")
                .HasColumnName("Default_Gest_Stock");
            entity.Property(e => e.DefaultMargen)
                .HasComment("Valor por defecto para el campo Margen en Productos")
                .HasColumnType("money")
                .HasColumnName("Default_Margen");
            entity.Property(e => e.DefaultMargenCompraId)
                .HasDefaultValueSql("((5))")
                .HasColumnName("Default_MargenCompraID");
            entity.Property(e => e.DefaultStockNegativo)
                .HasComment("Valor por defecto para el campo StockNegativo en Productos")
                .HasColumnName("Default_StockNegativo");
            entity.Property(e => e.FormularioId).HasColumnName("FormularioID");
            entity.Property(e => e.GestCorteMultiplos).HasColumnName("GestCorte_Multiplos");
            entity.Property(e => e.GestCorteNumero).HasColumnName("GestCorte_Numero");
            entity.Property(e => e.GestMedidas)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.IvaclaseId).HasColumnName("IVAClaseID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UbicacionIdDef).HasColumnName("UbicacionID_def");
            entity.Property(e => e.UnidadAgrupacion).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.WmDescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("wm_Description");
            entity.Property(e => e.WmKeyword)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("wm_Keyword");
            entity.Property(e => e.WmTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("wm_Title");

            entity.HasOne(d => d.DefaultMargenCompra).WithMany(p => p.ProductosTipoDefaultMargenCompras)
                .HasForeignKey(d => d.DefaultMargenCompraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosTipos_MargenesTipos1");

            entity.HasOne(d => d.Formulario).WithMany(p => p.ProductosTipos)
                .HasForeignKey(d => d.FormularioId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ProductosTipos_Formularios");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.ProductosTipos)
                .HasForeignKey(d => d.IvaclaseId)
                .HasConstraintName("FK_ProductosTipos_IvaClases");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.ProductosTipoMargenTipos)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosTipos_MargenesTipos");

            entity.HasOne(d => d.AlmacenesUbicacione).WithMany(p => p.ProductosTipos)
                .HasPrincipalKey(p => new { p.Idubicacion, p.AlmacenId })
                .HasForeignKey(d => new { d.UbicacionIdDef, d.AlmacenIdDef })
                .HasConstraintName("FK_ProductosTipos_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.ProductosTipos)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .HasConstraintName("FK_ProductosTipos_UnidadesMedida");
        });

        modelBuilder.Entity<ProductosUnidadesModulo>(entity =>
        {
            entity.HasKey(e => new { e.ProductoId, e.ModuloGestionId });

            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ModuloGestionId).HasColumnName("ModuloGestionID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.ModuloGestion).WithMany(p => p.ProductosUnidadesModulos)
                .HasForeignKey(d => d.ModuloGestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductosUnidadesModulos_ModulosGestion");

            entity.HasOne(d => d.UnidadesProducto).WithMany(p => p.ProductosUnidadesModulos)
                .HasForeignKey(d => new { d.ProductoId, d.MedidaId })
                .HasConstraintName("FK_ProductosUnidadesModulos_UnidadesProducto");
        });

        modelBuilder.Entity<PropuestasCompra>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("PropuestasCompra");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.DocumentoOrigenId).HasColumnName("DocumentoOrigenID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Titulo)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.DocumentoOrigen).WithMany(p => p.PropuestasCompras)
                .HasForeignKey(d => d.DocumentoOrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropuestasCompra_DocumentosGestion");
        });

        modelBuilder.Entity<PropuestasCompraDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("PropuestasCompraDetalle");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Fnecesidad)
                .HasColumnType("datetime")
                .HasColumnName("FNecesidad");
            entity.Property(e => e.LineaOrigenId).HasColumnName("LineaOrigenID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ProveedorId).HasColumnName("ProveedorID");
            entity.Property(e => e.Seleccionado).HasComment("Marca si el registro ha sido seleccionado para pasar a la 2ª pantalla.");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.PropuestasCompraDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_PropuestasCompraDetalle_PropuestasCompra");

            entity.HasOne(d => d.Lote).WithMany(p => p.PropuestasCompraDetalles)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_PropuestasCompraDetalle_Lotes");

            entity.HasOne(d => d.Producto).WithMany(p => p.PropuestasCompraDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropuestasCompraDetalle_Productos");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.PropuestasCompraDetalles)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("FK_PropuestasCompraDetalle_Proveedores");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.PropuestasCompraDetalles)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropuestasCompraDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<Proveedore>(entity =>
        {
            entity.HasKey(e => e.Idpersona);

            entity.ToTable(tb => tb.HasTrigger("Proveedores_Delete_CDBO"));

            entity.HasIndex(e => e.Idcdbo, "IX_Proveedores_CDBO").IsUnique();

            entity.Property(e => e.Idpersona)
                .HasComment("1: Proveedores; 0: Agencias de Transporte")
                .HasColumnName("IDPersona");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CifNif)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CuentaBancariaEmpresaId).HasColumnName("CuentaBancariaEmpresaID");
            entity.Property(e => e.CuentaBancariaId)
                .HasComment("Cuenta bancaria por defecto para documentos")
                .HasColumnName("CuentaBancariaID");
            entity.Property(e => e.DescuentoId).HasColumnName("DescuentoID");
            entity.Property(e => e.DireccionFraId).HasColumnName("DireccionFraID");
            entity.Property(e => e.DtoComercial).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Efectos)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Estado).HasDefaultValueSql("(1)");
            entity.Property(e => e.ExentoIva).HasColumnName("ExentoIVA");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaclaseId)
                .HasComment("No deja introducir un Update en Cascada")
                .HasColumnName("IVAClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.M347Excluir).HasColumnName("M347_Excluir");
            entity.Property(e => e.MedioPagoId).HasColumnName("MedioPagoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NombreComercial)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
            entity.Property(e => e.NotasInt)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NotasIntAviso)
                .HasDefaultValueSql("((0))")
                .HasColumnName("NotasInt_Aviso");
            entity.Property(e => e.PaginaWeb)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RappelId).HasColumnName("RappelID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TaiCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TAI_Code");
            entity.Property(e => e.TaiEmailAviso)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TAI_EmailAviso");
            entity.Property(e => e.TaiServices).HasColumnName("TAI_Services");
            entity.Property(e => e.TaiTelefono1Aviso)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("TAI_Telefono1Aviso");
            entity.Property(e => e.TaiTelefono2Aviso)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasComment("Este normalmente será el móvil para SMS")
                .HasColumnName("TAI_Telefono2Aviso");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.TipoTransporteId).HasColumnName("TipoTransporteID");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_Proveedores_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_Proveedores_ConceptosRetencion");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.FormaPagoId)
                .HasConstraintName("FK_Proveedores_FormasPago");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Proveedore)
                .HasForeignKey<Proveedore>(d => d.Idcdbo)
                .HasConstraintName("FK_Proveedores_Proveedores_CDBO");

            entity.HasOne(d => d.Ivaclase).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.IvaclaseId)
                .HasConstraintName("FK_Proveedores_IvaClases");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_Proveedores_IVAGrupos");

            entity.HasOne(d => d.MedioPago).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.MedioPagoId)
                .HasConstraintName("FK_Proveedores_MediosPago");

            entity.HasOne(d => d.Serie).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_Proveedores_Series");

            entity.HasOne(d => d.Tipo).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_Prov_Tipo");

            entity.HasMany(d => d.Criterios).WithMany(p => p.Personas)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoProveedoresCriterio",
                    r => r.HasOne<IsoCriteriosSeleccion>().WithMany()
                        .HasForeignKey("CriterioId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ISO_ProveedoresCriterios_ISO_CriteriosSeleccion"),
                    l => l.HasOne<Proveedore>().WithMany()
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_ISO_ProveedoresCriterios_Proveedores"),
                    j =>
                    {
                        j.HasKey("PersonaId", "CriterioId");
                        j.ToTable("ISO_ProveedoresCriterios");
                        j.IndexerProperty<int>("PersonaId").HasColumnName("PersonaID");
                        j.IndexerProperty<int>("CriterioId").HasColumnName("CriterioID");
                    });
        });

        modelBuilder.Entity<ProveedoresCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Proveedores_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasComment("Hace referencia a la tabla de la que cuelga y es igual a la clave IDCDBO de esa tabla")
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ProveedoresContacto>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Apellidos)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cargo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Departamento)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Telefono1)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.Telefono2)
                .HasMaxLength(17)
                .IsUnicode(false);

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresContactos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresContactos_Proveedores");
        });

        modelBuilder.Entity<ProveedoresCuentasBancaria>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Iban).HasColumnName("IBAN");
            entity.Property(e => e.Ibancodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("IBANCodigo");
            entity.Property(e => e.Ibancuenta)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("IBANCuenta");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumCta)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Swift1)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SWIFT1");
            entity.Property(e => e.Swift2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SWIFT2");
            entity.Property(e => e.Swift3)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SWIFT3");
            entity.Property(e => e.Swift4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SWIFT4");

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresCuentasBancaria)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresCuentasBancarias_Proveedores");
        });

        modelBuilder.Entity<ProveedoresDescuento>(entity =>
        {
            entity.HasKey(e => e.IdpersonaFamilia);

            entity.HasIndex(e => new { e.PersonaId, e.FamiliaId }, "IX_ProveedoresDescuentos").IsUnique();

            entity.Property(e => e.IdpersonaFamilia).HasColumnName("IDPersonaFamilia");
            entity.Property(e => e.ApplySubFamilias).HasColumnName("Apply_SubFamilias");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.Familia).WithMany(p => p.ProveedoresDescuentos)
                .HasForeignKey(d => d.FamiliaId)
                .HasConstraintName("FK_ProveedoresDescuentos_Familias");

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresDescuentos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresDescuentos_Proveedores");
        });

        modelBuilder.Entity<ProveedoresDescuentosRoot>(entity =>
        {
            entity.HasKey(e => e.IdpersonaPt);

            entity.ToTable("ProveedoresDescuentos_Root");

            entity.HasIndex(e => new { e.ProductoTipoId, e.PersonaId }, "IX_ProveedoresDescuentos_Root");

            entity.Property(e => e.IdpersonaPt).HasColumnName("IDPersona_PT");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ProductoTipoId).HasColumnName("ProductoTipoID");

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresDescuentosRoots)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresDescuentos_Root_Proveedores");

            entity.HasOne(d => d.ProductoTipo).WithMany(p => p.ProveedoresDescuentosRoots)
                .HasForeignKey(d => d.ProductoTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProveedoresDescuentos_Root_ProductosTipos");
        });

        modelBuilder.Entity<ProveedoresDiasPago>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.DiaInicio });

            entity.ToTable("ProveedoresDiasPago");

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresDiasPagos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresDiasPago_Proveedores");
        });

        modelBuilder.Entity<ProveedoresDireccione>(entity =>
        {
            entity.HasKey(e => e.IdpersonaDireccion);

            entity.HasIndex(e => new { e.IdpersonaDireccion, e.PersonaId }, "IX_ProveedoresDirecciones").IsUnique();

            entity.HasIndex(e => e.LocalidadId, "IX_ProveedoresDirecciones_LocalidadID");

            entity.HasIndex(e => e.PaisId, "IX_ProveedoresDirecciones_PaisID");

            entity.HasIndex(e => e.PersonaId, "IX_ProveedoresDirecciones_PersonaID");

            entity.HasIndex(e => e.ProvinciaId, "IX_ProveedoresDirecciones_ProvinciaID");

            entity.Property(e => e.IdpersonaDireccion).HasColumnName("IDPersonaDireccion");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.LocalidadId).HasColumnName("LocalidadID");
            entity.Property(e => e.Nombre)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.PaisId).HasColumnName("PaisID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ProvinciaId).HasColumnName("ProvinciaID");
            entity.Property(e => e.TipoDireccionId).HasColumnName("TipoDireccionID");

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresDirecciones)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresDirecciones_Proveedores");
        });

        modelBuilder.Entity<ProveedoresGrupo>(entity =>
        {
            entity.HasKey(e => e.Idgrupo);

            entity.Property(e => e.Idgrupo).HasColumnName("IDGrupo");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProveedoresMarca>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.MarcaId).HasColumnName("MarcaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
        });

        modelBuilder.Entity<ProveedoresPeriodosExentosPago>(entity =>
        {
            entity.HasKey(e => new { e.PersonaId, e.FechaInicio });

            entity.ToTable("ProveedoresPeriodosExentosPago");

            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresPeriodosExentosPagos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresPeriodosExentosPago_Proveedores");
        });

        modelBuilder.Entity<ProveedoresProveedoresGrupo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Proveedores_ProveedoresGrupos");

            entity.HasIndex(e => new { e.PersonaId, e.GrupoId }, "PK_Proveedores_ProveedoresGrupos")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.GrupoId).HasColumnName("GrupoID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");

            entity.HasOne(d => d.Grupo).WithMany()
                .HasForeignKey(d => d.GrupoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Proveedores_ProveedoresGrupos_ProveedoresGrupos");

            entity.HasOne(d => d.Persona).WithMany()
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_Proveedores_ProveedoresGrupos_Proveedores");
        });

        modelBuilder.Entity<ProveedoresTarifasProducto>(entity =>
        {
            entity.HasKey(e => e.PtpId);

            entity.ToTable("ProveedoresTarifasProducto");

            entity.Property(e => e.PtpId).HasColumnName("PTP_id");
            entity.Property(e => e.PtpPrecioCompra)
                .HasColumnType("money")
                .HasColumnName("PTP_PrecioCompra");
            entity.Property(e => e.PtpRefPo).HasColumnName("PTP_refPO");
            entity.Property(e => e.PtpRefPr).HasColumnName("PTP_refPR");
        });

        modelBuilder.Entity<ProveedoresTelefono>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Telefono)
                .HasMaxLength(17)
                .IsUnicode(false);

            entity.HasOne(d => d.Persona).WithMany(p => p.ProveedoresTelefonos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_ProveedoresTelefonos_Proveedores");
        });

        modelBuilder.Entity<ProveedoresTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.Property(e => e.Idtipo).HasColumnName("IDTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.Idprovincia);

            entity.Property(e => e.Idprovincia).HasColumnName("IDProvincia");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaisId).HasColumnName("PaisID");

            entity.HasOne(d => d.Pais).WithMany(p => p.Provincia)
                .HasForeignKey(d => d.PaisId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Provincias_Paises");
        });

        modelBuilder.Entity<Proyecto>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb => tb.HasTrigger("tr_Proyectos_Codigo_Insert"));

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_Proyectos_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpleadoResponsableId).HasColumnName("EmpleadoResponsableID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SearchNameKeys)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Proyectos)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_Proyectos_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.ProyectoEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_Proyectos_Empleados");

            entity.HasOne(d => d.EmpleadoResponsable).WithMany(p => p.ProyectoEmpleadoResponsables)
                .HasForeignKey(d => d.EmpleadoResponsableId)
                .HasConstraintName("FK_FacturasVenta_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Proyectos)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_Proyectos_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.Proyectos)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Proyectos_ProyectosEstados");

            entity.HasOne(d => d.Lote).WithMany(p => p.Proyectos)
                .HasForeignKey(d => d.LoteId)
                .HasConstraintName("FK_Proyectos_Lotes");

            entity.HasOne(d => d.Persona).WithMany(p => p.Proyectos)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_Proyectos_Clientes");

            entity.HasOne(d => d.Producto).WithMany(p => p.Proyectos)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_Proyectos_Productos");
        });

        modelBuilder.Entity<ProyectosDatosDinamico>(entity =>
        {
            entity.HasKey(e => e.IddatoDinamicoRecordEntidad);

            entity.ToTable("Proyectos_DatosDinamicos");

            entity.Property(e => e.IddatoDinamicoRecordEntidad).HasColumnName("IDDatoDinamicoRecordEntidad");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DatoDinamicoGsEntidadDefId).HasColumnName("DatoDinamicoGS_EntidadDefID");
            entity.Property(e => e.Valor)
                .HasMaxLength(75)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.ProyectosDatosDinamicos)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_Proyectos_DatosDinamicos_PedidosVenta");

            entity.HasOne(d => d.DatoDinamicoGsEntidadDef).WithMany(p => p.ProyectosDatosDinamicos)
                .HasForeignKey(d => d.DatoDinamicoGsEntidadDefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Proyectos_DatosDinamicos_DatosDinamicos_GS_EntidadesDef");
        });

        modelBuilder.Entity<ProyectosEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Prueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Prueba");

            entity.Property(e => e.Idpruba)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDPruba");
            entity.Property(e => e.TiempoDt)
                .HasColumnType("datetime")
                .HasColumnName("TiempoDT");
        });

        modelBuilder.Entity<Puesto>(entity =>
        {
            entity.HasKey(e => e.Idpuesto);

            entity.Property(e => e.Idpuesto).HasColumnName("IDPuesto");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Formacion).HasColumnType("text");
            entity.Property(e => e.Funciones).HasColumnType("text");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Perfil).HasColumnType("text");
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");

            entity.HasOne(d => d.Departamento).WithMany(p => p.Puestos)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_Puestos_Departamentos");

            entity.HasOne(d => d.Seccion).WithMany(p => p.Puestos)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_Puestos_Secciones");

            entity.HasMany(d => d.Documentos).WithMany(p => p.Puestos)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoPuestosDocumento",
                    r => r.HasOne<IsoDocumento>().WithMany()
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_ISO_PuestosDocumentos_ISO_Documentos"),
                    l => l.HasOne<Puesto>().WithMany()
                        .HasForeignKey("PuestoId")
                        .HasConstraintName("FK_ISO_PuestosDocumentos_Puestos"),
                    j =>
                    {
                        j.HasKey("PuestoId", "DocumentoId");
                        j.ToTable("ISO_PuestosDocumentos");
                        j.IndexerProperty<int>("PuestoId").HasColumnName("PuestoID");
                        j.IndexerProperty<int>("DocumentoId").HasColumnName("DocumentoID");
                    });

            entity.HasMany(d => d.Requisitos).WithMany(p => p.Puestos)
                .UsingEntity<Dictionary<string, object>>(
                    "IsoPuestosRequisito",
                    r => r.HasOne<IsoRequisito>().WithMany()
                        .HasForeignKey("RequisitoId")
                        .HasConstraintName("FK_ISO_PuestosRequisitos_ISO_Requisitos"),
                    l => l.HasOne<Puesto>().WithMany()
                        .HasForeignKey("PuestoId")
                        .HasConstraintName("FK_ISO_PuestosRequisitos_Puestos"),
                    j =>
                    {
                        j.HasKey("PuestoId", "RequisitoId");
                        j.ToTable("ISO_PuestosRequisitos");
                        j.IndexerProperty<int>("PuestoId").HasColumnName("PuestoID");
                        j.IndexerProperty<int>("RequisitoId").HasColumnName("RequisitoID");
                    });
        });

        modelBuilder.Entity<PyG>(entity =>
        {
            entity.HasKey(e => e.IdpyG)
                .HasName("PK_PyG_IDPyG")
                .IsClustered(false);

            entity.ToTable("PyG");

            entity.HasIndex(e => e.PyGid, "IX_pyg_PyGID").IsClustered();

            entity.Property(e => e.IdpyG).HasColumnName("IDPyG");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PyGid).HasColumnName("PyGID");

            entity.HasOne(d => d.PyGNavigation).WithMany(p => p.InversePyGNavigation)
                .HasForeignKey(d => d.PyGid)
                .HasConstraintName("FK_PyG_PyG");
        });

        modelBuilder.Entity<PyGCuenta>(entity =>
        {
            entity.HasKey(e => e.IdpyGCuentas)
                .HasName("PK_PyG_cuentas_IDPyG_Cuentas")
                .IsClustered(false);

            entity.ToTable("PyG_Cuentas");

            entity.Property(e => e.IdpyGCuentas).HasColumnName("IDPyG_Cuentas");
            entity.Property(e => e.Cuenta)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.PyGid).HasColumnName("PyGID");
            entity.Property(e => e.Signo)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.HasOne(d => d.PyG).WithMany(p => p.PyGCuenta)
                .HasForeignKey(d => d.PyGid)
                .HasConstraintName("FK_PyG_Cuentas_PyG");
        });

        modelBuilder.Entity<PyGa>(entity =>
        {
            entity.HasKey(e => e.Clave);

            entity.ToTable("PyGA");

            entity.Property(e => e.Clave).ValueGeneratedNever();
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Formato)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Nombre).HasMaxLength(50);
            entity.Property(e => e.TotalA).HasColumnName("Total_A");
        });

        modelBuilder.Entity<PyGaCuenta>(entity =>
        {
            entity.HasKey(e => new { e.Clave, e.Cuenta });

            entity.ToTable("PyGA_Cuentas");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Signo)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Rappel>(entity =>
        {
            entity.HasKey(e => e.Idrappel);

            entity.Property(e => e.Idrappel).HasColumnName("IDRappel");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Facturacion).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegularizacionesAlmacen>(entity =>
        {
            entity.HasKey(e => new { e.UidId, e.LoteId, e.UbicacionId });

            entity.ToTable("RegularizacionesAlmacen", tb => tb.HasTrigger("RA_T_UpdateMedidaID"));

            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.CodigoPropio)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FamiliaId).HasColumnName("FamiliaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NombreLote)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NombreProducto)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.RegularizacionesAlmacens)
                .HasForeignKey(d => d.AlmacenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegularizacionesAlmacen_Almacenes");

            entity.HasOne(d => d.Lote).WithMany(p => p.RegularizacionesAlmacens)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegularizacionesAlmacen_Lotes");

            entity.HasOne(d => d.Medida).WithMany(p => p.RegularizacionesAlmacens)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_RegularizacionesAlmacen_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.RegularizacionesAlmacens)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegularizacionesAlmacen_Productos");

            entity.HasOne(d => d.Ubicacion).WithMany(p => p.RegularizacionesAlmacens)
                .HasForeignKey(d => d.UbicacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegularizacionesAlmacen_AlmacenesUbicaciones");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.RegularizacionesAlmacens)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_RegularizacionesAlmacen_UnidadesMedida");
        });

        modelBuilder.Entity<RemesasCompra>(entity =>
        {
            entity.HasKey(e => e.Idremesa);

            entity.ToTable("RemesasCompra", tb =>
                {
                    tb.HasTrigger("MaxNumeroAnnoRemesaCompra");
                    tb.HasTrigger("OnDeleteRemesaCompra");
                });

            entity.Property(e => e.Idremesa).HasColumnName("IDRemesa");
            entity.Property(e => e.Anno).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.Comentario)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CuentaId).HasColumnName("CuentaID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.FechaCargo)
                .HasDefaultValueSql("(convert(datetime,convert(varchar(12),getdate(),103)))")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaFirma).HasColumnType("datetime");

            entity.HasOne(d => d.Cuenta).WithMany(p => p.RemesasCompras)
                .HasForeignKey(d => d.CuentaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RemesasCompra_EmpresasCuentasBancarias");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.RemesasCompras)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_RemesasCompra_Ejercicios");
        });

        modelBuilder.Entity<RemesasVentum>(entity =>
        {
            entity.HasKey(e => e.Idremesa).HasName("PK_Remesas");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("MaxNumeroAnnoRemesaVenta");
                    tb.HasTrigger("OnDeleteRemesaVenta");
                });

            entity.Property(e => e.Idremesa).HasColumnName("IDRemesa");
            entity.Property(e => e.Anno).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.Comentario)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CuentaId).HasColumnName("CuentaID");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.FechaCargo)
                .HasDefaultValueSql("(convert(datetime,convert(varchar(12),getdate(),103)))")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaFirma).HasColumnType("datetime");

            entity.HasOne(d => d.Cuenta).WithMany(p => p.RemesasVenta)
                .HasForeignKey(d => d.CuentaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remesas_EmpresasCuentasBancarias");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.RemesasVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_RemesasVenta_Ejercicios");
        });

        modelBuilder.Entity<RepHorasExtra>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Rep_HorasExtras");

            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.OfAsuntosPropios).HasColumnName("OF_AsuntosPropios");
            entity.Property(e => e.OfBajas).HasColumnName("OF_Bajas");
            entity.Property(e => e.OfBajasLaborales).HasColumnName("OF_BajasLaborales");
            entity.Property(e => e.OfVacaciones).HasColumnName("OF_Vacaciones");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.Idreport);

            entity.Property(e => e.Idreport).HasColumnName("IDReport");
            entity.Property(e => e.CriteriaFormId).HasColumnName("Criteria_FormID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ExportNameFromReportName).HasComment("Indica si el nombre de archivo para exportar se toma del campo Nombre, en caso contrario se toma de la Entidad");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReportConstructorId).HasColumnName("ReportConstructorID");
            entity.Property(e => e.ReportFamiliaId).HasColumnName("ReportFamiliaID");
            entity.Property(e => e.ReportTipoId).HasColumnName("ReportTipoID");
            entity.Property(e => e.ShowPrintedCheckForm).HasComment("Indica si se tiene que mostrar o no el formulario con el Check Impreso para dar el report por Impreso o no");

            entity.HasOne(d => d.ReportConstructor).WithMany(p => p.Reports)
                .HasForeignKey(d => d.ReportConstructorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reports_ReportsConstructor");

            entity.HasOne(d => d.ReportFamilia).WithMany(p => p.Reports)
                .HasForeignKey(d => d.ReportFamiliaId)
                .HasConstraintName("FK_Reports_ReportsFamilias");

            entity.HasOne(d => d.ReportTipo).WithMany(p => p.Reports)
                .HasForeignKey(d => d.ReportTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reports_ReportsTipos");

            entity.HasMany(d => d.Entidads).WithMany(p => p.Reports)
                .UsingEntity<Dictionary<string, object>>(
                    "RpEntidade",
                    r => r.HasOne<GsEntidade>().WithMany()
                        .HasForeignKey("EntidadId")
                        .HasConstraintName("FK_RP_Entidades_GS_Entidades"),
                    l => l.HasOne<Report>().WithMany()
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_RP_Entidades_Reports"),
                    j =>
                    {
                        j.HasKey("ReportId", "EntidadId");
                        j.ToTable("RP_Entidades");
                        j.IndexerProperty<int>("ReportId").HasColumnName("ReportID");
                        j.IndexerProperty<int>("EntidadId").HasColumnName("EntidadID");
                    });
        });

        modelBuilder.Entity<ReportsConstructor>(entity =>
        {
            entity.HasKey(e => e.IdreportConstructor);

            entity.ToTable("ReportsConstructor");

            entity.Property(e => e.IdreportConstructor).HasColumnName("IDReportConstructor");
            entity.Property(e => e.Constructor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("constructor");
        });

        modelBuilder.Entity<ReportsCriteria>(entity =>
        {
            entity.HasKey(e => e.IdreportCriteria);

            entity.Property(e => e.IdreportCriteria).HasColumnName("IDReportCriteria");
            entity.Property(e => e.CriteriaComponentName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaComponentPropertyName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaOwnerFormName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataPipelineName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FieldName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Mandatory)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.Operator)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReportComponentFormName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReportComponentName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReportLauncherId).HasColumnName("ReportLauncherID");

            entity.HasOne(d => d.ReportLauncher).WithMany(p => p.ReportsCriteria)
                .HasForeignKey(d => d.ReportLauncherId)
                .HasConstraintName("FK_ReportsCriterias_ReportsLaunchers");
        });

        modelBuilder.Entity<ReportsFamilia>(entity =>
        {
            entity.HasKey(e => e.IdreportFamilia);

            entity.ToTable(tb => tb.HasTrigger("EliminacionFamiliasReports"));

            entity.Property(e => e.IdreportFamilia).HasColumnName("IDReportFamilia");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReportFamiliaId).HasColumnName("ReportFamiliaID");
        });

        modelBuilder.Entity<ReportsLauncher>(entity =>
        {
            entity.HasKey(e => e.IdreportLauncher);

            entity.Property(e => e.IdreportLauncher).HasColumnName("IDReportLauncher");
            entity.Property(e => e.ComponentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerFormName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReportComponentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.ReportLauncherId).HasColumnName("ReportLauncherID");

            entity.HasOne(d => d.Report).WithMany(p => p.ReportsLaunchers)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ReportsLaunchers_Reports");
        });

        modelBuilder.Entity<ReportsTipo>(entity =>
        {
            entity.HasKey(e => e.IdreportTipo);

            entity.Property(e => e.IdreportTipo).HasColumnName("IDReportTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReservasStock>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("ReservasStock");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.CabeceraOrigenId).HasColumnName("CabeceraOrigenID");
            entity.Property(e => e.DgorigenId).HasColumnName("DGOrigenID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
        });

        modelBuilder.Entity<ReservasStockDetalle>(entity =>
        {
            entity.HasKey(e => e.Iddetalle);

            entity.ToTable("ReservasStockDetalle", tb =>
                {
                    tb.HasTrigger("tr_ReservasStockDetalle_DGDU_del");
                    tb.HasTrigger("tr_ReservasStockDetalle_DGDU_ins");
                    tb.HasTrigger("tr_ReservasStockDetalle_DGDU_upd");
                });

            entity.Property(e => e.Iddetalle).HasColumnName("IDDetalle");
            entity.Property(e => e.AlmacenId).HasColumnName("AlmacenID");
            entity.Property(e => e.AlmacenReservaId).HasColumnName("AlmacenReservaID");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.FechaFinReserva).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReserva).HasColumnType("datetime");
            entity.Property(e => e.LineaOrigenId).HasColumnName("LineaOrigenID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.UbicacionId).HasColumnName("UbicacionID");
            entity.Property(e => e.UbicacionReservaId).HasColumnName("UbicacionReservaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Almacen).WithMany(p => p.ReservasStockDetalleAlmacens)
                .HasForeignKey(d => d.AlmacenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_Almacenes");

            entity.HasOne(d => d.AlmacenReserva).WithMany(p => p.ReservasStockDetalleAlmacenReservas)
                .HasForeignKey(d => d.AlmacenReservaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_AlmacenesRsrv");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.ReservasStockDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_ReservasStock");

            entity.HasOne(d => d.Lote).WithMany(p => p.ReservasStockDetalles)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_Lotes");

            entity.HasOne(d => d.Producto).WithMany(p => p.ReservasStockDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_Productos");

            entity.HasOne(d => d.AlmacenesUbicacione).WithMany(p => p.ReservasStockDetalleAlmacenesUbicaciones)
                .HasPrincipalKey(p => new { p.Idubicacion, p.AlmacenId })
                .HasForeignKey(d => new { d.UbicacionId, d.AlmacenId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_AlmacenesUbicaciones");

            entity.HasOne(d => d.AlmacenesUbicacioneNavigation).WithMany(p => p.ReservasStockDetalleAlmacenesUbicacioneNavigations)
                .HasPrincipalKey(p => new { p.Idubicacion, p.AlmacenId })
                .HasForeignKey(d => new { d.UbicacionReservaId, d.AlmacenReservaId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservasStockDetalle_AlmacenesUbicacionesRsrv");
        });

        modelBuilder.Entity<Resultado>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Lvalue)
                .HasColumnType("image")
                .HasColumnName("lvalue");
            entity.Property(e => e.Objectid).HasColumnName("objectid");
            entity.Property(e => e.Property)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("property");
            entity.Property(e => e.Uvalue)
                .HasMaxLength(255)
                .HasColumnName("uvalue");
            entity.Property(e => e.Value)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("value");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<RpReportsCliente>(entity =>
        {
            entity.HasKey(e => e.IdreportPersona);

            entity.ToTable("RP_ReportsCliente");

            entity.Property(e => e.IdreportPersona).HasColumnName("IDReportPersona");
            entity.Property(e => e.Ncopias).HasColumnName("NCopias");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
        });

        modelBuilder.Entity<RpReportsDefault>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RP_ReportsDefault");

            entity.Property(e => e.Ncopias).HasColumnName("NCopias");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
        });

        modelBuilder.Entity<RpReportsDg>(entity =>
        {
            entity.HasKey(e => e.IdreportDg);

            entity.ToTable("RP_ReportsDG");

            entity.Property(e => e.IdreportDg).HasColumnName("IDReportDG");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.DocumentoGestionId).HasColumnName("DocumentoGestionID");
            entity.Property(e => e.Ncopias).HasColumnName("NCopias");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
        });

        modelBuilder.Entity<RpReportsProveedor>(entity =>
        {
            entity.HasKey(e => e.IdreportPersona);

            entity.ToTable("RP_ReportsProveedor");

            entity.Property(e => e.IdreportPersona).HasColumnName("IDReportPersona");
            entity.Property(e => e.Ncopias).HasColumnName("NCopias");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
        });

        modelBuilder.Entity<RrhhPrimasLiquidacion>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("RRHH_PrimasLiquidacion", tb =>
                {
                    tb.HasTrigger("tr_RRHH_PrimasLiquidacion_Insert");
                    tb.HasTrigger("tr_RRHH_PrimasLiquidacion_Update");
                });

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fliquidacion)
                .HasColumnType("datetime")
                .HasColumnName("FLiquidacion");
            entity.Property(e => e.ImporteNominaKilometros).HasColumnType("money");
            entity.Property(e => e.ImporteNominaNumHorasExtra).HasColumnType("money");
            entity.Property(e => e.ImporteNominaTotalActividad).HasColumnType("money");
            entity.Property(e => e.ImporteNominaTotalDietas).HasColumnType("money");
            entity.Property(e => e.ImporteNominaTotalHorasExtra).HasColumnType("money");
            entity.Property(e => e.ImporteNominaTotalKilometros).HasColumnType("money");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Otros).HasColumnType("money");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PrecioDieta)
                .HasDefaultValueSql("((1))")
                .HasColumnType("money");
            entity.Property(e => e.PrecioHoraExtra).HasColumnType("money");
            entity.Property(e => e.PrecioHoraExtraFestivo).HasColumnType("money");
            entity.Property(e => e.PrecioKilometro).HasColumnType("money");
            entity.Property(e => e.PrimaCompensacionFestivo).HasColumnType("money");
            entity.Property(e => e.PrimaFestivo).HasColumnType("money");
            entity.Property(e => e.PrimaHoraReten).HasColumnType("money");
            entity.Property(e => e.PrimaLaborable).HasColumnType("money");
            entity.Property(e => e.PrimaMensual).HasColumnType("money");
            entity.Property(e => e.PrimaServicioReten).HasColumnType("money");
            entity.Property(e => e.TotalDevengado).HasColumnType("money");
            entity.Property(e => e.TotalDietas).HasColumnType("money");
            entity.Property(e => e.TotalHorasA).HasColumnType("money");
            entity.Property(e => e.TotalHorasExtra).HasColumnType("money");
            entity.Property(e => e.TotalHorasExtraFestivo).HasColumnType("money");
            entity.Property(e => e.TotalHorasReten).HasColumnType("money");
            entity.Property(e => e.TotalKilometros).HasColumnType("money");
            entity.Property(e => e.TotalPrimaCompensacionFestivo).HasColumnType("money");
            entity.Property(e => e.TotalPrimaFestivo).HasColumnType("money");
            entity.Property(e => e.TotalPrimaLaborable).HasColumnType("money");
            entity.Property(e => e.TotalPrimaMensual).HasColumnType("money");
            entity.Property(e => e.TotalServicioReten).HasColumnType("money");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.RrhhPrimasLiquidacions)
                .HasForeignKey(d => d.EjercicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RRHH_PrimasLiquidacion_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.RrhhPrimasLiquidacionEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_RRHH_PrimasLiquidacion_Empleados1");

            entity.HasOne(d => d.Empresa).WithMany(p => p.RrhhPrimasLiquidacions)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_RRHH_PrimasLiquidacion_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.RrhhPrimasLiquidacions)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RRHH_PrimasLiquidacion_RRHH_PrimasLiquidacionEstados");

            entity.HasOne(d => d.Persona).WithMany(p => p.RrhhPrimasLiquidacionPersonas)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RRHH_PrimasLiquidacion_Empleados");
        });

        modelBuilder.Entity<RrhhPrimasLiquidacionDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("RRHH_PrimasLiquidacionDetalle", tb =>
                {
                    tb.HasTrigger("tr_RRHH_PrimasLiquidacionDetalle_Insert");
                    tb.HasTrigger("tr_RRHH_PrimasLiquidacionDetalle_Updatet");
                });

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Falta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.FultimaModificacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FUltimaModificacion");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.TipoLineaId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("TipoLineaID");
            entity.Property(e => e.TurnoId).HasColumnName("TurnoID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.RrhhPrimasLiquidacionDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_RRHH_PrimasLiquidacion");

            entity.HasOne(d => d.Empleado).WithMany(p => p.RrhhPrimasLiquidacionDetalles)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_Empleados");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.RrhhPrimasLiquidacionDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_TiposLinea");

            entity.HasOne(d => d.Turno).WithMany(p => p.RrhhPrimasLiquidacionDetalles)
                .HasForeignKey(d => d.TurnoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RRHH_PrimasLiquidacionDetalle_Turnos");
        });

        modelBuilder.Entity<RrhhPrimasLiquidacionEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado).HasName("PK_RRHH_LiquidacionesPrimasEstados");

            entity.ToTable("RRHH_PrimasLiquidacionEstados");

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RrhhSetup>(entity =>
        {
            entity.HasKey(e => e.Idsetup);

            entity.ToTable("RRHH_Setup");

            entity.Property(e => e.Idsetup).HasColumnName("IDSetup");
            entity.Property(e => e.CategoriaId).HasColumnName("CategoriaID");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.Valor).HasColumnType("money");

            entity.HasOne(d => d.Categoria).WithMany(p => p.RrhhSetups)
                .HasForeignKey(d => d.CategoriaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RRHH_Setup_RRHH_SetupCategorias");
        });

        modelBuilder.Entity<RrhhSetupCategoria>(entity =>
        {
            entity.HasKey(e => e.Idcategoria);

            entity.ToTable("RRHH_SetupCategorias");

            entity.Property(e => e.Idcategoria)
                .ValueGeneratedNever()
                .HasColumnName("IDCategoria");
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RutasProduccion>(entity =>
        {
            entity.HasKey(e => e.Idruta);

            entity.ToTable("RutasProduccion");

            entity.Property(e => e.Idruta).HasColumnName("IDRuta");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Notas).HasColumnType("text");
        });

        modelBuilder.Entity<Sctab>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SCTAB");

            entity.Property(e => e.Cod)
                .HasMaxLength(12)
                .HasColumnName("COD");
            entity.Property(e => e.Codbanco)
                .HasMaxLength(4)
                .HasColumnName("CODBANCO");
            entity.Property(e => e.Codcuenta)
                .HasMaxLength(10)
                .HasColumnName("CODCUENTA");
            entity.Property(e => e.Coddc)
                .HasMaxLength(2)
                .HasColumnName("CODDC");
            entity.Property(e => e.Codoficina)
                .HasMaxLength(4)
                .HasColumnName("CODOFICINA");
            entity.Property(e => e.Cpord)
                .HasMaxLength(5)
                .HasColumnName("CPORD");
            entity.Property(e => e.Niford)
                .HasMaxLength(10)
                .HasColumnName("NIFORD");
            entity.Property(e => e.Nord)
                .HasMaxLength(36)
                .HasColumnName("NORD");
            entity.Property(e => e.Pzord)
                .HasMaxLength(31)
                .HasColumnName("PZORD");
        });

        modelBuilder.Entity<Seccione>(entity =>
        {
            entity.HasKey(e => e.Idseccion);

            entity.HasIndex(e => new { e.Idseccion, e.DepartamentoId }, "IX_Secciones_Departamento").IsUnique();

            entity.Property(e => e.Idseccion).HasColumnName("IDSeccion");
            entity.Property(e => e.DepartamentoId).HasColumnName("DepartamentoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeccionId).HasColumnName("SeccionID");

            entity.HasOne(d => d.Departamento).WithMany(p => p.Secciones)
                .HasForeignKey(d => d.DepartamentoId)
                .HasConstraintName("FK_Secciones_Departamentos");

            entity.HasOne(d => d.Seccion).WithMany(p => p.InverseSeccion)
                .HasForeignKey(d => d.SeccionId)
                .HasConstraintName("FK_Secciones_Secciones");
        });

        modelBuilder.Entity<Series>(entity =>
        {
            entity.HasKey(e => e.Idserie);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Check_Abono_Unique");
                    tb.HasTrigger("Check_Autofactura_Unique");
                });

            entity.Property(e => e.Idserie).HasColumnName("IDSerie");
            entity.Property(e => e.Abono).HasComment("vale 1 si la serie es de abono");
            entity.Property(e => e.Isp).HasColumnName("ISP");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SiiFeOperacionDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SII_FE_OperacionDescripcion");
            entity.Property(e => e.SiiFrOperacionDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SII_FR_OperacionDescripcion");
        });

        modelBuilder.Entity<SrvContrato>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("SRV_Contratos", tb =>
                {
                    tb.HasTrigger("Act_Num_SRV_Contratos");
                    tb.HasTrigger("SRV_Contratos_Delete_CDBO");
                    tb.HasTrigger("tr_SRV_Contratos_MaxAnno");
                    tb.HasTrigger("tr_SRV_Contratos_PasarACliente");
                    tb.HasTrigger("tr_SRV_Contratos_UpdateFromDescuento");
                    tb.HasTrigger("tr_SRV_Contratos_UpdateStateAnuladoInDetails");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_SRV_Contratos").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FacturacionPorPlanificacion)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FfinContrato)
                .HasColumnType("datetime")
                .HasColumnName("FFinContrato");
            entity.Property(e => e.FinicioContrato)
                .HasColumnType("datetime")
                .HasColumnName("FInicioContrato");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Frenovacion)
                .HasColumnType("datetime")
                .HasColumnName("FRenovacion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");
            entity.Property(e => e.Version)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_SRV_Contratos_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_SRV_Contratos_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_SRV_Contratos_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_SRV_Contratos_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_SRV_Contratos_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_SRV_Contratos_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_SRV_Contratos_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_Contratos_ContratosEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.SrvContrato)
                .HasForeignKey<SrvContrato>(d => d.Idcdbo)
                .HasConstraintName("FK_SRV_Contratos_Contratos_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_SRV_Contratos_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_SRV_Contratos_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_SRV_Contratos_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_Contratos_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_SRV_Contratos_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.SrvContratos)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_Contratos_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.SrvContratos)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_SRV_Contratos_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<SrvContratosCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("SRV_Contratos_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<SrvContratosDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("SRV_ContratosDetalle", tb =>
                {
                    tb.HasTrigger("SRV_ContratosDetalleAfterDelete");
                    tb.HasTrigger("SRV_ContratosDetalle_Delete_CDBO");
                    tb.HasTrigger("SRV_ContratosDetalle_UpdateCoste");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_UpdateCantidadServidaRelatedDocs");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_UpdatePortes");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_UpdateState");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_UpdateStateDetalle");
                    tb.HasTrigger("tr_SRV_ContratosDetalle_Update_NumLinea");
                    tb.HasTrigger("tr_SRV_Contratos_UpdateTotalesCabecera");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_SRV_ContratosDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_SRV_ContratosDetalle_CabeceraID");

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_SRV_ContratosDetalle_LineaID_NumLinea");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DescuentoGeneral).HasColumnType("money");
            entity.Property(e => e.DireccionInstalacionId).HasColumnName("DireccionInstalacionID");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");
            entity.Property(e => e.Zonas)
                .HasMaxLength(2048)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_SRV_ContratosDetalle_Contratos");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_SRV_ContratosDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_SRV_ContratosDetalle_ConceptosRetencion");

            entity.HasOne(d => d.DireccionInstalacion).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.DireccionInstalacionId)
                .HasConstraintName("FK_SRV_ContratosDetalle_ClientesDirecciones");

            entity.HasOne(d => d.Estado).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_ContratosDetalle_SRV_ContratosEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.SrvContratosDetalle)
                .HasForeignKey<SrvContratosDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_SRV_ContratosDetalle_ContratosDetalle_CDBO");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_SRV_ContratosDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_SRV_ContratosDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_SRV_ContratosDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_SRV_ContratosDetalle_ContratosDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_SRV_ContratosDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_ContratosDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_SRV_ContratosDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_ContratosDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.SrvContratosDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_ContratosDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.SrvContratosDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.SrvContratosDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.SrvContratosDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.SrvContratosDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_SRV_ContratosDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<SrvContratosDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo).HasName("SRV_PK_ContratosDetalle_CDBO");

            entity.ToTable("SRV_ContratosDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<SrvContratosEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("SRV_ContratosEstados");

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SrvContratosPlanificacion>(entity =>
        {
            entity.HasKey(e => e.Idplanificacion);

            entity.ToTable("SRV_ContratosPlanificacion");

            entity.Property(e => e.Idplanificacion).HasColumnName("IDPlanificacion");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CabeceraOfidRelated).HasColumnName("CabeceraOFID_Related");
            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Fprevista)
                .HasColumnType("datetime")
                .HasColumnName("FPrevista");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.SrvContratosPlanificacions)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_ContratosPlanificacion_SRV_Contratos");
        });

        modelBuilder.Entity<SrvPresupuestosVentaCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("SRV_PresupuestosVenta_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<SrvPresupuestosVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("SRV_PresupuestosVentaDetalle", tb =>
                {
                    tb.HasTrigger("SRV_PresupuestosVentaDetalleAfterDelete");
                    tb.HasTrigger("SRV_PresupuestosVentaDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdatePortes_SRV_PresupuestosVenta");
                    tb.HasTrigger("Update_SRV_PresupuestosVentaTotalesCabecera");
                    tb.HasTrigger("tr_SRV_PresupuestosVentaDetalle_Delete_NumLinea");
                    tb.HasTrigger("tr_SRV_PresupuestosVentaDetalle_Insert_NumLinea");
                    tb.HasTrigger("tr_SRV_PresupuestosVentaDetalle_Update_NumLinea");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_SRV_PresupuestosVentaDetalle").IsUnique();

            entity.HasIndex(e => e.CabeceraId, "IX_SRV_PresupuestosVentaDetalle_CabeceraID");

            entity.HasIndex(e => new { e.LineaId, e.NumLinea }, "IX_SRV_PresupuestosVentaDetalle_LineaID_NumLinea");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadX).HasColumnName("Cantidad_X");
            entity.Property(e => e.CantidadXInicial).HasColumnName("Cantidad_X_Inicial");
            entity.Property(e => e.CantidadY).HasColumnName("Cantidad_Y");
            entity.Property(e => e.CantidadYInicial).HasColumnName("Cantidad_Y_Inicial");
            entity.Property(e => e.CantidadZ).HasColumnName("Cantidad_Z");
            entity.Property(e => e.CantidadZInicial).HasColumnName("Cantidad_Z_Inicial");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoRetencionId).HasColumnName("ConceptoRetencionID");
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.DescuentoGeneral).HasColumnType("money");
            entity.Property(e => e.DireccionInstalacionId).HasColumnName("DireccionInstalacionID");
            entity.Property(e => e.DtoCoste).HasColumnType("money");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.GestCorte).HasColumnName("Gest_Corte");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvaTipoId).HasColumnName("IvaTipoID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId).HasColumnName("LoteID");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MargenClaveId).HasColumnName("MargenClaveID");
            entity.Property(e => e.MargenTipoId).HasColumnName("MargenTipoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroCX).HasColumnName("Numero_C_X");
            entity.Property(e => e.NumeroCY).HasColumnName("Numero_C_Y");
            entity.Property(e => e.NumeroCZ).HasColumnName("Numero_C_Z");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion).HasColumnType("money");
            entity.Property(e => e.TiempoAlquiler).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalBeneficio).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
            entity.Property(e => e.UnidadMedidaIdCorteX).HasColumnName("UnidadMedidaID_Corte_X");
            entity.Property(e => e.UnidadMedidaIdCorteY).HasColumnName("UnidadMedidaID_Corte_Y");
            entity.Property(e => e.UnidadMedidaIdCorteZ).HasColumnName("UnidadMedidaID_Corte_Z");
            entity.Property(e => e.Zonas)
                .HasMaxLength(2048)
                .IsUnicode(false);

            entity.HasOne(d => d.Cabecera).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_PresupuestosVenta");

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_CTA_CentroCoste");

            entity.HasOne(d => d.ConceptoRetencion).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.ConceptoRetencionId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_ConceptosRetencion");

            entity.HasOne(d => d.DireccionInstalacion).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.DireccionInstalacionId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_ClientesDirecciones");

            entity.HasOne(d => d.Estado).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_SRV_PresupuestosVentaEstados");

            entity.HasOne(d => d.IvaClase).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.IvaClaseId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_IvaClases");

            entity.HasOne(d => d.IvaTipo).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.IvaTipoId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_IvaTipos");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_IVAGrupos");

            entity.HasOne(d => d.Linea).WithMany(p => p.InverseLinea)
                .HasForeignKey(d => d.LineaId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_PresupuestosVentaDetalle");

            entity.HasOne(d => d.MargenClave).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.MargenClaveId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_MargenesClaves");

            entity.HasOne(d => d.MargenTipo).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.MargenTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_MargenesTipos");

            entity.HasOne(d => d.Medida).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_Productos");

            entity.HasOne(d => d.TipoLinea).WithMany(p => p.SrvPresupuestosVentaDetalles)
                .HasForeignKey(d => d.TipoLineaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_TiposLinea");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.SrvPresupuestosVentaDetalleUnidadMedida)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida");

            entity.HasOne(d => d.UnidadMedidaIdCorteXNavigation).WithMany(p => p.SrvPresupuestosVentaDetalleUnidadMedidaIdCorteXNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteX)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_X");

            entity.HasOne(d => d.UnidadMedidaIdCorteYNavigation).WithMany(p => p.SrvPresupuestosVentaDetalleUnidadMedidaIdCorteYNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteY)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_Y");

            entity.HasOne(d => d.UnidadMedidaIdCorteZNavigation).WithMany(p => p.SrvPresupuestosVentaDetalleUnidadMedidaIdCorteZNavigations)
                .HasForeignKey(d => d.UnidadMedidaIdCorteZ)
                .HasConstraintName("FK_SRV_PresupuestosVentaDetalle_UnidadesMedida_Z");
        });

        modelBuilder.Entity<SrvPresupuestosVentaDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo).HasName("SRV_PK_PresupuestosVentaDetalle_CDBO");

            entity.ToTable("SRV_PresupuestosVentaDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<SrvPresupuestosVentaEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("SRV_PresupuestosVentaEstados");

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SrvPresupuestosVentum>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("SRV_PresupuestosVenta", tb =>
                {
                    tb.HasTrigger("Act_Num_SRV_PresupuestosVenta");
                    tb.HasTrigger("SRV_MaxPresupuestoVentaAnno");
                    tb.HasTrigger("SRV_PresupuestosVenta_Delete_CDBO");
                    tb.HasTrigger("SRV_UpdatePresupuestoVentaFromDescuento");
                    tb.HasTrigger("SRV_UpdateStatePresupuestosVentaDetalleFromHeader");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_SRV_PresupuestosVenta").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CentroCosteId).HasColumnName("CentroCosteID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComercialId).HasColumnName("ComercialID");
            entity.Property(e => e.ComisionId).HasColumnName("ComisionID");
            entity.Property(e => e.ContactoId).HasColumnName("ContactoID");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FacturacionPorPlanificacion)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Frecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FRecepcion");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RevisionPrecios)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.TarifaAgenciaId).HasColumnName("TarifaAgenciaID");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");
            entity.Property(e => e.Version)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.CentroCoste).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.CentroCosteId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_CTA_CentroCoste");

            entity.HasOne(d => d.Comercial).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.ComercialId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Comerciales");

            entity.HasOne(d => d.Comision).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.ComisionId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Comisiones");

            entity.HasOne(d => d.Contacto).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.ContactoId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_ClientesContactos");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVenta_PresupuestosVentaEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.SrvPresupuestosVentum)
                .HasForeignKey<SrvPresupuestosVentum>(d => d.Idcdbo)
                .HasConstraintName("FK_SRV_PresupuestosVenta_PresupuestosVenta_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_IVAGrupos");

            entity.HasOne(d => d.Medio).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.MedioId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_MediosPago");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Clientes");

            entity.HasOne(d => d.Proyecto).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.ProyectoId)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Proyectos");

            entity.HasOne(d => d.Serie).WithMany(p => p.SrvPresupuestosVenta)
                .HasForeignKey(d => d.SerieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRV_PresupuestosVenta_Series");

            entity.HasOne(d => d.AgenciasTransporteTarifa).WithMany(p => p.SrvPresupuestosVenta)
                .HasPrincipalKey(p => new { p.IdtarifaAgencia, p.AgenciaId })
                .HasForeignKey(d => new { d.TarifaAgenciaId, d.AgenciaId })
                .HasConstraintName("FK_SRV_PresupuestosVenta_AgenciasTransporteTarifas");
        });

        modelBuilder.Entity<Subctum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Acudb).HasColumnName("ACUDB");
            entity.Property(e => e.Acuhb).HasColumnName("ACUHB");
            entity.Property(e => e.Ajustame).HasColumnName("AJUSTAME");
            entity.Property(e => e.Cod)
                .HasMaxLength(12)
                .HasColumnName("COD");
            entity.Property(e => e.Coddivisa)
                .HasMaxLength(5)
                .HasColumnName("CODDIVISA");
            entity.Property(e => e.Codpostal)
                .HasMaxLength(5)
                .HasColumnName("CODPOSTAL");
            entity.Property(e => e.Divisa).HasColumnName("DIVISA");
            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");
            entity.Property(e => e.Domicilio)
                .HasMaxLength(35)
                .HasColumnName("DOMICILIO");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax01)
                .HasMaxLength(15)
                .HasColumnName("FAX01");
            entity.Property(e => e.Ndb).HasColumnName("NDB");
            entity.Property(e => e.Ndb01).HasColumnName("NDB01");
            entity.Property(e => e.Ndb01eu).HasColumnName("NDB01EU");
            entity.Property(e => e.Ndb02).HasColumnName("NDB02");
            entity.Property(e => e.Ndb02eu).HasColumnName("NDB02EU");
            entity.Property(e => e.Ndb03).HasColumnName("NDB03");
            entity.Property(e => e.Ndb03eu).HasColumnName("NDB03EU");
            entity.Property(e => e.Ndb04).HasColumnName("NDB04");
            entity.Property(e => e.Ndb04eu).HasColumnName("NDB04EU");
            entity.Property(e => e.Ndb05).HasColumnName("NDB05");
            entity.Property(e => e.Ndb05eu).HasColumnName("NDB05EU");
            entity.Property(e => e.Ndb06).HasColumnName("NDB06");
            entity.Property(e => e.Ndb06eu).HasColumnName("NDB06EU");
            entity.Property(e => e.Ndb07).HasColumnName("NDB07");
            entity.Property(e => e.Ndb07eu).HasColumnName("NDB07EU");
            entity.Property(e => e.Ndb08).HasColumnName("NDB08");
            entity.Property(e => e.Ndb08eu).HasColumnName("NDB08EU");
            entity.Property(e => e.Ndb09).HasColumnName("NDB09");
            entity.Property(e => e.Ndb09eu).HasColumnName("NDB09EU");
            entity.Property(e => e.Ndb10).HasColumnName("NDB10");
            entity.Property(e => e.Ndb10eu).HasColumnName("NDB10EU");
            entity.Property(e => e.Ndb11).HasColumnName("NDB11");
            entity.Property(e => e.Ndb11eu).HasColumnName("NDB11EU");
            entity.Property(e => e.Ndb12).HasColumnName("NDB12");
            entity.Property(e => e.Ndb12eu).HasColumnName("NDB12EU");
            entity.Property(e => e.Ndbeu).HasColumnName("NDBEU");
            entity.Property(e => e.Nhb).HasColumnName("NHB");
            entity.Property(e => e.Nhb01).HasColumnName("NHB01");
            entity.Property(e => e.Nhb01eu).HasColumnName("NHB01EU");
            entity.Property(e => e.Nhb02).HasColumnName("NHB02");
            entity.Property(e => e.Nhb02eu).HasColumnName("NHB02EU");
            entity.Property(e => e.Nhb03).HasColumnName("NHB03");
            entity.Property(e => e.Nhb03eu).HasColumnName("NHB03EU");
            entity.Property(e => e.Nhb04).HasColumnName("NHB04");
            entity.Property(e => e.Nhb04eu).HasColumnName("NHB04EU");
            entity.Property(e => e.Nhb05).HasColumnName("NHB05");
            entity.Property(e => e.Nhb05eu).HasColumnName("NHB05EU");
            entity.Property(e => e.Nhb06).HasColumnName("NHB06");
            entity.Property(e => e.Nhb06eu).HasColumnName("NHB06EU");
            entity.Property(e => e.Nhb07).HasColumnName("NHB07");
            entity.Property(e => e.Nhb07eu).HasColumnName("NHB07EU");
            entity.Property(e => e.Nhb08).HasColumnName("NHB08");
            entity.Property(e => e.Nhb08eu).HasColumnName("NHB08EU");
            entity.Property(e => e.Nhb09).HasColumnName("NHB09");
            entity.Property(e => e.Nhb09eu).HasColumnName("NHB09EU");
            entity.Property(e => e.Nhb10).HasColumnName("NHB10");
            entity.Property(e => e.Nhb10eu).HasColumnName("NHB10EU");
            entity.Property(e => e.Nhb11).HasColumnName("NHB11");
            entity.Property(e => e.Nhb11eu).HasColumnName("NHB11EU");
            entity.Property(e => e.Nhb12).HasColumnName("NHB12");
            entity.Property(e => e.Nhb12eu).HasColumnName("NHB12EU");
            entity.Property(e => e.Nhbeu).HasColumnName("NHBEU");
            entity.Property(e => e.Nif)
                .HasMaxLength(15)
                .HasColumnName("NIF");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(25)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Provincia)
                .HasMaxLength(20)
                .HasColumnName("PROVINCIA");
            entity.Property(e => e.Recequiv).HasColumnName("RECEQUIV");
            entity.Property(e => e.Sdb01).HasColumnName("SDB01");
            entity.Property(e => e.Sdb01eu).HasColumnName("SDB01EU");
            entity.Property(e => e.Sdb02).HasColumnName("SDB02");
            entity.Property(e => e.Sdb02eu).HasColumnName("SDB02EU");
            entity.Property(e => e.Sdb03).HasColumnName("SDB03");
            entity.Property(e => e.Sdb03eu).HasColumnName("SDB03EU");
            entity.Property(e => e.Sdb04).HasColumnName("SDB04");
            entity.Property(e => e.Sdb04eu).HasColumnName("SDB04EU");
            entity.Property(e => e.Sdb05).HasColumnName("SDB05");
            entity.Property(e => e.Sdb05eu).HasColumnName("SDB05EU");
            entity.Property(e => e.Sdb06).HasColumnName("SDB06");
            entity.Property(e => e.Sdb06eu).HasColumnName("SDB06EU");
            entity.Property(e => e.Sdb07).HasColumnName("SDB07");
            entity.Property(e => e.Sdb07eu).HasColumnName("SDB07EU");
            entity.Property(e => e.Sdb08).HasColumnName("SDB08");
            entity.Property(e => e.Sdb08eu).HasColumnName("SDB08EU");
            entity.Property(e => e.Sdb09).HasColumnName("SDB09");
            entity.Property(e => e.Sdb09eu).HasColumnName("SDB09EU");
            entity.Property(e => e.Sdb10).HasColumnName("SDB10");
            entity.Property(e => e.Sdb10eu).HasColumnName("SDB10EU");
            entity.Property(e => e.Sdb11).HasColumnName("SDB11");
            entity.Property(e => e.Sdb11eu).HasColumnName("SDB11EU");
            entity.Property(e => e.Sdb12).HasColumnName("SDB12");
            entity.Property(e => e.Sdb12eu).HasColumnName("SDB12EU");
            entity.Property(e => e.Sdbme).HasColumnName("SDBME");
            entity.Property(e => e.Shb01).HasColumnName("SHB01");
            entity.Property(e => e.Shb01eu).HasColumnName("SHB01EU");
            entity.Property(e => e.Shb02).HasColumnName("SHB02");
            entity.Property(e => e.Shb02eu).HasColumnName("SHB02EU");
            entity.Property(e => e.Shb03).HasColumnName("SHB03");
            entity.Property(e => e.Shb03eu).HasColumnName("SHB03EU");
            entity.Property(e => e.Shb04).HasColumnName("SHB04");
            entity.Property(e => e.Shb04eu).HasColumnName("SHB04EU");
            entity.Property(e => e.Shb05).HasColumnName("SHB05");
            entity.Property(e => e.Shb05eu).HasColumnName("SHB05EU");
            entity.Property(e => e.Shb06).HasColumnName("SHB06");
            entity.Property(e => e.Shb06eu).HasColumnName("SHB06EU");
            entity.Property(e => e.Shb07).HasColumnName("SHB07");
            entity.Property(e => e.Shb07eu).HasColumnName("SHB07EU");
            entity.Property(e => e.Shb08).HasColumnName("SHB08");
            entity.Property(e => e.Shb08eu).HasColumnName("SHB08EU");
            entity.Property(e => e.Shb09).HasColumnName("SHB09");
            entity.Property(e => e.Shb09eu).HasColumnName("SHB09EU");
            entity.Property(e => e.Shb10).HasColumnName("SHB10");
            entity.Property(e => e.Shb10eu).HasColumnName("SHB10EU");
            entity.Property(e => e.Shb11).HasColumnName("SHB11");
            entity.Property(e => e.Shb11eu).HasColumnName("SHB11EU");
            entity.Property(e => e.Shb12).HasColumnName("SHB12");
            entity.Property(e => e.Shb12eu).HasColumnName("SHB12EU");
            entity.Property(e => e.Shbme).HasColumnName("SHBME");
            entity.Property(e => e.Subequiv)
                .HasMaxLength(12)
                .HasColumnName("SUBEQUIV");
            entity.Property(e => e.Sumadb).HasColumnName("SUMADB");
            entity.Property(e => e.Sumadbeu).HasColumnName("SUMADBEU");
            entity.Property(e => e.Sumahb).HasColumnName("SUMAHB");
            entity.Property(e => e.Sumahbeu).HasColumnName("SUMAHBEU");
            entity.Property(e => e.Telef01)
                .HasMaxLength(15)
                .HasColumnName("TELEF01");
            entity.Property(e => e.Tipoiva)
                .HasMaxLength(1)
                .HasColumnName("TIPOIVA");
            entity.Property(e => e.Titulo)
                .HasMaxLength(40)
                .HasColumnName("TITULO");
            entity.Property(e => e.Titulol)
                .HasMaxLength(100)
                .HasColumnName("TITULOL");
            entity.Property(e => e.Tpc).HasColumnName("TPC");
        });

        modelBuilder.Entity<SyncConnection>(entity =>
        {
            entity.HasKey(e => e.Idconnection);

            entity.ToTable("sync_Connections");

            entity.Property(e => e.Idconnection).HasColumnName("IDConnection");
            entity.Property(e => e.Datasource)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Idguid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("IDGUID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Password).HasMaxLength(128);
            entity.Property(e => e.Provider).HasMaxLength(128);
            entity.Property(e => e.Server).HasMaxLength(128);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.Username).HasMaxLength(128);

            entity.HasOne(d => d.Tipo).WithMany(p => p.SyncConnections)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sync_Connections_sync_Tipos");

            entity.HasMany(d => d.Familia).WithMany(p => p.Connections)
                .UsingEntity<Dictionary<string, object>>(
                    "SyncConnectionsFamilia",
                    r => r.HasOne<Familia>().WithMany()
                        .HasForeignKey("FamiliaId")
                        .HasConstraintName("FK_sync_Connections_Familias_Familias"),
                    l => l.HasOne<SyncConnection>().WithMany()
                        .HasForeignKey("ConnectionId")
                        .HasConstraintName("FK_sync_Connections_Familias_sync_Connections"),
                    j =>
                    {
                        j.HasKey("ConnectionId", "FamiliaId");
                        j.ToTable("sync_Connections_Familias");
                        j.IndexerProperty<int>("ConnectionId").HasColumnName("ConnectionID");
                        j.IndexerProperty<int>("FamiliaId").HasColumnName("FamiliaID");
                    });
        });

        modelBuilder.Entity<SyncOperation>(entity =>
        {
            entity.HasKey(e => new { e.Idoperation, e.SynchronizedVisibility });

            entity.ToTable("sync_Operations");

            entity.Property(e => e.Idoperation).HasColumnName("IDOperation");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SyncSynchronization>(entity =>
        {
            entity.HasKey(e => e.Idsynchronization);

            entity.ToTable("sync_Synchronizations");

            entity.Property(e => e.Idsynchronization).HasColumnName("IDSynchronization");
            entity.Property(e => e.ConnectionId).HasColumnName("ConnectionID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.Notas).HasMaxLength(500);

            entity.HasOne(d => d.Connection).WithMany(p => p.SyncSynchronizations)
                .HasForeignKey(d => d.ConnectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sync_Synchronizations_sync_Connections");
        });

        modelBuilder.Entity<SyncSynchronizedRecord>(entity =>
        {
            entity.HasKey(e => e.IdsynchronizedRecord);

            entity.ToTable("sync_SynchronizedRecords");

            entity.HasIndex(e => new { e.ConnectionId, e.EntidadId, e.EntidadKeyValue }, "UIX_sync_SynchronizedRecords_ConnectionID_EntidadID_Entidad_KeyValue").IsUnique();

            entity.Property(e => e.IdsynchronizedRecord).HasColumnName("IDSynchronizedRecord");
            entity.Property(e => e.ConnectionId).HasColumnName("ConnectionID");
            entity.Property(e => e.EntidadId).HasColumnName("EntidadID");
            entity.Property(e => e.EntidadKeyValue).HasColumnName("Entidad_KeyValue");
            entity.Property(e => e.Fsynch)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FSynch");
            entity.Property(e => e.IdremoteKeyValue).HasColumnName("IDRemote_KeyValue");

            entity.HasOne(d => d.Connection).WithMany(p => p.SyncSynchronizedRecords)
                .HasForeignKey(d => d.ConnectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sync_SynchronizedRecords_sync_Connections");

            entity.HasOne(d => d.Entidad).WithMany(p => p.SyncSynchronizedRecords)
                .HasForeignKey(d => d.EntidadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sync_SynchronizedRecords_GS_Entidades");
        });

        modelBuilder.Entity<SyncTipo>(entity =>
        {
            entity.HasKey(e => e.Idtipo);

            entity.ToTable("sync_Tipos");

            entity.Property(e => e.Idtipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTipo");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.SyncCode)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("sync_Code");
        });

        modelBuilder.Entity<Tarea>(entity =>
        {
            entity.HasKey(e => e.Idtarea);

            entity.Property(e => e.Idtarea).HasColumnName("IDTarea");
            entity.Property(e => e.Asunto)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.EmpleadoAsignadoId).HasColumnName("EmpleadoAsignadoID");
            entity.Property(e => e.EmpleadoId)
                .HasComment("Empleado que da de alta la tarea")
                .HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId)
                .HasComment("Empresa a la que pertenece el EmpleadoID")
                .HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.FechaAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaAviso).HasColumnType("datetime");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.Idguid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("IDGUID");
            entity.Property(e => e.Notas).HasMaxLength(1000);
            entity.Property(e => e.OfdetalleId).HasColumnName("OFDetalleID");
            entity.Property(e => e.Ofid).HasColumnName("OFID");
            entity.Property(e => e.OftipoId).HasColumnName("OFTipoID");
            entity.Property(e => e.OrigenId)
                .HasComment("Llamada, email, reunión cliente, interno")
                .HasColumnName("OrigenID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.ProyectoId).HasColumnName("ProyectoID");
            entity.Property(e => e.TareaId).HasColumnName("TareaID");
            entity.Property(e => e.TipoClaseId)
                .HasComment("FK contra la tabla TSK_TareasClases, define las clases para cada tipo de Tarea (Mant. Soft., Básica, Personal, etc.)")
                .HasColumnName("TipoClaseID");
            entity.Property(e => e.TipoId)
                .HasComment("Error, Mejora, Mejora interna, etc.")
                .HasColumnName("TipoID");

            entity.HasOne(d => d.EmpleadoAsignado).WithMany(p => p.TareaEmpleadoAsignados)
                .HasForeignKey(d => d.EmpleadoAsignadoId)
                .HasConstraintName("FK_Tareas_Empleados_Assigned");

            entity.HasOne(d => d.Empleado).WithMany(p => p.TareaEmpleados)
                .HasForeignKey(d => d.EmpleadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tareas_Empleados_Owner");

            entity.HasOne(d => d.Estado).WithMany(p => p.Tareas)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tareas_TSK_TareasEstados");

            entity.HasOne(d => d.Origen).WithMany(p => p.Tareas)
                .HasForeignKey(d => d.OrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tareas_TSK_TareasOrigenes");

            entity.HasOne(d => d.Prioridad).WithMany(p => p.Tareas)
                .HasForeignKey(d => d.PrioridadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tareas_TSK_TareasPrioridades");

            entity.HasOne(d => d.TipoClase).WithMany(p => p.Tareas)
                .HasForeignKey(d => d.TipoClaseId)
                .HasConstraintName("FK_Tareas_TSK_TareasClases");

            entity.HasOne(d => d.Tipo).WithMany(p => p.Tareas)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tareas_TSK_TareasMantenimientoTipos");
        });

        modelBuilder.Entity<Tarifa>(entity =>
        {
            entity.HasKey(e => e.Idtarifa);

            entity.Property(e => e.Idtarifa).HasColumnName("IDTarifa");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Ffin)
                .HasColumnType("datetime")
                .HasColumnName("FFin");
            entity.Property(e => e.Finicio)
                .HasColumnType("datetime")
                .HasColumnName("FInicio");
            entity.Property(e => e.General).HasComment("Determina si la Tarifa se aplica a aquellos clientes que no tienen Tarifa especifica");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TarifasDetalle>(entity =>
        {
            entity.HasKey(e => e.IdtarifaDetalle);

            entity.ToTable("TarifasDetalle");

            entity.HasIndex(e => new { e.ProductoId, e.CantidadDesde, e.CalculoTipo, e.MargenOrigen, e.MargenOperacion }, "IX_TarifasDetalle");

            entity.HasIndex(e => new { e.TarifaId, e.ProductoId, e.CantidadDesde }, "IX_TarifasDetalle_Producto_Tarifa_Cantidad").IsUnique();

            entity.Property(e => e.IdtarifaDetalle).HasColumnName("IDTarifaDetalle");
            entity.Property(e => e.CalculoTipo).HasComment("1 > Fijo, 2 > Margen");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.FechaUltimaActualizacion).HasColumnType("datetime");
            entity.Property(e => e.Margen).HasComment("% o importe seg·n Margen_Operacion");
            entity.Property(e => e.MargenCosteAdicionalMargen).HasColumnName("MargenCosteAdicional_Margen");
            entity.Property(e => e.MargenCosteAdicionalOperacion).HasColumnName("MargenCosteAdicional_Operacion");
            entity.Property(e => e.MargenOperacion)
                .HasComment("%, +")
                .HasColumnName("Margen_Operacion");
            entity.Property(e => e.MargenOrigen)
                .HasComment("Coste ·ltima Entrada, Coste Medio, Precio Venta")
                .HasColumnName("Margen_Origen");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.Pvp).HasColumnName("PVP");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");

            entity.HasOne(d => d.Producto).WithMany(p => p.TarifasDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TarifasDetalle_Productos");

            entity.HasOne(d => d.Tarifa).WithMany(p => p.TarifasDetalles)
                .HasForeignKey(d => d.TarifaId)
                .HasConstraintName("FK_TarifasDetalle_Tarifas");
        });

        modelBuilder.Entity<TarifasTipo>(entity =>
        {
            entity.HasKey(e => e.IdtarifaTipo);

            entity.ToTable("TarifasTipo");

            entity.Property(e => e.IdtarifaTipo).HasColumnName("IDTarifaTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Temporada>(entity =>
        {
            entity.HasKey(e => e.Idtemporada);

            entity.Property(e => e.Idtemporada).HasColumnName("IDTemporada");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TesoreriaApunte>(entity =>
        {
            entity.HasKey(e => e.Idapunte);

            entity.ToTable("TesoreriaApunte", tb => tb.HasTrigger("Tesoreria_Actualizar_SaldosFecha"));

            entity.HasIndex(e => new { e.CuentaEmpresaId, e.Foperacion, e.Tipo }, "IX_TesoreriaApunte_CuentaEmpresaID_FOpe_Tipo");

            entity.Property(e => e.Idapunte).HasColumnName("IDApunte");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CuentaEmpresaId).HasColumnName("CuentaEmpresaID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fcargo)
                .HasColumnType("datetime")
                .HasColumnName("FCargo");
            entity.Property(e => e.Foperacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FOperacion");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TipoId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("TipoID");
            entity.Property(e => e.VencimientoId).HasColumnName("VencimientoID");

            entity.HasOne(d => d.CuentaEmpresa).WithMany(p => p.TesoreriaApuntes)
                .HasForeignKey(d => d.CuentaEmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TesoreriaApunte_EmpresasCuentasBancarias");

            entity.HasOne(d => d.TipoNavigation).WithMany(p => p.TesoreriaApuntes)
                .HasForeignKey(d => d.TipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TesoreriaApunte_TesoreriaApunteTipo");
        });

        modelBuilder.Entity<TesoreriaApunteTipo>(entity =>
        {
            entity.HasKey(e => e.IdtipoApunte);

            entity.ToTable("TesoreriaApunteTipo");

            entity.Property(e => e.IdtipoApunte).HasColumnName("IDTipoApunte");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TableNameRelated)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TableNameRelatedDestinatario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TableNameRelated_Destinatario");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TesoreriaSaldosFecha>(entity =>
        {
            entity.HasKey(e => new { e.Fecha, e.CuentaEmpresaId });

            entity.ToTable("TesoreriaSaldosFecha", tb => tb.HasTrigger("tr_TesoreriaSaldosFecha_Actualizar_TodasFechas"));

            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.CuentaEmpresaId).HasColumnName("CuentaEmpresaID");
            entity.Property(e => e.Saldo).HasColumnType("money");

            entity.HasOne(d => d.CuentaEmpresa).WithMany(p => p.TesoreriaSaldosFechas)
                .HasForeignKey(d => d.CuentaEmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TesoreriaSaldosFecha_EmpresasCuentasBancarias");
        });

        modelBuilder.Entity<TipoFacturacion>(entity =>
        {
            entity.HasKey(e => e.IdtipoFacturacion);

            entity.ToTable("TipoFacturacion");

            entity.Property(e => e.IdtipoFacturacion).HasColumnName("IDTipoFacturacion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TiposDireccion>(entity =>
        {
            entity.HasKey(e => e.IdtipoDireccion);

            entity.ToTable("TiposDireccion");

            entity.Property(e => e.IdtipoDireccion).HasColumnName("IDTipoDireccion");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TiposLinea>(entity =>
        {
            entity.HasKey(e => e.IdtipoLinea);

            entity.ToTable("TiposLinea");

            entity.Property(e => e.IdtipoLinea).HasColumnName("IDTipoLinea");
            entity.Property(e => e.AplicateDtoCabecera)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.CantidadDef).HasColumnName("Cantidad_def");
            entity.Property(e => e.IsGroupHeaderYdetalle).HasColumnName("IsGroupHeaderYDetalle");
            entity.Property(e => e.LineaCompuesto)
                .IsRequired()
                .HasDefaultValueSql("(CONVERT([bit],(0),0))")
                .HasComment("GroupHeader+GestionProdYPrec");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SetEstadoCabecera)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<TiposPorte>(entity =>
        {
            entity.HasKey(e => e.IdtipoPorte);

            entity.Property(e => e.IdtipoPorte).HasColumnName("IDTipoPorte");
            entity.Property(e => e.AtributoId).HasColumnName("AtributoID");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tpv>(entity =>
        {
            entity.HasKey(e => e.Idtpv);

            entity.ToTable("TPV");

            entity.Property(e => e.Idtpv).HasColumnName("IDTPV");
            entity.Property(e => e.AlmacenIdDef).HasColumnName("AlmacenID_def");
            entity.Property(e => e.Asignada).HasDefaultValueSql("(0)");
            entity.Property(e => e.CajonOpenString)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cajon_OpenString");
            entity.Property(e => e.CertKeyPath)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CertPass).HasMaxLength(256);
            entity.Property(e => e.CertPath)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPuertoCajon).HasColumnName("Codigo_Puerto_Cajon");
            entity.Property(e => e.CodigoPuertoImpresora).HasColumnName("Codigo_Puerto_Impresora");
            entity.Property(e => e.CodigoPuertoVisor).HasColumnName("Codigo_Puerto_Visor");
            entity.Property(e => e.Descatalogada).HasDefaultValueSql("(0)");
            entity.Property(e => e.LongMaxVisor).HasColumnName("LongMax_Visor");
            entity.Property(e => e.PadConnected).HasDefaultValueSql("((0))");
            entity.Property(e => e.PuertoCajon).HasColumnName("Puerto_Cajon");
            entity.Property(e => e.PuertoImpresora).HasColumnName("Puerto_Impresora");
            entity.Property(e => e.PuertoVisor).HasColumnName("Puerto_Visor");
            entity.Property(e => e.SharedPrinterName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SignBottom).HasDefaultValueSql("((0))");
            entity.Property(e => e.SignEmbed).HasDefaultValueSql("((0))");
            entity.Property(e => e.SignLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.SignRight).HasDefaultValueSql("((0))");
            entity.Property(e => e.SignTop).HasDefaultValueSql("((0))");
            entity.Property(e => e.UbicacionIdDef).HasColumnName("UbicacionID_def");

            entity.HasOne(d => d.AlmacenesUbicacione).WithMany(p => p.Tpvs)
                .HasPrincipalKey(p => new { p.Idubicacion, p.AlmacenId })
                .HasForeignKey(d => new { d.UbicacionIdDef, d.AlmacenIdDef })
                .HasConstraintName("FK_TPV_AlmacenesUbicaciones");
        });

        modelBuilder.Entity<TpvcabeceraTicket>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TPVCabeceraTicket");

            entity.Property(e => e.IdtpvcabeceraTicket)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDTPVCabeceraTicket");
            entity.Property(e => e.Texto)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tpvcambio>(entity =>
        {
            entity.HasKey(e => e.Idtpvcambio);

            entity.ToTable("TPVCambios");

            entity.Property(e => e.Idtpvcambio).HasColumnName("IDTPVCambio");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.Tpvid).HasColumnName("TPVID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Tpvcambios)
                .HasForeignKey(d => d.EmpleadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVCambios_Empleados");

            entity.HasOne(d => d.Tpv).WithMany(p => p.Tpvcambios)
                .HasForeignKey(d => d.Tpvid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVCambios_TPV");
        });

        modelBuilder.Entity<Tpvdescuento>(entity =>
        {
            entity.HasKey(e => e.Idtpvdescuento);

            entity.ToTable("TPVDescuentos");

            entity.Property(e => e.Idtpvdescuento).HasColumnName("IDTPVDescuento");
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TpvformasPago>(entity =>
        {
            entity.HasKey(e => e.IdtpvformaPago).HasName("PK_IDTPVFormaPago");

            entity.ToTable("TPVFormasPago");

            entity.Property(e => e.IdtpvformaPago)
                .ValueGeneratedNever()
                .HasColumnName("IDTPVFormaPago");
            entity.Property(e => e.CuentaContableTickets)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tpvimg>(entity =>
        {
            entity.HasKey(e => e.Idimg);

            entity.ToTable("TPVimg");

            entity.Property(e => e.Idimg).HasColumnName("idimg");
            entity.Property(e => e.Imagen)
                .HasColumnType("image")
                .HasColumnName("imagen");
            entity.Property(e => e.Txt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt");
        });

        modelBuilder.Entity<TpvmensajesVisor>(entity =>
        {
            entity.HasKey(e => new { e.Idmensaje, e.NumLinea });

            entity.ToTable("TPVMensajesVisor");

            entity.Property(e => e.Idmensaje).HasColumnName("IDMensaje");
            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.Texto)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TpvmovimientosCaja>(entity =>
        {
            entity.HasKey(e => e.IdtpvmovimientoCaja);

            entity.ToTable("TPVMovimientosCaja");

            entity.Property(e => e.IdtpvmovimientoCaja).HasColumnName("IDTPVMovimientoCaja");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadEntra).HasColumnType("money");
            entity.Property(e => e.CantidadSale).HasColumnType("money");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EntregaAcuenta).HasColumnName("EntregaACuenta");
            entity.Property(e => e.FechaHora)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TpvformaPagoId).HasColumnName("TPVFormaPagoID");
            entity.Property(e => e.Tpvid).HasColumnName("TPVid");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.TpvmovimientosCajas)
                .HasForeignKey(d => d.CabeceraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVMovimientosCaja_TPVTickets");

            entity.HasOne(d => d.Empleado).WithMany(p => p.TpvmovimientosCajas)
                .HasForeignKey(d => d.EmpleadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVMovimientosCaja_Empleados");

            entity.HasOne(d => d.Tpv).WithMany(p => p.TpvmovimientosCajas)
                .HasForeignKey(d => d.Tpvid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVMovimientosCaja_TPV");
        });

        modelBuilder.Entity<TpvpagosPorCaja>(entity =>
        {
            entity.HasKey(e => e.IdtpvpagoPorCaja);

            entity.ToTable("TPVPagosPorCaja");

            entity.Property(e => e.IdtpvpagoPorCaja).HasColumnName("IDTPVPagoPorCaja");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.Tpvid).HasColumnName("TPVID");

            entity.HasOne(d => d.Empleado).WithMany(p => p.TpvpagosPorCajas)
                .HasForeignKey(d => d.EmpleadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVPagosPorCaja_Empleados");

            entity.HasOne(d => d.Tpv).WithMany(p => p.TpvpagosPorCajas)
                .HasForeignKey(d => d.Tpvid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVPagosPorCaja_TPV");
        });

        modelBuilder.Entity<TpvpieTicket>(entity =>
        {
            entity.HasKey(e => e.IdnotaTicket);

            entity.ToTable("TPVPieTicket");

            entity.Property(e => e.IdnotaTicket).HasColumnName("IDNotaTicket");
            entity.Property(e => e.Texto)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tpvpromocione>(entity =>
        {
            entity.HasKey(e => e.Idtpvpromocion);

            entity.ToTable("TPVPromociones");

            entity.Property(e => e.Idtpvpromocion).HasColumnName("IDTPVPromocion");
            entity.Property(e => e.Dinero).HasColumnType("money");
            entity.Property(e => e.Promocion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Puntos)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tpvticket>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable("TPVTickets", tb =>
                {
                    tb.HasTrigger("MaxNumeroTicket");
                    tb.HasTrigger("TPVTickets_Delete_CDBO");
                    tb.HasTrigger("TPVTickets_LineaCabecera");
                    tb.HasTrigger("T_TPVTickets_CRM");
                    tb.HasTrigger("UpdateStateTPVTickets");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_TPVTickets").IsUnique();

            entity.HasIndex(e => new { e.PersonaId, e.EjercicioId }, "IX_TPVTickets_PersonaID_EjercicioID");

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Abierto).HasDefaultValueSql("(1)");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Arreglo).HasDefaultValueSql("(0)");
            entity.Property(e => e.BaseImponible)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.Contabilizado).HasDefaultValueSql("(0)");
            entity.Property(e => e.DescripcionOperacion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Descuento)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.Entrega).HasDefaultValueSql("(0)");
            entity.Property(e => e.Entregado).HasDefaultValueSql("(0)");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Foperacion)
                .HasColumnType("datetime")
                .HasColumnName("FOperacion");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Hora).HasColumnType("datetime");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.MargenBeneficio).HasColumnType("money");
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId)
                .HasDefaultValueSql("(0)")
                .HasColumnName("PortesTipoID");
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.SiiExportado).HasColumnName("SII_Exportado");
            entity.Property(e => e.TarifaId).HasColumnName("TarifaID");
            entity.Property(e => e.Tipo).HasDefaultValueSql("(0)");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.TotalCoste)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.TotalPortes)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.TotalRetencion)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.Tpvid).HasColumnName("TPVID");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_TPVTickets_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_TPVTickets_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_TPVTickets_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.EstadoId)
                .HasConstraintName("FK_TPVTickets_TPVTicketsEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Tpvticket)
                .HasForeignKey<Tpvticket>(d => d.Idcdbo)
                .HasConstraintName("FK_TPVTickets_TPVTickets_CDBO");

            entity.HasOne(d => d.Ivagrupo).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.IvagrupoId)
                .HasConstraintName("FK_TPVTickets_IVAGrupos");

            entity.HasOne(d => d.PersonaDireccionEntrega).WithMany(p => p.TpvticketPersonaDireccionEntregas)
                .HasForeignKey(d => d.PersonaDireccionEntregaId)
                .HasConstraintName("FK_TPVTickets_ClientesDirecciones1");

            entity.HasOne(d => d.PersonaDireccionFactura).WithMany(p => p.TpvticketPersonaDireccionFacturas)
                .HasForeignKey(d => d.PersonaDireccionFacturaId)
                .HasConstraintName("FK_TPVTickets_ClientesDirecciones");

            entity.HasOne(d => d.Persona).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.PersonaId)
                .HasConstraintName("FK_TPVTickets_Clientes");

            entity.HasOne(d => d.Serie).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.SerieId)
                .HasConstraintName("FK_TPVTickets_Series");

            entity.HasOne(d => d.Tarifa).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.TarifaId)
                .HasConstraintName("FK_TPVTickets_Tarifas");

            entity.HasOne(d => d.Tpv).WithMany(p => p.Tpvtickets)
                .HasForeignKey(d => d.Tpvid)
                .HasConstraintName("FK_TPVTickets_TPV");
        });

        modelBuilder.Entity<TpvticketsCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("TPVTickets_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<TpvticketsDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("TPVTicketsDetalle", tb =>
                {
                    tb.HasTrigger("TPVTicketsDetalle_Delete_CDBO");
                    tb.HasTrigger("UpdateDGDUbicacionesFromTPVTicketsDetalle");
                    tb.HasTrigger("UpdateLineaDescuentoFromDetalles");
                    tb.HasTrigger("UpdateTicketsDetalleTotalesCabecera");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_TPVTicketsDetalle").IsUnique();

            entity.HasIndex(e => e.ProductoId, "IX_TPVTicketsDetalle_ProductoID");

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.CantidadPendiente).HasDefaultValueSql("(0)");
            entity.Property(e => e.CantidadServida).HasDefaultValueSql("(0)");
            entity.Property(e => e.CodigoPropioProducto)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CtaConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EstadoId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("EstadoID");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.IvaClaseId).HasColumnName("IvaClaseID");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.IvatipoId).HasColumnName("IVATipoID");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.LoteId)
                .HasDefaultValueSql("(1)")
                .HasColumnName("LoteID");
            entity.Property(e => e.Margen)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.NumeroLote)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.PromocionId).HasColumnName("PromocionID");
            entity.Property(e => e.Puntos).HasDefaultValueSql("(0)");
            entity.Property(e => e.Pvp).HasColumnName("PVP");
            entity.Property(e => e.RecargoEquivalencia).HasDefaultValueSql("(0)");
            entity.Property(e => e.RefPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retencion)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste)
                .HasDefaultValueSql("(0)")
                .HasColumnType("money");
            entity.Property(e => e.UidId).HasColumnName("uidID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.TpvticketsDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_TPVTicketsDetalle_TPVTickets");

            entity.HasOne(d => d.Empleado).WithMany(p => p.TpvticketsDetalles)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_TPVTicketsDetalle_Empleados");

            entity.HasOne(d => d.Estado).WithMany(p => p.TpvticketsDetalles)
                .HasForeignKey(d => d.EstadoId)
                .HasConstraintName("FK_TPVTicketsDetalle_TPVTicketsEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.TpvticketsDetalle)
                .HasForeignKey<TpvticketsDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_TPVTicketsDetalle_TPVTicketsDetalle_CDBO");

            entity.HasOne(d => d.Ivatipo).WithMany(p => p.TpvticketsDetalles)
                .HasForeignKey(d => d.IvatipoId)
                .HasConstraintName("FK_TPVTicketsDetalle_IvaTipos");

            entity.HasOne(d => d.Lote).WithMany(p => p.TpvticketsDetalles)
                .HasForeignKey(d => d.LoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVTicketsDetalle_Lotes");

            entity.HasOne(d => d.Producto).WithMany(p => p.TpvticketsDetalles)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPVTicketsDetalle_Productos");

            entity.HasOne(d => d.UnidadesMedidum).WithMany(p => p.TpvticketsDetalles)
                .HasPrincipalKey(p => new { p.IdunidadMedida, p.MedidaId })
                .HasForeignKey(d => new { d.UnidadMedidaId, d.MedidaId })
                .HasConstraintName("FK_TPVTicketsDetalle_UnidadesMedida");
        });

        modelBuilder.Entity<TpvticketsDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("TPVTicketsDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<TpvticketsEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("TPVTicketsEstados");

            entity.Property(e => e.Idestado).HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.Idtransaction);

            entity.Property(e => e.Idtransaction).HasColumnName("IDTransaction");
            entity.Property(e => e.TransactionValue)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TskTarea>(entity =>
        {
            entity.HasKey(e => e.Idtarea);

            entity.ToTable("TSK_Tareas");

            entity.Property(e => e.Idtarea)
                .ValueGeneratedNever()
                .HasColumnName("IDTarea");
            entity.Property(e => e.AppointmentItemEntryId)
                .HasMaxLength(140)
                .IsUnicode(false)
                .HasColumnName("AppointmentItem_EntryID");
            entity.Property(e => e.Asunto)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.EmpleadoId)
                .HasComment("Empleado que da de alta la tarea")
                .HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId)
                .HasComment("Empresa a la que pertenece el EmpleadoID")
                .HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.EventType).HasComment("cxScheduler");
            entity.Property(e => e.FechaFinReal).HasColumnType("datetime");
            entity.Property(e => e.FechaFinTeorica).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioReal).HasColumnType("datetime");
            entity.Property(e => e.FechaInicioTeorica).HasColumnType("datetime");
            entity.Property(e => e.Idguid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("IDGUID");
            entity.Property(e => e.LabelColor).HasComment("cxScheduler");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasComment("cxScheduler");
            entity.Property(e => e.Notas).HasMaxLength(1000);
            entity.Property(e => e.Options).HasComment("cxScheduler");
            entity.Property(e => e.ReminderDate).HasColumnType("datetime");
            entity.Property(e => e.ReminderResourcesData).HasColumnType("text");
            entity.Property(e => e.TareaId).HasColumnName("TareaID");
            entity.Property(e => e.TaskLinks).HasColumnType("text");
            entity.Property(e => e.TipoId)
                .HasComment("FK contra la tabla TareasTipos, define las clases para cada tipo de Tarea (Mant. Soft., Bßsica, Personal, etc.)")
                .HasColumnName("TipoID");

            entity.HasOne(d => d.Estado).WithMany(p => p.TskTareas)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSK_Tareas_TSK_TareasEstados");
        });

        modelBuilder.Entity<TskTareasClase>(entity =>
        {
            entity.HasKey(e => e.IdtareaClase);

            entity.ToTable("TSK_TareasClases");

            entity.Property(e => e.IdtareaClase)
                .ValueGeneratedNever()
                .HasColumnName("IDTareaClase");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TskTareasEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.ToTable("TSK_TareasEstados");

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Traspaso)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<TskTareasMantenimientoTipo>(entity =>
        {
            entity.HasKey(e => e.IdtareaMantenimientoTipo);

            entity.ToTable("TSK_TareasMantenimientoTipos");

            entity.Property(e => e.IdtareaMantenimientoTipo)
                .ValueGeneratedNever()
                .HasColumnName("IDTareaMantenimientoTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TskTareasOrigene>(entity =>
        {
            entity.HasKey(e => e.IdtareaOrigen);

            entity.ToTable("TSK_TareasOrigenes");

            entity.Property(e => e.IdtareaOrigen).HasColumnName("IDTareaOrigen");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TskTareasPrioridade>(entity =>
        {
            entity.HasKey(e => e.Idprioridad);

            entity.ToTable("TSK_TareasPrioridades");

            entity.Property(e => e.Idprioridad)
                .ValueGeneratedNever()
                .HasColumnName("IDPrioridad");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TskTareasTipoMantenimiento>(entity =>
        {
            entity.HasKey(e => e.TareaId);

            entity.ToTable("TSK_TareasTipo_Mantenimiento");

            entity.Property(e => e.TareaId)
                .ValueGeneratedNever()
                .HasComment("FK a la PK de TSK_Tareas")
                .HasColumnName("TareaID");
            entity.Property(e => e.Ofid).HasColumnName("OFID");
            entity.Property(e => e.OftipoId).HasColumnName("OFTipoID");
            entity.Property(e => e.OrigenId)
                .HasComment("Llamada, email, reuni¾n cliente, interno")
                .HasColumnName("OrigenID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.TipoId)
                .HasComment("Error, Mejora, Mejora interna, etc.")
                .HasColumnName("TipoID");

            entity.HasOne(d => d.Tarea).WithOne(p => p.TskTareasTipoMantenimiento)
                .HasForeignKey<TskTareasTipoMantenimiento>(d => d.TareaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSK_TareasTipo_Mantenimiento_TSK_Tareas");
        });

        modelBuilder.Entity<Turno>(entity =>
        {
            entity.HasKey(e => e.Idturno);

            entity.Property(e => e.Idturno).HasColumnName("IDTurno");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalHoras).HasComputedColumnSql("([HoraFin] - [HoraInicio] + [HoraFin2] - [HoraInicio2])", false);
        });

        modelBuilder.Entity<UnidadesMedidum>(entity =>
        {
            entity.HasKey(e => e.IdunidadMedida).HasName("PK_Unidades");

            entity.HasIndex(e => new { e.IdunidadMedida, e.MedidaId }, "IX_UnidadesMedida_MedidaID_IDUnidadMedida").IsUnique();

            entity.Property(e => e.IdunidadMedida).HasColumnName("IDUnidadMedida");
            entity.Property(e => e.Abreviatura)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Medida).WithMany(p => p.UnidadesMedida)
                .HasForeignKey(d => d.MedidaId)
                .HasConstraintName("FK_UnidadesMedida_Medidas");
        });

        modelBuilder.Entity<UnidadesProducto>(entity =>
        {
            entity.HasKey(e => new { e.ProductoId, e.MedidaId });

            entity.ToTable("UnidadesProducto");

            entity.HasIndex(e => new { e.ProductoId, e.MedidaId, e.UnidadMedidaId }, "IX_UnidadesProducto_ProductoID_MedidaID_UnidadMedidaID").IsUnique();

            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.UnidadAgrupacion).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Medida).WithMany(p => p.UnidadesProductos)
                .HasForeignKey(d => d.MedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnidadesProducto_Medidas");

            entity.HasOne(d => d.Producto).WithMany(p => p.UnidadesProductos)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_UnidadesProducto_Productos");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.UnidadesProductos)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_UnidadesProducto_UnidadesMedida");
        });

        modelBuilder.Entity<UnidadesProductoBase>(entity =>
        {
            entity.HasKey(e => new { e.ProductoBaseId, e.MedidaId });

            entity.ToTable("UnidadesProductoBase");

            entity.Property(e => e.ProductoBaseId).HasColumnName("ProductoBaseID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.UnidadAgrupacion).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");

            entity.HasOne(d => d.Medida).WithMany(p => p.UnidadesProductoBases)
                .HasForeignKey(d => d.MedidaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnidadesProductoBase_Medidas");

            entity.HasOne(d => d.ProductoBase).WithMany(p => p.UnidadesProductoBases)
                .HasForeignKey(d => d.ProductoBaseId)
                .HasConstraintName("FK_UnidadesProductoBase_ProductosBase");

            entity.HasOne(d => d.UnidadMedida).WithMany(p => p.UnidadesProductoBases)
                .HasForeignKey(d => d.UnidadMedidaId)
                .HasConstraintName("FK_UnidadesProductoBase_UnidadesMedida");
        });

        modelBuilder.Entity<VAlbaranVentaCabecera>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_AlbaranVentaCabecera");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
        });

        modelBuilder.Entity<VAlbaranVentaDetalleApartado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_AlbaranVentaDetalleApartados");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
        });

        modelBuilder.Entity<VAlbaranVentum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_AlbaranVenta");

            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.Cliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroAlbaran)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionId).HasColumnName("PersonaDireccionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
        });

        modelBuilder.Entity<VAlbaranesCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_AlbaranesCompra");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAlta");
            entity.Property(e => e.FormaPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.ImporteDescuento).HasColumnType("money");
            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("ImporteIVA");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IVA");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroAlbaran)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalAlbaran).HasColumnType("decimal(38, 7)");
        });

        modelBuilder.Entity<VAlbaranesVentaDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_AlbaranesVentaDetalles");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.BaseImponibleApartado).HasColumnType("money");
            entity.Property(e => e.BaseImponibleReal).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.CantidadApartado).HasColumnType("money");
            entity.Property(e => e.CantidadReal).HasColumnType("money");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoMaestro)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.PrecioApartado).HasColumnType("money");
            entity.Property(e => e.PrecioReal).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
        });

        modelBuilder.Entity<VCdboClientesExportOutlook>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CDBO_ClientesExportOutlook");

            entity.Property(e => e.ApartadopostaldeladirecciNdeltrabajo).HasColumnName("Apartadopostaldeladirecci¾ndeltrabajo");
            entity.Property(e => e.ApartadopostaldeladirecciNpersonal).HasColumnName("Apartadopostaldeladirecci¾npersonal");
            entity.Property(e => e.Apellidos)
                .HasMaxLength(71)
                .IsUnicode(false);
            entity.Property(e => e.BusinessFax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CDigopostaldeltrabajo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("C¾digopostaldeltrabajo");
            entity.Property(e => e.Calledeltrabajo)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.CategorÝas)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Ciudaddetrabajo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Department)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DevoluciNdellamada).HasColumnName("Devoluci¾ndellamada");
            entity.Property(e => e.DirecciNdecorreoelectrNico2).HasColumnName("Direcci¾ndecorreoelectr¾nico2");
            entity.Property(e => e.DirecciNdelcorreoelectrNico3).HasColumnName("Direcci¾ndelcorreoelectr¾nico3");
            entity.Property(e => e.EmailAddress)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailType)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.FacturaciN).HasColumnName("Facturaci¾n");
            entity.Property(e => e.GovernmentIdnumber).HasColumnName("GovernmentIDNumber");
            entity.Property(e => e.Gúnero).HasColumnName("GÚnero");
            entity.Property(e => e.Isdn).HasColumnName("ISDN");
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.NMerodecentralitadelaorganizaciN).HasColumnName("N·merodecentralitadelaorganizaci¾n");
            entity.Property(e => e.NMerodeteletipo).HasColumnName("N·merodeteletipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(151)
                .IsUnicode(false);
            entity.Property(e => e.NombredepantalladecorreoelectrNico).HasColumnName("Nombredepantalladecorreoelectr¾nico");
            entity.Property(e => e.NombredepantalladecorreoelectrNico2).HasColumnName("Nombredepantalladecorreoelectr¾nico2");
            entity.Property(e => e.NombredepantalladecorreoelectrNico3).HasColumnName("Nombredepantalladecorreoelectr¾nico3");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.OrganizaciN).HasColumnName("Organizaci¾n");
            entity.Property(e => e.OrganizationalIdnumber).HasColumnName("OrganizationalIDNumber");
            entity.Property(e => e.OtrocDigopostal).HasColumnName("Otroc¾digopostal");
            entity.Property(e => e.OtropaÝsoregiN).HasColumnName("OtropaÝsoregi¾n");
            entity.Property(e => e.OtrotelÚfono)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.PaÝsoregiNdeldomicilio).HasColumnName("PaÝsoregi¾ndeldomicilio");
            entity.Property(e => e.PaÝsoregiNdeltrabajo).HasColumnName("PaÝsoregi¾ndeltrabajo");
            entity.Property(e => e.Prioridad)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ProfesiN).HasColumnName("Profesi¾n");
            entity.Property(e => e.Provinciaoestadodetrabajo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Puesto)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PßginaWeb)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TelÚfonodeltrabajo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipodecorreoelectrNico2).HasColumnName("Tipodecorreoelectr¾nico2");
            entity.Property(e => e.TipodecorreoelectrNico3).HasColumnName("Tipodecorreoelectr¾nico3");
            entity.Property(e => e.Túlex).HasColumnName("TÚlex");
        });

        modelBuilder.Entity<VClientesDato>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ClientesDatos");

            entity.Property(e => e.ClienteCp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ClienteCP");
            entity.Property(e => e.ClienteDireccion)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ClienteLocalidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClienteProvincia)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Idpersona).HasColumnName("IDPersona");
        });

        modelBuilder.Entity<VDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_Detalles");
        });

        modelBuilder.Entity<VFabricacionesPendiente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FabricacionesPendientes");

            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaPrevista).HasColumnType("datetime");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Idpersona).HasColumnName("IDPersona");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenReal).HasColumnType("money");
            entity.Property(e => e.NombreCliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPedido)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Origen)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrigenId).HasColumnName("OrigenID");
            entity.Property(e => e.PedidoEstadoId).HasColumnName("PedidoEstadoID");
            entity.Property(e => e.PedidoVentaId).HasColumnName("PedidoVentaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Prioridad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.Serie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalCosteReal).HasColumnType("money");
            entity.Property(e => e.TotalVenta).HasColumnType("money");
        });

        modelBuilder.Entity<VFacturaAlbaranDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturaAlbaranDetalle");

            entity.Property(e => e.NumeroAlbaran)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
        });

        modelBuilder.Entity<VFacturasCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasCompra");

            entity.Property(e => e.BaseImponible).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAlta");
            entity.Property(e => e.FormaPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.ImporteDescuento).HasColumnType("money");
            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("ImporteIVA");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFactura)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalFactura).HasColumnType("money");
        });

        modelBuilder.Entity<VFacturasEmitidasContabilidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasEmitidasContabilidad");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FormaPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdfacturaSalida)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDFacturaSalida");
            entity.Property(e => e.NumeroFactura)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.TotalFactura).HasColumnType("money");
        });

        modelBuilder.Entity<VFacturasRecibidasCotabilidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasRecibidasCotabilidad");

            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FormaPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdfacturaEntrada)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDFacturaEntrada");
            entity.Property(e => e.NumeroFactura)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Proveedor)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
        });

        modelBuilder.Entity<VFacturasVentaCabecera>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasVentaCabecera");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
        });

        modelBuilder.Entity<VFacturasVentaDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasVentaDetalle");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.BaseImponibleApartado).HasColumnType("money");
            entity.Property(e => e.BaseImponibleReal).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.CantidadApartado).HasColumnType("money");
            entity.Property(e => e.CantidadReal).HasColumnType("money");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoMaestro)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.PrecioApartado).HasColumnType("money");
            entity.Property(e => e.PrecioReal).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
        });

        modelBuilder.Entity<VFacturasVentaDetalleApartado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasVentaDetalleApartados");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
        });

        modelBuilder.Entity<VFacturasVentum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_FacturasVenta");

            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.Cliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPago)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.ImporteDescuento).HasColumnType("money");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFactura)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionEntregaId).HasColumnName("PersonaDireccionEntregaID");
            entity.Property(e => e.PersonaDireccionFacturaId).HasColumnName("PersonaDireccionFacturaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PortesTipoId).HasColumnName("PortesTipoID");
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalFactura).HasColumnType("money");
            entity.Property(e => e.TotalFinanciacion).HasColumnType("money");
            entity.Property(e => e.TotalPortes).HasColumnType("money");
            entity.Property(e => e.TotalRetencion).HasColumnType("money");
        });

        modelBuilder.Entity<VIdiva>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_IDIVA");

            entity.Property(e => e.IdivaClase).HasColumnName("IDIvaClase");
            entity.Property(e => e.IdivaTipo).HasColumnName("IDIvaTipo");
        });

        modelBuilder.Entity<VInicializacionStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_InicializacionStock");

            entity.Property(e => e.Familia)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idfamilia).HasColumnName("IDFamilia");
            entity.Property(e => e.Idproducto).HasColumnName("IDProducto");
            entity.Property(e => e.IdproductoTipo).HasColumnName("IDProductoTipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NombreSpa)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Nombre_spa");
            entity.Property(e => e.PrecioCompra).HasColumnType("money");
            entity.Property(e => e.StockActual).HasColumnType("money");
            entity.Property(e => e.StockInicial).HasColumnType("money");
        });

        modelBuilder.Entity<VIva>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_Iva");

            entity.Property(e => e.General).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IdivaClase).HasColumnName("IDIvaClase");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Recargo).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<VIvafactura>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_IVAFactura");

            entity.Property(e => e.CtaIvasoportado)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CtaIVASoportado");
            entity.Property(e => e.General).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.IdivaClase).HasColumnName("IDIvaClase");
            entity.Property(e => e.Nombre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VListadoBalanceOficial1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ListadoBalanceOficial1");

            entity.Property(e => e.Ap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AP");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CodigoNombre)
                .HasMaxLength(67)
                .IsUnicode(false);
            entity.Property(e => e.Formato)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Nivel1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel3)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VListadoBalanceOficial2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ListadoBalanceOficial2");

            entity.Property(e => e.Ap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AP");
            entity.Property(e => e.Bo2ap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BO2AP");
            entity.Property(e => e.Bo2n1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BO2N1");
            entity.Property(e => e.Bo2n2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BO2N2");
            entity.Property(e => e.Bo2n3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BO2N3");
            entity.Property(e => e.Bo2nombre)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("BO2Nombre");
            entity.Property(e => e.Boa1ap1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BOA1AP1");
            entity.Property(e => e.Boa1n1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BOA1N1");
            entity.Property(e => e.Boa1n2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BOA1N2");
            entity.Property(e => e.Boa1n3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BOA1N3");
            entity.Property(e => e.Nivel1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nivel3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .HasMaxLength(61)
                .IsUnicode(false);
            entity.Property(e => e.NombreNivel1)
                .HasMaxLength(61)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VOrdenFabricacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_OrdenFabricacion");

            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaInicio).HasColumnType("datetime");
            entity.Property(e => e.FechaPrevista).HasColumnType("datetime");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Idpersona).HasColumnName("IDPersona");
            entity.Property(e => e.Margen).HasColumnType("money");
            entity.Property(e => e.MargenReal).HasColumnType("money");
            entity.Property(e => e.NombreCliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPedido)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Origen)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrigenId).HasColumnName("OrigenID");
            entity.Property(e => e.PedidoVentaId).HasColumnName("PedidoVentaID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Prioridad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrioridadId).HasColumnName("PrioridadID");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoId).HasColumnName("TipoID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.TotalCosteReal).HasColumnType("money");
            entity.Property(e => e.TotalVenta).HasColumnType("money");
        });

        modelBuilder.Entity<VPartesOf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PartesOF");

            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.CentroTipoId).HasColumnName("CentroTipoID");
            entity.Property(e => e.Codigo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.FechaImputacion).HasColumnType("datetime");
            entity.Property(e => e.FechaParte).HasColumnType("datetime");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Idparte).HasColumnName("IDParte");
            entity.Property(e => e.NombreCliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPedido)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PartesFechaFinPartesFe)
                .HasColumnType("datetime")
                .HasColumnName("partes_FechaFin_partes_Fe");
            entity.Property(e => e.Recurso)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VPartesOfmat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PartesOFMat");

            entity.Property(e => e.DocumentoId).HasColumnName("DocumentoID");
            entity.Property(e => e.Expr1)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.FechaImputacion).HasColumnType("datetime");
            entity.Property(e => e.Idparte).HasColumnName("IDParte");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NombreSpa)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Nombre_spa");
            entity.Property(e => e.Observaciones).HasColumnType("text");
        });

        modelBuilder.Entity<VPedidoVentum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PedidoVenta");

            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.Cliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPedido)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionId).HasColumnName("PersonaDireccionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
        });

        modelBuilder.Entity<VPedidosCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PedidosCompra");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.ImporteDescuento).HasColumnType("money");
            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("ImporteIVA");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IVA");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPedido)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalPedido).HasColumnType("decimal(38, 7)");
        });

        modelBuilder.Entity<VPresupuestoVentum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PresupuestoVenta");

            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.Cliente)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fentrega)
                .HasColumnType("datetime")
                .HasColumnName("FEntrega");
            entity.Property(e => e.FormaPago)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.IvagrupoId).HasColumnName("IVAGrupoID");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPresupuesto)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.PersonaDireccionId).HasColumnName("PersonaDireccionID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SerieId).HasColumnName("SerieID");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalCoste).HasColumnType("money");
            entity.Property(e => e.Validez)
                .HasMaxLength(38)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VPresupuestosCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PresupuestosCompra");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CifNif)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CIF_NIF");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("money");
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Falta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAlta");
            entity.Property(e => e.FormaPago)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.ImporteDescuento).HasColumnType("money");
            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("ImporteIVA");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IVA");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreDireccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPresupuesto)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Observaciones).HasColumnType("text");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.Provincia)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ReferenciaPersona)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.TotalPresupuesto).HasColumnType("decimal(38, 7)");
        });

        modelBuilder.Entity<VPresupuestosVentaCabecera>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PresupuestosVentaCabecera");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
        });

        modelBuilder.Entity<VPresupuestosVentaDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PresupuestosVentaDetalle");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.BaseImponibleApartado).HasColumnType("money");
            entity.Property(e => e.BaseImponibleReal).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.CantidadApartado).HasColumnType("money");
            entity.Property(e => e.CantidadReal).HasColumnType("money");
            entity.Property(e => e.Concepto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ConceptoMaestro)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.PrecioApartado).HasColumnType("money");
            entity.Property(e => e.PrecioReal).HasColumnType("money");
            entity.Property(e => e.ProductoId).HasColumnName("ProductoID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
        });

        modelBuilder.Entity<VPresupuestosVentaDetalleApartado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PresupuestosVentaDetalleApartados");

            entity.Property(e => e.BaseImponible).HasColumnType("money");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Cantidad).HasColumnType("money");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Idlinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("IDLinea");
            entity.Property(e => e.LineaId).HasColumnName("LineaID");
            entity.Property(e => e.Precio).HasColumnType("money");
            entity.Property(e => e.UnidadMedidaId).HasColumnName("UnidadMedidaID");
        });

        modelBuilder.Entity<VPrimeraDireccionCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PrimeraDireccionCliente");

            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
        });

        modelBuilder.Entity<VPrimeraDireccionProveedor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PrimeraDireccionProveedor");

            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Direccion)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
        });

        modelBuilder.Entity<VRemesasCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_RemesasCompra");

            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.FechaCargo).HasColumnType("datetime");
            entity.Property(e => e.Idremesa).HasColumnName("IDRemesa");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFactura)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.NumeroRemesa)
                .HasMaxLength(61)
                .IsUnicode(false);
            entity.Property(e => e.NumeroVencimiento)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PersonaNombre)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("personaNombre");
        });

        modelBuilder.Entity<VRemesasVenta>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_RemesasVentas");

            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.FechaCargo).HasColumnType("datetime");
            entity.Property(e => e.Idremesa).HasColumnName("IDRemesa");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFactura)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.NumeroRemesa)
                .HasMaxLength(61)
                .IsUnicode(false);
            entity.Property(e => e.NumeroVencimiento)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PersonaNombre)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VSumaIva>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_SumaIVA");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.General).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");
        });

        modelBuilder.Entity<VSumaIvafacturaCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_SumaIVAFacturaCompra");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("IVA");
        });

        modelBuilder.Entity<VSumaIvapedidoCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_SumaIVAPedidoCompra");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("IVA");
        });

        modelBuilder.Entity<VTotalFacturaCompraPie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TotalFacturaCompraPie");

            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.SumaBaseImponible).HasColumnType("money");
            entity.Property(e => e.SumaIvapie)
                .HasColumnType("money")
                .HasColumnName("SumaIVAPie");
            entity.Property(e => e.SumaTotal).HasColumnType("money");
        });

        modelBuilder.Entity<VTotalesUnidadMedidaOf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TotalesUnidadMedidaOF");

            entity.Property(e => e.Abreviatura)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
            entity.Property(e => e.Totales).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<VTotalesUnidadMedidum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TotalesUnidadMedida");

            entity.Property(e => e.Abreviatura)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.MedidaId).HasColumnName("MedidaID");
            entity.Property(e => e.TipoLineaId).HasColumnName("TipoLineaID");
        });

        modelBuilder.Entity<Vale>(entity =>
        {
            entity.HasKey(e => e.Idcabecera);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("MaxValeAnno");
                    tb.HasTrigger("Vales_Delete_CDBO");
                    tb.HasTrigger("Vales_UpdateEstado");
                    tb.HasTrigger("Vales_UpdateLiquidacionFromEstado");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_Vales").IsUnique();

            entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");
            entity.Property(e => e.Anno)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EjercicioId).HasColumnName("EjercicioID");
            entity.Property(e => e.EmpleadoId).HasColumnName("EmpleadoID");
            entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            entity.Property(e => e.EstadoId).HasColumnName("EstadoID");
            entity.Property(e => e.Falta)
                .HasColumnType("datetime")
                .HasColumnName("FAlta");
            entity.Property(e => e.Fcaducidad)
                .HasColumnType("datetime")
                .HasColumnName("FCaducidad");
            entity.Property(e => e.Fconsumo)
                .HasColumnType("datetime")
                .HasColumnName("FConsumo");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImporteConsumido).HasColumnType("money");
            entity.Property(e => e.ImporteTotal).HasColumnType("money");
            entity.Property(e => e.LiquidacionId).HasColumnName("LiquidacionID");
            entity.Property(e => e.Obsequio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OrigenId).HasColumnName("OrigenID");
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.ProductoObsequioId).HasColumnName("ProductoObsequioID");
            entity.Property(e => e.TicketDetalleId).HasColumnName("TicketDetalleID");
            entity.Property(e => e.TicketId).HasColumnName("TicketID");

            entity.HasOne(d => d.Ejercicio).WithMany(p => p.Vales)
                .HasForeignKey(d => d.EjercicioId)
                .HasConstraintName("FK_Vales_Ejercicios");

            entity.HasOne(d => d.Empleado).WithMany(p => p.Vales)
                .HasForeignKey(d => d.EmpleadoId)
                .HasConstraintName("FK_Vales_Empleados");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Vales)
                .HasForeignKey(d => d.EmpresaId)
                .HasConstraintName("FK_Vales_ConfiguracionEmpresa");

            entity.HasOne(d => d.Estado).WithMany(p => p.Vales)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vales_ValesEstados");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.Vale)
                .HasForeignKey<Vale>(d => d.Idcdbo)
                .HasConstraintName("FK_Vales_Vales_CDBO");

            entity.HasOne(d => d.Liquidacion).WithMany(p => p.Vales)
                .HasForeignKey(d => d.LiquidacionId)
                .HasConstraintName("FK_Vales_CRM_Liquidaciones");

            entity.HasOne(d => d.Origen).WithMany(p => p.Vales)
                .HasForeignKey(d => d.OrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vales_ValesOrigenes");

            entity.HasOne(d => d.Persona).WithMany(p => p.Vales)
                .HasForeignKey(d => d.PersonaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vales_Clientes");

            entity.HasOne(d => d.ProductoObsequio).WithMany(p => p.Vales)
                .HasForeignKey(d => d.ProductoObsequioId)
                .HasConstraintName("FK_Vales_Productos");

            entity.HasOne(d => d.Ticket).WithMany(p => p.Vales)
                .HasForeignKey(d => d.TicketId)
                .HasConstraintName("FK_Vales_TPVTickets");
        });

        modelBuilder.Entity<ValesCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("Vales_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ValesDetalle>(entity =>
        {
            entity.HasKey(e => e.Idlinea);

            entity.ToTable("ValesDetalle", tb =>
                {
                    tb.HasTrigger("UpdateValesTotalesCabecera");
                    tb.HasTrigger("ValesDetalle_Delete_CDBO");
                });

            entity.HasIndex(e => e.Idcdbo, "IX_ValesDetalle").IsUnique();

            entity.Property(e => e.Idlinea).HasColumnName("IDLinea");
            entity.Property(e => e.CabeceraId).HasColumnName("CabeceraID");
            entity.Property(e => e.Idcdbo).HasColumnName("IDCDBO");
            entity.Property(e => e.ImporteConsumido).HasColumnType("money");
            entity.Property(e => e.Obsequio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TicketId).HasColumnName("TicketID");

            entity.HasOne(d => d.Cabecera).WithMany(p => p.ValesDetalles)
                .HasForeignKey(d => d.CabeceraId)
                .HasConstraintName("FK_ValesDetalle_Vales");

            entity.HasOne(d => d.IdcdboNavigation).WithOne(p => p.ValesDetalle)
                .HasForeignKey<ValesDetalle>(d => d.Idcdbo)
                .HasConstraintName("FK_ValesDetalle_ValesDetalle_CDBO");

            entity.HasOne(d => d.Ticket).WithMany(p => p.ValesDetalles)
                .HasForeignKey(d => d.TicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ValesDetalle_TPVTickets");
        });

        modelBuilder.Entity<ValesDetalleCdbo>(entity =>
        {
            entity.HasKey(e => e.Idcdbo);

            entity.ToTable("ValesDetalle_CDBO");

            entity.Property(e => e.Idcdbo)
                .ValueGeneratedNever()
                .HasColumnName("IDCDBO");
        });

        modelBuilder.Entity<ValesEstado>(entity =>
        {
            entity.HasKey(e => e.Idestado);

            entity.Property(e => e.Idestado)
                .ValueGeneratedNever()
                .HasColumnName("IDEstado");
            entity.Property(e => e.AllowModify)
                .IsRequired()
                .HasDefaultValueSql("(1)");
            entity.Property(e => e.FontColor)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ValesOrigene>(entity =>
        {
            entity.HasKey(e => e.Idorigen);

            entity.Property(e => e.Idorigen)
                .ValueGeneratedNever()
                .HasColumnName("IDOrigen");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ValoresLote>(entity =>
        {
            entity.HasKey(e => e.VlId);

            entity.Property(e => e.VlId).HasColumnName("VL_id");
            entity.Property(e => e.VlNombreEnd)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VL_Nombre_end");
            entity.Property(e => e.VlNombreSpa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VL_Nombre_spa");
        });

        modelBuilder.Entity<ValoresProducto>(entity =>
        {
            entity.HasKey(e => e.IdvalorProducto).HasName("PK_Valores");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tr_ValoresProductos_Delete_Indice");
                    tb.HasTrigger("tr_ValoresProductos_Insert_Indice");
                });

            entity.HasIndex(e => e.Nombre, "IX_ValoresProductos");

            entity.HasIndex(e => new { e.AtributoProductoId, e.Indice }, "IX_ValoresProductos_Indice");

            entity.Property(e => e.IdvalorProducto).HasColumnName("IDValorProducto");
            entity.Property(e => e.AtributoProductoId).HasColumnName("AtributoProductoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorProductoId).HasColumnName("ValorProductoID");

            entity.HasOne(d => d.AtributoProducto).WithMany(p => p.ValoresProductos)
                .HasForeignKey(d => d.AtributoProductoId)
                .HasConstraintName("FK_ValoresProductos_AtributosProductos");

            entity.HasOne(d => d.ValorProducto).WithMany(p => p.InverseValorProducto)
                .HasForeignKey(d => d.ValorProductoId)
                .HasConstraintName("FK_ValoresProductos_ValoresProductos");
        });

        modelBuilder.Entity<Vencimiento>(entity =>
        {
            entity.HasKey(e => e.Idvencimiento);

            entity.Property(e => e.Idvencimiento).HasColumnName("IDVencimiento");
            entity.Property(e => e.FormaPagoId).HasColumnName("FormaPagoID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Porcentaje).HasColumnType("money");

            entity.HasOne(d => d.FormaPago).WithMany(p => p.Vencimientos)
                .HasForeignKey(d => d.FormaPagoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vencimientos_FormasPago");
        });

        modelBuilder.Entity<VencimientosCompra>(entity =>
        {
            entity.HasKey(e => e.Idvencimiento);

            entity.ToTable("VencimientosCompra", tb =>
                {
                    tb.HasTrigger("GenerarNumeroVencimientoCompra");
                    tb.HasTrigger("InsertCodContaYEfectosAPagar");
                    tb.HasTrigger("UpdateStateFacturasCompraFromVencimientos");
                    tb.HasTrigger("VC_TesoreriaControl");
                });

            entity.HasIndex(e => e.FacturaId, "IX_VencimientosCompra_FacturaID");

            entity.Property(e => e.Idvencimiento).HasColumnName("IDVencimiento");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CuentaEmpresaId).HasColumnName("CuentaEmpresaID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Efectos)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FacturaId).HasColumnName("FacturaID");
            entity.Property(e => e.FechaCargo).HasColumnType("datetime");
            entity.Property(e => e.FechaEmision).HasColumnType("datetime");
            entity.Property(e => e.Iban).HasColumnName("IBAN");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NumeroVencimiento)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('#')")
                .IsFixedLength();
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PersonaNif)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PersonaNIF");
            entity.Property(e => e.PersonaNombre)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RemesaId).HasColumnName("RemesaID");

            entity.HasOne(d => d.CuentaEmpresa).WithMany(p => p.VencimientosCompras)
                .HasForeignKey(d => d.CuentaEmpresaId)
                .HasConstraintName("FK_VencimientosCompra_EmpresasCuentasBancarias");

            entity.HasOne(d => d.Factura).WithMany(p => p.VencimientosCompras)
                .HasForeignKey(d => d.FacturaId)
                .HasConstraintName("FK_VencimientosCompra_FacturasCompra");

            entity.HasOne(d => d.Medio).WithMany(p => p.VencimientosCompras)
                .HasForeignKey(d => d.MedioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VencimientosCompra_MediosPago");

            entity.HasOne(d => d.Remesa).WithMany(p => p.VencimientosCompras)
                .HasForeignKey(d => d.RemesaId)
                .HasConstraintName("FK_VencimientosCompra_RemesasCompra");
        });

        modelBuilder.Entity<VencimientosVentum>(entity =>
        {
            entity.HasKey(e => e.Idvencimiento);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("GeneraNumeroVencimientoVenta");
                    tb.HasTrigger("InsertCodContaYEfectosACobrar");
                    tb.HasTrigger("UpdateStateFacturasVentaFromVencimientos");
                    tb.HasTrigger("VV_TR_InsteadOfDelete_AVAnticipos");
                    tb.HasTrigger("VV_TesoreriaControl");
                });

            entity.HasIndex(e => e.FacturaId, "IX_VencimientosVenta_FacturaID");

            entity.Property(e => e.Idvencimiento).HasColumnName("IDVencimiento");
            entity.Property(e => e.Cccadeudo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCCAdeudo");
            entity.Property(e => e.CodigoConta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CuentaEmpresaId).HasColumnName("CuentaEmpresaID");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Efectos)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FacturaId).HasColumnName("FacturaID");
            entity.Property(e => e.FechaCargo).HasColumnType("datetime");
            entity.Property(e => e.FechaEmision).HasColumnType("datetime");
            entity.Property(e => e.Iban).HasColumnName("IBAN");
            entity.Property(e => e.Importe).HasColumnType("money");
            entity.Property(e => e.MedioId).HasColumnName("MedioID");
            entity.Property(e => e.NumeroVencimiento)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('#')")
                .IsFixedLength();
            entity.Property(e => e.PersonaId).HasColumnName("PersonaID");
            entity.Property(e => e.PersonaNif)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PersonaNIF");
            entity.Property(e => e.PersonaNombre)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RemesaId).HasColumnName("RemesaID");
            entity.Property(e => e.VencimientoDescuento)
                .HasDefaultValueSql("(0)")
                .HasComment("Para saber y se ha generado el asiento de vuelta del vencimiento");

            entity.HasOne(d => d.CuentaEmpresa).WithMany(p => p.VencimientosVenta)
                .HasForeignKey(d => d.CuentaEmpresaId)
                .HasConstraintName("FK_VencimientosVenta_EmpresasCuentasBancarias");

            entity.HasOne(d => d.Factura).WithMany(p => p.VencimientosVenta)
                .HasForeignKey(d => d.FacturaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VencimientosVenta_FacturasVenta");

            entity.HasOne(d => d.Medio).WithMany(p => p.VencimientosVenta)
                .HasForeignKey(d => d.MedioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VencimientosVenta_MediosPago");

            entity.HasOne(d => d.Remesa).WithMany(p => p.VencimientosVenta)
                .HasForeignKey(d => d.RemesaId)
                .HasConstraintName("FK_VencimientosVenta_Remesas");
        });

        modelBuilder.Entity<Wizard>(entity =>
        {
            entity.HasKey(e => new { e.Idwizard, e.Step });

            entity.Property(e => e.Idwizard).HasColumnName("IDWizard");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasColumnType("ntext");
        });

        modelBuilder.Entity<Zona>(entity =>
        {
            entity.HasKey(e => e.Idzona);

            entity.Property(e => e.Idzona).HasColumnName("IDZona");
            entity.Property(e => e.AgenciaId).HasColumnName("AgenciaID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Provincia).WithMany(p => p.Zonas)
                .UsingEntity<Dictionary<string, object>>(
                    "ZonasProvincia",
                    r => r.HasOne<Provincia>().WithMany()
                        .HasForeignKey("ProvinciaId")
                        .HasConstraintName("FK_ZonasProvincias_Provincias"),
                    l => l.HasOne<Zona>().WithMany()
                        .HasForeignKey("ZonaId")
                        .HasConstraintName("FK_ZonasProvincias_Zonas"),
                    j =>
                    {
                        j.HasKey("ZonaId", "ProvinciaId");
                        j.ToTable("ZonasProvincias");
                        j.IndexerProperty<int>("ZonaId").HasColumnName("ZonaID");
                        j.IndexerProperty<int>("ProvinciaId").HasColumnName("ProvinciaID");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
