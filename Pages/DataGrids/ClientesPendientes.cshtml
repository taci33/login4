@page
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model login4.Pages.DataGrids.ClientesPendientesModel
@{
}
@(Html.DevExtreme().Lookup()

        .DataSource(ds => ds
        .Mvc()
        .Controller("ClientesPendientes")
        .LoadAction("GetTipo"))
        .ApplyValueMode(EditorApplyValueMode.Instantly)
        .ShowCancelButton(true)
        .ShowClearButton(true)
        .CancelButtonText("cancelar")
        .ClearButtonText("quitar filtro")

        .ValueExpr("IDTipo")
        .DisplayExpr("Nombre")
        .Value("todo")

        .OnValueChanged(@<text>
            function(data) {
            var dataGrid = $("#gridContainer").dxDataGrid("instance");
            if (data.value == null)
            dataGrid.clearFilter();
            else
            dataGrid.filter(["TipoID", "=", data.value]);
            }
        </text>

    ))

@(Html.DevExtreme().DataGrid<login4.Models.EF.ext_adm_CL_Search>()
    .DataSource(ds => ds.Mvc()
        .Controller("ClientesPendientes")
        .LoadAction("Get")
     )
    .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
    )
      .SearchPanel(searchPanel => searchPanel
        .Visible(true)
        .Width(240)
        .Placeholder("Buscar...")
     )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .ID("gridContainer")
    .Paging(paging => paging.PageSize(10))
    .Pager(pager =>
    {
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 5, 10, 20 });
        pager.ShowInfo(true);
    })

    .RepaintChangesOnly(true)
    .OnEditorPreparing("onEditorPreparing")
    .RemoteOperations(true)
    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
    .Grouping(g => g.AutoExpandAll(false))
    .GroupPanel(gp => gp.Visible(true))
    .RowAlternationEnabled(true)
    .FilterRow(f => f.Visible(true))
    .Columns(columns =>
    {
        
        if (User.IsInRole("Administrador"))
        {
            columns.AddFor(m => m.IDPersona)
            .AllowEditing(false);
        }

        columns.AddFor(m => m.Nombre).AllowEditing(false);

        columns.AddFor(m => m.NombreComercial).AllowEditing(false);

        columns.AddFor(m => m.Telefono).AllowEditing(false);

        columns.AddFor(m => m.Fax).AllowEditing(false);

        columns.AddFor(m => m.CIF_NIF).AllowEditing(false);

        columns.AddFor(m => m.Email)

                 .AllowFiltering(false)

                 .Lookup(l => l
                     .DataSource("getEmail")
                     .DisplayExpr("Email")
                     )

                     .ShowEditorAlways(true)
                     .CalculateDisplayValue("Email");
        @*columns.AddFor(m => m);*@
        columns.AddFor(m => m.PaginaWeb).AllowEditing(false);

        columns.AddFor(m => m.UsuarioRegistrado).AllowEditing(false)
        .Visible(false);

        columns.AddFor(m => m.TipoDeCliente).AllowEditing(false);

        columns.AddFor(m => m.TipoID).AllowEditing(false);

        columns.AddFor(m => m.LockoutEnabled)
        .Visible(false);
        columns.AddFor(m => m.EmailConfirmed);

        columns.Add()
      .Type(GridCommandColumnType.Buttons)
      .Width(110)
      .Buttons(btns =>
      {
          btns.Add().Name(GridColumnButtonName.Edit);
          btns.Add().Name(GridColumnButtonName.Delete);
          btns.Add()
          .Name("Reenviar")
          .Hint("Reenviar")
          .Icon("redo")
          .OnClick("reenviarClick");
         
      });
    })
      .Editing(editing =>
      {
          editing.Mode(GridEditMode.Cell);
          editing.AllowUpdating(true);

      })
)

<script>


    function onEditorPreparing(e) {
        if (e.parentType === "dataRow" && e.dataField === "Email") {
            e.editorOptions.onValueChanged = function (args) {
                var grid = $("#gridContainer").dxDataGrid("instance");
                var rowIndex = e.row.rowIndex;
                grid.cellValue(rowIndex, "Email", args.value.Email);
            };
        }
    }

    function getEmail(options) {
        var IDPersona = options.data.IDPersona;
        return {
            store: DevExpress.data.AspNet.createStore({
                key: "IDContacto",
                loadUrl: '@Url.Action("GetEmail", "ClientesBloqueados", new { httproute = true, IDPersona = "__IDPersona__"})'
                    .replace("__IDPersona__", IDPersona),
                loadParams: { IDPersona: IDPersona }

            }),

        };
    }

  
        function reenviarClick(e) {
        var email = e.row.cells[6].text

        $.ajax({
            type: "POST",
            url: "@Url.Action("Reenviar", "ClientesPendientes")",
            data: {
                email: email
            },
            success: function (msg) {
                alert(msg);
            },
            error: function (req, status, error) {
                alert("Error al reenviar el email: " + error);
            }
        });
    }

   
//</script>