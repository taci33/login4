@page
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model login4.Pages.DataGrids.ClientesBloqueadosModel
@{
}

<link rel="stylesheet" href="~/css/Tablas.css" />

<div class="titulo_tabla">

    <h2>Clientes bloqueados en la extranet</h2>

</div>

@(Html.DevExtreme().Lookup()

        .DataSource(ds => ds
        .Mvc()
        .Controller("ClientesBloqueados")
        .LoadAction("GetTipo"))
        .Placeholder("Seleccionar...")
        .ApplyValueMode(EditorApplyValueMode.Instantly)
        .ShowCancelButton(true)
        .ShowClearButton(true)
        .CancelButtonText("cancelar")
        .ClearButtonText("quitar filtro")
        
        .ValueExpr("IDTipo")
        .DisplayExpr("Nombre")
        .Value("todo")
        
        .OnValueChanged(@<text>
            function(data) {
            var dataGrid = $("#gridContainer").dxDataGrid("instance");
            if (data.value == null)
            dataGrid.clearFilter();
            else
            dataGrid.filter(["TipoID", "=", data.value]);
            }
        </text>

    ))

@(Html.DevExtreme().DataGrid<login4.Models.EF.ext_adm_CL_Search>()
    .DataSource(ds => ds.Mvc()
        .Controller("ClientesBloqueados")
        .LoadAction("Get")
     )
     
    .FilterRow(filterRow => filterRow
    .Visible(true)
    .ApplyFilter(GridApplyFilterMode.Auto)
    
    .OperationDescriptions(customizer =>
    {       
        // aqui se ajustan los nombres de el tipo de filtro para los buscadores de las columnas
        customizer.Contains("Contiene");
        customizer.Equal("Igual a");
        customizer.EndsWith("Acaba con");
        customizer.GreaterThan("Mayor que");
        customizer.LessThan("Menor que");
        customizer.GreaterThanOrEqual("Mayor o igual que");
        customizer.LessThanOrEqual("Menor o igual que");
        customizer.NotContains("No contiene");
        customizer.StartsWith("Empieza con");
        customizer.NotEqual("Distinto a");
        customizer.Between("Entre");
       
    })
    
)

    
      .SearchPanel(searchPanel => searchPanel
        .Visible(true)
        .Width(240)
        .Placeholder("Buscar...")
     )

     .HeaderFilter(headerFilter =>
    {

        headerFilter.Visible(true);
        headerFilter.Texts(texts => texts.Ok("Aceptar")
        .Cancel("Cancelar")
        .EmptyValue("Valor vacío")
        );
    })
    .ID("gridContainer")
    
    .Paging(paging => paging.PageSize(10))
    .Pager(pager =>
    {

        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 5, 10, 20 });
        pager.ShowInfo(true).InfoText("Página");
    })
   @* .FocusedRowEnabled(true)
    .FocusedRowIndex(0)*@
    .RepaintChangesOnly(true)
    .RemoteOperations(true)
    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
    .Grouping(g => g.AutoExpandAll(false))
    .GroupPanel(gp => gp.Visible(true).EmptyPanelText("Arrastra aquí el encabezado de una columna para agrupar por esa columna"))
    .RowAlternationEnabled(true)
    .Columns(columns =>
    {

        if (User.IsInRole("Administrador"))
        {
            columns.AddFor(m => m.IDPersona)
            .AllowEditing(false);
        }
        columns.AddFor(m => m.Nombre).AllowEditing(false);

        columns.AddFor(m => m.NombreComercial).AllowEditing(false);

        columns.AddFor(m => m.Telefono).AllowEditing(false);

        columns.AddFor(m => m.Fax).AllowEditing(false);

        columns.AddFor(m => m.CIF_NIF).AllowEditing(false);

        columns.AddFor(m => m.EXT_Email).AllowEditing(false).Caption("Email");
     
        columns.AddFor(m => m.PaginaWeb).AllowEditing(false);

        columns.AddFor(m => m.UsuarioRegistrado).AllowEditing(false)
        .Visible(false);

        columns.AddFor(m => m.TipoDeCliente).AllowEditing(false);

        columns.AddFor(m => m.TipoID).AllowEditing(false).Visible(false);

        columns.AddFor(m => m.LockoutEnabled)
        .Visible(false);

        columns.Add()
      .Type(GridCommandColumnType.Buttons)
      .Width(110)
      .Buttons(btns =>
      {
          btns.Add().Name(GridColumnButtonName.Edit);
          btns.Add().Name(GridColumnButtonName.Delete);
          btns.Add()
          .Name("Desregistrar")
          .Hint("Desregistrar")
          .Icon("clear")
          .OnClick("onClick");
          btns.Add()
         .Name("Desbloquear")
         .Hint("Desbloquear")
         .Icon("unlock")
         .OnClick("BloquearOnClick");
      });
    })
     

      .Editing(editing =>
      {
          editing.Mode(GridEditMode.Cell);
          editing.AllowUpdating(true);
         
      })
)
<script>       

    function onClick(e) {
        var grid = e.component;
        var email = grid.cellValue(e.row.rowIndex, "EXT_Email");
        var nombre = grid.cellValue(e.row.rowIndex, "Nombre");
        var idpersona = grid.cellValue(e.row.rowIndex, "IDPersona");
        
        $.ajax({
            type: "POST",
            url: "@Url.Action("Desregistrar", "ClientesBloqueados")",
            data: {
                email: email
            },
            success: function (msg) {
                window.alert(msg + " " + email);
                location.reload();
            },
            error: function (req, status, error) {
                window.alert(email + " error= " + error);
            }
        });
    }
    //Esta función no solo bloquea, si el usuario esta bloqueado lo desbloqueará
    function BloquearOnClick(e) {

        var grid = e.component;
        var email = grid.cellValue(e.row.rowIndex, "EXT_Email");

        $.ajax({
            type: "POST",
            url: "@Url.Action("Bloquear", "ClientesBloqueados")",
            data: {
                email: email
            },
            success: function (msg) {
                window.alert(msg);
                location.reload();
            },
            error: function (req, status, error) {
                window.alert(email + " error= " + error);
            }
        });

    }
</script>