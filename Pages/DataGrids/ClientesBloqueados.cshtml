@page
@model login4.Pages.DataGrids.ClientesBloqueadosModel
@{
}
@(Html.DevExtreme().Lookup()

        .DataSource(ds => ds
        .Mvc()
        .Controller("ClientesBloqueados")
        .LoadAction("GetTipo"))
        .ApplyValueMode(EditorApplyValueMode.Instantly)
        .ShowCancelButton(true)
        .ShowClearButton(true)
        .CancelButtonText("cancelar")
        .ClearButtonText("quitar filtro")
     
        .ValueExpr("IDTipo")
        .DisplayExpr("Nombre")
        .Value("todo")

        .OnValueChanged(@<text>
            function(data) {
            var dataGrid = $("#gridContainer").dxDataGrid("instance");
            if (data.value == null)
            dataGrid.clearFilter();
            else
            dataGrid.filter(["TipoID", "=", data.value]);
            }
        </text>

    ))

@(Html.DevExtreme().DataGrid<login4.Models.EF.ext_adm_CL_Search>()
    .DataSource(ds => ds.Mvc()
        .Controller("ClientesBloqueados")
        .LoadAction("Get")
    )
    .ID("gridContainer")
    .Paging(paging => paging.PageSize(10))
    .Pager(pager =>
    {
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 5, 10, 20 });
        pager.ShowInfo(true);
    })

    .RemoteOperations(true)
    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
    .Grouping(g => g.AutoExpandAll(false))
    .GroupPanel(gp => gp.Visible(true))
    .RowAlternationEnabled(true)
    .Columns(columns =>
    {

        columns.AddFor(m => m.IDPersona);

        columns.AddFor(m => m.Nombre);

        columns.AddFor(m => m.NombreComercial);

        columns.AddFor(m => m.Telefono);

        columns.AddFor(m => m.Fax);

        columns.AddFor(m => m.CIF_NIF);

        columns.AddFor(m => m.Email)

                @*.SetCellValue("setEmailValue")*@
                @*.Width(125)*@

                .Lookup(l => l
                    .DataSource("getEmail")
                    .DisplayExpr("Email")
                    .ValueExpr("IDContacto")
                    .AllowClearing(true)
                    )

                    .SetCellValue("setEmailValue")
                    .ShowEditorAlways(true)
                    .CalculateDisplayValue("Email");
        @*columns.AddFor(m => m);*@
        columns.AddFor(m => m.PaginaWeb);

        columns.AddFor(m => m.UsuarioRegistrado);

        columns.AddFor(m => m.TipoDeCliente);

        columns.AddFor(m => m.TipoID);

        columns.AddFor(m => m.LockoutEnabled);

        columns.Add()
      .Type(GridCommandColumnType.Buttons)
      .Width(110)
      .Buttons(btns =>
      {
          btns.Add().Name(GridColumnButtonName.Edit);
          btns.Add().Name(GridColumnButtonName.Delete);
          btns.Add()
          .Name("Registrar")
          .Hint("Registrar")
          .Icon("add")
          .OnClick("onClick");
          btns.Add()
         .Name("Bloquear")
         .Hint("Bloquear")
         .Icon("remove")
         .OnClick("BloquearOnClick");
      });
    })
      .Editing(editing =>
      {
          editing.Mode(GridEditMode.Cell);
          editing.AllowUpdating(true);
          editing.AllowAdding(true);
      })@*.Editing(x => x.AllowUpdating(true).Mode(GridEditMode.Row))*@
)

<script>

    function setEmailValue(rowData, value) {
        rowData.Email = value;
    }

    function getEmail(options) {
        var IDPersona = options.data.IDPersona;
        return {
            store: DevExpress.data.AspNet.createStore({
                key: "IDContacto",
                loadUrl: '@Url.Action("GetEmail", "ClientesBloqueados", new { httproute = true, IDPersona = "__IDPersona__"})'
                    .replace("__IDPersona__", IDPersona),
                loadParams: { IDPersona: IDPersona }

            }),

        };
    }

    //filter: options.data ? ["IDPersona", "=", options.data.IDPersona] : null
    //console.log(options);
    //if (!options.data) return null;
    //var store = {
    //    store: DevExpress.data.AspNet.createStore({
    //        key: "IDPersona",
    //        loadUrl: '/Controllers/Procedimiento/GetEmail?IDPersona=' + options.data.IDPersona
    //    })
    //};
    //console.log(store);
    //return store;

    function onClick(e) {
        //var grid = e.component
        //var selectedData = grid.getSelectedRowsData()[0]
        //var email = selectedData.Email
        var email = e.row.cells[6].text
        var nombre = e.row.cells[1].text
        var idpersona = e.row.cells[0].text
        $.ajax({
            type: "POST",
            url: "@Url.Action("Registrar", "ClientesContactos")",
            data: {
                email: email,
                nombre: nombre,
                idpersona: idpersona
            },
            success: function (msg) {
                window.alert(msg + " " + email);
            },
            error: function (req, status, error) {
                window.alert(email + " error= " + error);
            }
        });
    }
    function BloquearOnClick(e) {

        var email = e.row.cells[6].text

        $.ajax({
            type: "POST",
            url: "@Url.Action("Bloquear", "ClientesContactos")",
            data: {
                email: email
            },
            success: function (msg) {
                window.alert(msg);
            },
            error: function (req, status, error) {
                window.alert(email + " error= " + error);
            }
        });

    }
</script>